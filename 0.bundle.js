webpackJsonp([0],{

/***/ 35:
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/object3dController.js\": 44,\n\t\"./euclidfx/object3dController.js\": 47,\n\t\"./output/object3dController.js\": 48\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 35;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9vYmplY3QzZENvbnRyb2xsZXJcXC5qcyQ/NTE5YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2VwZy9vYmplY3QzZENvbnRyb2xsZXIuanNcIjogNDQsXG5cdFwiLi9ldWNsaWRmeC9vYmplY3QzZENvbnRyb2xsZXIuanNcIjogNDcsXG5cdFwiLi9vdXRwdXQvb2JqZWN0M2RDb250cm9sbGVyLmpzXCI6IDQ4XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIik7XG5cdHJldHVybiBpZDtcbn07XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMzU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9vYmplY3QzZENvbnRyb2xsZXJcXC5qcyRcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 37:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createObject3dControllerBase;\n\nvar _text3d = __webpack_require__(45);\n\nvar _text3d2 = _interopRequireDefault(_text3d);\n\nvar _selectors = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base object for all processor WebGL object controllers.\n *\n * @export\n * @param {Object} specs\n * @param {Object} my Shared properties.\n */\nfunction createObject3dControllerBase(specs, my) {\n  var that = void 0,\n\n\n  /**\n   * Update the pattern's name.\n   */\n  updateLabel = function updateLabel(labelString) {\n    (0, _text3d2.default)(my.label3d, labelString.toUpperCase(), (0, _selectors.getThemeColors)().colorHigh);\n  },\n\n\n  /** \n   * Set the 3D pattern's position in the scene.\n   */\n  updatePosition = function updatePosition(state) {\n    if (state.selectedID === my.id) {\n      var data = state.processors.byId[my.id];\n      my.object3d.position.set(data.positionX, data.positionY, data.positionZ);\n    }\n  },\n      updateConnectMode = function updateConnectMode(isConnectMode) {\n    my.object3d.children.forEach(function (child3d) {\n      if (child3d.name === 'input' || child3d.name === 'output') {\n        child3d.getObjectByName('active').visible = isConnectMode;\n      }\n    });\n  },\n      getID = function getID() {\n    return my.id;\n  };\n\n  my.store = specs.store, my.id = specs.object3d.userData.id;\n  my.object3d = specs.object3d;\n  my.hitarea3d = my.object3d.getObjectByName('hitarea'), my.label3d = my.object3d.getObjectByName('label'), my.updateLabel = updateLabel;\n  my.updatePosition = updatePosition;\n  my.updateConnectMode = updateConnectMode;\n\n  that = specs.that || {};\n  that.getID = getID;\n  return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvd2ViZ2wvb2JqZWN0M2RDb250cm9sbGVyQmFzZS5qcz8xNDYzIl0sIm5hbWVzIjpbImNyZWF0ZU9iamVjdDNkQ29udHJvbGxlckJhc2UiLCJzcGVjcyIsIm15IiwidGhhdCIsInVwZGF0ZUxhYmVsIiwibGFiZWxTdHJpbmciLCJsYWJlbDNkIiwidG9VcHBlckNhc2UiLCJjb2xvckhpZ2giLCJ1cGRhdGVQb3NpdGlvbiIsInN0YXRlIiwic2VsZWN0ZWRJRCIsImlkIiwiZGF0YSIsInByb2Nlc3NvcnMiLCJieUlkIiwib2JqZWN0M2QiLCJwb3NpdGlvbiIsInNldCIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsInBvc2l0aW9uWiIsInVwZGF0ZUNvbm5lY3RNb2RlIiwiaXNDb25uZWN0TW9kZSIsImNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkM2QiLCJuYW1lIiwiZ2V0T2JqZWN0QnlOYW1lIiwidmlzaWJsZSIsImdldElEIiwic3RvcmUiLCJ1c2VyRGF0YSIsImhpdGFyZWEzZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBVXdCQSw0Qjs7QUFWeEI7Ozs7QUFDQTs7OztBQUVBOzs7Ozs7O0FBT2UsU0FBU0EsNEJBQVQsQ0FBc0NDLEtBQXRDLEVBQTZDQyxFQUE3QyxFQUFpRDtBQUM5RCxNQUFJQyxhQUFKOzs7QUFFRTs7O0FBR0FDLGdCQUFjLFNBQWRBLFdBQWMsQ0FBU0MsV0FBVCxFQUFzQjtBQUNsQywwQkFBVUgsR0FBR0ksT0FBYixFQUFzQkQsWUFBWUUsV0FBWixFQUF0QixFQUFpRCxpQ0FBaUJDLFNBQWxFO0FBQ0QsR0FQSDs7O0FBU0U7OztBQUdBQyxtQkFBaUIsU0FBakJBLGNBQWlCLENBQVNDLEtBQVQsRUFBZ0I7QUFDL0IsUUFBSUEsTUFBTUMsVUFBTixLQUFxQlQsR0FBR1UsRUFBNUIsRUFBZ0M7QUFDOUIsVUFBTUMsT0FBT0gsTUFBTUksVUFBTixDQUFpQkMsSUFBakIsQ0FBc0JiLEdBQUdVLEVBQXpCLENBQWI7QUFDQVYsU0FBR2MsUUFBSCxDQUFZQyxRQUFaLENBQXFCQyxHQUFyQixDQUF5QkwsS0FBS00sU0FBOUIsRUFBeUNOLEtBQUtPLFNBQTlDLEVBQXlEUCxLQUFLUSxTQUE5RDtBQUNEO0FBQ0YsR0FqQkg7QUFBQSxNQW1CRUMsb0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBU0MsYUFBVCxFQUF3QjtBQUMxQ3JCLE9BQUdjLFFBQUgsQ0FBWVEsUUFBWixDQUFxQkMsT0FBckIsQ0FBNkIsbUJBQVc7QUFDdEMsVUFBSUMsUUFBUUMsSUFBUixLQUFpQixPQUFqQixJQUE0QkQsUUFBUUMsSUFBUixLQUFpQixRQUFqRCxFQUEyRDtBQUN6REQsZ0JBQVFFLGVBQVIsQ0FBd0IsUUFBeEIsRUFBa0NDLE9BQWxDLEdBQTRDTixhQUE1QztBQUNEO0FBQ0YsS0FKRDtBQUtELEdBekJIO0FBQUEsTUEyQkVPLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ2pCLFdBQU81QixHQUFHVSxFQUFWO0FBQ0QsR0E3Qkg7O0FBK0JBVixLQUFHNkIsS0FBSCxHQUFXOUIsTUFBTThCLEtBQWpCLEVBQ0E3QixHQUFHVSxFQUFILEdBQVFYLE1BQU1lLFFBQU4sQ0FBZWdCLFFBQWYsQ0FBd0JwQixFQURoQztBQUVBVixLQUFHYyxRQUFILEdBQWNmLE1BQU1lLFFBQXBCO0FBQ0FkLEtBQUcrQixTQUFILEdBQWUvQixHQUFHYyxRQUFILENBQVlZLGVBQVosQ0FBNEIsU0FBNUIsQ0FBZixFQUNBMUIsR0FBR0ksT0FBSCxHQUFhSixHQUFHYyxRQUFILENBQVlZLGVBQVosQ0FBNEIsT0FBNUIsQ0FEYixFQUVBMUIsR0FBR0UsV0FBSCxHQUFpQkEsV0FGakI7QUFHQUYsS0FBR08sY0FBSCxHQUFvQkEsY0FBcEI7QUFDQVAsS0FBR29CLGlCQUFILEdBQXVCQSxpQkFBdkI7O0FBRUFuQixTQUFPRixNQUFNRSxJQUFOLElBQWMsRUFBckI7QUFDQUEsT0FBSzJCLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQU8zQixJQUFQO0FBQ0QiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc2V0VGV4dDNkIGZyb20gJy4vdGV4dDNkLmpzJztcbmltcG9ydCB7IGdldFRoZW1lQ29sb3JzIH0gZnJvbSAnLi4vc3RhdGUvc2VsZWN0b3JzLmpzJztcblxuLyoqXG4gKiBCYXNlIG9iamVjdCBmb3IgYWxsIHByb2Nlc3NvciBXZWJHTCBvYmplY3QgY29udHJvbGxlcnMuXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtPYmplY3R9IHNwZWNzXG4gKiBAcGFyYW0ge09iamVjdH0gbXkgU2hhcmVkIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU9iamVjdDNkQ29udHJvbGxlckJhc2Uoc3BlY3MsIG15KSB7XG4gIGxldCB0aGF0LFxuICAgICAgICBcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHBhdHRlcm4ncyBuYW1lLlxuICAgICAqL1xuICAgIHVwZGF0ZUxhYmVsID0gZnVuY3Rpb24obGFiZWxTdHJpbmcpIHtcbiAgICAgIHNldFRleHQzZChteS5sYWJlbDNkLCBsYWJlbFN0cmluZy50b1VwcGVyQ2FzZSgpLCBnZXRUaGVtZUNvbG9ycygpLmNvbG9ySGlnaCk7XG4gICAgfSxcblxuICAgIC8qKiBcbiAgICAgKiBTZXQgdGhlIDNEIHBhdHRlcm4ncyBwb3NpdGlvbiBpbiB0aGUgc2NlbmUuXG4gICAgICovXG4gICAgdXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGVkSUQgPT09IG15LmlkKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5wcm9jZXNzb3JzLmJ5SWRbbXkuaWRdO1xuICAgICAgICBteS5vYmplY3QzZC5wb3NpdGlvbi5zZXQoZGF0YS5wb3NpdGlvblgsIGRhdGEucG9zaXRpb25ZLCBkYXRhLnBvc2l0aW9uWik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZUNvbm5lY3RNb2RlID0gZnVuY3Rpb24oaXNDb25uZWN0TW9kZSkge1xuICAgICAgbXkub2JqZWN0M2QuY2hpbGRyZW4uZm9yRWFjaChjaGlsZDNkID0+IHtcbiAgICAgICAgaWYgKGNoaWxkM2QubmFtZSA9PT0gJ2lucHV0JyB8fCBjaGlsZDNkLm5hbWUgPT09ICdvdXRwdXQnKSB7XG4gICAgICAgICAgY2hpbGQzZC5nZXRPYmplY3RCeU5hbWUoJ2FjdGl2ZScpLnZpc2libGUgPSBpc0Nvbm5lY3RNb2RlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0SUQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBteS5pZDtcbiAgICB9O1xuICBcbiAgbXkuc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgbXkuaWQgPSBzcGVjcy5vYmplY3QzZC51c2VyRGF0YS5pZDtcbiAgbXkub2JqZWN0M2QgPSBzcGVjcy5vYmplY3QzZDtcbiAgbXkuaGl0YXJlYTNkID0gbXkub2JqZWN0M2QuZ2V0T2JqZWN0QnlOYW1lKCdoaXRhcmVhJyksXG4gIG15LmxhYmVsM2QgPSBteS5vYmplY3QzZC5nZXRPYmplY3RCeU5hbWUoJ2xhYmVsJyksXG4gIG15LnVwZGF0ZUxhYmVsID0gdXBkYXRlTGFiZWw7XG4gIG15LnVwZGF0ZVBvc2l0aW9uID0gdXBkYXRlUG9zaXRpb247XG4gIG15LnVwZGF0ZUNvbm5lY3RNb2RlID0gdXBkYXRlQ29ubmVjdE1vZGU7XG5cbiAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gIHRoYXQuZ2V0SUQgPSBnZXRJRDtcbiAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvd2ViZ2wvb2JqZWN0M2RDb250cm9sbGVyQmFzZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),

/***/ 38:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvZXVjbGlkLmpzP2ZlMDAiXSwibmFtZXMiOlsiZ2V0RXVjbGlkUGF0dGVybiIsInJvdGF0ZUV1Y2xpZFBhdHRlcm4iLCJjYWNoZSIsInN0ZXBzIiwicHVsc2VzIiwiTWF0aCIsIm1pbiIsImNhY2hlS2V5IiwiY3JlYXRlQmpvcmtsdW5kIiwic2xpY2UiLCJwYXR0ZXJuIiwicm90YXRpb24iLCJlbGVtZW50c1RvU2hpZnQiLCJzcGxpY2UiLCJjb25jYXQiLCJmaXJzdCIsIkFycmF5IiwiZmlsbCIsInNlY29uZCIsImZpcnN0TGVuZ3RoIiwibGVuZ3RoIiwibWluTGVuZ3RoIiwibG9vcFRocmVzaG9sZCIsIngiLCJwcm90b3R5cGUiLCJjYWxsIiwiZm9yRWFjaCIsImYiLCJzIl0sIm1hcHBpbmdzIjoiOzs7OztRQVNnQkEsZ0IsR0FBQUEsZ0I7UUFTQUMsbUIsR0FBQUEsbUI7QUFsQmhCOzs7Ozs7O0FBT0EsSUFBTUMsUUFBUSxFQUFkOztBQUVPLFNBQVNGLGdCQUFULENBQTBCRyxLQUExQixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDNUNBLGFBQVNDLEtBQUtDLEdBQUwsQ0FBU0gsS0FBVCxFQUFnQkMsTUFBaEIsQ0FBVDtBQUNBLFFBQU1HLFdBQWNKLEtBQWQsU0FBdUJDLE1BQTdCO0FBQ0EsUUFBSSxDQUFDRixNQUFNSyxRQUFOLENBQUwsRUFBc0I7QUFDbEJMLGNBQU1LLFFBQU4sSUFBa0JDLGdCQUFnQkwsS0FBaEIsRUFBdUJDLE1BQXZCLENBQWxCO0FBQ0g7QUFDRCxXQUFPRixNQUFNSyxRQUFOLEVBQWdCRSxLQUFoQixDQUFzQixDQUF0QixDQUFQO0FBQ0g7O0FBRU0sU0FBU1IsbUJBQVQsQ0FBNkJTLE9BQTdCLEVBQXNDQyxRQUF0QyxFQUFnRDtBQUNuRCxRQUFNQyxrQkFBa0JGLFFBQVFHLE1BQVIsQ0FBZUYsUUFBZixDQUF4QjtBQUNBLFdBQU9DLGdCQUFnQkUsTUFBaEIsQ0FBdUJKLE9BQXZCLENBQVA7QUFDSDs7QUFFRDs7Ozs7O0FBTUEsU0FBU0YsZUFBVCxDQUF5QkwsS0FBekIsRUFBZ0NDLE1BQWhDLEVBQXdDO0FBQ3BDLFFBQUlBLFNBQVMsQ0FBVCxJQUFjRCxRQUFRLENBQXRCLElBQTJCQSxRQUFRQyxNQUF2QyxFQUErQztBQUMzQyxlQUFPLEVBQVA7QUFDSDs7QUFFRDtBQUNBLFFBQUlXLFFBQVEsSUFBSUMsS0FBSixDQUFVWixNQUFWLEVBQWtCYSxJQUFsQixDQUF1QixDQUFDLENBQUQsQ0FBdkIsQ0FBWjtBQUNBLFFBQUlDLFNBQVMsSUFBSUYsS0FBSixDQUFVYixRQUFRQyxNQUFsQixFQUEwQmEsSUFBMUIsQ0FBK0IsQ0FBQyxDQUFELENBQS9CLENBQWI7O0FBRUEsUUFBSUUsY0FBY0osTUFBTUssTUFBeEI7QUFDQSxRQUFJQyxZQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFoQjs7QUFFQSxRQUFJRSxnQkFBZ0IsQ0FBcEI7QUFDQTtBQUNBLFdBQU9ELFlBQVlDLGFBQW5CLEVBQWtDOztBQUU5QjtBQUNBLFlBQUlBLGtCQUFrQixDQUF0QixFQUF5QjtBQUNyQkEsNEJBQWdCLENBQWhCO0FBQ0g7O0FBRUQ7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsU0FBcEIsRUFBK0JFLEdBQS9CLEVBQW9DO0FBQ2hDUixrQkFBTVEsQ0FBTixJQUFXUCxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJWLE1BQU1RLENBQU4sQ0FBNUIsRUFBc0NMLE9BQU9LLENBQVAsQ0FBdEMsQ0FBWDtBQUNIOztBQUVEO0FBQ0EsWUFBSUYsY0FBY0YsV0FBbEIsRUFBK0I7QUFDM0JELHFCQUFTRixNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCUCxNQUEzQixFQUFtQ0csU0FBbkMsQ0FBVDtBQUNIO0FBQ0Q7QUFDQTtBQUpBLGFBS0s7QUFDREgseUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDTSxTQUFsQyxDQUFUO0FBQ0FOLHdCQUFRQyxNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCVixLQUEzQixFQUFrQyxDQUFsQyxFQUFxQ00sU0FBckMsQ0FBUjtBQUNIO0FBQ0RGLHNCQUFjSixNQUFNSyxNQUFwQjtBQUNBQyxvQkFBWWhCLEtBQUtDLEdBQUwsQ0FBU2EsV0FBVCxFQUFzQkQsT0FBT0UsTUFBN0IsQ0FBWjtBQUNIOztBQUVEO0FBQ0EsUUFBSVYsVUFBVSxFQUFkO0FBQ0FLLFVBQU1XLE9BQU4sQ0FBYyxhQUFLO0FBQ2ZoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2lCLENBQXJDLENBQVY7QUFDSCxLQUZEO0FBR0FULFdBQU9RLE9BQVAsQ0FBZSxhQUFLO0FBQ2hCaEIsa0JBQVVNLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QmYsT0FBNUIsRUFBcUNrQixDQUFyQyxDQUFWO0FBQ0gsS0FGRDs7QUFJQSxXQUFPbEIsT0FBUDtBQUNIIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFdWNsaWRlYW4gcGF0dGVybiBjYWxjdWxhdGlvbiBieSBNaWNoYWVsIEtvbnRvZ2lhbm5pczpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ta29udG9naWFubmlzL2V1Y2xpZGVhbi1yaHl0aG1zXG4gKiBiYXNlZCBvbiBhIFB5dGhvbiBzY3JpcHQgZnJvbSBkaXNhcHBlYXJlZCB3ZWJzaXRlIFxuICogaHR0cDovL3d3dy5hdG9uYWxtaWNyb3Nob3Jlcy5jb20vXG4gKi9cblxuY29uc3QgY2FjaGUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV1Y2xpZFBhdHRlcm4oc3RlcHMsIHB1bHNlcykge1xuICAgIHB1bHNlcyA9IE1hdGgubWluKHN0ZXBzLCBwdWxzZXMpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7c3RlcHN9XyR7cHVsc2VzfWA7XG4gICAgaWYgKCFjYWNoZVtjYWNoZUtleV0pIHtcbiAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbY2FjaGVLZXldLnNsaWNlKDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlRXVjbGlkUGF0dGVybihwYXR0ZXJuLCByb3RhdGlvbikge1xuICAgIGNvbnN0IGVsZW1lbnRzVG9TaGlmdCA9IHBhdHRlcm4uc3BsaWNlKHJvdGF0aW9uKTtcbiAgICByZXR1cm4gZWxlbWVudHNUb1NoaWZ0LmNvbmNhdChwYXR0ZXJuKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgRXVjbGlkZWFuIHJoeXRobSBwYXR0ZXJuLlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBzIFRvdGFsIGFtb3VudCBvZiB0c3RlcHMgaW4gdGhlIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gcHVsc2VzIFB1bHNlcyB0byBzcHJlYWQgb3ZlciB0aGUgcGF0dGVybi5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBCb29sZWFucyB0aGF0IGZvcm0gdGhlIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJqb3JrbHVuZChzdGVwcywgcHVsc2VzKSB7XG4gICAgaWYgKHB1bHNlcyA8IDAgfHwgc3RlcHMgPCAwIHx8IHN0ZXBzIDwgcHVsc2VzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIFxuICAgIC8vIENyZWF0ZSB0aGUgdHdvIGFycmF5c1xuICAgIGxldCBmaXJzdCA9IG5ldyBBcnJheShwdWxzZXMpLmZpbGwoWzFdKTtcbiAgICBsZXQgc2Vjb25kID0gbmV3IEFycmF5KHN0ZXBzIC0gcHVsc2VzKS5maWxsKFswXSk7XG4gIFxuICAgIGxldCBmaXJzdExlbmd0aCA9IGZpcnN0Lmxlbmd0aDtcbiAgICBsZXQgbWluTGVuZ3RoID0gTWF0aC5taW4oZmlyc3RMZW5ndGgsIHNlY29uZC5sZW5ndGgpO1xuICBcbiAgICBsZXQgbG9vcFRocmVzaG9sZCA9IDA7XG4gICAgLy8gTG9vcCB1bnRpbCBhdCBsZWFzdCBvbmUgYXJyYXkgaGFzIGxlbmd0aCBndCAyICgxIGZvciBmaXJzdCBsb29wKVxuICAgIHdoaWxlIChtaW5MZW5ndGggPiBsb29wVGhyZXNob2xkKSB7XG5cbiAgICAgICAgLy8gQWxsb3cgb25seSBsb29wVGhyZXNob2xkIHRvIGJlIHplcm8gb24gdGhlIGZpcnN0IGxvb3BcbiAgICAgICAgaWYgKGxvb3BUaHJlc2hvbGQgPT09IDApIHtcbiAgICAgICAgICAgIGxvb3BUaHJlc2hvbGQgPSAxO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvLyBGb3IgdGhlIG1pbmltdW0gYXJyYXkgbG9vcCBhbmQgY29uY2F0XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgbWluTGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIGZpcnN0W3hdID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKGZpcnN0W3hdLCBzZWNvbmRbeF0pO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvLyBpZiB0aGUgc2Vjb25kIHdhcyB0aGUgYmlnZ2VyIGFycmF5LCBzbGljZSB0aGUgcmVtYWluaW5nIGVsZW1lbnRzL2FycmF5cyBhbmQgdXBkYXRlXG4gICAgICAgIGlmIChtaW5MZW5ndGggPT09IGZpcnN0TGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWNvbmQsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHVwZGF0ZSB0aGUgc2Vjb25kIChzbWFsbGVzdCBhcnJheSkgd2l0aCB0aGUgcmVtYWluZGVycyBvZiB0aGUgZmlyc3RcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSB0aGUgZmlyc3QgYXJyYXkgdG8gaW5jbHVkZSBvbmx0IHRoZSBleHRlbmRlZCBzdWItYXJyYXlzXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2Vjb25kID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIG1pbkxlbmd0aCk7XG4gICAgICAgICAgICBmaXJzdCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZpcnN0LCAwLCBtaW5MZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgICAgICBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gICAgfVxuICBcbiAgICAvLyBCdWlsZCB0aGUgZmluYWwgYXJyYXlcbiAgICBsZXQgcGF0dGVybiA9IFtdO1xuICAgIGZpcnN0LmZvckVhY2goZiA9PiB7XG4gICAgICAgIHBhdHRlcm4gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwocGF0dGVybiwgZik7XG4gICAgfSk7XG4gICAgc2Vjb25kLmZvckVhY2gocyA9PiB7XG4gICAgICAgIHBhdHRlcm4gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwocGF0dGVybiwgcyk7XG4gICAgfSk7XG4gIFxuICAgIHJldHVybiBwYXR0ZXJuO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXBnL2V1Y2xpZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n");

/***/ }),

/***/ 39:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanM/MDRkNSJdLCJuYW1lcyI6WyJnZXRFdWNsaWRQYXR0ZXJuIiwicm90YXRlRXVjbGlkUGF0dGVybiIsImNhY2hlIiwic3RlcHMiLCJwdWxzZXMiLCJNYXRoIiwibWluIiwiY2FjaGVLZXkiLCJjcmVhdGVCam9ya2x1bmQiLCJzbGljZSIsInBhdHRlcm4iLCJyb3RhdGlvbiIsImVsZW1lbnRzVG9TaGlmdCIsInNwbGljZSIsImNvbmNhdCIsImZpcnN0IiwiQXJyYXkiLCJmaWxsIiwic2Vjb25kIiwiZmlyc3RMZW5ndGgiLCJsZW5ndGgiLCJtaW5MZW5ndGgiLCJsb29wVGhyZXNob2xkIiwieCIsInByb3RvdHlwZSIsImNhbGwiLCJmb3JFYWNoIiwiZiIsInMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBU2dCQSxnQixHQUFBQSxnQjtRQVNBQyxtQixHQUFBQSxtQjtBQWxCaEI7Ozs7Ozs7QUFPQSxJQUFNQyxRQUFRLEVBQWQ7O0FBRU8sU0FBU0YsZ0JBQVQsQ0FBMEJHLEtBQTFCLEVBQWlDQyxNQUFqQyxFQUF5QztBQUM1Q0EsYUFBU0MsS0FBS0MsR0FBTCxDQUFTSCxLQUFULEVBQWdCQyxNQUFoQixDQUFUO0FBQ0EsUUFBTUcsV0FBY0osS0FBZCxTQUF1QkMsTUFBN0I7QUFDQSxRQUFJLENBQUNGLE1BQU1LLFFBQU4sQ0FBTCxFQUFzQjtBQUNsQkwsY0FBTUssUUFBTixJQUFrQkMsZ0JBQWdCTCxLQUFoQixFQUF1QkMsTUFBdkIsQ0FBbEI7QUFDSDtBQUNELFdBQU9GLE1BQU1LLFFBQU4sRUFBZ0JFLEtBQWhCLENBQXNCLENBQXRCLENBQVA7QUFDSDs7QUFFTSxTQUFTUixtQkFBVCxDQUE2QlMsT0FBN0IsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQ25ELFFBQU1DLGtCQUFrQkYsUUFBUUcsTUFBUixDQUFlRixRQUFmLENBQXhCO0FBQ0EsV0FBT0MsZ0JBQWdCRSxNQUFoQixDQUF1QkosT0FBdkIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixlQUFULENBQXlCTCxLQUF6QixFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDcEMsUUFBSUEsU0FBUyxDQUFULElBQWNELFFBQVEsQ0FBdEIsSUFBMkJBLFFBQVFDLE1BQXZDLEVBQStDO0FBQzNDLGVBQU8sRUFBUDtBQUNIOztBQUVEO0FBQ0EsUUFBSVcsUUFBUSxJQUFJQyxLQUFKLENBQVVaLE1BQVYsRUFBa0JhLElBQWxCLENBQXVCLENBQUMsQ0FBRCxDQUF2QixDQUFaO0FBQ0EsUUFBSUMsU0FBUyxJQUFJRixLQUFKLENBQVViLFFBQVFDLE1BQWxCLEVBQTBCYSxJQUExQixDQUErQixDQUFDLENBQUQsQ0FBL0IsQ0FBYjs7QUFFQSxRQUFJRSxjQUFjSixNQUFNSyxNQUF4QjtBQUNBLFFBQUlDLFlBQVloQixLQUFLQyxHQUFMLENBQVNhLFdBQVQsRUFBc0JELE9BQU9FLE1BQTdCLENBQWhCOztBQUVBLFFBQUlFLGdCQUFnQixDQUFwQjtBQUNBO0FBQ0EsV0FBT0QsWUFBWUMsYUFBbkIsRUFBa0M7O0FBRTlCO0FBQ0EsWUFBSUEsa0JBQWtCLENBQXRCLEVBQXlCO0FBQ3JCQSw0QkFBZ0IsQ0FBaEI7QUFDSDs7QUFFRDtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixTQUFwQixFQUErQkUsR0FBL0IsRUFBb0M7QUFDaENSLGtCQUFNUSxDQUFOLElBQVdQLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QlYsTUFBTVEsQ0FBTixDQUE1QixFQUFzQ0wsT0FBT0ssQ0FBUCxDQUF0QyxDQUFYO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJRixjQUFjRixXQUFsQixFQUErQjtBQUMzQkQscUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJQLE1BQTNCLEVBQW1DRyxTQUFuQyxDQUFUO0FBQ0g7QUFDRDtBQUNBO0FBSkEsYUFLSztBQUNESCx5QkFBU0YsTUFBTVEsU0FBTixDQUFnQmYsS0FBaEIsQ0FBc0JnQixJQUF0QixDQUEyQlYsS0FBM0IsRUFBa0NNLFNBQWxDLENBQVQ7QUFDQU4sd0JBQVFDLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDLENBQWxDLEVBQXFDTSxTQUFyQyxDQUFSO0FBQ0g7QUFDREYsc0JBQWNKLE1BQU1LLE1BQXBCO0FBQ0FDLG9CQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFaO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJVixVQUFVLEVBQWQ7QUFDQUssVUFBTVcsT0FBTixDQUFjLGFBQUs7QUFDZmhCLGtCQUFVTSxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJmLE9BQTVCLEVBQXFDaUIsQ0FBckMsQ0FBVjtBQUNILEtBRkQ7QUFHQVQsV0FBT1EsT0FBUCxDQUFlLGFBQUs7QUFDaEJoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2tCLENBQXJDLENBQVY7QUFDSCxLQUZEOztBQUlBLFdBQU9sQixPQUFQO0FBQ0giLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV1Y2xpZGVhbiBwYXR0ZXJuIGNhbGN1bGF0aW9uIGJ5IE1pY2hhZWwgS29udG9naWFubmlzOlxuICogaHR0cHM6Ly9naXRodWIuY29tL21rb250b2dpYW5uaXMvZXVjbGlkZWFuLXJoeXRobXNcbiAqIGJhc2VkIG9uIGEgUHl0aG9uIHNjcmlwdCBmcm9tIGRpc2FwcGVhcmVkIHdlYnNpdGUgXG4gKiBodHRwOi8vd3d3LmF0b25hbG1pY3Jvc2hvcmVzLmNvbS9cbiAqL1xuXG5jb25zdCBjYWNoZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXVjbGlkUGF0dGVybihzdGVwcywgcHVsc2VzKSB7XG4gICAgcHVsc2VzID0gTWF0aC5taW4oc3RlcHMsIHB1bHNlcyk7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtzdGVwc31fJHtwdWxzZXN9YDtcbiAgICBpZiAoIWNhY2hlW2NhY2hlS2V5XSkge1xuICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBjcmVhdGVCam9ya2x1bmQoc3RlcHMsIHB1bHNlcyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV0uc2xpY2UoMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVFdWNsaWRQYXR0ZXJuKHBhdHRlcm4sIHJvdGF0aW9uKSB7XG4gICAgY29uc3QgZWxlbWVudHNUb1NoaWZ0ID0gcGF0dGVybi5zcGxpY2Uocm90YXRpb24pO1xuICAgIHJldHVybiBlbGVtZW50c1RvU2hpZnQuY29uY2F0KHBhdHRlcm4pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBFdWNsaWRlYW4gcmh5dGhtIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gc3RlcHMgVG90YWwgYW1vdW50IG9mIHRzdGVwcyBpbiB0aGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwdWxzZXMgUHVsc2VzIHRvIHNwcmVhZCBvdmVyIHRoZSBwYXR0ZXJuLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIEJvb2xlYW5zIHRoYXQgZm9ybSB0aGUgcGF0dGVybi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpIHtcbiAgICBpZiAocHVsc2VzIDwgMCB8fCBzdGVwcyA8IDAgfHwgc3RlcHMgPCBwdWxzZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgXG4gICAgLy8gQ3JlYXRlIHRoZSB0d28gYXJyYXlzXG4gICAgbGV0IGZpcnN0ID0gbmV3IEFycmF5KHB1bHNlcykuZmlsbChbMV0pO1xuICAgIGxldCBzZWNvbmQgPSBuZXcgQXJyYXkoc3RlcHMgLSBwdWxzZXMpLmZpbGwoWzBdKTtcbiAgXG4gICAgbGV0IGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gIFxuICAgIGxldCBsb29wVGhyZXNob2xkID0gMDtcbiAgICAvLyBMb29wIHVudGlsIGF0IGxlYXN0IG9uZSBhcnJheSBoYXMgbGVuZ3RoIGd0IDIgKDEgZm9yIGZpcnN0IGxvb3ApXG4gICAgd2hpbGUgKG1pbkxlbmd0aCA+IGxvb3BUaHJlc2hvbGQpIHtcblxuICAgICAgICAvLyBBbGxvdyBvbmx5IGxvb3BUaHJlc2hvbGQgdG8gYmUgemVybyBvbiB0aGUgZmlyc3QgbG9vcFxuICAgICAgICBpZiAobG9vcFRocmVzaG9sZCA9PT0gMCkge1xuICAgICAgICAgICAgbG9vcFRocmVzaG9sZCA9IDE7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIEZvciB0aGUgbWluaW11bSBhcnJheSBsb29wIGFuZCBjb25jYXRcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBtaW5MZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgZmlyc3RbeF0gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoZmlyc3RbeF0sIHNlY29uZFt4XSk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIGlmIHRoZSBzZWNvbmQgd2FzIHRoZSBiaWdnZXIgYXJyYXksIHNsaWNlIHRoZSByZW1haW5pbmcgZWxlbWVudHMvYXJyYXlzIGFuZCB1cGRhdGVcbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gZmlyc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIHNlY29uZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlY29uZCwgbWluTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UgdXBkYXRlIHRoZSBzZWNvbmQgKHNtYWxsZXN0IGFycmF5KSB3aXRoIHRoZSByZW1haW5kZXJzIG9mIHRoZSBmaXJzdFxuICAgICAgICAvLyBhbmQgdXBkYXRlIHRoZSBmaXJzdCBhcnJheSB0byBpbmNsdWRlIG9ubHQgdGhlIGV4dGVuZGVkIHN1Yi1hcnJheXNcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaXJzdCwgbWluTGVuZ3RoKTtcbiAgICAgICAgICAgIGZpcnN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIDAsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RMZW5ndGggPSBmaXJzdC5sZW5ndGg7XG4gICAgICAgIG1pbkxlbmd0aCA9IE1hdGgubWluKGZpcnN0TGVuZ3RoLCBzZWNvbmQubGVuZ3RoKTtcbiAgICB9XG4gIFxuICAgIC8vIEJ1aWxkIHRoZSBmaW5hbCBhcnJheVxuICAgIGxldCBwYXR0ZXJuID0gW107XG4gICAgZmlyc3QuZm9yRWFjaChmID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBmKTtcbiAgICB9KTtcbiAgICBzZWNvbmQuZm9yRWFjaChzID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBzKTtcbiAgICB9KTtcbiAgXG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39\n");

/***/ }),

/***/ 44:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createObject3dController = createObject3dController;\n\nvar _threeModule = __webpack_require__(2);\n\nvar _selectors = __webpack_require__(1);\n\nvar _object3dControllerBase = __webpack_require__(37);\n\nvar _object3dControllerBase2 = _interopRequireDefault(_object3dControllerBase);\n\nvar _euclid = __webpack_require__(38);\n\nvar _config = __webpack_require__(9);\n\nvar _util3d = __webpack_require__(8);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar TWO_PI = Math.PI * 2;\n\nfunction createObject3dController(specs, my) {\n  var that = void 0,\n      centreCircle3d = void 0,\n      centreDot3d = void 0,\n      dots3d = void 0,\n      pointer3d = void 0,\n      polygon3d = void 0,\n      rotatedMarker3d = void 0,\n      select3d = void 0,\n      zeroMarker3d = void 0,\n      radius3d = void 0,\n      lineMaterial = void 0,\n      duration = void 0,\n      pointerRotation = void 0,\n      pointerRotationPrevious = 0,\n      dotAnimations = {},\n      defaultColor = void 0,\n      initialize = function initialize() {\n    centreCircle3d = my.object3d.getObjectByName('centreCircle'), centreDot3d = my.object3d.getObjectByName('centreDot'), dots3d = my.object3d.getObjectByName('dots'), pointer3d = my.object3d.getObjectByName('pointer'), polygon3d = my.object3d.getObjectByName('polygon'), rotatedMarker3d = my.object3d.getObjectByName('rotatedMarker'), select3d = my.object3d.getObjectByName('select'), zeroMarker3d = my.object3d.getObjectByName('zeroMarker'), document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n\n    defaultColor = (0, _selectors.getThemeColors)().colorHigh;\n    lineMaterial = new _threeModule.LineBasicMaterial({\n      color: defaultColor\n    });\n\n    var params = specs.processorData.params.byId;\n    my.updateLabel(params.name.value);\n    updateNecklace(params.steps.value, params.pulses.value, params.rotation.value, params.is_mute.value);\n    updateDuration(params.steps.value, params.rate.value);\n    my.updateConnectMode(specs.isConnectMode);\n  },\n      terminate = function terminate() {\n    document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n  },\n      handleStateChanges = function handleStateChanges(e) {\n    switch (e.detail.action.type) {\n      case e.detail.actions.CHANGE_PARAMETER:\n        if (e.detail.action.processorID === my.id) {\n          var params = e.detail.state.processors.byId[my.id].params.byId;\n          switch (e.detail.action.paramKey) {\n            case 'steps':\n            case 'pulses':\n              updateDuration(params.steps.value, params.rate.value);\n            // fall through intended\n            case 'rotation':\n              updateNecklace(params.steps.value, params.pulses.value, params.rotation.value, params.is_mute.value);\n              break;\n            case 'is_triplets':\n            case 'rate':\n            case 'note_length':\n              updateDuration(params.steps.value, params.rate.value);\n              break;\n            case 'name':\n              my.updateLabel(params.name.value);\n              break;\n            case 'is_mute':\n              updatePointer(params.is_mute.value);\n              break;\n          }\n        }\n        break;\n\n      case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n        my.updatePosition(e.detail.state);\n        break;\n\n      case e.detail.actions.TOGGLE_CONNECT_MODE:\n        my.updateConnectMode(e.detail.state.connectModeActive);\n        break;\n\n      case e.detail.actions.SET_THEME:\n        updateTheme();\n        break;\n    }\n  },\n\n\n  /** \n   * Set theme colors on the 3D pattern.\n   */\n  updateTheme = function updateTheme() {\n    var themeColors = (0, _selectors.getThemeColors)();\n    setThemeColorRecursively(my.object3d, themeColors.colorHigh);\n  },\n\n\n  /** \n   * Loop through all the object3d's children to set the color.\n   * @param {Object3d} An Object3d of which to change the color.\n   * @param {String} HEx color string of the new color.\n   */\n  setThemeColorRecursively = function setThemeColorRecursively(object3d, color) {\n    if (object3d.material && object3d.material.color) {\n      object3d.material.color.set(color);\n    }\n    object3d.children.forEach(function (childObject3d) {\n      setThemeColorRecursively(childObject3d, color);\n    });\n  },\n      updateNecklace = function updateNecklace(steps, pulses, rotation, isMute) {\n    // create the pattern\n    var euclid = (0, _euclid.getEuclidPattern)(steps, pulses);\n    euclid = (0, _euclid.rotateEuclidPattern)(euclid, rotation);\n\n    // remove all existing necklace dots\n    for (var i = 0, n = dots3d.children.length; i < n; i++) {\n      dots3d.remove(dots3d.children[0]);\n    }\n\n    // \n    var polygonPoints = [];\n\n    // add new dots\n    radius3d = 8 + (steps > 16 ? (steps - 16) * 0.5 : 0);\n    for (var _i = 0; _i < steps; _i++) {\n      var dot = void 0;\n      var rad = TWO_PI * (_i / steps);\n      if (euclid[_i]) {\n        dot = (0, _util3d.createCircleOutlineFilled)(lineMaterial, defaultColor, 1);\n      } else {\n        dot = (0, _util3d.createCircleOutline)(lineMaterial, 1);\n      }\n      dot.name = 'dot';\n      dot.translateX(Math.sin(rad) * radius3d);\n      dot.translateY(Math.cos(rad) * radius3d);\n      dot.visible = true;\n      dots3d.add(dot);\n\n      // add coordinate of filled dot to polygon points\n      if (euclid[_i]) {\n        polygonPoints.push(dot.position.clone());\n      }\n    }\n\n    polygonPoints.push(polygonPoints[0].clone());\n\n    updatePolygon(polygonPoints);\n    updateHitarea();\n    updatePointer(isMute);\n    updateZeroMarker(steps, rotation);\n    updateRotatedMarker(rotation);\n    updateLabelPosition();\n  },\n\n\n  /**\n   * Update the polygon shape that connects the dots.\n   * @param {array} points Coordinates of the shape points.\n   */\n  updatePolygon = function updatePolygon(points) {\n    var i = void 0,\n        n = void 0,\n        line = void 0,\n        lineGeom = void 0,\n        fillShape = void 0,\n        fillGeom = void 0;\n\n    if (points.length > 2) {\n      polygon3d.visible = true;\n    } else {\n      polygon3d.visible = false;\n      return;\n    }\n\n    var fill = polygon3d.getObjectByName('polygonFill');\n\n    if (points.length > 3) {\n      fillShape = new _threeModule.Shape();\n      fillShape.moveTo(points[0].x, points[0].y);\n      n = points.length;\n      for (i = 1; i < n; i++) {\n        fillShape.lineTo(points[i].x, points[i].y);\n      }\n      fillShape.lineTo(points[0].x, points[0].y);\n      fillGeom = new _threeModule.ShapeGeometry(fillShape);\n      fill.geometry = fillGeom;\n      fill.visible = true;\n    } else {\n      fill.visible = false;\n    }\n\n    line = polygon3d.getObjectByName('polygonLine');\n    line.geometry.dispose();\n    line.geometry.setFromPoints(points);\n  },\n\n\n  /**\n   * Update the hitarea used for mouse detection.\n   */\n  updateHitarea = function updateHitarea() {\n    var scale = (radius3d + 3) * 0.1;\n    my.hitarea3d.scale.set(scale, scale, 1);\n  },\n\n\n  /**\n   * Update the pointer that connects the dots.\n   */\n  updatePointer = function updatePointer(isMute) {\n    var isSolo = false,\n        isNotSolo = false,\n        isNoteInControlled = false,\n        isMutedByNoteInControl = false,\n        mutedRadius = 4.5,\n        radius = isMute || isNotSolo || isMutedByNoteInControl ? mutedRadius : radius3d;\n    pointer3d.geometry.dispose();\n    pointer3d.geometry = createPointerGeometry(radius, isSolo, isNoteInControlled);\n  },\n\n\n  /**\n   * Create geometry for the pointer.\n   * Also used by the pointer update function.\n   * @param {Number} radius Pointer radius.\n   * @param {Boolean} isSolo Pointer shows solo state.\n   * @param {Boolean} isNoteInControlled Pointer shows external control state.\n   * @return {Object} Three.js BufferGeometry object.\n   */\n  createPointerGeometry = function createPointerGeometry(radius, isSolo, isNoteInControlled) {\n    var geometry = new _threeModule.BufferGeometry();\n    if (isNoteInControlled) {\n      var halfRadius = centreRadius + (radius - centreRadius) / 2;\n      geometry.addAttribute('position', new _threeModule.BufferAttribute(new Float32Array([0.0, centreRadius, 0.0, -0.9, halfRadius, 0.0, 0.0, radius, 0.0, 0.9, halfRadius, 0.0, 0.0, centreRadius, 0.0]), 3));\n    } else {\n      geometry.addAttribute('position', new _threeModule.BufferAttribute(new Float32Array([-2.9, 0.7, 0.0, 0.0, radius, 0.0, 2.9, 0.7, 0.0]), 3));\n      if (isSolo) {\n        geometry.addAttribute('position', new _threeModule.BufferAttribute(new Float32Array([0.0, radius, 0.0, 0.0, 1.0, 0.0]), 3));\n      }\n    }\n\n    return geometry;\n  },\n\n\n  /**\n   * Update the zero marker.\n   * @param {Number} steps Euclidean necklace node amount.\n   * @param {Number} rotation Euclidean necklace rotation.\n   */\n  updateZeroMarker = function updateZeroMarker(steps, rotation) {\n    var rad = TWO_PI * (-rotation / steps),\n        radius = radius3d + 3;\n    zeroMarker3d.position.x = Math.sin(rad) * radius;\n    zeroMarker3d.position.y = Math.cos(rad) * radius;\n  },\n\n\n  /**\n   * Update the marker that indicates if the pattern is rotated.\n   * @param {Number} rotation Euclidean necklace rotation.\n   */\n  updateRotatedMarker = function updateRotatedMarker(rotation) {\n    rotatedMarker3d.position.y = radius3d + 3;\n    rotatedMarker3d.visible = rotation !== 0;\n  },\n      updateLabelPosition = function updateLabelPosition() {\n    my.label3d.position.y = -radius3d - 2;\n  },\n\n\n  /**\n   * Show circle if the processor is selected, else hide.\n   * @param {Boolean} isSelected True if selected.\n   */\n  updateSelectCircle = function updateSelectCircle(selectedId) {\n    select3d.visible = my.id === selectedId;\n  },\n\n\n  /**\n   * Calculate the pattern's duration in milliseconds.\n   */\n  updateDuration = function updateDuration(steps, rate) {\n    // const rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value;\n    var stepDuration = rate * _config.PPQN;\n    duration = steps * stepDuration;\n  },\n\n\n  /**\n   * Redraw the pattern if needed.\n   * @param {Number} position Transport playback position in ticks.\n   * @param {Array} processorEvents Array of processor generated events to display.\n   */\n  draw = function draw(position, processorEvents) {\n    showPlaybackPosition(position);\n    updateNoteAnimations();\n\n    if (processorEvents[my.id] && processorEvents[my.id].length) {\n      for (var i = 0, n = processorEvents[my.id].length; i < n; i++) {\n        var event = processorEvents[my.id][i];\n        startNoteAnimation(event.stepIndex, event.delayFromNowToNoteStart, event.delayFromNowToNoteEnd);\n      }\n    }\n  },\n\n\n  /**\n   * Show the playback position within the pattern.\n   * Indicated by the pointer's rotation.\n   * @param  {Number} position Position within pattern in ticks.\n   */\n  showPlaybackPosition = function showPlaybackPosition(position) {\n    pointerRotationPrevious = pointerRotation;\n    pointerRotation = TWO_PI * (-position % duration / duration);\n    pointer3d.rotation.z = pointerRotation;\n  },\n\n\n  /**\n   * Show animation of the pattern dot that is about to play. \n   * @param {Number} stepIndex Index of the step to play.\n   * @param {Number} noteStartDelay Delay from now until note start in ms.\n   * @param {Number} noteStopDelay Delay from now until note end in ms.\n   */\n  startNoteAnimation = function startNoteAnimation(stepIndex, noteStartDelay, noteStopDelay) {\n    var dot = dots3d.children[stepIndex];\n\n    // retain necklace dot state in object\n    dotAnimations[stepIndex] = {\n      dot: dot,\n      scale: 1,\n      isActive: false\n\n      // delay start of animation\n    };setTimeout(function () {\n      var tweeningDot = dotAnimations[stepIndex];\n      tweeningDot.scale = 2;\n      tweeningDot.isActive = true;\n    }, noteStartDelay);\n  },\n\n\n  /**\n   * Update the current nacklace dot animations.\n   */\n  updateNoteAnimations = function updateNoteAnimations() {\n    var largestScale = 0;\n    var isNoteActive = false;\n\n    Object.keys(dotAnimations).forEach(function (key) {\n      var obj = dotAnimations[key];\n      obj.scale /= 1.07;\n      obj.dot.scale.set(obj.scale, obj.scale, 1);\n      largestScale = Math.max(largestScale, obj.scale);\n      isNoteActive = true;\n      if (obj.isActive && obj.scale <= 1) {\n        obj.dot.scale.set(1, 1, 1);\n        delete dotAnimations[key];\n      }\n    });\n\n    // center dot\n    centreDot3d.visible = isNoteActive;\n    if (isNoteActive) {\n      centreDot3d.scale.set(largestScale, largestScale, 1);\n    }\n  };\n\n  my = my || {};\n\n  that = (0, _object3dControllerBase2.default)(specs, my);\n\n  initialize();\n\n  that.terminate = terminate;\n  that.updateSelectCircle = updateSelectCircle;\n  that.draw = draw;\n  return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n");

/***/ }),

/***/ 45:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = setText3d;\n\nvar _text3dFontData = __webpack_require__(46);\n\nvar _text3dFontData2 = _interopRequireDefault(_text3dFontData);\n\nvar _threeModule = __webpack_require__(2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar lineMaterial = new _threeModule.LineBasicMaterial({\n  color: new _threeModule.Color(0x000000),\n  linewidth: 3\n});\n\n/**\n * Create a single line text object.\n *\n * @export\n * @param {Group} group The Group object to add the 3D text to.\n * @param {String} str The text string to render as 3D.\n * @param {LineBasicMaterial} lineMaterial The material to render the text with.\n * @return Group object containing all the text meshes.\n */\nfunction setText3d(group, str, color) {\n  lineMaterial.color.set(color);\n\n  // clear old text\n  while (group.children.length) {\n    group.remove(group.children[0]);\n  }\n  var lineGroup = new _threeModule.Group();\n  group.add(lineGroup);\n\n  var numRenderedChars = 0;\n\n  for (var i = 0, n = str.length; i < n; i++) {\n    var char = str.charAt(i);\n    var svgPath = _text3dFontData2.default.chars[char];\n\n    if (svgPath) {\n      numRenderedChars++;\n\n      var svgSubPaths = svgPath.split('M');\n      svgSubPaths.shift();\n\n      svgSubPaths.forEach(function (svgSubPath) {\n        var path = parsePathNode('M' + svgSubPath);\n        var points = path.getPoints();\n\n        var geometry = new _threeModule.BufferGeometry().setFromPoints(points);\n        var line = new _threeModule.Line(geometry, lineMaterial);\n        line.translateX((_text3dFontData2.default.viewBox.width + _text3dFontData2.default.spacing) * numRenderedChars);\n        line.rotateX(-Math.PI);\n\n        lineGroup.add(line);\n      });\n    }\n  }\n\n  // center line of text\n  lineGroup.translateX(numRenderedChars * (_text3dFontData2.default.viewBox.width + _text3dFontData2.default.spacing) / -2);\n\n  return group;\n}\n\n/**\n * From here the code is taken from threeJS's SVGLoader.\n */\n\nfunction parsePathNode(pathString, style) {\n  var path = new _threeModule.Path();\n  var point = new _threeModule.Vector2();\n  var control = new _threeModule.Vector2();\n  var firstPoint = new _threeModule.Vector2();\n  var commands = pathString.match(/[a-df-z][^a-df-z]*/ig);\n\n  var isFirstPoint = true;\n  var doSetFirstPoint = false;\n\n  commands.forEach(function (command) {\n    var type = command.charAt(0);\n    var data = command.substr(1).trim();\n\n    doSetFirstPoint = isFirstPoint;\n    isFirstPoint = false;\n    var numbers = void 0;\n\n    switch (type) {\n\n      case 'M':\n        numbers = parseFloats(data);\n        for (var j = 0, jl = numbers.length; j < jl; j += 2) {\n          point.x = numbers[j + 0];\n          point.y = numbers[j + 1];\n          control.x = point.x;\n          control.y = point.y;\n          if (j === 0) {\n            path.moveTo(point.x, point.y);\n          } else {\n            path.lineTo(point.x, point.y);\n          }\n        }\n        break;\n\n      case 'L':\n        numbers = parseFloats(data);\n        for (var _j = 0, _jl = numbers.length; _j < _jl; _j += 2) {\n          point.x = numbers[_j + 0];\n          point.y = numbers[_j + 1];\n          control.x = point.x;\n          control.y = point.y;\n          path.lineTo(point.x, point.y);\n        }\n        break;\n\n      case 'Z':\n      case 'z':\n        path.currentPath.autoClose = true;\n        if (path.currentPath.curves.length > 0) {\n          // Reset point to beginning of Path\n          point.copy(firstPoint);\n          path.currentPath.currentPoint.copy(point);\n          isFirstPoint = true;\n        }\n        break;\n\n      default:\n        console.warn(command);\n\n    }\n\n    if (doSetFirstPoint) {\n      firstPoint.copy(point);\n      doSetFirstPoint = false;\n    }\n  });\n\n  return path;\n}\n\nfunction parseFloats(string) {\n  var array = string.split(/[\\s,]+|(?=\\s?[+\\-])/);\n  for (var i = 0; i < array.length; i++) {\n    var number = array[i];\n    // Handle values like 48.6037.7.8\n    // TODO Find a regex for this\n    if (number.indexOf('.') !== number.lastIndexOf('.')) {\n      var split = number.split('.');\n      for (var s = 2; s < split.length; s++) {\n        array.splice(i + s - 1, 0, '0.' + split[s]);\n      }\n    }\n    array[i] = parseFloat(number);\n  }\n  return array;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvd2ViZ2wvdGV4dDNkLmpzPzVkZmMiXSwibmFtZXMiOlsic2V0VGV4dDNkIiwibGluZU1hdGVyaWFsIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJjb2xvciIsIkNvbG9yIiwibGluZXdpZHRoIiwiZ3JvdXAiLCJzdHIiLCJzZXQiLCJjaGlsZHJlbiIsImxlbmd0aCIsInJlbW92ZSIsImxpbmVHcm91cCIsIkdyb3VwIiwiYWRkIiwibnVtUmVuZGVyZWRDaGFycyIsImkiLCJuIiwiY2hhciIsImNoYXJBdCIsInN2Z1BhdGgiLCJ0ZXh0M2RGb250RGF0YSIsImNoYXJzIiwic3ZnU3ViUGF0aHMiLCJzcGxpdCIsInNoaWZ0IiwiZm9yRWFjaCIsInBhdGgiLCJwYXJzZVBhdGhOb2RlIiwic3ZnU3ViUGF0aCIsInBvaW50cyIsImdldFBvaW50cyIsImdlb21ldHJ5IiwiQnVmZmVyR2VvbWV0cnkiLCJzZXRGcm9tUG9pbnRzIiwibGluZSIsIkxpbmUiLCJ0cmFuc2xhdGVYIiwidmlld0JveCIsIndpZHRoIiwic3BhY2luZyIsInJvdGF0ZVgiLCJNYXRoIiwiUEkiLCJwYXRoU3RyaW5nIiwic3R5bGUiLCJQYXRoIiwicG9pbnQiLCJWZWN0b3IyIiwiY29udHJvbCIsImZpcnN0UG9pbnQiLCJjb21tYW5kcyIsIm1hdGNoIiwiaXNGaXJzdFBvaW50IiwiZG9TZXRGaXJzdFBvaW50IiwidHlwZSIsImNvbW1hbmQiLCJkYXRhIiwic3Vic3RyIiwidHJpbSIsIm51bWJlcnMiLCJwYXJzZUZsb2F0cyIsImoiLCJqbCIsIngiLCJ5IiwibW92ZVRvIiwibGluZVRvIiwiY3VycmVudFBhdGgiLCJhdXRvQ2xvc2UiLCJjdXJ2ZXMiLCJjb3B5IiwiY3VycmVudFBvaW50IiwiY29uc29sZSIsIndhcm4iLCJzdHJpbmciLCJhcnJheSIsIm51bWJlciIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsInMiLCJzcGxpY2UiLCJwYXJzZUZsb2F0Il0sIm1h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Q0FBYjtBQUNEO0FBQ0QsU0FBT0QsS0FBUDtBQUNEIiwiZmlsZSI6IjQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRleHQzZEZvbnREYXRhIGZyb20gJy4vdGV4dDNkRm9udERhdGEuanMnO1xuaW1wb3J0IHsgXG4gIEJ1ZmZlckdlb21ldHJ5LFxuICBDb2xvcixcbiAgR3JvdXAsXG4gIExpbmUsXG4gIExpbmVCYXNpY01hdGVyaWFsLFxuICBQYXRoLFxuICBWZWN0b3IyLFxufSBmcm9tICcuLi8uLi9saWIvdGhyZWUubW9kdWxlLmpzJztcblxuY29uc3QgbGluZU1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKHtcbiAgY29sb3I6IG5ldyBDb2xvcigweDAwMDAwMCksXG4gIGxpbmV3aWR0aDogMyxcbn0pO1xuXG4vKipcbiAqIENyZWF0ZSBhIHNpbmdsZSBsaW5lIHRleHQgb2JqZWN0LlxuICpcbiAqIEBleHBvcnRcbiAqIEBwYXJhbSB7R3JvdXB9IGdyb3VwIFRoZSBHcm91cCBvYmplY3QgdG8gYWRkIHRoZSAzRCB0ZXh0IHRvLlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgdGV4dCBzdHJpbmcgdG8gcmVuZGVyIGFzIDNELlxuICogQHBhcmFtIHtMaW5lQmFzaWNNYXRlcmlhbH0gbGluZU1hdGVyaWFsIFRoZSBtYXRlcmlhbCB0byByZW5kZXIgdGhlIHRleHQgd2l0aC5cbiAqIEByZXR1cm4gR3JvdXAgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSB0ZXh0IG1lc2hlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VGV4dDNkKGdyb3VwLCBzdHIsIGNvbG9yKSB7XG4gIGxpbmVNYXRlcmlhbC5jb2xvci5zZXQoIGNvbG9yICk7XG5cbiAgLy8gY2xlYXIgb2xkIHRleHRcbiAgd2hpbGUgKGdyb3VwLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGdyb3VwLnJlbW92ZShncm91cC5jaGlsZHJlblswXSk7XG4gIH1cbiAgY29uc3QgbGluZUdyb3VwID0gbmV3IEdyb3VwKCk7XG4gIGdyb3VwLmFkZChsaW5lR3JvdXApO1xuXG4gIGxldCBudW1SZW5kZXJlZENoYXJzID0gMDtcblxuICBmb3IgKGxldCBpID0gMCwgbiA9IHN0ci5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gc3RyLmNoYXJBdChpKTtcbiAgICBjb25zdCBzdmdQYXRoID0gdGV4dDNkRm9udERhdGEuY2hhcnNbY2hhcl07XG5cbiAgICBpZiAoc3ZnUGF0aCkge1xuICAgICAgbnVtUmVuZGVyZWRDaGFycysrO1xuXG4gICAgICBjb25zdCBzdmdTdWJQYXRocyA9IHN2Z1BhdGguc3BsaXQoJ00nKTtcbiAgICAgIHN2Z1N1YlBhdGhzLnNoaWZ0KCk7XG4gICAgICBcbiAgICAgIHN2Z1N1YlBhdGhzLmZvckVhY2goc3ZnU3ViUGF0aCA9PiB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBwYXJzZVBhdGhOb2RlKCdNJyArIHN2Z1N1YlBhdGgpO1xuICAgICAgICBjb25zdCBwb2ludHMgPSBwYXRoLmdldFBvaW50cygpO1xuXG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgTGluZShnZW9tZXRyeSwgbGluZU1hdGVyaWFsKTtcbiAgICAgICAgbGluZS50cmFuc2xhdGVYKCh0ZXh0M2RGb250RGF0YS52aWV3Qm94LndpZHRoICsgdGV4dDNkRm9udERhdGEuc3BhY2luZykgKiBudW1SZW5kZXJlZENoYXJzKTtcbiAgICAgICAgbGluZS5yb3RhdGVYKC1NYXRoLlBJKTtcblxuICAgICAgICBsaW5lR3JvdXAuYWRkKGxpbmUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gY2VudGVyIGxpbmUgb2YgdGV4dFxuICBsaW5lR3JvdXAudHJhbnNsYXRlWCgobnVtUmVuZGVyZWRDaGFycyAqICh0ZXh0M2RGb250RGF0YS52aWV3Qm94LndpZHRoICsgdGV4dDNkRm9udERhdGEuc3BhY2luZykpIC8gLTIpO1xuXG4gIHJldHVybiBncm91cDtcbn1cblxuLyoqXG4gKiBGcm9tIGhlcmUgdGhlIGNvZGUgaXMgdGFrZW4gZnJvbSB0aHJlZUpTJ3MgU1ZHTG9hZGVyLlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlUGF0aE5vZGUocGF0aFN0cmluZywgc3R5bGUpIHtcbiAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKCk7XG4gIGNvbnN0IHBvaW50ID0gbmV3IFZlY3RvcjIoKTtcbiAgY29uc3QgY29udHJvbCA9IG5ldyBWZWN0b3IyKCk7XG4gIGNvbnN0IGZpcnN0UG9pbnQgPSBuZXcgVmVjdG9yMigpO1xuICBjb25zdCBjb21tYW5kcyA9IHBhdGhTdHJpbmcubWF0Y2goIC9bYS1kZi16XVteYS1kZi16XSovaWcgKTtcblxuICBsZXQgaXNGaXJzdFBvaW50ID0gdHJ1ZTtcbiAgbGV0IGRvU2V0Rmlyc3RQb2ludCA9IGZhbHNlO1xuXG4gIGNvbW1hbmRzLmZvckVhY2goY29tbWFuZCA9PiB7XG4gICAgY29uc3QgdHlwZSA9IGNvbW1hbmQuY2hhckF0KDApO1xuXHRcdGNvbnN0IGRhdGEgPSBjb21tYW5kLnN1YnN0cigxKS50cmltKCk7XG4gICAgXG4gICAgZG9TZXRGaXJzdFBvaW50ID0gaXNGaXJzdFBvaW50O1xuICAgIGlzRmlyc3RQb2ludCA9IGZhbHNlO1xuICAgIGxldCBudW1iZXJzO1xuXG4gICAgc3dpdGNoICggdHlwZSApIHtcblxuICAgICAgY2FzZSAnTSc6XG4gICAgICAgIG51bWJlcnMgPSBwYXJzZUZsb2F0cyggZGF0YSApO1xuICAgICAgICBmb3IgKCBsZXQgaiA9IDAsIGpsID0gbnVtYmVycy5sZW5ndGg7IGogPCBqbDsgaiArPSAyICkge1xuICAgICAgICAgIHBvaW50LnggPSBudW1iZXJzWyBqICsgMCBdO1xuICAgICAgICAgIHBvaW50LnkgPSBudW1iZXJzWyBqICsgMSBdO1xuICAgICAgICAgIGNvbnRyb2wueCA9IHBvaW50Lng7XG4gICAgICAgICAgY29udHJvbC55ID0gcG9pbnQueTtcbiAgICAgICAgICBpZiAoIGogPT09IDAgKSB7XG4gICAgICAgICAgICBwYXRoLm1vdmVUbyggcG9pbnQueCwgcG9pbnQueSApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLmxpbmVUbyggcG9pbnQueCwgcG9pbnQueSApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIG51bWJlcnMgPSBwYXJzZUZsb2F0cyggZGF0YSApO1xuICAgICAgICBmb3IgKCBsZXQgaiA9IDAsIGpsID0gbnVtYmVycy5sZW5ndGg7IGogPCBqbDsgaiArPSAyICkge1xuICAgICAgICAgIHBvaW50LnggPSBudW1iZXJzWyBqICsgMCBdO1xuICAgICAgICAgIHBvaW50LnkgPSBudW1iZXJzWyBqICsgMSBdO1xuICAgICAgICAgIGNvbnRyb2wueCA9IHBvaW50Lng7XG4gICAgICAgICAgY29udHJvbC55ID0gcG9pbnQueTtcbiAgICAgICAgICBwYXRoLmxpbmVUbyggcG9pbnQueCwgcG9pbnQueSApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdaJzpcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgICBwYXRoLmN1cnJlbnRQYXRoLmF1dG9DbG9zZSA9IHRydWU7XG4gICAgICAgIGlmICggcGF0aC5jdXJyZW50UGF0aC5jdXJ2ZXMubGVuZ3RoID4gMCApIHtcbiAgICAgICAgICAvLyBSZXNldCBwb2ludCB0byBiZWdpbm5pbmcgb2YgUGF0aFxuICAgICAgICAgIHBvaW50LmNvcHkoIGZpcnN0UG9pbnQgKTtcbiAgICAgICAgICBwYXRoLmN1cnJlbnRQYXRoLmN1cnJlbnRQb2ludC5jb3B5KCBwb2ludCApO1xuICAgICAgICAgIGlzRmlyc3RQb2ludCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnNvbGUud2FybiggY29tbWFuZCApO1xuXG4gICAgfVxuXG4gICAgaWYgKCBkb1NldEZpcnN0UG9pbnQgKSB7XG4gICAgICBmaXJzdFBvaW50LmNvcHkoIHBvaW50ICk7XG4gICAgICBkb1NldEZpcnN0UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZsb2F0cyggc3RyaW5nICkge1xuICB2YXIgYXJyYXkgPSBzdHJpbmcuc3BsaXQoIC9bXFxzLF0rfCg/PVxccz9bK1xcLV0pLyApO1xuICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKysgKSB7XG4gICAgdmFyIG51bWJlciA9IGFycmF5WyBpIF07XG4gICAgLy8gSGFuZGxlIHZhbHVlcyBsaWtlIDQ4LjYwMzcuNy44XG4gICAgLy8gVE9ETyBGaW5kIGEgcmVnZXggZm9yIHRoaXNcbiAgICBpZiAoIG51bWJlci5pbmRleE9mKCAnLicgKSAhPT0gbnVtYmVyLmxhc3RJbmRleE9mKCAnLicgKSApIHtcbiAgICAgIHZhciBzcGxpdCA9IG51bWJlci5zcGxpdCggJy4nICk7XG4gICAgICBmb3IgKCB2YXIgcyA9IDI7IHMgPCBzcGxpdC5sZW5ndGg7IHMgKysgKSB7XG4gICAgICAgIGFycmF5LnNwbGljZSggaSArIHMgLSAxLCAwLCAnMC4nICsgc3BsaXRbIHMgXSApO1xuICAgICAgfVxuICAgIH1cbiAgICBhcnJheVsgaSBdID0gcGFyc2VGbG9hdCggbnVtYmVyICk7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3dlYmdsL3RleHQzZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n");

/***/ }),

/***/ 46:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/** \n * Character shapes formatted as SVG paths. \n */\n\nvar text3dFontData = {\n  \"viewBox\": {\n    \"x\": 0,\n    \"y\": 0,\n    \"width\": 8,\n    \"height\": 12\n  },\n  \"spacing\": 4,\n  \"chars\": {\n    \"0\": \"M0 12 L8 12 L8 0 L0 0 L0 12 L8 0\",\n    \"1\": \"M4 12 L4 0 L3 2\",\n    \"2\": \"M0 0 L8 0 L8 5 L0 7 L0 12 L8 12\",\n    \"3\": \"M0 0 L8 0 L8 12 L0 12 M0 6 L8 6\",\n    \"4\": \"M0 0 L0 6 L8 6 M8 0 L8 12\",\n    \"5\": \"M0 12 L8 12 L8 6 L0 5 L0 0 L8 0\",\n    \"6\": \"M0 0 L0 12 L8 12 L8 7 L0 5\",\n    \"7\": \"M0 0 L8 0 L8 6 L4 12\",\n    \"8\": \"M0 12 L8 12 L8 0 L0 0 L0 12 M0 6 L8 6 \",\n    \"9\": \"M8 12 L8 0 L0 0 L0 5 L8 7\",\n    \" \": \"M0 0\",\n    \".\": \"M3 12 L4 12\",\n    \",\": \"M2 12 L4 10\",\n    \"-\": \"M2 6 L6 6\",\n    \"+\": \"M1 6 L7 6 M4 3 L4 9\",\n    \"!\": \"M4 12 L3 10 L5 10 L4 12 M4 8 L4 0\",\n    \"#\": \"M0 8 L8 8 L6 10 L6 2 L8 4 L0 4 L2 2 L2 10\",\n    \"^\": \"M2 6 L4 0 L6 6\",\n    \"=\": \"M1 8 L7 8 M1 4 L7 4\",\n    \"*\": \"M0 12 L4 0 L8 12 L0 4 L8 4 L0 12\",\n    \"_\": \"M0 12 L8 12\",\n    \"/\": \"M0 12 L8 0\",\n    \"\\\\\": \"M0 0 L8 12\",\n    \"@\": \"M8 8 L4 12 L0 8 L0 4 L4 0 L8 4 L4 8 L3 6\",\n    \"$\": \"M6 10 L2 6 L6 2 M4 0 L4 12\",\n    \"&\": \"M8 12 L4 0 L8 4 L0 8 L4 12 L8 8\",\n    \"\": \"M6 12 L2 12 L2 0 L6 0\",\n    \"]\": \"M2 12 L6 12 L6 0 L2 0\",\n    \"(\": \"M6 12 L2 8 L2 4 L6 0\",\n    \")\": \"M2 12 L6 8 L6 4 L2 0\",\n    \"{\": \"M6 12 L4 10 L4 2 L6 0 M2 6 L4 6\",\n    \"}\": \"M4 12 L6 10 L6 2 L4 0 M6 6 L8 6\",\n    \"%\": \"M0 12 L8 0 M2 2 L2 4 M6 8 L6 10\",\n    \"<\": \"M6 12 L2 6 L6 0\",\n    \">\": \"M2 12 L6 6 L2 0\",\n    \"|\": \"M4 12 L4 7 M4 6 L4 0\",\n    \":\": \"M4 3 L4 5 M4 7 L4 9\",\n    \";\": \"M4 3 L4 5 M4 7 L1 10\",\n    \"\\\"\": \"M2 2 L2 6 M6 2 L6 6\",\n    \"'\": \"M2 6 L6 2\",\n    \"`\": \"M2 2 L6 6\",\n    \"~\": \"M0 8 L2 4 L6 8 L8 4\",\n    \"?\": \"M0 4 L4 0 L8 4 L4 8 M4 11 L4 12\",\n    \"A\": \"M0 12 L0 4 L4 0 L8 4 L8 12 M0 8 L8 8\",\n    \"B\": \"M0 12 L0 0 L4 0 L8 2 L4 6 L8 10 L4 12 L0 12\",\n    \"C\": \"M8 12 L0 12 L0 0 L8 0\",\n    \"D\": \"M0 12 L0 0 L4 0 L8 4 L8 8 L4 12 L0 12\",\n    \"E\": \"M8 12 L0 12 L0 0 L8 0 M0 6 L6 6\",\n    \"F\": \"M0 12 L0 0 L8 0 M0 6 L6 6\",\n    \"G\": \"M6 6 L8 8 L8 12 L0 12 L0 0 L8 0\",\n    \"H\": \"M0 12 L0 0 M0 6 L8 6 M8 0 L8 12\",\n    \"I\": \"M0 12 L8 12 M4 12 L4 0 M0 0 L8 0\",\n    \"J\": \"M0 8 L4 12 L8 12 L8 0\",\n    \"K\": \"M0 12 L0 0 M8 0 L0 6 L6 12\",\n    \"L\": \"M8 12 L0 12 L0 0\",\n    \"M\": \"M0 12 L0 0 L4 4 L8 0 L8 12\",\n    \"N\": \"M0 12 L0 0 L8 12 L8 0\",\n    \"O\": \"M0 12 L0 0 L8 0 L8 12 L0 12\",\n    \"P\": \"M0 12 L0 0 L8 0 L8 6 L0 7\",\n    \"Q\": \"M0 12 L0 0 L8 0 L8 8 L0 12 M4 8 L8 12\",\n    \"R\": \"M0 12 L0 0 L8 0 L8 6 L0 7 M4 7 L8 12\",\n    \"S\": \"M0 10 L2 12 L8 12 L8 7 L0 5 L0 0 L6 0 L8 2\",\n    \"T\": \"M0 0 L8 0 M4 0 L4 12\",\n    \"U\": \"M0 0 L0 10 L4 12 L8 10 L8 0\",\n    \"V\": \"M0 0 L4 12 L8 0\",\n    \"W\": \"M0 0 L2 12 L4 8 L6 12 L8 0\",\n    \"X\": \"M0 12 L8 0 M0 0 L8 12\",\n    \"Y\": \"M0 0 L4 6 L8 0 M4 6 L4 12\",\n    \"Z\": \"M0 0 L8 0 L0 12 L8 12 M2 6 L6 6\"\n  }\n};\n\nexports.default = text3dFontData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvd2ViZ2wvdGV4dDNkRm9udERhdGEuanM/OGRlMSJdLCJuYW1lcyI6WyJ0ZXh0M2RGb250RGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7OztBQUlBLElBQU1BLGlCQUFpQjtBQUNyQixhQUFXO0FBQ1QsU0FBSyxDQURJO0FBRVQsU0FBSyxDQUZJO0FBR1QsYUFBUyxDQUhBO0FBSVQsY0FBVTtBQUpELEdBRFU7QUFPckIsYUFBVyxDQVBVO0FBUXJCLFdBQVM7QUFDUCxTQUFLLGtDQURFO0FBRVAsU0FBSyxpQkFGRTtBQUdQLFNBQUssaUNBSEU7QUFJUCxTQUFLLGlDQUpFO0FBS1AsU0FBSywyQkFMRTtBQU1QLFNBQUssaUNBTkU7QUFPUCxTQUFLLDRCQVBFO0FBUVAsU0FBSyxzQkFSRTtBQVNQLFNBQUssd0NBVEU7QUFVUCxTQUFLLDJCQVZFO0FBV1AsU0FBSyxNQVhFO0FBWVAsU0FBSyxhQVpFO0FBYVAsU0FBSyxhQWJFO0FBY1AsU0FBSyxXQWRFO0FBZVAsU0FBSyxxQkFmRTtBQWdCUCxTQUFLLG1DQWhCRTtBQWlCUCxTQUFLLDJDQWpCRTtBQWtCUCxTQUFLLGdCQWxCRTtBQW1CUCxTQUFLLHFCQW5CRTtBQW9CUCxTQUFLLGtDQXBCRTtBQXFCUCxTQUFLLGFBckJFO0FBc0JQLFNBQUssWUF0QkU7QUF1QlAsVUFBTSxZQXZCQztBQXdCUCxTQUFLLDBDQXhCRTtBQXlCUCxTQUFLLDRCQXpCRTtBQTBCUCxTQUFLLGlDQTFCRTtBQTJCUCxRQUFJLHVCQTNCRztBQTRCUCxTQUFLLHVCQTVCRTtBQTZCUCxTQUFLLHNCQTdCRTtBQThCUCxTQUFLLHNCQTlCRTtBQStCUCxTQUFLLGlDQS9CRTtBQWdDUCxTQUFLLGlDQWhDRTtBQWlDUCxTQUFLLGlDQWpDRTtBQWtDUCxTQUFLLGlCQWxDRTtBQW1DUCxTQUFLLGlCQW5DRTtBQW9DUCxTQUFLLHNCQXBDRTtBQXFDUCxTQUFLLHFCQXJDRTtBQXNDUCxTQUFLLHNCQXRDRTtBQXVDUCxVQUFNLHFCQXZDQztBQXdDUCxTQUFLLFdBeENFO0FBeUNQLFNBQUssV0F6Q0U7QUEwQ1AsU0FBSyxxQkExQ0U7QUEyQ1AsU0FBSyxpQ0EzQ0U7QUE0Q1AsU0FBSyxzQ0E1Q0U7QUE2Q1AsU0FBSyw2Q0E3Q0U7QUE4Q1AsU0FBSyx1QkE5Q0U7QUErQ1AsU0FBSyx1Q0EvQ0U7QUFnRFAsU0FBSyxpQ0FoREU7QUFpRFAsU0FBSywyQkFqREU7QUFrRFAsU0FBSyxpQ0FsREU7QUFtRFAsU0FBSyxpQ0FuREU7QUFvRFAsU0FBSyxrQ0FwREU7QUFxRFAsU0FBSyx1QkFyREU7QUFzRFAsU0FBSyw0QkF0REU7QUF1RFAsU0FBSyxrQkF2REU7QUF3RFAsU0FBSyw0QkF4REU7QUF5RFAsU0FBSyx1QkF6REU7QUEwRFAsU0FBSyw2QkExREU7QUEyRFAsU0FBSywyQkEzREU7QUE0RFAsU0FBSyx1Q0E1REU7QUE2RFAsU0FBSyxzQ0E3REU7QUE4RFAsU0FBSyw0Q0E5REU7QUErRFAsU0FBSyxzQkEvREU7QUFnRVAsU0FBSyw2QkFoRUU7QUFpRVAsU0FBSyxpQkFqRUU7QUFrRVAsU0FBSyw0QkFsRUU7QUFtRVAsU0FBSyx1QkFuRUU7QUFvRVAsU0FBSywyQkFwRUU7QUFxRVAsU0FBSztBQXJFRTtBQVJZLENBQXZCOztrQkFpRmVBLGMiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogXG4gKiBDaGFyYWN0ZXIgc2hhcGVzIGZvcm1hdHRlZCBhcyBTVkcgcGF0aHMuIFxuICovXG5cbmNvbnN0IHRleHQzZEZvbnREYXRhID0ge1xuICBcInZpZXdCb3hcIjoge1xuICAgIFwieFwiOiAwLFxuICAgIFwieVwiOiAwLFxuICAgIFwid2lkdGhcIjogOCxcbiAgICBcImhlaWdodFwiOiAxMlxuICB9LFxuICBcInNwYWNpbmdcIjogNCxcbiAgXCJjaGFyc1wiOiB7XG4gICAgXCIwXCI6IFwiTTAgMTIgTDggMTIgTDggMCBMMCAwIEwwIDEyIEw4IDBcIixcbiAgICBcIjFcIjogXCJNNCAxMiBMNCAwIEwzIDJcIixcbiAgICBcIjJcIjogXCJNMCAwIEw4IDAgTDggNSBMMCA3IEwwIDEyIEw4IDEyXCIsXG4gICAgXCIzXCI6IFwiTTAgMCBMOCAwIEw4IDEyIEwwIDEyIE0wIDYgTDggNlwiLFxuICAgIFwiNFwiOiBcIk0wIDAgTDAgNiBMOCA2IE04IDAgTDggMTJcIixcbiAgICBcIjVcIjogXCJNMCAxMiBMOCAxMiBMOCA2IEwwIDUgTDAgMCBMOCAwXCIsXG4gICAgXCI2XCI6IFwiTTAgMCBMMCAxMiBMOCAxMiBMOCA3IEwwIDVcIixcbiAgICBcIjdcIjogXCJNMCAwIEw4IDAgTDggNiBMNCAxMlwiLFxuICAgIFwiOFwiOiBcIk0wIDEyIEw4IDEyIEw4IDAgTDAgMCBMMCAxMiBNMCA2IEw4IDYgXCIsXG4gICAgXCI5XCI6IFwiTTggMTIgTDggMCBMMCAwIEwwIDUgTDggN1wiLFxuICAgIFwiIFwiOiBcIk0wIDBcIixcbiAgICBcIi5cIjogXCJNMyAxMiBMNCAxMlwiLFxuICAgIFwiLFwiOiBcIk0yIDEyIEw0IDEwXCIsXG4gICAgXCItXCI6IFwiTTIgNiBMNiA2XCIsXG4gICAgXCIrXCI6IFwiTTEgNiBMNyA2IE00IDMgTDQgOVwiLFxuICAgIFwiIVwiOiBcIk00IDEyIEwzIDEwIEw1IDEwIEw0IDEyIE00IDggTDQgMFwiLFxuICAgIFwiI1wiOiBcIk0wIDggTDggOCBMNiAxMCBMNiAyIEw4IDQgTDAgNCBMMiAyIEwyIDEwXCIsXG4gICAgXCJeXCI6IFwiTTIgNiBMNCAwIEw2IDZcIixcbiAgICBcIj1cIjogXCJNMSA4IEw3IDggTTEgNCBMNyA0XCIsXG4gICAgXCIqXCI6IFwiTTAgMTIgTDQgMCBMOCAxMiBMMCA0IEw4IDQgTDAgMTJcIixcbiAgICBcIl9cIjogXCJNMCAxMiBMOCAxMlwiLFxuICAgIFwiL1wiOiBcIk0wIDEyIEw4IDBcIixcbiAgICBcIlxcXFxcIjogXCJNMCAwIEw4IDEyXCIsXG4gICAgXCJAXCI6IFwiTTggOCBMNCAxMiBMMCA4IEwwIDQgTDQgMCBMOCA0IEw0IDggTDMgNlwiLFxuICAgIFwiJFwiOiBcIk02IDEwIEwyIDYgTDYgMiBNNCAwIEw0IDEyXCIsXG4gICAgXCImXCI6IFwiTTggMTIgTDQgMCBMOCA0IEwwIDggTDQgMTIgTDggOFwiLFxuICAgIFwiXCI6IFwiTTYgMTIgTDIgMTIgTDIgMCBMNiAwXCIsXG4gICAgXCJdXCI6IFwiTTIgMTIgTDYgMTIgTDYgMCBMMiAwXCIsXG4gICAgXCIoXCI6IFwiTTYgMTIgTDIgOCBMMiA0IEw2IDBcIixcbiAgICBcIilcIjogXCJNMiAxMiBMNiA4IEw2IDQgTDIgMFwiLFxuICAgIFwie1wiOiBcIk02IDEyIEw0IDEwIEw0IDIgTDYgMCBNMiA2IEw0IDZcIixcbiAgICBcIn1cIjogXCJNNCAxMiBMNiAxMCBMNiAyIEw0IDAgTTYgNiBMOCA2XCIsXG4gICAgXCIlXCI6IFwiTTAgMTIgTDggMCBNMiAyIEwyIDQgTTYgOCBMNiAxMFwiLFxuICAgIFwiPFwiOiBcIk02IDEyIEwyIDYgTDYgMFwiLFxuICAgIFwiPlwiOiBcIk0yIDEyIEw2IDYgTDIgMFwiLFxuICAgIFwifFwiOiBcIk00IDEyIEw0IDcgTTQgNiBMNCAwXCIsXG4gICAgXCI6XCI6IFwiTTQgMyBMNCA1IE00IDcgTDQgOVwiLFxuICAgIFwiO1wiOiBcIk00IDMgTDQgNSBNNCA3IEwxIDEwXCIsXG4gICAgXCJcXFwiXCI6IFwiTTIgMiBMMiA2IE02IDIgTDYgNlwiLFxuICAgIFwiJ1wiOiBcIk0yIDYgTDYgMlwiLFxuICAgIFwiYFwiOiBcIk0yIDIgTDYgNlwiLFxuICAgIFwiflwiOiBcIk0wIDggTDIgNCBMNiA4IEw4IDRcIixcbiAgICBcIj9cIjogXCJNMCA0IEw0IDAgTDggNCBMNCA4IE00IDExIEw0IDEyXCIsXG4gICAgXCJBXCI6IFwiTTAgMTIgTDAgNCBMNCAwIEw4IDQgTDggMTIgTTAgOCBMOCA4XCIsXG4gICAgXCJCXCI6IFwiTTAgMTIgTDAgMCBMNCAwIEw4IDIgTDQgNiBMOCAxMCBMNCAxMiBMMCAxMlwiLFxuICAgIFwiQ1wiOiBcIk04IDEyIEwwIDEyIEwwIDAgTDggMFwiLFxuICAgIFwiRFwiOiBcIk0wIDEyIEwwIDAgTDQgMCBMOCA0IEw4IDggTDQgMTIgTDAgMTJcIixcbiAgICBcIkVcIjogXCJNOCAxMiBMMCAxMiBMMCAwIEw4IDAgTTAgNiBMNiA2XCIsXG4gICAgXCJGXCI6IFwiTTAgMTIgTDAgMCBMOCAwIE0wIDYgTDYgNlwiLFxuICAgIFwiR1wiOiBcIk02IDYgTDggOCBMOCAxMiBMMCAxMiBMMCAwIEw4IDBcIixcbiAgICBcIkhcIjogXCJNMCAxMiBMMCAwIE0wIDYgTDggNiBNOCAwIEw4IDEyXCIsXG4gICAgXCJJXCI6IFwiTTAgMTIgTDggMTIgTTQgMTIgTDQgMCBNMCAwIEw4IDBcIixcbiAgICBcIkpcIjogXCJNMCA4IEw0IDEyIEw4IDEyIEw4IDBcIixcbiAgICBcIktcIjogXCJNMCAxMiBMMCAwIE04IDAgTDAgNiBMNiAxMlwiLFxuICAgIFwiTFwiOiBcIk04IDEyIEwwIDEyIEwwIDBcIixcbiAgICBcIk1cIjogXCJNMCAxMiBMMCAwIEw0IDQgTDggMCBMOCAxMlwiLFxuICAgIFwiTlwiOiBcIk0wIDEyIEwwIDAgTDggMTIgTDggMFwiLFxuICAgIFwiT1wiOiBcIk0wIDEyIEwwIDAgTDggMCBMOCAxMiBMMCAxMlwiLFxuICAgIFwiUFwiOiBcIk0wIDEyIEwwIDAgTDggMCBMOCA2IEwwIDdcIixcbiAgICBcIlFcIjogXCJNMCAxMiBMMCAwIEw4IDAgTDggOCBMMCAxMiBNNCA4IEw4IDEyXCIsXG4gICAgXCJSXCI6IFwiTTAgMTIgTDAgMCBMOCAwIEw4IDYgTDAgNyBNNCA3IEw4IDEyXCIsXG4gICAgXCJTXCI6IFwiTTAgMTAgTDIgMTIgTDggMTIgTDggNyBMMCA1IEwwIDAgTDYgMCBMOCAyXCIsXG4gICAgXCJUXCI6IFwiTTAgMCBMOCAwIE00IDAgTDQgMTJcIixcbiAgICBcIlVcIjogXCJNMCAwIEwwIDEwIEw0IDEyIEw4IDEwIEw4IDBcIixcbiAgICBcIlZcIjogXCJNMCAwIEw0IDEyIEw4IDBcIixcbiAgICBcIldcIjogXCJNMCAwIEwyIDEyIEw0IDggTDYgMTIgTDggMFwiLFxuICAgIFwiWFwiOiBcIk0wIDEyIEw4IDAgTTAgMCBMOCAxMlwiLFxuICAgIFwiWVwiOiBcIk0wIDAgTDQgNiBMOCAwIE00IDYgTDQgMTJcIixcbiAgICBcIlpcIjogXCJNMCAwIEw4IDAgTDAgMTIgTDggMTIgTTIgNiBMNiA2XCJcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGV4dDNkRm9udERhdGE7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvd2ViZ2wvdGV4dDNkRm9udERhdGEuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46\n");

/***/ }),

/***/ 47:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createObject3dController = createObject3dController;\n\nvar _threeModule = __webpack_require__(2);\n\nvar _selectors = __webpack_require__(1);\n\nvar _object3dControllerBase = __webpack_require__(37);\n\nvar _object3dControllerBase2 = _interopRequireDefault(_object3dControllerBase);\n\nvar _euclid = __webpack_require__(39);\n\nvar _config = __webpack_require__(9);\n\nvar _util3d = __webpack_require__(8);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar TWO_PI = Math.PI * 2;\n\nfunction createObject3dController(specs, my) {\n  var that = void 0,\n      centreCircle3d = void 0,\n      centreDot3d = void 0,\n      select3d = void 0,\n      pointer3d = void 0,\n      necklace3d = void 0,\n      defaultColor = void 0,\n      lineMaterial = void 0,\n      duration = void 0,\n      pointerRotation = void 0,\n      pointerRotationPrevious = 0,\n      status = true,\n      euclid = void 0,\n      steps = void 0,\n      rotation = void 0,\n      centerRadius = 3,\n      centerScale = 0,\n      selectRadius = 2,\n      innerRadius = 4,\n      outerRadius = 6,\n      dotRadius = 1,\n      locatorRadius = 8,\n      zeroMarkerRadius = 0.5,\n      zeroMarkerY = outerRadius + zeroMarkerRadius + 1,\n      doublePI = Math.PI * 2,\n      initialize = function initialize() {\n    centreCircle3d = my.object3d.getObjectByName('centreCircle'), centreDot3d = my.object3d.getObjectByName('centreDot'), select3d = my.object3d.getObjectByName('select'), pointer3d = my.object3d.getObjectByName('pointer'), necklace3d = my.object3d.getObjectByName('necklace'), document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n\n    defaultColor = (0, _selectors.getThemeColors)().colorHigh;\n    lineMaterial = new _threeModule.LineBasicMaterial({\n      color: defaultColor\n    });\n\n    var params = specs.processorData.params.byId;\n    my.updateLabel(params.name.value);\n    updateNecklace(params.steps.value, params.pulses.value, params.rotation.value);\n    updateDuration(params.steps.value, params.rate.value);\n    updateRotation(params.rotation.value);\n    updatePointer();\n    my.updateConnectMode(specs.isConnectMode);\n  },\n      terminate = function terminate() {\n    document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n  },\n      handleStateChanges = function handleStateChanges(e) {\n    switch (e.detail.action.type) {\n      case e.detail.actions.CHANGE_PARAMETER:\n        if (e.detail.action.processorID === my.id) {\n          var params = e.detail.state.processors.byId[my.id].params.byId;\n          switch (e.detail.action.paramKey) {\n            case 'steps':\n            case 'pulses':\n              updateDuration(params.steps.value, params.rate.value);\n              updateNecklace(params.steps.value, params.pulses.value, params.rotation.value);\n              break;\n            case 'rotation':\n              updateRotation(params.rotation.value);\n              break;\n            default:\n          }\n        }\n\n      case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n        my.updatePosition(e.detail.state);\n        break;\n\n      case e.detail.actions.TOGGLE_CONNECT_MODE:\n        my.updateConnectMode(e.detail.state.connectModeActive);\n        break;\n\n      case e.detail.actions.SET_THEME:\n        updateTheme();\n        break;\n    }\n  },\n      updateNecklace = function updateNecklace(numSteps, pulses, rotation) {\n    var isMute = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    steps = numSteps;\n\n    // create the pattern\n    euclid = (0, _euclid.getEuclidPattern)(steps, pulses);\n    euclid = (0, _euclid.rotateEuclidPattern)(euclid, rotation);\n\n    necklace3d.geometry.dispose();\n    var points = [];\n\n    for (var i = 0, n = euclid.length; i < n; i++) {\n      var stepRadius = euclid[i] ? outerRadius : innerRadius;\n\n      var curve = new _threeModule.EllipseCurve(0, 0, // ax, aY\n      stepRadius, stepRadius, // xRadius, yRadius\n      i / n * doublePI - Math.PI / 2, // aStartAngle\n      (i + 1) / n * doublePI - Math.PI / 2, // aEndAngle\n      false, // aClockwise,\n      0);\n      points = [].concat(_toConsumableArray(points), _toConsumableArray(curve.getPoints(5)));\n    }\n\n    necklace3d.geometry.setFromPoints(points);\n  },\n      updateRotation = function updateRotation(numRotation) {\n    rotation = numRotation;\n    pointer3d.rotation.z = rotation / steps * -doublePI;\n  },\n\n\n  /**\n   * Redraw the location pointer and the status dot.\n   */\n  updatePointer = function updatePointer() {\n    var necklacePos = status ? outerRadius : innerRadius;\n    var halfWayPos = necklacePos + (locatorRadius - necklacePos) / 2;\n    var statusWidth = status ? 2.5 : 1;\n    var sides = status ? locatorRadius : halfWayPos;\n\n    pointer3d.geometry.dispose();\n    pointer3d.geometry = new _threeModule.BufferGeometry();\n\n    // position locator\n    var vertices = [0, centerRadius, 0, 0, locatorRadius, 0];\n\n    // status indicator\n    vertices = [].concat(_toConsumableArray(vertices), [-statusWidth, sides, 0, 0, necklacePos, 0, statusWidth, sides, 0, 0, locatorRadius, 0]);\n\n    pointer3d.geometry.addAttribute('position', new _threeModule.BufferAttribute(new Float32Array(vertices), 3));\n  },\n\n\n  /** \n   * Set theme colors on the 3D pattern.\n   */\n  updateTheme = function updateTheme() {\n    var themeColors = (0, _selectors.getThemeColors)();\n    setThemeColorRecursively(my.object3d, themeColors.colorHigh);\n  },\n\n\n  /** \n   * Loop through all the object3d's children to set the color.\n   * @param {Object3d} An Object3d of which to change the color.\n   * @param {String} HEx color string of the new color.\n   */\n  setThemeColorRecursively = function setThemeColorRecursively(object3d, color) {\n    if (object3d.material && object3d.material.color) {\n      object3d.material.color.set(color);\n    }\n    object3d.children.forEach(function (childObject3d) {\n      setThemeColorRecursively(childObject3d, color);\n    });\n  },\n\n\n  /**\n   * Update the hitarea used for mouse detection.\n   */\n  updateHitarea = function updateHitarea() {\n    var scale = (radius3d + 3) * 0.1;\n    my.hitarea3d.scale.set(scale, scale, 1);\n  },\n      updateLabelPosition = function updateLabelPosition() {\n    my.label3d.position.y = -radius3d - 2;\n  },\n\n\n  /**\n   * Show circle if the processor is selected, else hide.\n   * @param {Boolean} isSelected True if selected.\n   */\n  updateSelectCircle = function updateSelectCircle(selectedId) {\n    select3d.visible = my.id === selectedId;\n  },\n\n\n  /**\n   * Calculate the pattern's duration in milliseconds.\n   */\n  updateDuration = function updateDuration(steps, rate) {\n    // const rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value;\n    var stepDuration = rate * _config.PPQN;\n    duration = steps * stepDuration;\n  },\n\n\n  /**\n   * Show the playback position within the pattern.\n   * Indicated by the necklace's rotation.\n   * @param  {Number} position Position within pattern in ticks.\n   */\n  showPlaybackPosition = function showPlaybackPosition(position) {\n    pointerRotationPrevious = pointerRotation;\n    pointerRotation = TWO_PI * (-position % duration / duration);\n    necklace3d.rotation.z = pointerRotation;\n  },\n\n\n  /**\n   * Show animation of the pattern dot that is about to play. \n   * @param {Number} stepIndex Index of the step to play.\n   * @param {Number} noteStartDelay Delay from now until note start in ms.\n   * @param {Number} noteStopDelay Delay from now until note end in ms.\n   */\n  startNoteAnimation = function startNoteAnimation(stepIndex, noteStartDelay, noteStopDelay) {\n    // delay start of animation\n    setTimeout(function () {\n      centreDot3d.visible = true;\n      centerScale = 1;\n    }, noteStartDelay);\n  },\n\n\n  /**\n   * Update the current nacklace dot animations.\n   */\n  updateNoteAnimation = function updateNoteAnimation() {\n    centreDot3d.scale.set(centerScale, centerScale, 1);\n    centerScale *= 0.90;\n    if (centerScale <= 0.05) {\n      centreDot3d.visible = false;\n      centerScale = 0;\n    }\n  },\n\n\n  /**\n   * Redraw the pattern if needed.\n   * @param {Number} position Transport playback position in ticks.\n   * @param {Array} processorEvents Array of processor generated events to display.\n   */\n  draw = function draw(position, processorEvents) {\n    showPlaybackPosition(position);\n\n    // calculate status and redraw locator if needed\n    var currentStep = Math.floor(position % duration / duration * steps);\n    currentStep = (currentStep + rotation) % steps;\n    var currentStatus = euclid[currentStep];\n    if (currentStatus !== status) {\n      status = currentStatus;\n      updatePointer();\n    }\n\n    // start center dot animation\n    if (processorEvents[my.id] && processorEvents[my.id].length) {\n      var event = processorEvents[my.id][processorEvents[my.id].length - 1];\n      startNoteAnimation(event.stepIndex, event.delayFromNowToNoteStart, event.delayFromNowToNoteEnd);\n    }\n\n    // update center dot animation\n    if (centerScale !== 0) {\n      updateNoteAnimation();\n    }\n  };\n\n  my = my || {};\n\n  that = (0, _object3dControllerBase2.default)(specs, my);\n\n  initialize();\n\n  that.terminate = terminate;\n  that.updateSelectCircle = updateSelectCircle;\n  that.draw = draw;\n  return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47\n");

/***/ }),

/***/ 48:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createObject3dController = createObject3dController;\n\nvar _selectors = __webpack_require__(1);\n\nvar _object3dControllerBase = __webpack_require__(37);\n\nvar _object3dControllerBase2 = _interopRequireDefault(_object3dControllerBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createObject3dController(specs, my) {\n  var that = void 0,\n      centreCircle3d = void 0,\n      select3d = void 0,\n      initialize = function initialize() {\n    centreCircle3d = my.object3d.getObjectByName('centreCircle'), select3d = my.object3d.getObjectByName('select'), document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n\n    var params = specs.processorData.params.byId;\n    my.updateLabel(params.name.value);\n    my.updateConnectMode(specs.isConnectMode);\n  },\n      terminate = function terminate() {\n    document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n  },\n      handleStateChanges = function handleStateChanges(e) {\n    var processor = e.detail.state.processors.byId[my.id];\n    switch (e.detail.action.type) {\n\n      case e.detail.actions.UPDATE_MIDI_PORT:\n        redrawStaticCanvas();\n        break;\n\n      case e.detail.actions.CHANGE_PARAMETER:\n        if (e.detail.action.processorID === my.id) {\n          my.params = e.detail.state.processors.byId[my.id].params.byId;\n          switch (e.detail.action.paramKey) {\n            case 'port':\n              redrawStaticCanvas();\n              break;\n            case 'name':\n              my.updateLabel();\n              break;\n          }\n        }\n        break;\n\n      case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n        my.updatePosition(e.detail.state);\n        break;\n\n      case e.detail.actions.TOGGLE_CONNECT_MODE:\n        my.updateConnectMode(e.detail.state.connectModeActive);\n        break;\n\n      case e.detail.actions.SET_THEME:\n        updateTheme();\n        break;\n    }\n  },\n\n\n  /** \n   * Set theme colors on the 3D pattern.\n   */\n  updateTheme = function updateTheme() {\n    var themeColors = (0, _selectors.getThemeColors)();\n    setThemeColorRecursively(my.object3d, themeColors.colorHigh);\n  },\n\n\n  /** \n   * Loop through all the object3d's children to set the color.\n   * @param {Object3d} An Object3d of which to change the color.\n   * @param {String} HEx color string of the new color.\n   */\n  setThemeColorRecursively = function setThemeColorRecursively(object3d, color) {\n    if (object3d.material && object3d.material.color) {\n      object3d.material.color.set(color);\n    }\n    object3d.children.forEach(function (childObject3d) {\n      setThemeColorRecursively(childObject3d, color);\n    });\n  },\n\n\n  /**\n   * Show circle if the processor is selected, else hide.\n   * @param {Boolean} isSelected True if selected.\n   */\n  updateSelectCircle = function updateSelectCircle(selectedId) {\n    select3d.visible = my.id === selectedId;\n  },\n      draw = function draw(position, processorEvents) {};\n\n  my = my || {};\n\n  that = (0, _object3dControllerBase2.default)(specs, my);\n\n  initialize();\n\n  that.terminate = terminate;\n  that.updateSelectCircle = updateSelectCircle;\n  that.draw = draw;\n  return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n");

/***/ })

});