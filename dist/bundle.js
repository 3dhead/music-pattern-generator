/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 12);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.memoize = memoize;\nvar processors = {};\nvar MIDIPorts = {};\nvar remoteControlledParameters = {};\n\nfunction updateProcessors(state) {\n    processors = {};\n    state.processors.allIds.forEach(function (id) {\n        processors[id] = state.processors.byId[id];\n    });\n}\n\nfunction updateMIDIPorts(state) {\n    MIDIPorts = {};\n    state.ports.forEach(function (port) {\n        MIDIPorts[port.id] = port;\n    });\n}\n\nfunction updateRemoteControlledParameters(state) {\n    state.processors.allIds.forEach(function (id) {\n        state.processors.byId[id].parameters.forEach(function (parameter) {\n            if (parameter.remoteChannel && parameter.remoteCC) {\n                remoteControlledParameters[parameter.remoteChannel + \"-\" + parameter.remoteCC];\n            }\n        });\n    });\n}\n\nfunction memoize(state) {\n    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var actions = arguments[2];\n\n    switch (action.type) {\n        case actions.CREATE_PROCESSOR:\n        case actions.DELETE_PROCESSOR:\n        case actions.ADD_PROCESSOR:\n            updateProcessors(state);\n            break;\n        // case actions.ADD_MIDI_PORT:\n        // case actions.REMOVE_MIDI_PORT:\n        case actions.MIDI_PORT_CHANGE:\n        case actions.TOGGLE_PORT_SYNC:\n        case actions.TOGGLE_PORT_REMOTE:\n        case actions.TOGGLE_MIDI_PREFERENCE:\n            updateMIDIPorts(state);\n            break;\n        // case :\n        //     updateRemoteControlledParameters(state);\n        //     break;\n    }\n}\n\n/**\n * Memoised selector to access processors by id as object key.\n * Recreates the memoised data each time a processor is created or deleted.\n */\nvar getProcessorByID = exports.getProcessorByID = function getProcessorByID(id) {\n    return processors[id];\n};\n\nvar getMIDIPortByID = exports.getMIDIPortByID = function getMIDIPortByID(id) {\n    return MIDIPorts[id];\n};\n\nvar getRemoteControlledParameters = exports.getRemoteControlledParameters = function getRemoteControlledParameters(processorID, parameterKey) {\n    return remoteControlledParameters[processorID][parameterKey];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc2VsZWN0b3JzLmpzPzFmY2MiXSwibmFtZXMiOlsibWVtb2l6ZSIsInByb2Nlc3NvcnMiLCJNSURJUG9ydHMiLCJyZW1vdGVDb250cm9sbGVkUGFyYW1ldGVycyIsInVwZGF0ZVByb2Nlc3NvcnMiLCJzdGF0ZSIsImFsbElkcyIsImZvckVhY2giLCJpZCIsImJ5SWQiLCJ1cGRhdGVNSURJUG9ydHMiLCJwb3J0cyIsInBvcnQiLCJ1cGRhdGVSZW1vdGVDb250cm9sbGVkUGFyYW1ldGVycyIsInBhcmFtZXRlcnMiLCJwYXJhbWV0ZXIiLCJyZW1vdGVDaGFubmVsIiwicmVtb3RlQ0MiLCJhY3Rpb24iLCJhY3Rpb25zIiwidHlwZSIsIkNSRUFURV9QUk9DRVNTT1IiLCJERUxFVEVfUFJPQ0VTU09SIiwiQUREX1BST0NFU1NPUiIsIk1JRElfUE9SVF9DSEFOR0UiLCJUT0dHTEVfUE9SVF9TWU5DIiwiVE9HR0xFX1BPUlRfUkVNT1RFIiwiVE9HR0xFX01JRElfUFJFRkVSRU5DRSIsImdldFByb2Nlc3NvckJ5SUQiLCJnZXRNSURJUG9ydEJ5SUQiLCJnZXRSZW1vdGVDb250cm9sbGVkUGFyYW1ldGVycyIsInByb2Nlc3NvcklEIiwicGFyYW1ldGVyS2V5Il0sIm1hcHBpbmdzIjoiOzs7OztRQTRCZ0JBLE8sR0FBQUEsTztBQTVCaEIsSUFBSUMsYUFBYSxFQUFqQjtBQUNBLElBQUlDLFlBQVksRUFBaEI7QUFDQSxJQUFJQyw2QkFBNkIsRUFBakM7O0FBRUEsU0FBU0MsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQWlDO0FBQzdCSixpQkFBYSxFQUFiO0FBQ0FJLFVBQU1KLFVBQU4sQ0FBaUJLLE1BQWpCLENBQXdCQyxPQUF4QixDQUFnQyxjQUFNO0FBQ2xDTixtQkFBV08sRUFBWCxJQUFpQkgsTUFBTUosVUFBTixDQUFpQlEsSUFBakIsQ0FBc0JELEVBQXRCLENBQWpCO0FBQ0gsS0FGRDtBQUdIOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJMLEtBQXpCLEVBQWdDO0FBQzVCSCxnQkFBWSxFQUFaO0FBQ0FHLFVBQU1NLEtBQU4sQ0FBWUosT0FBWixDQUFvQixnQkFBUTtBQUN4Qkwsa0JBQVVVLEtBQUtKLEVBQWYsSUFBcUJJLElBQXJCO0FBQ0gsS0FGRDtBQUdIOztBQUVELFNBQVNDLGdDQUFULENBQTBDUixLQUExQyxFQUFpRDtBQUM3Q0EsVUFBTUosVUFBTixDQUFpQkssTUFBakIsQ0FBd0JDLE9BQXhCLENBQWdDLGNBQU07QUFDbENGLGNBQU1KLFVBQU4sQ0FBaUJRLElBQWpCLENBQXNCRCxFQUF0QixFQUEwQk0sVUFBMUIsQ0FBcUNQLE9BQXJDLENBQTZDLHFCQUFhO0FBQ3RELGdCQUFJUSxVQUFVQyxhQUFWLElBQTJCRCxVQUFVRSxRQUF6QyxFQUFtRDtBQUMvQ2QsMkNBQThCWSxVQUFVQyxhQUF4QyxTQUF5REQsVUFBVUUsUUFBbkU7QUFDSDtBQUNKLFNBSkQ7QUFLSCxLQU5EO0FBT0g7O0FBRU0sU0FBU2pCLE9BQVQsQ0FBaUJLLEtBQWpCLEVBQThDO0FBQUEsUUFBdEJhLE1BQXNCLHVFQUFiLEVBQWE7QUFBQSxRQUFUQyxPQUFTOztBQUNqRCxZQUFPRCxPQUFPRSxJQUFkO0FBQ0ksYUFBS0QsUUFBUUUsZ0JBQWI7QUFDQSxhQUFLRixRQUFRRyxnQkFBYjtBQUNBLGFBQUtILFFBQVFJLGFBQWI7QUFDSW5CLDZCQUFpQkMsS0FBakI7QUFDQTtBQUNKO0FBQ0E7QUFDQSxhQUFLYyxRQUFRSyxnQkFBYjtBQUNBLGFBQUtMLFFBQVFNLGdCQUFiO0FBQ0EsYUFBS04sUUFBUU8sa0JBQWI7QUFDQSxhQUFLUCxRQUFRUSxzQkFBYjtBQUNJakIsNEJBQWdCTCxLQUFoQjtBQUNBO0FBQ0o7QUFDQTtBQUNBO0FBaEJKO0FBa0JIOztBQUVEOzs7O0FBSU8sSUFBTXVCLDhDQUFtQixTQUFuQkEsZ0JBQW1CO0FBQUEsV0FBTTNCLFdBQVdPLEVBQVgsQ0FBTjtBQUFBLENBQXpCOztBQUVBLElBQU1xQiw0Q0FBa0IsU0FBbEJBLGVBQWtCO0FBQUEsV0FBTTNCLFVBQVVNLEVBQVYsQ0FBTjtBQUFBLENBQXhCOztBQUVBLElBQU1zQix3RUFBZ0MsU0FBaENBLDZCQUFnQyxDQUFDQyxXQUFELEVBQWNDLFlBQWQ7QUFBQSxXQUErQjdCLDJCQUEyQjRCLFdBQTNCLEVBQXdDQyxZQUF4QyxDQUEvQjtBQUFBLENBQXRDIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcHJvY2Vzc29ycyA9IHt9O1xubGV0IE1JRElQb3J0cyA9IHt9O1xubGV0IHJlbW90ZUNvbnRyb2xsZWRQYXJhbWV0ZXJzID0ge307XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2Nlc3NvcnMoc3RhdGUpIHtcbiAgICBwcm9jZXNzb3JzID0ge307XG4gICAgc3RhdGUucHJvY2Vzc29ycy5hbGxJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgIHByb2Nlc3NvcnNbaWRdID0gc3RhdGUucHJvY2Vzc29ycy5ieUlkW2lkXTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTUlESVBvcnRzKHN0YXRlKSB7XG4gICAgTUlESVBvcnRzID0ge307XG4gICAgc3RhdGUucG9ydHMuZm9yRWFjaChwb3J0ID0+IHtcbiAgICAgICAgTUlESVBvcnRzW3BvcnQuaWRdID0gcG9ydDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUmVtb3RlQ29udHJvbGxlZFBhcmFtZXRlcnMoc3RhdGUpIHtcbiAgICBzdGF0ZS5wcm9jZXNzb3JzLmFsbElkcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgc3RhdGUucHJvY2Vzc29ycy5ieUlkW2lkXS5wYXJhbWV0ZXJzLmZvckVhY2gocGFyYW1ldGVyID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXIucmVtb3RlQ2hhbm5lbCAmJiBwYXJhbWV0ZXIucmVtb3RlQ0MpIHtcbiAgICAgICAgICAgICAgICByZW1vdGVDb250cm9sbGVkUGFyYW1ldGVyc1tgJHtwYXJhbWV0ZXIucmVtb3RlQ2hhbm5lbH0tJHtwYXJhbWV0ZXIucmVtb3RlQ0N9YF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplKHN0YXRlLCBhY3Rpb24gPSB7fSwgYWN0aW9ucykge1xuICAgIHN3aXRjaChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIGFjdGlvbnMuQ1JFQVRFX1BST0NFU1NPUjpcbiAgICAgICAgY2FzZSBhY3Rpb25zLkRFTEVURV9QUk9DRVNTT1I6XG4gICAgICAgIGNhc2UgYWN0aW9ucy5BRERfUFJPQ0VTU09SOlxuICAgICAgICAgICAgdXBkYXRlUHJvY2Vzc29ycyhzdGF0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gY2FzZSBhY3Rpb25zLkFERF9NSURJX1BPUlQ6XG4gICAgICAgIC8vIGNhc2UgYWN0aW9ucy5SRU1PVkVfTUlESV9QT1JUOlxuICAgICAgICBjYXNlIGFjdGlvbnMuTUlESV9QT1JUX0NIQU5HRTpcbiAgICAgICAgY2FzZSBhY3Rpb25zLlRPR0dMRV9QT1JUX1NZTkM6XG4gICAgICAgIGNhc2UgYWN0aW9ucy5UT0dHTEVfUE9SVF9SRU1PVEU6XG4gICAgICAgIGNhc2UgYWN0aW9ucy5UT0dHTEVfTUlESV9QUkVGRVJFTkNFOlxuICAgICAgICAgICAgdXBkYXRlTUlESVBvcnRzKHN0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBjYXNlIDpcbiAgICAgICAgLy8gICAgIHVwZGF0ZVJlbW90ZUNvbnRyb2xsZWRQYXJhbWV0ZXJzKHN0YXRlKTtcbiAgICAgICAgLy8gICAgIGJyZWFrO1xuICAgIH1cbn1cblxuLyoqXG4gKiBNZW1vaXNlZCBzZWxlY3RvciB0byBhY2Nlc3MgcHJvY2Vzc29ycyBieSBpZCBhcyBvYmplY3Qga2V5LlxuICogUmVjcmVhdGVzIHRoZSBtZW1vaXNlZCBkYXRhIGVhY2ggdGltZSBhIHByb2Nlc3NvciBpcyBjcmVhdGVkIG9yIGRlbGV0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQcm9jZXNzb3JCeUlEID0gaWQgPT4gcHJvY2Vzc29yc1tpZF07XG5cbmV4cG9ydCBjb25zdCBnZXRNSURJUG9ydEJ5SUQgPSBpZCA9PiBNSURJUG9ydHNbaWRdO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVtb3RlQ29udHJvbGxlZFBhcmFtZXRlcnMgPSAocHJvY2Vzc29ySUQsIHBhcmFtZXRlcktleSkgPT4gcmVtb3RlQ29udHJvbGxlZFBhcmFtZXRlcnNbcHJvY2Vzc29ySURdW3BhcmFtZXRlcktleV07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3N0YXRlL3NlbGVjdG9ycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBaseParameter;\n\nvar _remote = __webpack_require__(19);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base parameter functionality.\n */\nfunction createBaseParameter(specs, my) {\n    var that,\n        defaultValue = specs.default,\n        changedCallbacks = [],\n\n\n    /**\n     * Call all callbacks if the parameter's value changed.\n     * @param {Number|String|Boolean|Array} oldValue Value before change.\n     */\n    valueChanged = function valueChanged(oldValue) {\n        if (oldValue == my.props.value) {\n            return;\n        }\n\n        for (var i = 0, n = changedCallbacks.length; i < n; i++) {\n            changedCallbacks[i](that, oldValue, my.props.value);\n        }\n    },\n\n\n    /**\n     * Adds a callback function, invoked on value changed.\n     * @param {Function} callback The function, that will be invoked on value changed.\n     */\n    addChangedCallback = function addChangedCallback(callback) {\n        changedCallbacks.push(callback);\n    },\n\n\n    /**\n     * Removes a callback function.\n     * @param {Function} callback The function that will be removed.\n     */\n    removeChangedCallback = function removeChangedCallback(callback) {\n        var index = changedCallbacks.indexOf(callback);\n        if (index > -1) {\n            changedCallbacks.splice(index, 1);\n        }\n    },\n\n\n    /**\n     * Reset value to its initial default value.\n     */\n    reset = function reset() {\n        setValue(defaultValue);\n    },\n\n\n    /**\n     * Sets the current value of the parameter.\n     * If changed, inform all callbacks.\n     */\n    setValue = function setValue(newValue) {\n        var oldValue = my.props.value;\n        my.props.value = newValue;\n        valueChanged(oldValue);\n    },\n\n\n    /**\n     * Returns the current value of the parameter.\n     * @return {*} Parameter value.\n     */\n    getValue = function getValue() {\n        return my.props.value;\n    },\n\n\n    /**\n     * Sets the current value of the parameter\n     * by passing a normalized value between 0 and 1.\n     * If changed, inform all callbacks.\n     * @param normalizedValue A normalized value between 0 and 1.\n     */\n    setValueNormalized = function setValueNormalized(normalizedValue) {\n        var oldValue = my.props.value;\n        my.props.value = my.deNormalize(normalizedValue);\n        valueChanged(oldValue);\n    },\n\n\n    /**\n     * Returns the current normalized value of the parameter between 0 and 1.\n     * @return {Number} Normalized value.\n     */\n    getValueNormalized = function getValueNormalized() {\n        return my.normalize(my.props.value);\n    },\n\n\n    /**\n     * Get a property's value.\n     * @param  {String} key Property name.\n     * @return {*} Property value.\n     */\n    getProperty = function getProperty(key) {\n        var propValue = void 0;\n        if (my.hasOwnProperty(key)) {\n            propValue = my[key];\n        } else if (my.props.hasOwnProperty(key)) {\n            propValue = my.props[key];\n        }\n        return propValue;\n    },\n\n\n    /**\n     * Restore processor from data object.\n     * @param {Object} data Preferences data object.\n     */\n    setData = function setData(data) {\n        for (var key in my.props) {\n            if (my.props.hasOwnProperty(key)) {\n                my.props[key] = data.props[key];\n            }\n        }\n        // use setValue to trigger callbacks\n        my.props.value = defaultValue;\n        setValue(data.props.value);\n    },\n\n\n    /**\n     * Write parameter properties to data object.\n     * @return {Object} Data object.\n     */\n    getData = function getData() {\n        var data = {\n            props: my.props\n        };\n        return data;\n    };\n\n    my = my || {};\n    my.props = {\n        value: specs.value || specs.default\n    };\n    my.type = specs.type;\n    my.label = specs.label;\n    my.key = specs.key;\n    my.isMidiControllable = specs.isMidiControllable;\n\n    that = specs.that || {};\n    if (my.isMidiControllable) {\n        that = (0, _remote2.default)(specs, my);\n    }\n\n    that.addChangedCallback = addChangedCallback;\n    that.removeChangedCallback = removeChangedCallback;\n    that.reset = reset;\n    that.setValue = setValue;\n    that.getValue = getValue;\n    that.setValueNormalized = setValueNormalized;\n    that.getValueNormalized = getValueNormalized;\n    that.getProperty = getProperty;\n    that.setData = setData;\n    that.getData = getData;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBaseSettingView;\n\nvar _remote = __webpack_require__(38);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nvar _selectors = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createBaseSettingView(specs, my) {\n    var that,\n        init = function init() {\n        // find template, add clone to settings panel\n        var template = document.querySelector('#template-setting-' + my.data.type);\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        specs.parentEl.appendChild(my.el);\n\n        // show label\n        my.el.querySelector('.setting__label-text').innerHTML = my.data.label;\n\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.CHANGE_PARAMETER:\n                    if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                        my.setValue((0, _selectors.getProcessorByID)(my.processorID).params[my.key].value);\n                    }\n                    break;\n\n                case e.detail.actions.RECREATE_PARAMETER:\n                    if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                        my.data = (0, _selectors.getProcessorByID)(my.processorID).params[my.key];\n                        my.initData();\n                    }\n                    break;\n\n                case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n                    if (my.data.isMidiControllable && e.detail.state.selectedID == my.processorID) {\n                        my.changeRemoteState(e.detail.state.learnModeActive ? 'enter' : 'exit');\n                    }\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                    if (my.data.isMidiControllable) {\n                        if (e.detail.state.learnModeActive) {\n                            my.changeRemoteState(e.detail.state.selectedID == my.processorID ? 'enter' : 'exit');\n                        }\n                    }\n                    break;\n\n                case e.detail.actions.TOGGLE_MIDI_LEARN_TARGET:\n                    if (my.data.isMidiControllable) {\n                        if (e.detail.state.learnModeActive) {\n                            var isTarget = e.detail.state.learnTargetProcessorID === my.processorID && e.detail.state.learnTargetParameterKey === my.key;\n                            my.changeRemoteState(isTarget ? 'selected' : 'deselected');\n                        }\n                    }\n                    break;\n\n                case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n                    if (my.data.isMidiControllable && e.detail.state.learnModeActive && e.detail.state.learnTargetProcessorID === my.processorID && e.detail.state.learnTargetParameterKey === my.key) {\n                        my.changeRemoteState('assigned');\n                    }\n                    break;\n\n                case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                    if (my.data.isMidiControllable && e.detail.state.learnModeActive && e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                        my.changeRemoteState('unassigned');\n                    }\n                    break;\n            }\n        });\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.key = specs.key;\n    my.data = specs.data;\n    my.processorID = specs.processorID;\n    my.el;\n\n    that = that || {};\n    if (my.data.isMidiControllable) {\n        that = (0, _remote2.default)(specs, my);\n    }\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDI;\nexports.getMIDIPortByID = getMIDIPortByID;\nvar midiAccess = void 0;\n\nfunction createMIDI(specs) {\n    var that,\n        store = specs.store,\n\n    // preferencesView = specs.preferencesView,\n    // midiNetwork = specs.midiNetwork,\n    // midiRemote = specs.midiRemote,\n    // midiSync = specs.midiSync,\n    // transport = specs.transport,\n    // midiAccess,\n    syncListeners = [],\n        remoteListeners = [],\n\n    // inputs = [],\n    // outputs = [],\n    // dataFromStorage,\n\n    init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.TOGGLE_PORT_SYNC:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    break;\n\n                case e.detail.actions.TOGGLE_PORT_REMOTE:\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n        connect = function connect() {\n        return new Promise(function (resolve, reject) {\n            requestAccess(resolve, onAccessFailure, false);\n        });\n    },\n\n\n    /**\n     * Request system for access to MIDI ports.\n     * @param {function} successCallback\n     * @param {function} failureCallback\n     * @param {boolean} sysex True if sysex data must be included.\n     */\n    requestAccess = function requestAccess(successCallback, failureCallback, sysex) {\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess({\n                sysex: !!sysex\n            }).then(function (_midiAccess) {\n                if (!_midiAccess.inputs.size && !_midiAccess.outputs.size) {\n                    failureCallback('No MIDI devices found on this system.');\n                } else {\n                    onAccessSuccess(_midiAccess);\n                    successCallback();\n                }\n            }, function () {\n                failureCallback('RequestMIDIAccess failed.');\n            });\n        } else {\n            failureCallback('Web MIDI API not available.');\n        }\n    },\n\n\n    /**\n     * MIDI access request failed.\n     * @param {String} errorMessage\n     */\n    onAccessFailure = function onAccessFailure(errorMessage) {\n        console.log(errorMessage);\n    },\n\n\n    /**\n     * MIDI access request succeeded.\n     * @param {Object} midiAccessObj MidiAccess object.\n     */\n    onAccessSuccess = function onAccessSuccess(_midiAccess) {\n        console.log('MIDI enabled.');\n        midiAccess = _midiAccess;\n\n        var inputs = midiAccess.inputs.values();\n        var outputs = midiAccess.outputs.values();\n\n        for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n            // createInput(port.value);\n            store.dispatch(store.getActions().midiPortChange(port.value));\n            port.value.onmidimessage = onMIDIMessage;\n        }\n\n        for (var _port = outputs.next(); _port && !_port.done; _port = outputs.next()) {\n            // createOutput(port.value);\n            store.dispatch(store.getActions().midiPortChange(_port.value));\n        }\n\n        // restorePortSettings();\n\n        midiAccess.onstatechange = onAccessStateChange;\n    },\n\n\n    /**\n     * MIDIAccess object statechange handler.\n     * If the change is the addition of a new port, create a port module.\n     * This handles MIDI devices that are connected after the app initialisation.\n     * Disconnected or reconnected ports are handled by the port modules.\n     * \n     * If this is\n     * @param {Object} e MIDIConnectionEvent object.\n     */\n    onAccessStateChange = function onAccessStateChange(e) {\n        console.log(e.port.type, e.port.state, e.port.connection, e.port.id);\n        store.dispatch(store.getActions().midiPortChange(e.port));\n\n        // let ports = (e.port.type == 'input') ? inputs : outputs,\n        //     exists = false,\n        //     n = ports.length;\n\n        // while (--n >= 0 && exists == false) {\n        //     exists = (e.port.id == ports[n].getID());\n        // }\n\n        // if (!exists) {\n        //     if (e.port.type == 'input') {\n        //         createInput(e.port);\n        //     } else {\n        //         createOutput(e.port);\n        //     }\n        // }\n    },\n\n\n    /**\n     * Create a MIDI input model and view.\n     * @param  {Object} midiPort MIDIInput module.\n     */\n    // createInput = function(midiPort) {\n    //     console.log(`MIDI input port: ${midiPort.name} (${midiPort.manufacturer})' ${midiPort.id}`);\n    //     midiPort.onmidimessage = onMIDIMessage;\n    //     store.dispatch(store.getActions().addMIDIPort(midiPort.id, midiPort.name, true));\n\n    // var input = ns.createMIDIPortInput({\n    //     midiPort: midiPort,\n    //     network: midiNetwork,\n    //     sync: midiSync,\n    //     remote: midiRemote\n    // });\n    // // create a view for this port in the preferences panel\n    // preferencesView.createMIDIPortView(true, input);\n    // // store port\n    // inputs.push(input);\n    // // port initialisation last\n    // input.setup();\n    // },\n\n    /**\n     * Create a MIDI output model and view.\n     * @param  {Object} midiPort MIDIOutput module.\n     */\n    // createOutput = function(midiPort) {\n    //     console.log(`MIDI output port: ${midiPort.name} (${midiPort.manufacturer})' ${midiPort.id}`);\n    //     store.dispatch(store.getActions().addMIDIPort(midiPort.id, midiPort.name, false));\n    // var output = ns.createMIDIPortOutput({\n    //     midiPort: midiPort,\n    //     network: midiNetwork,\n    //     sync: midiSync,\n    //     remote: midiRemote\n    // });\n    // // create a view for this port in the preferences panel\n    // preferencesView.createMIDIPortView(false, output);\n    // // store port\n    // outputs.push(output);\n    // // port initialisation last\n    // output.setup();\n    // },\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDISyncListeners = function updateMIDISyncListeners(ports) {\n        syncListeners = [];\n        ports.forEach(function (port) {\n            if (port.syncEnabled) {\n                syncListeners.push(port.id);\n            }\n        });\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDIRemoteListeners = function updateMIDIRemoteListeners(ports) {\n        syncListeners = [];\n        ports.forEach(function (port) {\n            if (port.remoteEnabled) {\n                remoteListeners.push(port.id);\n            }\n        });\n    },\n        onMIDIMessage = function onMIDIMessage(e) {\n        // console.log(e.data[0] & 0xf0, e.data[0] & 0x0f, e.target.id, e.data[0], e.data[1], e.data[2]);\n\n        switch (e.data[0] & 0xf0) {\n            case 240:\n                onSystemRealtimeMessage(e);\n                break;\n            case 176:\n                // CC\n                onControlChangeMessage(e);\n                break;\n            case 144: // note on\n            case 128:\n                // note off\n                // onNoteMessage(e);\n                break;\n        }\n    },\n\n\n    /**\n     * Eventlistener for incoming MIDI messages.\n     * data[1] and data[2] are undefined,\n     * for e.data[0] & 0xf:\n     * 8 = clock, 248 (11110000 | 00000100)\n     * 10 = start\n     * 11 = continue\n     * 12 = stop\n     * @see https://www.w3.org/TR/webmidi/#idl-def-MIDIMessageEvent\n     * @see https://www.midi.org/specifications/item/table-1-summary-of-midi-message\n     * @param  {Object} e MIDIMessageEvent event.\n     */\n    onSystemRealtimeMessage = function onSystemRealtimeMessage(e) {\n        if (syncListeners.indexOf(e.target.id) > -1) {\n            switch (e.data[0]) {\n                case 248:\n                    break;\n                case 250:\n                    store.dispatch(store.getActions().setTransport('stop'));\n                    break;\n                case 251:\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 252:\n                    store.dispatch(store.getActions().setTransport('pause'));\n                    break;\n            }\n        }\n    },\n        onControlChangeMessage = function onControlChangeMessage(e) {\n        // if any ports listen to remote data\n        if (remoteListeners.indexOf(e.target.id) > -1) {\n            store.dispatch(store.getActions().receiveMIDIControlChange(e.data));\n        }\n    },\n\n\n    // addMIDIMessageListener = function(callback) {\n    //     const exists = midiMessageListeners.find(listener => listener === callback);\n    //     if (!exists) {\n    //         midiMessageListeners.push(callback);\n    //     }\n    // },\n\n    // removeMIDIMessageListener = function(callback) {\n    //     const index = midiMessageListeners.findIndex(listener => listener === callback);\n    //     midiMessageListeners.splice(index, 1);\n    // },\n\n    /**\n     * Restore settings at initialisation.\n     * If port settings data from localStorage and \n     * access to MIDI ports exists, restore port settings.\n     */\n    // restorePortSettings = function() {\n    //     if (midiAccess && dataFromStorage) {\n    //         const data = dataFromStorage;\n\n    //         if (data.inputs) {\n    //             let inputData;\n    //             for (let i = 0, n = data.inputs.length; i < n; i++) {\n    //                 inputData = data.inputs[i];\n    //                 // find the input port by MIDIInput ID\n    //                 for (let j = 0, nn = inputs.length; j < nn; j++) {\n    //                     if (inputData.midiPortID == inputs[j].getID()) {\n    //                         inputs[j].setData(inputData);\n    //                     }\n    //                 }\n    //             }\n    //         }\n\n    //         if (data.outputs) {\n    //             let outputData;\n    //             for (let i = 0, n = data.outputs.length; i < n; i++) {\n    //                 outputData = data.outputs[i];\n    //                 // find the output port by MIDIOutput ID\n    //                 for (let j = 0, nn = outputs.length; j < nn; j++) {\n    //                     if (outputData.midiPortID == outputs[j].getID()) {\n    //                         outputs[j].setData(outputData);\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // },\n\n    // clearPortSettings = function() {\n    //     inputs.forEach(function(input) {\n    //         input.setData();\n    //     });\n    //     outputs.forEach(function(output) {\n    //         output.setData();\n    //     });\n    // },\n\n    /**\n     * Restore MIDI port object settings from data object.\n     * @param {Object} data Preferences data object.\n     */\n    // setData = function(data = {}) {\n    //     dataFromStorage = data;\n    //     clearPortSettings();\n    //     restorePortSettings();\n    // },\n\n    /**\n     * Write MIDI port object settings to data object.\n     * @return {Object} MIDI port object data.\n     */\n    // getData = function() {\n    //     const data = {\n    //         inputs: [],\n    //         outputs: []\n    //     };\n\n    //     for (let i = 0, n = inputs.length; i < n; i++) {\n    //         data.inputs.push(inputs[i].getData());\n    //     }\n\n    //     for (let i = 0, n = outputs.length; i < n; i++) {\n    //         data.outputs.push(outputs[i].getData());\n    //     }\n\n    //     return data;\n    // };\n\n    that = specs.that;\n\n    init();\n\n    that.connect = connect;\n    // that.addMIDIMessageListener = addMIDIMessageListener;\n    // that.removeMIDIMessageListener = removeMIDIMessageListener;\n    // that.setData = setData;\n    // that.getData = getData;\n    return that;\n}\n\nfunction getMIDIPortByID(id) {\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        if (port.value.id === id) {\n            return port.value;\n        }\n    }\n\n    for (var _port2 = outputs.next(); _port2 && !_port2.done; _port2 = outputs.next()) {\n        if (_port2.value.id === id) {\n            return _port2.value;\n        }\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIProcessorBase;\n\nvar _boolean = __webpack_require__(18);\n\nvar _boolean2 = _interopRequireDefault(_boolean);\n\nvar _integer = __webpack_require__(20);\n\nvar _integer2 = _interopRequireDefault(_integer);\n\nvar _itemized = __webpack_require__(21);\n\nvar _itemized2 = _interopRequireDefault(_itemized);\n\nvar _string = __webpack_require__(22);\n\nvar _string2 = _interopRequireDefault(_string);\n\nvar _vector2d = __webpack_require__(23);\n\nvar _vector2d2 = _interopRequireDefault(_vector2d);\n\nvar _connectorin = __webpack_require__(24);\n\nvar _connectorin2 = _interopRequireDefault(_connectorin);\n\nvar _connectorout = __webpack_require__(25);\n\nvar _connectorout2 = _interopRequireDefault(_connectorout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base functionality for all MIDI processors.\n */\nfunction createMIDIProcessorBase(specs, my) {\n    var that,\n\n\n    /**\n     * Create parameters from an object of parameter specifications.\n     * @param  {Object} paramSpecs Definitions of all the processor's parameters. \n     */\n    // defineParams = function(paramSpecs) {\n    //     for (var key in paramSpecs) {\n    //         paramSpecs[key].key = key;\n    //         switch(paramSpecs[key].type) {\n    //             case 'integer':\n    //                 my.params[key] = createIntegerParameter(paramSpecs[key]);\n    //                 break;\n    //             case 'boolean':\n    //                 my.params[key] = createBooleanParameter(paramSpecs[key]);\n    //                 break;\n    //             case 'itemized':\n    //                 my.params[key] = createItemizedParameter(paramSpecs[key]);\n    //                 break;\n    //             case 'string':\n    //                 my.params[key] = createStringParameter(paramSpecs[key]);\n    //                 break;\n    //             case 'vector2d':\n    //                 my.params[key] = createVector2DParameter(paramSpecs[key]);\n    //                 break;\n    //         }\n    //         // my.params[key].addChangedCallback(paramChangedCallback);\n    //     }\n    //     initParams();\n    // },\n\n    /**\n     * Set all parameter values from specs.\n     */\n    // initParams = function() {\n    //     for (var key in my.params) {\n    //         if (my.params.hasOwnProperty(key)) {\n    //             if (specs[key]) {\n    //                 my.params[key].setValue(specs[key]);\n    //             }\n    //         }\n    //     }\n    // },\n\n    /**\n     * Called by the processor's parameters if their value is changed.\n     */\n    // paramChangedCallback = function(parameter, oldValue, newValue) {\n    //     // call the plugin's handler for this parameter\n    //     my['$' + parameter.getProperty('key')](newValue);\n    // },\n\n    // setParamValue = function(key, value) {\n    //     if (my.params.hasOwnProperty(key)) {\n    //         my.params[key].setValue(value);\n    //     }\n    // },\n\n    // getParamValue = function(key) {\n    //     if (my.params.hasOwnProperty(key)) {\n    //         return my.params[key].getValue();\n    //     }\n    // },\n\n    // getParameters = function() {\n    //     return my.params;\n    // },\n\n    // hasParameter = function(param) {\n    //     for (var key in my.params) {\n    //         if (my.params.hasOwnProperty(key)) {\n    //             if (my.params[key] === param) {\n    //                 return true;\n    //             }\n    //         }\n    //     }\n    //     return false;\n    // },\n\n    /**\n     * General processor info.\n     * @return {Object} Processor properties info.\n     */\n    // getInfo = function() {\n    //     return my.info;\n    // },\n\n    getType = function getType() {\n        return my.type;\n    },\n\n\n    // setID = function(newId) {\n    //     id = newId;\n    // },\n\n    getID = function getID() {\n        return my.id;\n    };\n\n    /**\n     * Restore processor from data object.\n     * @param {Object} data Preferences data object.\n     */\n    // setData = function(data) {\n    //     for (var key in my.params) {\n    //         if (my.params.hasOwnProperty(key)) {\n    //             my.params[key].setData(data[key]);\n    //         }\n    //     }\n    // }, \n\n    /**\n     * Write processor settings to data object.\n     */\n    // getData = function() {\n    //     var data = {};\n    //     data.type = type;\n    //     data.id = id;\n\n    //     // parameters\n    //     for (var key in my.params) {\n    //         if (my.params.hasOwnProperty(key)) {\n    //             data[key] = my.params[key].getData();\n    //         }\n    //     }\n\n    //     // connections\n    //     if (typeof my.getDestinationsData == 'function') {\n    //         my.getDestinationsData(data);\n    //     }\n\n    //     // processor specific data\n    //     if (typeof my.getProcessorSpecificData == 'function') {\n    //         my.getProcessorSpecificData(data);\n    //     }\n    //     return data;\n    // };\n\n    my = my || {};\n    my.type = specs.data.type, my.id = specs.data.id, my.params = specs.data.params;\n    // my.defineParams = defineParams;\n\n    that = specs.that || {};\n    if (specs.data.inputs.allIds.length >= 1) {\n        that = (0, _connectorin2.default)(specs, my);\n    }\n    if (specs.data.outputs.allIds.length >= 1) {\n        that = (0, _connectorout2.default)(specs, my);\n    }\n\n    // defineParams(specs.params);\n\n    // that.setParamValue = setParamValue;\n    // that.getParamValue = getParamValue;\n    // that.getParameters = getParameters;\n    // that.hasParameter = hasParameter;\n    // that.getInfo = getInfo;\n    that.getType = getType;\n    // that.setID = setID;\n    that.getID = getID;\n    // that.setData = setData;\n    // that.getData = getData;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n        value: true\n});\n/**\n * Unchangeable application configuration settings.\n */\nvar PPQN = exports.PPQN = 480;\n\n// window.WH = window.WH || {};\n\n// (function (WH) {\n\n//     /**\n//      * @constructor\n//      */\n//     function createConf() {\n\n//         var that = {},\n//             patternCount = 16,\n//             trackCount = 4,\n//             patternDurationInBeats = 4,\n//             stepsPerBeat = 4,\n//             ppqn = 480;\n\n//         that.getPatternCount = function() {\n//             return patternCount;\n//         };\n\n//         that.getTrackCount = function() {\n//             return trackCount;\n//         };\n\n//         that.getPatternDurationInBeats = function() {\n//             return patternDurationInBeats;\n//         };\n\n//         that.getStepsPerBeat = function() {\n//             return stepsPerBeat;\n//         };\n\n//         that.getStepCount = function() {\n//             return patternDurationInBeats * stepsPerBeat;\n//         };\n\n//         that.getPPQN = function() {\n//             return ppqn;\n//         };\n\n//         return that;\n//     }\n\n//     /** \n//      * Singleton\n//      */\n//     WH.conf = createConf();\n// })(WH);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS9jb25maWcuanM/ZDg1NiJdLCJuYW1lcyI6WyJQUFFOIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7QUFHTyxJQUFNQSxzQkFBTyxHQUFiOztBQUVQOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVW5jaGFuZ2VhYmxlIGFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MuXG4gKi9cbmV4cG9ydCBjb25zdCBQUFFOID0gNDgwO1xuXG4vLyB3aW5kb3cuV0ggPSB3aW5kb3cuV0ggfHwge307XG5cbi8vIChmdW5jdGlvbiAoV0gpIHtcblxuLy8gICAgIC8qKlxuLy8gICAgICAqIEBjb25zdHJ1Y3RvclxuLy8gICAgICAqL1xuLy8gICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbmYoKSB7XG5cbi8vICAgICAgICAgdmFyIHRoYXQgPSB7fSxcbi8vICAgICAgICAgICAgIHBhdHRlcm5Db3VudCA9IDE2LFxuLy8gICAgICAgICAgICAgdHJhY2tDb3VudCA9IDQsXG4vLyAgICAgICAgICAgICBwYXR0ZXJuRHVyYXRpb25JbkJlYXRzID0gNCxcbi8vICAgICAgICAgICAgIHN0ZXBzUGVyQmVhdCA9IDQsXG4vLyAgICAgICAgICAgICBwcHFuID0gNDgwO1xuXG4vLyAgICAgICAgIHRoYXQuZ2V0UGF0dGVybkNvdW50ID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gcGF0dGVybkNvdW50O1xuLy8gICAgICAgICB9O1xuXG4vLyAgICAgICAgIHRoYXQuZ2V0VHJhY2tDb3VudCA9IGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIHRyYWNrQ291bnQ7XG4vLyAgICAgICAgIH07XG5cbi8vICAgICAgICAgdGhhdC5nZXRQYXR0ZXJuRHVyYXRpb25JbkJlYXRzID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gcGF0dGVybkR1cmF0aW9uSW5CZWF0cztcbi8vICAgICAgICAgfTtcblxuLy8gICAgICAgICB0aGF0LmdldFN0ZXBzUGVyQmVhdCA9IGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIHN0ZXBzUGVyQmVhdDtcbi8vICAgICAgICAgfTtcblxuLy8gICAgICAgICB0aGF0LmdldFN0ZXBDb3VudCA9IGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm5EdXJhdGlvbkluQmVhdHMgKiBzdGVwc1BlckJlYXQ7XG4vLyAgICAgICAgIH07XG4gICAgICAgIFxuLy8gICAgICAgICB0aGF0LmdldFBQUU4gPSBmdW5jdGlvbigpIHtcbi8vICAgICAgICAgICAgIHJldHVybiBwcHFuO1xuLy8gICAgICAgICB9O1xuICAgICAgICBcbi8vICAgICAgICAgcmV0dXJuIHRoYXQ7XG4vLyAgICAgfVxuICAgIFxuLy8gICAgIC8qKiBcbi8vICAgICAgKiBTaW5nbGV0b25cbi8vICAgICAgKi9cbi8vICAgICBXSC5jb25mID0gY3JlYXRlQ29uZigpO1xuLy8gfSkoV0gpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL2NvcmUvY29uZmlnLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    var cacheKey = steps + '_' + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    var pauses = steps - pulses;\n    if (pulses >= steps) {\n        return buildPatternListFilledWith(steps, true);\n    } else if (steps == 1) {\n        return buildPatternListFilledWith(steps, pulses == 1);\n    } else if (steps == 0 || pulses == 0) {\n        return buildPatternListFilledWith(steps, false);\n    } else {\n        var distribution = [];\n        for (var i = 0; i < steps; i++) {\n            distribution.push([i < pulses]);\n        }\n        return splitDistributionAndContinue(distribution, pauses);\n    }\n}\n\n/**\n * Divide as much as possible of the remainder over the distribution arrays.\n * @param {Array} distributionArray Two dimensional array of booleans.\n * @param {Number} remainder Amount of items not yet in distribution array.\n * @return {Function} One dimensional array of booleans, the Euclidean pattern.\n */\nfunction splitDistributionAndContinue(distributionArray, remainder) {\n    var newDistributionArray = [],\n        newRemainderArray = [];\n    if (remainder == 0) {\n        newDistributionArray = distributionArray;\n    } else {\n        var newDistributionSize = distributionArray.length - remainder;\n        for (var i = 0, n = distributionArray.length; i < n; i++) {\n            if (i < newDistributionSize) {\n                newDistributionArray.push(distributionArray[i]);\n            } else {\n                newRemainderArray.push(distributionArray[i]);\n            }\n        }\n    }\n    return bjorklund(newDistributionArray, newRemainderArray);\n}\n\n/**\n * Divide as much as possible of the remainder over the distribution arrays.\n * @param {Object} distributionArray Two dimensional array.\n * @param {Object} remainderArray Two dimensional array.\n * @return {Object} One dimensional array of booleans, the Euclidean pattern.\n */\nfunction bjorklund(distributionArray, remainderArray) {\n    // handy for debugging\n    // console.log('distributionArray', toStringArrayList(distributionArray)); \n    // console.log('remainderArray', toStringArrayList(remainderArray));\n\n    if (remainderArray.length <= 1) {\n        return flattenArrays([distributionArray, remainderArray]);\n    } else {\n        var fullRounds = Math.floor(remainderArray.length / distributionArray.length),\n            remainder = remainderArray.length % distributionArray.length,\n            newRemainder = remainder == 0 ? 0 : distributionArray.length - remainder;\n        for (var i = 0; i < fullRounds; i++) {\n            var p = distributionArray.length;\n            for (var j = 0; j < p; j++) {\n                distributionArray[j].push(remainderArray.shift());\n            }\n        }\n        for (var _i = 0; _i < remainder; _i++) {\n            distributionArray[_i].push(remainderArray.shift());\n        }\n\n        return splitDistributionAndContinue(distributionArray, newRemainder);\n    }\n}\n\n/**\n * Create a pattern filled with only pulses or silences.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Boolen} value Value to fill the array with, true for pulses.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction buildPatternListFilledWith(steps, value) {\n    var distribution = [];\n    for (var i = 0; i < steps; i++) {\n        distribution.push(value);\n    }\n    return distribution;\n}\n\n/**\n * Flatten a multidimensional array.\n * @param {Object} arr The array to flatten.\n * @return {Object} One dimensional flattened array.\n */\nfunction flattenArrays(arr) {\n    return arr.reduce(function (flat, toFlatten) {\n        return flat.concat(Array.isArray(toFlatten) ? flattenArrays(toFlatten) : toFlatten);\n    }, []);\n}\n\nfunction toStringArrayList(arrayList) {\n    var str = '';\n    for (var i = 0, n = arrayList.length; i < n; i++) {\n        str += '[' + arrayList[i] + ']';\n    }\n    return str;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createUUID = createUUID;\n/**\n * Utilities\n * Mouse or touch event detection.\n */\nvar util = exports.util = function () {\n    var isTouchDevice = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch;\n\n    /**\n     * Type of events to use, touch or mouse\n     * @type {String}\n     */\n    var eventType = {\n        start: isTouchDevice ? 'touchstart' : 'mousedown',\n        end: isTouchDevice ? 'touchend' : 'mouseup',\n        click: isTouchDevice ? 'touchend' : 'click',\n        move: isTouchDevice ? 'touchmove' : 'mousemove'\n    };\n\n    return {\n        isTouchDevice: isTouchDevice,\n        eventType: eventType\n    };\n}();\n\n/**\n * Create a fairly unique ID.\n * @see https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\nfunction createUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS91dGlsLmpzPzg5OWEiXSwibmFtZXMiOlsiY3JlYXRlVVVJRCIsInV0aWwiLCJpc1RvdWNoRGV2aWNlIiwid2luZG93IiwiRG9jdW1lbnRUb3VjaCIsImRvY3VtZW50IiwiZXZlbnRUeXBlIiwic3RhcnQiLCJlbmQiLCJjbGljayIsIm1vdmUiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwidiIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7OztRQThCZ0JBLFUsR0FBQUEsVTtBQTlCaEI7Ozs7QUFJTyxJQUFNQyxzQkFBUyxZQUFXO0FBQzdCLFFBQU1DLGdCQUFnQixrQkFBa0JDLE1BQWxCLElBQTRCQSxPQUFPQyxhQUFQLElBQXdCQyxvQkFBb0JELGFBQTlGOztBQUVBOzs7O0FBSUEsUUFBTUUsWUFBWTtBQUNkQyxlQUFPTCxnQkFBZ0IsWUFBaEIsR0FBK0IsV0FEeEI7QUFFZE0sYUFBS04sZ0JBQWdCLFVBQWhCLEdBQTZCLFNBRnBCO0FBR2RPLGVBQU9QLGdCQUFnQixVQUFoQixHQUE2QixPQUh0QjtBQUlkUSxjQUFNUixnQkFBZ0IsV0FBaEIsR0FBOEI7QUFKdEIsS0FBbEI7O0FBU0EsV0FBTztBQUNIQSx1QkFBZUEsYUFEWjtBQUVISSxtQkFBV0E7QUFGUixLQUFQO0FBSUgsQ0FwQm1CLEVBQWI7O0FBc0JQOzs7O0FBSU8sU0FBU04sVUFBVCxHQUFzQjtBQUN6QixXQUFPLHVDQUF1Q1csT0FBdkMsQ0FBK0MsT0FBL0MsRUFBd0QsVUFBU0MsQ0FBVCxFQUFZO0FBQ3ZFLFlBQUlDLElBQUlDLEtBQUtDLE1BQUwsS0FBZ0IsRUFBaEIsR0FBcUIsQ0FBN0I7QUFBQSxZQUFnQ0MsSUFBSUosS0FBSyxHQUFMLEdBQVdDLENBQVgsR0FBZ0JBLElBQUksR0FBSixHQUFVLEdBQTlEO0FBQ0EsZUFBT0csRUFBRUMsUUFBRixDQUFXLEVBQVgsQ0FBUDtBQUNILEtBSE0sQ0FBUDtBQUlIIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllc1xuICogTW91c2Ugb3IgdG91Y2ggZXZlbnQgZGV0ZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgdXRpbCA9ICggZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaXNUb3VjaERldmljZSA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g7XG4gICAgXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBldmVudHMgdG8gdXNlLCB0b3VjaCBvciBtb3VzZVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgY29uc3QgZXZlbnRUeXBlID0ge1xuICAgICAgICBzdGFydDogaXNUb3VjaERldmljZSA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLFxuICAgICAgICBlbmQ6IGlzVG91Y2hEZXZpY2UgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnLFxuICAgICAgICBjbGljazogaXNUb3VjaERldmljZSA/ICd0b3VjaGVuZCcgOiAnY2xpY2snLFxuICAgICAgICBtb3ZlOiBpc1RvdWNoRGV2aWNlID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJyxcbiAgICB9O1xuXG4gICAgXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpc1RvdWNoRGV2aWNlOiBpc1RvdWNoRGV2aWNlLFxuICAgICAgICBldmVudFR5cGU6IGV2ZW50VHlwZVxuICAgIH1cbn0pKCk7XG5cbi8qKlxuICogQ3JlYXRlIGEgZmFpcmx5IHVuaXF1ZSBJRC5cbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2NyZWF0ZS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVVVJRCgpIHtcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCwgdiA9IGMgPT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL2NvcmUvdXRpbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = addWindowResize;\n/**\n * Window resize listener functionality.\n * Add callback functions that will be called on window resize,\n * but debounced to not be called more that every so many milliseconds.\n */\nvar debouncedFunction,\n    callbacks = [],\n    delay = 250,\n\n\n/**\n * Returns a function, that, as long as it continues to be invoked, \n * will not be triggered. The function will be called after it \n * stops being called for N milliseconds. If `immediate` is passed, \n * trigger the function on the leading edge, instead of the trailing.\n * @see https://davidwalsh.name/javascript-debounce-function\n * @param  {Function} func Function to call after delay.\n * @param  {Number} wait Milliseconds to wait before next call.\n * @param  {Boolean} immediate True to not wait.\n */\ndebounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function () {\n        var context = this,\n            args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\n\nfunction addWindowResize(specs, my) {\n    var that,\n\n\n    /**\n     * Add callback function to be called on debounced resize.\n     * @param  {Function} callback Callback function.\n     */\n    addWindowResizeCallback = function addWindowResizeCallback(callback) {\n        callbacks.push(callback);\n        if (!debouncedFunction) {\n            debouncedFunction = debounce(function () {\n                callbacks.forEach(function (callbackFunction) {\n                    callbackFunction();\n                });\n            }, delay);\n            window.addEventListener('resize', debouncedFunction);\n        }\n    };\n\n    my = my || {};\n    my.addWindowResizeCallback = addWindowResizeCallback;\n\n    that = specs.that || {};\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy93aW5kb3dyZXNpemUuanM/OTM1MiJdLCJuYW1lcyI6WyJhZGRXaW5kb3dSZXNpemUiLCJkZWJvdW5jZWRGdW5jdGlvbiIsImNhbGxiYWNrcyIsImRlbGF5IiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImxhdGVyIiwiYXBwbHkiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInNwZWNzIiwibXkiLCJ0aGF0IiwiYWRkV2luZG93UmVzaXplQ2FsbGJhY2siLCJjYWxsYmFjayIsInB1c2giLCJmb3JFYWNoIiwiY2FsbGJhY2tGdW5jdGlvbiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQW9Dd0JBLGU7QUFwQ3hCOzs7OztBQUtBLElBQUlDLGlCQUFKO0FBQUEsSUFDSUMsWUFBWSxFQURoQjtBQUFBLElBRUlDLFFBQVEsR0FGWjs7O0FBSUk7Ozs7Ozs7Ozs7QUFVQUMsV0FBVyxTQUFYQSxRQUFXLENBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFxQkMsU0FBckIsRUFBZ0M7QUFDdkMsUUFBSUMsT0FBSjtBQUNBLFdBQU8sWUFBVztBQUNkLFlBQUlDLFVBQVUsSUFBZDtBQUFBLFlBQW9CQyxPQUFPQyxTQUEzQjtBQUNBLFlBQUlDLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ25CSixzQkFBVSxJQUFWO0FBQ0EsZ0JBQUksQ0FBQ0QsU0FBTCxFQUFnQjtBQUNaRixxQkFBS1EsS0FBTCxDQUFXSixPQUFYLEVBQW9CQyxJQUFwQjtBQUNIO0FBQ0osU0FMRDtBQU1BLFlBQUlJLFVBQVVQLGFBQWEsQ0FBQ0MsT0FBNUI7QUFDQU8scUJBQWFQLE9BQWI7QUFDQUEsa0JBQVVRLFdBQVdKLEtBQVgsRUFBa0JOLElBQWxCLENBQVY7QUFDQSxZQUFJUSxPQUFKLEVBQWFULEtBQUtRLEtBQUwsQ0FBV0osT0FBWCxFQUFvQkMsSUFBcEI7QUFDaEIsS0FaRDtBQWFILENBN0JMOztBQStCZSxTQUFTVixlQUFULENBQXlCaUIsS0FBekIsRUFBZ0NDLEVBQWhDLEVBQW9DO0FBQy9DLFFBQUlDLElBQUo7OztBQUVJOzs7O0FBSUFDLDhCQUEwQixTQUExQkEsdUJBQTBCLENBQVNDLFFBQVQsRUFBbUI7QUFDekNuQixrQkFBVW9CLElBQVYsQ0FBZUQsUUFBZjtBQUNBLFlBQUksQ0FBQ3BCLGlCQUFMLEVBQXdCO0FBQ3BCQSxnQ0FBb0JHLFNBQVMsWUFBVztBQUNwQ0YsMEJBQVVxQixPQUFWLENBQWtCLFVBQVNDLGdCQUFULEVBQTJCO0FBQ3pDQTtBQUNILGlCQUZEO0FBR0gsYUFKbUIsRUFJakJyQixLQUppQixDQUFwQjtBQUtBc0IsbUJBQU9DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDekIsaUJBQWxDO0FBQ0g7QUFDSixLQWhCTDs7QUFrQkFpQixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0UsdUJBQUgsR0FBNkJBLHVCQUE3Qjs7QUFFQUQsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBLFdBQU9BLElBQVA7QUFDSCIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXaW5kb3cgcmVzaXplIGxpc3RlbmVyIGZ1bmN0aW9uYWxpdHkuXG4gKiBBZGQgY2FsbGJhY2sgZnVuY3Rpb25zIHRoYXQgd2lsbCBiZSBjYWxsZWQgb24gd2luZG93IHJlc2l6ZSxcbiAqIGJ1dCBkZWJvdW5jZWQgdG8gbm90IGJlIGNhbGxlZCBtb3JlIHRoYXQgZXZlcnkgc28gbWFueSBtaWxsaXNlY29uZHMuXG4gKi9cbnZhciBkZWJvdW5jZWRGdW5jdGlvbixcbiAgICBjYWxsYmFja3MgPSBbXSxcbiAgICBkZWxheSA9IDI1MCxcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIFxuICAgICAqIHdpbGwgbm90IGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IFxuICAgICAqIHN0b3BzIGJlaW5nIGNhbGxlZCBmb3IgTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgXG4gICAgICogdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gICAgICogQHNlZSBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9qYXZhc2NyaXB0LWRlYm91bmNlLWZ1bmN0aW9uXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZ1bmMgRnVuY3Rpb24gdG8gY2FsbCBhZnRlciBkZWxheS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHdhaXQgTWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIG5leHQgY2FsbC5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpbW1lZGlhdGUgVHJ1ZSB0byBub3Qgd2FpdC5cbiAgICAgKi9cbiAgICBkZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgdGltZW91dDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRXaW5kb3dSZXNpemUoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBkZWJvdW5jZWQgcmVzaXplLlxuICAgICAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRXaW5kb3dSZXNpemVDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoIWRlYm91bmNlZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgZGVib3VuY2VkRnVuY3Rpb24gPSBkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2tGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tGdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlZEZ1bmN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LmFkZFdpbmRvd1Jlc2l6ZUNhbGxiYWNrID0gYWRkV2luZG93UmVzaXplQ2FsbGJhY2s7XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvd2luZG93cmVzaXplLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorBaseView;\n\nvar _selectors = __webpack_require__(0);\n\nfunction createCanvasProcessorBaseView(specs, my) {\n    var that,\n        connectorGraphic,\n        init = function init() {\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                    var processor = (0, _selectors.getProcessorByID)(my.data.id);\n                    my.positionX = processor.positionX;\n                    my.positionY = processor.positionY;\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Base functionality for processor canvas views.\n     */\n    // getConnectorGraphic = function() {\n    //     if (!connectorGraphic) {\n    //         const canvas = document.createElement('canvas'),\n    //             ctx = canvas.getContext('2d'),\n    //             radius = 12,\n    //             lineWidth = 2,\n    //             resource = {\n    //                 radius: radius,\n    //                 lineWidth: lineWidth,\n    //                 canvas: canvas,\n    //                 ctx: ctx,\n    //                 setTheme: function(theme) {\n    //                     console.log(theme);\n    //                     this.ctx.lineWidth = this.lineWidth;\n    //                     this.ctx.strokeStyle = theme ? theme.colorHigh : '#333';\n    //                     this.ctx.setLineDash([4, 4]);\n    //                     this.ctx.translate(this.canvas.width / 2, this.canvas.height / 2);\n    //                     this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    //                     this.ctx.moveTo(this.radius, 0);\n    //                     this.ctx.arc(0, 0, this.radius, 0, Math.PI * 2, true);\n    //                     this.ctx.stroke();\n    //                 }\n    //             };\n\n    //         canvas.width = (radius + lineWidth) * 2;\n    //         canvas.height = (radius + lineWidth) * 2;\n    //         connectorGraphic = resource;\n    //     }\n    //     return connectorGraphic;\n    // },\n\n    // getProcessor = function() {\n    //     return my.processor;\n    // },\n\n    getPosition2d = function getPosition2d() {\n        return {\n            x: my.data.positionX,\n            y: my.data.positionY\n        };\n    },\n        getType = function getType() {\n        return my.data.type;\n    },\n        getID = function getID() {\n        return my.data.id;\n    };\n\n    my = my || {};\n    my.data = specs.data;\n    my.store = specs.store;\n    // my.processor = specs.processor;\n    my.positionX = 0;\n    my.positionY = 0;\n    // my.getConnectorGraphic = getConnectorGraphic;\n    my.colorHigh = '#cccccc';\n    my.colorMid = '#dddddd';\n    my.colorLow = '#eeeeee';\n\n    that = specs.that || {};\n\n    init();\n\n    // that.getProcessor = getProcessor;\n    // that.setPosition2d = setPosition2d;\n    that.getPosition2d = getPosition2d;\n    that.getID = getID;\n    that.getType = getType;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9jYW52YXNwcm9jZXNzb3JiYXNlLmpzP2VjMjkiXSwibmFtZXMiOlsiY3JlYXRlQ2FudmFzUHJvY2Vzc29yQmFzZVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImNvbm5lY3RvckdyYXBoaWMiLCJpbml0IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcmUiLCJTVEFURV9DSEFOR0UiLCJlIiwiZGV0YWlsIiwiYWN0aW9uIiwidHlwZSIsImFjdGlvbnMiLCJEUkFHX1NFTEVDVEVEX1BST0NFU1NPUiIsIkRSQUdfQUxMX1BST0NFU1NPUlMiLCJwcm9jZXNzb3IiLCJkYXRhIiwiaWQiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJnZXRQb3NpdGlvbjJkIiwieCIsInkiLCJnZXRUeXBlIiwiZ2V0SUQiLCJjb2xvckhpZ2giLCJjb2xvck1pZCIsImNvbG9yTG93Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFFd0JBLDZCOztBQUZ4Qjs7QUFFZSxTQUFTQSw2QkFBVCxDQUF1Q0MsS0FBdkMsRUFBOENDLEVBQTlDLEVBQWtEO0FBQzdELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxnQkFESjtBQUFBLFFBR0lDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RDLGlCQUFTQyxnQkFBVCxDQUEwQkwsR0FBR00sS0FBSCxDQUFTQyxZQUFuQyxFQUFpRCxVQUFDQyxDQUFELEVBQU87QUFDcEQsb0JBQVFBLEVBQUVDLE1BQUYsQ0FBU0MsTUFBVCxDQUFnQkMsSUFBeEI7QUFDSSxxQkFBS0gsRUFBRUMsTUFBRixDQUFTRyxPQUFULENBQWlCQyx1QkFBdEI7QUFDQSxxQkFBS0wsRUFBRUMsTUFBRixDQUFTRyxPQUFULENBQWlCRSxtQkFBdEI7QUFDSSx3QkFBTUMsWUFBWSxpQ0FBaUJmLEdBQUdnQixJQUFILENBQVFDLEVBQXpCLENBQWxCO0FBQ0FqQix1QkFBR2tCLFNBQUgsR0FBZUgsVUFBVUcsU0FBekI7QUFDQWxCLHVCQUFHbUIsU0FBSCxHQUFlSixVQUFVSSxTQUF6QjtBQUNBO0FBTlI7QUFRSCxTQVREO0FBVUgsS0FkTDs7O0FBZ0JJOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUFDLG9CQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPO0FBQ0hDLGVBQUdyQixHQUFHZ0IsSUFBSCxDQUFRRSxTQURSO0FBRUhJLGVBQUd0QixHQUFHZ0IsSUFBSCxDQUFRRztBQUZSLFNBQVA7QUFJSCxLQTNETDtBQUFBLFFBNkRJSSxVQUFVLFNBQVZBLE9BQVUsR0FBVztBQUNqQixlQUFPdkIsR0FBR2dCLElBQUgsQ0FBUUwsSUFBZjtBQUNILEtBL0RMO0FBQUEsUUFpRUlhLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ2YsZUFBT3hCLEdBQUdnQixJQUFILENBQVFDLEVBQWY7QUFDSCxLQW5FTDs7QUFxRUFqQixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR2dCLElBQUgsR0FBVWpCLE1BQU1pQixJQUFoQjtBQUNBaEIsT0FBR00sS0FBSCxHQUFXUCxNQUFNTyxLQUFqQjtBQUNBO0FBQ0FOLE9BQUdrQixTQUFILEdBQWUsQ0FBZjtBQUNBbEIsT0FBR21CLFNBQUgsR0FBZSxDQUFmO0FBQ0E7QUFDQW5CLE9BQUd5QixTQUFILEdBQWUsU0FBZjtBQUNBekIsT0FBRzBCLFFBQUgsR0FBYyxTQUFkO0FBQ0ExQixPQUFHMkIsUUFBSCxHQUFjLFNBQWQ7O0FBRUExQixXQUFPRixNQUFNRSxJQUFOLElBQWMsRUFBckI7O0FBRUFFOztBQUVBO0FBQ0E7QUFDQUYsU0FBS21CLGFBQUwsR0FBcUJBLGFBQXJCO0FBQ0FuQixTQUFLdUIsS0FBTCxHQUFhQSxLQUFiO0FBQ0F2QixTQUFLc0IsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsV0FBT3RCLElBQVA7QUFDSCIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UHJvY2Vzc29yQnlJRCB9IGZyb20gJy4uL3N0YXRlL3NlbGVjdG9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNhbnZhc1Byb2Nlc3NvckJhc2VWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBjb25uZWN0b3JHcmFwaGljLFxuXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobXkuc3RvcmUuU1RBVEVfQ0hBTkdFLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5kZXRhaWwuYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLkRSQUdfU0VMRUNURURfUFJPQ0VTU09SOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIGUuZGV0YWlsLmFjdGlvbnMuRFJBR19BTExfUFJPQ0VTU09SUzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IGdldFByb2Nlc3NvckJ5SUQobXkuZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBteS5wb3NpdGlvblggPSBwcm9jZXNzb3IucG9zaXRpb25YO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXkucG9zaXRpb25ZID0gcHJvY2Vzc29yLnBvc2l0aW9uWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYXNlIGZ1bmN0aW9uYWxpdHkgZm9yIHByb2Nlc3NvciBjYW52YXMgdmlld3MuXG4gICAgICAgICAqL1xuICAgICAgICAvLyBnZXRDb25uZWN0b3JHcmFwaGljID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICBpZiAoIWNvbm5lY3RvckdyYXBoaWMpIHtcbiAgICAgICAgLy8gICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgICAgLy8gICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyksXG4gICAgICAgIC8vICAgICAgICAgICAgIHJhZGl1cyA9IDEyLFxuICAgICAgICAvLyAgICAgICAgICAgICBsaW5lV2lkdGggPSAyLFxuICAgICAgICAvLyAgICAgICAgICAgICByZXNvdXJjZSA9IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHJhZGl1czogcmFkaXVzLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBsaW5lV2lkdGgsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjYW52YXM6IGNhbnZhcyxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGN0eDogY3R4LFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgc2V0VGhlbWU6IGZ1bmN0aW9uKHRoZW1lKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhlbWUpO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gdGhlbWUgPyB0aGVtZS5jb2xvckhpZ2ggOiAnIzMzMyc7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguc2V0TGluZURhc2goWzQsIDRdKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC50cmFuc2xhdGUodGhpcy5jYW52YXMud2lkdGggLyAyLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgubW92ZVRvKHRoaXMucmFkaXVzLCAwKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5hcmMoMCwgMCwgdGhpcy5yYWRpdXMsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIC8vICAgICAgICAgY2FudmFzLndpZHRoID0gKHJhZGl1cyArIGxpbmVXaWR0aCkgKiAyO1xuICAgICAgICAvLyAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSAocmFkaXVzICsgbGluZVdpZHRoKSAqIDI7XG4gICAgICAgIC8vICAgICAgICAgY29ubmVjdG9yR3JhcGhpYyA9IHJlc291cmNlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgcmV0dXJuIGNvbm5lY3RvckdyYXBoaWM7XG4gICAgICAgIC8vIH0sXG4gICAgXG4gICAgICAgIC8vIGdldFByb2Nlc3NvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyAgICAgcmV0dXJuIG15LnByb2Nlc3NvcjtcbiAgICAgICAgLy8gfSxcbiAgICAgICAgXG4gICAgICAgIGdldFBvc2l0aW9uMmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgIHg6IG15LmRhdGEucG9zaXRpb25YLFxuICAgICAgICAgICAgICAgIHk6IG15LmRhdGEucG9zaXRpb25ZXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG15LmRhdGEudHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGdldElEID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbXkuZGF0YS5pZDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5kYXRhID0gc3BlY3MuZGF0YTtcbiAgICBteS5zdG9yZSA9IHNwZWNzLnN0b3JlO1xuICAgIC8vIG15LnByb2Nlc3NvciA9IHNwZWNzLnByb2Nlc3NvcjtcbiAgICBteS5wb3NpdGlvblggPSAwO1xuICAgIG15LnBvc2l0aW9uWSA9IDA7XG4gICAgLy8gbXkuZ2V0Q29ubmVjdG9yR3JhcGhpYyA9IGdldENvbm5lY3RvckdyYXBoaWM7XG4gICAgbXkuY29sb3JIaWdoID0gJyNjY2NjY2MnO1xuICAgIG15LmNvbG9yTWlkID0gJyNkZGRkZGQnO1xuICAgIG15LmNvbG9yTG93ID0gJyNlZWVlZWUnO1xuICAgIFxuICAgIHRoYXQgPSBzcGVjcy50aGF0IHx8IHt9O1xuXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIC8vIHRoYXQuZ2V0UHJvY2Vzc29yID0gZ2V0UHJvY2Vzc29yO1xuICAgIC8vIHRoYXQuc2V0UG9zaXRpb24yZCA9IHNldFBvc2l0aW9uMmQ7XG4gICAgdGhhdC5nZXRQb3NpdGlvbjJkID0gZ2V0UG9zaXRpb24yZDtcbiAgICB0aGF0LmdldElEID0gZ2V0SUQ7XG4gICAgdGhhdC5nZXRUeXBlID0gZ2V0VHlwZTtcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9jYW52YXNwcm9jZXNzb3JiYXNlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\n\nvar TWEEN = TWEEN || function () {\n\n\tvar _tweens = [];\n\n\treturn {\n\n\t\tgetAll: function getAll() {\n\n\t\t\treturn _tweens;\n\t\t},\n\n\t\tremoveAll: function removeAll() {\n\n\t\t\t_tweens = [];\n\t\t},\n\n\t\tadd: function add(tween) {\n\n\t\t\t_tweens.push(tween);\n\t\t},\n\n\t\tremove: function remove(tween) {\n\n\t\t\tvar i = _tweens.indexOf(tween);\n\n\t\t\tif (i !== -1) {\n\t\t\t\t_tweens.splice(i, 1);\n\t\t\t}\n\t\t},\n\n\t\tupdate: function update(time, preserve) {\n\n\t\t\tif (_tweens.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar i = 0;\n\n\t\t\ttime = time !== undefined ? time : TWEEN.now();\n\n\t\t\twhile (i < _tweens.length) {\n\n\t\t\t\tif (_tweens[i].update(time) || preserve) {\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\t_tweens.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t};\n}();\n\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\nif (typeof window === 'undefined' && typeof process !== 'undefined') {\n\tTWEEN.now = function () {\n\t\tvar time = process.hrtime();\n\n\t\t// Convert [seconds, nanoseconds] to milliseconds.\n\t\treturn time[0] * 1000 + time[1] / 1000000;\n\t};\n}\n// In a browser, use window.performance.now if it is available.\nelse if (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {\n\t\t// This must be bound, because directly assigning this function\n\t\t// leads to an invocation exception in Chrome.\n\t\tTWEEN.now = window.performance.now.bind(window.performance);\n\t}\n\t// Use Date.now if it is available.\n\telse if (Date.now !== undefined) {\n\t\t\tTWEEN.now = Date.now;\n\t\t}\n\t\t// Otherwise, use 'new Date().getTime()'.\n\t\telse {\n\t\t\t\tTWEEN.now = function () {\n\t\t\t\t\treturn new Date().getTime();\n\t\t\t\t};\n\t\t\t}\n\nTWEEN.Tween = function (object) {\n\n\tvar _object = object;\n\tvar _valuesStart = {};\n\tvar _valuesEnd = {};\n\tvar _valuesStartRepeat = {};\n\tvar _duration = 1000;\n\tvar _repeat = 0;\n\tvar _repeatDelayTime;\n\tvar _yoyo = false;\n\tvar _isPlaying = false;\n\tvar _reversed = false;\n\tvar _delayTime = 0;\n\tvar _startTime = null;\n\tvar _easingFunction = TWEEN.Easing.Linear.None;\n\tvar _interpolationFunction = TWEEN.Interpolation.Linear;\n\tvar _chainedTweens = [];\n\tvar _onStartCallback = null;\n\tvar _onStartCallbackFired = false;\n\tvar _onUpdateCallback = null;\n\tvar _onCompleteCallback = null;\n\tvar _onStopCallback = null;\n\n\tthis.to = function (properties, duration) {\n\n\t\t_valuesEnd = properties;\n\n\t\tif (duration !== undefined) {\n\t\t\t_duration = duration;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.start = function (time) {\n\n\t\tTWEEN.add(this);\n\n\t\t_isPlaying = true;\n\n\t\t_onStartCallbackFired = false;\n\n\t\t_startTime = time !== undefined ? time : TWEEN.now();\n\t\t_startTime += _delayTime;\n\n\t\tfor (var property in _valuesEnd) {\n\n\t\t\t// Check if an Array was provided as property value\n\t\t\tif (_valuesEnd[property] instanceof Array) {\n\n\t\t\t\tif (_valuesEnd[property].length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create a local copy of the Array with the start value at the front\n\t\t\t\t_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);\n\t\t\t}\n\n\t\t\t// If `to()` specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (_object[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Save the starting value.\n\t\t\t_valuesStart[property] = _object[property];\n\n\t\t\tif (_valuesStart[property] instanceof Array === false) {\n\t\t\t\t_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n\t\t\t}\n\n\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.stop = function () {\n\n\t\tif (!_isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tTWEEN.remove(this);\n\t\t_isPlaying = false;\n\n\t\tif (_onStopCallback !== null) {\n\t\t\t_onStopCallback.call(_object, _object);\n\t\t}\n\n\t\tthis.stopChainedTweens();\n\t\treturn this;\n\t};\n\n\tthis.end = function () {\n\n\t\tthis.update(_startTime + _duration);\n\t\treturn this;\n\t};\n\n\tthis.stopChainedTweens = function () {\n\n\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t_chainedTweens[i].stop();\n\t\t}\n\t};\n\n\tthis.delay = function (amount) {\n\n\t\t_delayTime = amount;\n\t\treturn this;\n\t};\n\n\tthis.repeat = function (times) {\n\n\t\t_repeat = times;\n\t\treturn this;\n\t};\n\n\tthis.repeatDelay = function (amount) {\n\n\t\t_repeatDelayTime = amount;\n\t\treturn this;\n\t};\n\n\tthis.yoyo = function (yoyo) {\n\n\t\t_yoyo = yoyo;\n\t\treturn this;\n\t};\n\n\tthis.easing = function (easing) {\n\n\t\t_easingFunction = easing;\n\t\treturn this;\n\t};\n\n\tthis.interpolation = function (interpolation) {\n\n\t\t_interpolationFunction = interpolation;\n\t\treturn this;\n\t};\n\n\tthis.chain = function () {\n\n\t\t_chainedTweens = arguments;\n\t\treturn this;\n\t};\n\n\tthis.onStart = function (callback) {\n\n\t\t_onStartCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onUpdate = function (callback) {\n\n\t\t_onUpdateCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onComplete = function (callback) {\n\n\t\t_onCompleteCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onStop = function (callback) {\n\n\t\t_onStopCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.update = function (time) {\n\n\t\tvar property;\n\t\tvar elapsed;\n\t\tvar value;\n\n\t\tif (time < _startTime) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (_onStartCallbackFired === false) {\n\n\t\t\tif (_onStartCallback !== null) {\n\t\t\t\t_onStartCallback.call(_object, _object);\n\t\t\t}\n\n\t\t\t_onStartCallbackFired = true;\n\t\t}\n\n\t\telapsed = (time - _startTime) / _duration;\n\t\telapsed = elapsed > 1 ? 1 : elapsed;\n\n\t\tvalue = _easingFunction(elapsed);\n\n\t\tfor (property in _valuesEnd) {\n\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar start = _valuesStart[property] || 0;\n\t\t\tvar end = _valuesEnd[property];\n\n\t\t\tif (end instanceof Array) {\n\n\t\t\t\t_object[property] = _interpolationFunction(end, value);\n\t\t\t} else {\n\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tif (typeof end === 'string') {\n\n\t\t\t\t\tif (end.charAt(0) === '+' || end.charAt(0) === '-') {\n\t\t\t\t\t\tend = start + parseFloat(end);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tend = parseFloat(end);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof end === 'number') {\n\t\t\t\t\t_object[property] = start + (end - start) * value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (_onUpdateCallback !== null) {\n\t\t\t_onUpdateCallback.call(_object, value);\n\t\t}\n\n\t\tif (elapsed === 1) {\n\n\t\t\tif (_repeat > 0) {\n\n\t\t\t\tif (isFinite(_repeat)) {\n\t\t\t\t\t_repeat--;\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values, restart by making startTime = now\n\t\t\t\tfor (property in _valuesStartRepeat) {\n\n\t\t\t\t\tif (typeof _valuesEnd[property] === 'string') {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_yoyo) {\n\t\t\t\t\t\tvar tmp = _valuesStartRepeat[property];\n\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\t_valuesStart[property] = _valuesStartRepeat[property];\n\t\t\t\t}\n\n\t\t\t\tif (_yoyo) {\n\t\t\t\t\t_reversed = !_reversed;\n\t\t\t\t}\n\n\t\t\t\tif (_repeatDelayTime !== undefined) {\n\t\t\t\t\t_startTime = time + _repeatDelayTime;\n\t\t\t\t} else {\n\t\t\t\t\t_startTime = time + _delayTime;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\n\t\t\t\tif (_onCompleteCallback !== null) {\n\n\t\t\t\t\t_onCompleteCallback.call(_object, _object);\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t\t// even if the `update()` method was called way past the duration of the tween\n\t\t\t\t\t_chainedTweens[i].start(_startTime + _duration);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n};\n\nTWEEN.Easing = {\n\n\tLinear: {\n\n\t\tNone: function None(k) {\n\n\t\t\treturn k;\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn k * (2 - k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn -0.5 * (--k * (k - 2) - 1);\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn --k * k * k + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn 1 - --k * k * k * k;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn -0.5 * ((k -= 2) * k * k * k - 2);\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn Math.sqrt(1 - --k * k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn -0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function In(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tk *= 2;\n\n\t\t\tif (k < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function In(k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - TWEEN.Easing.Bounce.Out(1 - k);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tif (k < 1 / 2.75) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < 2 / 2.75) {\n\t\t\t\treturn 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n\t\t\t} else if (k < 2.5 / 2.75) {\n\t\t\t\treturn 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n\t\t\t}\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\t\t}\n\n\t}\n\n};\n\nTWEEN.Interpolation = {\n\n\tLinear: function Linear(v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.Linear;\n\n\t\tif (k < 0) {\n\t\t\treturn fn(v[0], v[1], f);\n\t\t}\n\n\t\tif (k > 1) {\n\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t}\n\n\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t},\n\n\tBezier: function Bezier(v, k) {\n\n\t\tvar b = 0;\n\t\tvar n = v.length - 1;\n\t\tvar pw = Math.pow;\n\t\tvar bn = TWEEN.Interpolation.Utils.Bernstein;\n\n\t\tfor (var i = 0; i <= n; i++) {\n\t\t\tb += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n\t\t}\n\n\t\treturn b;\n\t},\n\n\tCatmullRom: function CatmullRom(v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.CatmullRom;\n\n\t\tif (v[0] === v[m]) {\n\n\t\t\tif (k < 0) {\n\t\t\t\ti = Math.floor(f = m * (1 + k));\n\t\t\t}\n\n\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\t\t} else {\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\t\t}\n\t},\n\n\tUtils: {\n\n\t\tLinear: function Linear(p0, p1, t) {\n\n\t\t\treturn (p1 - p0) * t + p0;\n\t\t},\n\n\t\tBernstein: function Bernstein(n, i) {\n\n\t\t\tvar fc = TWEEN.Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\t\t},\n\n\t\tFactorial: function () {\n\n\t\t\tvar a = [1];\n\n\t\t\treturn function (n) {\n\n\t\t\t\tvar s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (var i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\t\t\t\treturn s;\n\t\t\t};\n\t\t}(),\n\n\t\tCatmullRom: function CatmullRom(p0, p1, p2, p3, t) {\n\n\t\t\tvar v0 = (p2 - p0) * 0.5;\n\t\t\tvar v1 = (p3 - p1) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t\t}\n\n\t}\n\n};\n\n// UMD (Universal Module Definition)\n(function (root) {\n\n\tif (true) {\n\n\t\t// AMD\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn TWEEN;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module !== 'undefined' && (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n\n\t\t// Node.js\n\t\tmodule.exports = TWEEN;\n\t} else if (root !== undefined) {\n\n\t\t// Global variable\n\t\troot.TWEEN = TWEEN;\n\t}\n})(undefined);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(49)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIBaseView;\n\nvar _selectors = __webpack_require__(0);\n\n/**\n * MIDI input or output port processor view.\n */\nfunction createMIDIBaseView(specs, my) {\n    var that,\n        parentEl = specs.parentEl,\n        port = specs.port,\n        initialize = function initialize() {\n        // set callback for the port to update the view\n        // port.setViewCallback(updateView);\n\n        // find template, add clone to midi ports list\n        var template = document.querySelector('#template-midi-port');\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        parentEl.appendChild(my.el);\n\n        // set data-connected=\"true\" to make the element visible\n        my.el.dataset.connected = true;\n\n        // show label\n        my.el.querySelector('.midi-port__label').innerHTML = specs.name;\n\n        // find checkboxes\n        my.networkEl = my.el.querySelector('.midi-port__network');\n        my.syncEl = my.el.querySelector('.midi-port__sync');\n        my.remoteEl = my.el.querySelector('.midi-port__remote');\n\n        // add DOM event listeners\n        my.networkEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().togglePortNetwork(my.id, my.isInput));\n            }\n        });\n        my.syncEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().togglePortSync(my.id, my.isInput));\n            }\n        });\n        my.remoteEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().togglePortRemote(my.id, my.isInput));\n            }\n        });\n\n        // listen to state updates\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                case e.detail.actions.TOGGLE_PORT_SYNC:\n                case e.detail.actions.TOGGLE_PORT_REMOTE:\n                    if (e.detail.action.id === my.id) {\n                        var _port = (0, _selectors.getMIDIPortByID)(my.id);\n                        my.networkEl.querySelector('[type=checkbox]').checked = _port.networkEnabled;\n                        my.syncEl.querySelector('[type=checkbox]').checked = _port.syncEnabled;\n                        my.remoteEl.querySelector('[type=checkbox]').checked = _port.remoteEnabled;\n                    }\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (my.el && parentEl) {\n            parentEl.removeChild(my.el);\n        }\n    },\n\n\n    /**\n     * Callback for port to update view.\n     */\n    // updateView = function(key, value) {\n    //     switch (key) {\n    //         case 'network':\n    //             my.networkEl.querySelector('[type=checkbox]').checked = value;\n    //             break;\n    //         case 'sync':\n    //             my.syncEl.querySelector('[type=checkbox]').checked = value;\n    //             break;\n    //         case 'remote':\n    //             my.remoteEl.querySelector('[type=checkbox]').checked = value;\n    //             break;\n    //         case 'connected':\n    //             my.el.dataset.connected = value;\n    //             break;\n    //     }\n    // },\n\n    getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.isInput = specs.isInput;\n    my.id = specs.id;\n    my.el;\n    my.networkEl;\n    my.syncEl;\n    my.remoteEl;\n\n    that = that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _transport = __webpack_require__(13);\n\nvar _transport2 = _interopRequireDefault(_transport);\n\nvar _midi = __webpack_require__(3);\n\nvar _midi2 = _interopRequireDefault(_midi);\n\nvar _network = __webpack_require__(14);\n\nvar _network2 = _interopRequireDefault(_network);\n\nvar _actions = __webpack_require__(28);\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nvar _reducers = __webpack_require__(33);\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nvar _store = __webpack_require__(34);\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _app = __webpack_require__(35);\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _canvas = __webpack_require__(45);\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nvar _preferences = __webpack_require__(53);\n\nvar _preferences2 = _interopRequireDefault(_preferences);\n\nvar _remote = __webpack_require__(56);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Application startup.\n */\n/**\n    Euclidean Pattern Generator\n    Copyright (C) 2017, 2018  Wouter Hisschemoller\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\ndocument.addEventListener('DOMContentLoaded', function (e) {\n\n    // Create all objects that will be the modules of the app.\n    var appView = {},\n        canvasView = {},\n        midi = {},\n        midiNetwork = {},\n        midiRemote = {},\n        preferencesView = {},\n        remoteView = {},\n        transport = {};\n\n    var store = (0, _store2.default)({\n        actions: (0, _actions2.default)(),\n        reducers: (0, _reducers2.default)()\n    });\n\n    // Add functionality to the modules and inject dependencies.\n    (0, _app2.default)({\n        that: appView,\n        store: store\n    });\n    (0, _canvas2.default)({\n        that: canvasView,\n        store: store\n    });\n    (0, _preferences2.default)({\n        that: preferencesView,\n        store: store\n    });\n    (0, _remote2.default)({\n        that: remoteView,\n        store: store,\n        appView: appView\n    });\n    (0, _midi2.default)({\n        that: midi,\n        store: store\n    });\n    (0, _network2.default)({\n        that: midiNetwork,\n        store: store,\n        appView: appView,\n        canvasView: canvasView,\n        preferencesView: preferencesView\n    });\n    (0, _transport2.default)({\n        that: transport,\n        store: store,\n        canvasView: canvasView,\n        midiNetwork: midiNetwork\n    });\n\n    // initialise\n    midi.connect().then(function () {\n        store.persist();\n        transport.run();\n    });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz9jNDViIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJhcHBWaWV3IiwiY2FudmFzVmlldyIsIm1pZGkiLCJtaWRpTmV0d29yayIsIm1pZGlSZW1vdGUiLCJwcmVmZXJlbmNlc1ZpZXciLCJyZW1vdGVWaWV3IiwidHJhbnNwb3J0Iiwic3RvcmUiLCJhY3Rpb25zIiwicmVkdWNlcnMiLCJ0aGF0IiwiY29ubmVjdCIsInRoZW4iLCJwZXJzaXN0IiwicnVuIl0sIm1hcHBpbmdzIjoiOztBQWtCQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7OztBQTdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0NBQSxTQUFTQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsVUFBU0MsQ0FBVCxFQUFZOztBQUV0RDtBQUNBLFFBQUlDLFVBQVUsRUFBZDtBQUFBLFFBQ0lDLGFBQWEsRUFEakI7QUFBQSxRQUVJQyxPQUFPLEVBRlg7QUFBQSxRQUdJQyxjQUFjLEVBSGxCO0FBQUEsUUFJSUMsYUFBYSxFQUpqQjtBQUFBLFFBS0lDLGtCQUFrQixFQUx0QjtBQUFBLFFBTUlDLGFBQWEsRUFOakI7QUFBQSxRQU9JQyxZQUFZLEVBUGhCOztBQVNBLFFBQU1DLFFBQVEscUJBQVk7QUFDdEJDLGlCQUFTLHdCQURhO0FBRXRCQyxrQkFBVTtBQUZZLEtBQVosQ0FBZDs7QUFLQTtBQUNBLHVCQUFjO0FBQ1ZDLGNBQU1YLE9BREk7QUFFVlE7QUFGVSxLQUFkO0FBSUEsMEJBQWlCO0FBQ2JHLGNBQU1WLFVBRE87QUFFYk87QUFGYSxLQUFqQjtBQUlBLCtCQUFzQjtBQUNsQkcsY0FBTU4sZUFEWTtBQUVsQkc7QUFGa0IsS0FBdEI7QUFJQSwwQkFBaUI7QUFDYkcsY0FBTUwsVUFETztBQUViRSxvQkFGYTtBQUdiUjtBQUhhLEtBQWpCO0FBS0Esd0JBQVc7QUFDUFcsY0FBTVQsSUFEQztBQUVQTTtBQUZPLEtBQVg7QUFJQSwyQkFBa0I7QUFDZEcsY0FBTVIsV0FEUTtBQUVkSyxvQkFGYztBQUdkUix3QkFIYztBQUlkQyw4QkFKYztBQUtkSTtBQUxjLEtBQWxCO0FBT0EsNkJBQWdCO0FBQ1pNLGNBQU1KLFNBRE07QUFFWkMsb0JBRlk7QUFHWlAsOEJBSFk7QUFJWkU7QUFKWSxLQUFoQjs7QUFPQTtBQUNBRCxTQUFLVSxPQUFMLEdBQWVDLElBQWYsQ0FBb0IsWUFBTTtBQUN0QkwsY0FBTU0sT0FBTjtBQUNBUCxrQkFBVVEsR0FBVjtBQUNILEtBSEQ7QUFJSCxDQTFERCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICAgIEV1Y2xpZGVhbiBQYXR0ZXJuIEdlbmVyYXRvclxuICAgIENvcHlyaWdodCAoQykgMjAxNywgMjAxOCAgV291dGVyIEhpc3NjaGVtb2xsZXJcblxuICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqL1xuXG5pbXBvcnQgY3JlYXRlVHJhbnNwb3J0IGZyb20gJy4vd2gvY29yZS90cmFuc3BvcnQnO1xuaW1wb3J0IGNyZWF0ZU1JREkgZnJvbSAnLi93aC9taWRpL21pZGknO1xuaW1wb3J0IGNyZWF0ZU1JRElOZXR3b3JrIGZyb20gJy4vd2gvbWlkaS9uZXR3b3JrJztcbmltcG9ydCBjcmVhdGVBY3Rpb25zIGZyb20gJy4vd2gvc3RhdGUvYWN0aW9ucyc7XG5pbXBvcnQgY3JlYXRlUmVkdWNlcnMgZnJvbSAnLi93aC9zdGF0ZS9yZWR1Y2Vycyc7XG5pbXBvcnQgY3JlYXRlU3RvcmUgZnJvbSAnLi93aC9zdGF0ZS9zdG9yZSc7XG5pbXBvcnQgY3JlYXRlQXBwVmlldyBmcm9tICcuL3doL3ZpZXcvYXBwJztcbmltcG9ydCBjcmVhdGVDYW52YXNWaWV3IGZyb20gJy4vd2gvdmlldy9jYW52YXMnO1xuaW1wb3J0IGNyZWF0ZVByZWZlcmVuY2VzVmlldyBmcm9tICcuL3doL3ZpZXcvcHJlZmVyZW5jZXMnO1xuaW1wb3J0IGNyZWF0ZVJlbW90ZVZpZXcgZnJvbSAnLi93aC92aWV3L3JlbW90ZSc7XG5cbi8qKlxuICogQXBwbGljYXRpb24gc3RhcnR1cC5cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGUpIHtcblxuICAgIC8vIENyZWF0ZSBhbGwgb2JqZWN0cyB0aGF0IHdpbGwgYmUgdGhlIG1vZHVsZXMgb2YgdGhlIGFwcC5cbiAgICB2YXIgYXBwVmlldyA9IHt9LFxuICAgICAgICBjYW52YXNWaWV3ID0ge30sXG4gICAgICAgIG1pZGkgPSB7fSxcbiAgICAgICAgbWlkaU5ldHdvcmsgPSB7fSxcbiAgICAgICAgbWlkaVJlbW90ZSA9IHt9LFxuICAgICAgICBwcmVmZXJlbmNlc1ZpZXcgPSB7fSxcbiAgICAgICAgcmVtb3RlVmlldyA9IHt9LFxuICAgICAgICB0cmFuc3BvcnQgPSB7fTtcbiAgICBcbiAgICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHtcbiAgICAgICAgYWN0aW9uczogY3JlYXRlQWN0aW9ucygpLFxuICAgICAgICByZWR1Y2VyczogY3JlYXRlUmVkdWNlcnMoKVxuICAgIH0pO1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9uYWxpdHkgdG8gdGhlIG1vZHVsZXMgYW5kIGluamVjdCBkZXBlbmRlbmNpZXMuXG4gICAgY3JlYXRlQXBwVmlldyh7IFxuICAgICAgICB0aGF0OiBhcHBWaWV3LCBcbiAgICAgICAgc3RvcmUgXG4gICAgfSk7XG4gICAgY3JlYXRlQ2FudmFzVmlldyh7IFxuICAgICAgICB0aGF0OiBjYW52YXNWaWV3LCBcbiAgICAgICAgc3RvcmUgXG4gICAgfSk7XG4gICAgY3JlYXRlUHJlZmVyZW5jZXNWaWV3KHsgXG4gICAgICAgIHRoYXQ6IHByZWZlcmVuY2VzVmlldywgXG4gICAgICAgIHN0b3JlIFxuICAgIH0pO1xuICAgIGNyZWF0ZVJlbW90ZVZpZXcoe1xuICAgICAgICB0aGF0OiByZW1vdGVWaWV3LFxuICAgICAgICBzdG9yZSxcbiAgICAgICAgYXBwVmlldyxcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJKHsgXG4gICAgICAgIHRoYXQ6IG1pZGksIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJTmV0d29yayh7XG4gICAgICAgIHRoYXQ6IG1pZGlOZXR3b3JrLFxuICAgICAgICBzdG9yZSxcbiAgICAgICAgYXBwVmlldyxcbiAgICAgICAgY2FudmFzVmlldyxcbiAgICAgICAgcHJlZmVyZW5jZXNWaWV3XG4gICAgfSk7XG4gICAgY3JlYXRlVHJhbnNwb3J0KHsgXG4gICAgICAgIHRoYXQ6IHRyYW5zcG9ydCwgXG4gICAgICAgIHN0b3JlLCBcbiAgICAgICAgY2FudmFzVmlldywgXG4gICAgICAgIG1pZGlOZXR3b3JrIFxuICAgIH0pO1xuXG4gICAgLy8gaW5pdGlhbGlzZVxuICAgIG1pZGkuY29ubmVjdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBzdG9yZS5wZXJzaXN0KCk7XG4gICAgICAgIHRyYW5zcG9ydC5ydW4oKTtcbiAgICB9KTtcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createSequencer = createSequencer;\nexports.default = createTransport;\n/**\n * Timing, transport and sequencing functionality.\n * Divided in two sets of functionality, Transport and Sequencer.\n * \n * Unix epoch,                page    AudioContext   Transport        now,\n * 01-01-1970 00:00:00 UTC    load    created        start            the present\n *  |                          |       |              |                | \n *  |--------------------------|-------|-------//-----|--------//------|\n *  \n *  |------------------------------------------------------------------> Date.now()\n *                             |---------------------------------------> performance.now()\n *                                     |-------------------------------> AudioContext.currentTime\n */\n\n// window.WH = window.WH || {};\n\n// (function (ns) {\n\n/**\n * @description Creates sequencer functionality.\n * Takes time from transport to get music events from arrangement and\n * drives components that process music events.\n * @param {Object} specs External specifications.\n * @param {Object} my Internally shared properties.\n */\nfunction createSequencer(specs, my) {\n    var that,\n\n    // app = specs.app,\n    canvasView = specs.canvasView,\n        midiNetwork = specs.midiNetwork,\n        ppqn = 480,\n        bpm = 120,\n        lastBpm = bpm,\n        tickInMilliseconds,\n        audioContextOffset = 0,\n        timelineOffset = 0,\n        playbackQueue = [],\n        renderThrottleCounter = 0,\n        processorEvents = {},\n\n\n    /**\n     * Scan the arrangement for events and send them to concerned components.\n     * @param {Number} scanStart Start in ms of timespan to scan.\n     * @param {Number} scanEnd End in ms of timespan to scan.\n     * @param {Number} nowToScanStart Duration from now until start time in ms.\n     * @param {Number} offset Position of transport playhead in ms.\n     */\n    scanEvents = function scanEvents(scanStart, scanEnd, nowToScanStart, offset) {\n        midiNetwork.process(msec2tick(scanStart), msec2tick(scanEnd), msec2tick(nowToScanStart), tickInMilliseconds, msec2tick(offset), processorEvents);\n    },\n\n\n    /**\n     * Use Timing's requestAnimationFrame as clock for view updates.\n     * @param {Number} position Timing position, equal to performance.now(). \n     */\n    updateView = function updateView(position) {\n        if (renderThrottleCounter % 2 === 0) {\n            // midiNetwork.render(msec2tick(position));\n            canvasView.draw(position, processorEvents);\n            Object.keys(processorEvents).forEach(function (v) {\n                return processorEvents[v] = [];\n            });\n        }\n        renderThrottleCounter++;\n    },\n\n\n    /**\n     * Convert milliseconds to ticks.\n     */\n    msec2tick = function msec2tick(sec) {\n        return sec / tickInMilliseconds;\n    },\n\n\n    /**\n     * Convert ticks to milliseconds.\n     */\n    tick2msec = function tick2msec(tick) {\n        return tick * tickInMilliseconds;\n    },\n\n\n    /**\n     * Set Beats Per Minute.\n     * @param {Number} newBpm New value for BPM.\n     */\n    setBPM = function setBPM() {\n        var newBpm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 120;\n\n        bpm = newBpm;\n        var beatInMilliseconds = 60000.0 / bpm;\n        tickInMilliseconds = beatInMilliseconds / ppqn;\n        // calculate change factor\n        var factor = lastBpm / bpm;\n        my.setLoopByFactor(factor);\n        // app.appUpdated('bpm', bpm);\n    },\n\n\n    /**\n     * Get Beats Per Minute of the project.\n     * @return [Number] Beats Per Minute.\n     */\n    getBPM = function getBPM() {\n        return bpm;\n    },\n\n\n    /**\n     * Set difference between AudioContext.currentTime and performance.now.\n     * Used to convert timing for AudioContext playback.\n     * @param {Number} acCurrentTime Timestamp in seconds.\n     */\n    setAudioContextOffset = function setAudioContextOffset(acCurrentTime) {\n        audioContextOffset = performance.now() - acCurrentTime * 1000;\n    };\n\n    my = my || {};\n    my.setBPM = setBPM;\n    my.store = specs.store;\n    my.scanEvents = scanEvents;\n    my.updateView = updateView;\n\n    that = specs.that || {};\n\n    that.setBPM = setBPM;\n    that.getBPM = getBPM;\n    that.setAudioContextOffset = setAudioContextOffset;\n    return that;\n}\n\n/**\n * Functionality to add synchronisation to external MIDI clock.\n * MIDI clock sends clock events at 24 ppqn.\n * @see https://en.wikipedia.org/wiki/MIDI_beat_clock\n * \n * The MIDI 'start' and 'stop' events just start and stop the transport.\n * The MIDI 'clock' event adjusts the BPM tempo.\n * \n * BPM is calculated with the time difference between clock event timestamps.\n */\nfunction createExternalClock(specs, my) {\n    var that,\n        isEnabled = false,\n        midiInput,\n        prevBPM = 0,\n        prevTimestamp = 0,\n        updateTimeout,\n\n\n    /**\n     * Enable synchronisation to external MIDI clock.\n     * @param {Boolean} isEnabled True to synchronise to external MIDI clock.\n     * @param {Object} midiInputPort MIDI input port.\n     */\n    setExternalClockEnabled = function setExternalClockEnabled(isEnabled, midiInputPort) {\n        if (isEnabled) {\n            midiInput = midiInputPort;\n            midiInput.addListener('start', 1, onStart);\n            midiInput.addListener('stop', 1, onStop);\n            midiInput.addListener('clock', 1, onClock);\n        } else {\n            if (midiInput) {\n                midiInput.removeListener('start', onStart);\n                midiInput.removeListener('stop', onStop);\n                midiInput.removeListener('clock', onClock);\n            }\n            midiInput = null;\n        }\n    },\n\n\n    /**\n     * Start transport.\n     */\n    onStart = function onStart() {\n        that.start();\n    },\n\n\n    /**\n     * Stop transport.\n     */\n    onStop = function onStop() {\n        that.pause();\n        that.rewind();\n    },\n\n\n    /**\n     * Convert events at 24 ppqn to BPM, suppress jitter from unstable clocks.\n     * @param {Object} e Event from WebMIDI.js.\n     */\n    onClock = function onClock(e) {\n        if (prevTimestamp > 0) {\n            var newBPM = 60000 / ((e.timestamp - prevTimestamp) * 24);\n            var bpm = prevBPM ? (prevBPM * 23 + newBPM) / 24 : newBPM;\n            prevBPM = bpm;\n            bpm = bpm.toFixed(1);\n            if (bpm != that.getBPM()) {\n                updateTempo(bpm);\n            }\n        }\n        prevTimestamp = e.timestamp;\n    },\n\n\n    /**\n     * Update tempo no more than once every 500ms.\n     * @param {Number} bpm The new changed BPM.\n     */\n    updateTempo = function updateTempo(bpm) {\n        if (!updateTimeout) {\n            that.setBPM(bpm);\n            updateTimeout = setTimeout(function () {\n                updateTimeout = 0;\n            }, 500);\n        }\n    };\n\n    that = specs.that || {};\n\n    that.setExternalClockEnabled = setExternalClockEnabled;\n    return that;\n}\n\n/**\n * @description Creates transport timing functionality.\n * Time is always measured in milliseconds since document load.\n * The timer can be started, stopped, rewound to zero and looped.\n * It defines a scan range that is just ahead of the play position\n * and that is meant to be used to scan for events to play.\n * @param {Object} specs Options.\n * @param {Object} my Properties shared between the functionalities of the object.\n */\nfunction createTransport(specs, my) {\n    var that,\n\n    // midi = specs.midi,\n    // app = specs.app,\n    position = 0,\n        origin = 0,\n        scanStart = 0,\n        scanEnd = 0,\n        lookAhead = 200,\n        loopStart = 0,\n        loopEnd = 0,\n        isRunning = false,\n        isLooping = false,\n        needsScan = false,\n        init = function init() {\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_TRANSPORT:\n                    switch (e.detail.state.transport) {\n                        case 'pause':\n                            pause();\n                            break;\n                        case 'play':\n                            start();\n                            break;\n                        case 'stop':\n                            pause();\n                            rewind();\n                            break;\n                    }\n                    break;\n\n                case e.detail.actions.SET_PROJECT:\n                case e.detail.actions.NEW_PROJECT:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n            }\n        });\n\n        my.setBPM();\n    },\n\n\n    /**\n     * Set the scan range.\n     * @param {Number} start Start timestamp of scan range.\n     */\n    setScanRange = function setScanRange(start) {\n        scanStart = start;\n        scanEnd = scanStart + lookAhead;\n        needsScan = true;\n    },\n\n\n    /**\n     * Updated the playhead position by adjusting the timeline origin.\n     * @param {Number} newOrigin Timeline origin timestamp.\n     */\n    setOrigin = function setOrigin(newOrigin) {\n        loopStart = loopStart - origin + newOrigin;\n        loopEnd = loopEnd - origin + newOrigin;\n        origin = newOrigin;\n    },\n\n\n    /**\n     * Timer using requestAnimationFrame that updates the transport timing.\n     */\n    run = function run() {\n        if (isRunning) {\n            position = performance.now();\n            if (isLooping && position < loopEnd && scanStart < loopEnd && scanEnd > loopEnd) {\n                setOrigin(origin + (loopEnd - loopStart));\n            }\n            if (scanEnd - position < 16.7) {\n                setScanRange(scanEnd);\n            }\n            if (needsScan) {\n                needsScan = false;\n                my.scanEvents(scanStart - origin, scanEnd - origin, scanStart - position, position - origin);\n            }\n        }\n        my.updateView(position - origin);\n        requestAnimationFrame(run);\n    },\n\n\n    /**\n     * Start the timer.\n     */\n    start = function start() {\n        var offset = position - origin;\n        position = performance.now();\n        setOrigin(position - offset);\n        setScanRange(position);\n        isRunning = true;\n        // app.appUpdated('play', isRunning);\n    },\n\n\n    /**\n     * Pause the timer.\n     */\n    pause = function pause() {\n        isRunning = false;\n        // app.appUpdated('play', isRunning);\n    },\n\n\n    /**\n     * Rewind the timer to timeline start.\n     */\n    rewind = function rewind() {\n        position = performance.now();\n        setOrigin(position);\n        setScanRange(position);\n    },\n\n\n    /**\n     * Toggle between stop and play.\n     */\n    toggleStartStop = function toggleStartStop() {\n        if (isRunning) {\n            pause();\n        } else {\n            rewind();\n            start();\n        }\n    },\n\n\n    /**\n     * Set loop startpoint.\n     * @param {Number} position Loop start timestamp.\n     */\n    setLoopStart = function setLoopStart(position) {\n        loopStart = origin + position;\n    },\n\n\n    /**\n     * Set loop endpoint.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoopEnd = function setLoopEnd(position) {\n        loopEnd = origin + position;\n    },\n\n\n    /**\n     * Set loop mode.\n     * @param {Boolean} isEnabled True to enable looping.\n     * @param {Number} position Loop start timestamp.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoop = function setLoop(isEnabled, startPosition, endPosition) {\n        isLooping = isEnabled;\n    },\n\n\n    /**\n     * Change loop points by a factor if the tempo changes.\n     * @param {number} factor Time points multiplier.\n     */\n    setLoopByFactor = function setLoopByFactor(factor) {\n        setLoopStart(loopStart * factor);\n        setLoopEnd(loopEnd * factor);\n    };\n\n    my = my || {};\n    my.setLoopByFactor = setLoopByFactor;\n\n    that = createSequencer(specs, my);\n    that = createExternalClock(specs, my);\n\n    init();\n\n    // that.start = start;\n    // that.pause = pause;\n    // that.rewind = rewind;\n    // that.toggleStartStop = toggleStartStop\n    that.run = run;\n    // that.setLoopStart = setLoopStart;\n    // that.setLoopEnd = setLoopEnd;\n    // that.setLoop = setLoop;\n    return that;\n};\n\n//     ns.createTransport = createTransport;\n\n// })(WH);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDINetwork;\n\nvar _networkconnections = __webpack_require__(15);\n\nvar _networkconnections2 = _interopRequireDefault(_networkconnections);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Manages the graph of midi processors.\n */\nfunction createMIDINetwork(specs, my) {\n    var that,\n        store = specs.store,\n\n    // app = specs.app,\n    appView = specs.appView,\n        canvasView = specs.canvasView,\n\n    // midiRemote = specs.midiRemote,\n    preferencesView = specs.preferencesView,\n        processors = [],\n        numProcessors = 0,\n        numInputProcessors = 0,\n        connections = [],\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.NEW_PROJECT:\n                case e.detail.actions.SET_PROJECT:\n                    setProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createProcessor(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteProcessor(e.detail.action.id);\n                    break;\n\n                case e.detail.actions.CONNECT_PROCESSORS:\n                    connectProcessors(e.detail.action.payload);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Create a new processor in the network.\n     * @param {Array} state Array of all processor data.\n     */\n    createProcessor = function createProcessor(procsState) {\n        procsState.allIds.forEach(function (id, i) {\n            var processorData = procsState.byId[id];\n            if (!processors[i] || id !== processors[i].getID()) {\n                var module = __webpack_require__(16)(\"./\" + processorData.type + '/processor');\n                var processor = module.createProcessor({\n                    data: processorData,\n                    store: store\n                });\n                processors.splice(i, 0, processor);\n            }\n        });\n        numProcessors = processors.length;\n\n        // if (midiProcessors[specs.type]) {\n        //     specs = specs || {};\n        //     specs.that = {};\n        //     specs.id = specs.id || specs.type + performance.now() + '_' + Math.random();\n        //     var processor = midiProcessors[specs.type].createProcessor(specs);\n\n        //     // insert the processor at the right position\n        //     switch (specs.type) {\n        //         case 'input':\n        //             processors.unshift(processor);\n        //             numInputProcessors++;\n        //             break;\n        //         case 'output':\n        //             processors.push(processor);\n        //             break;\n        //         default:\n        //             processors.splice(numInputProcessors, 0, processor);\n        //     }\n\n        //     console.log('Create processor ' + processor.getType() + ' (id ' + processor.getID() + ')');\n        //     numProcessors = processors.length;\n\n        //     setProcessorDefaultName(processor);\n\n        //     // create the views for the processor\n        //     switch (specs.type) {\n        //         case 'input':\n        //             break;\n        //         case 'output':\n        //             canvasView.createProcessorView(processor);\n        //             break;\n        //         case 'epg':\n        //             appView.createSettingsView(processor);\n        //             canvasView.createProcessorView(processor);\n        //             midiRemote.registerProcessor(processor);\n        //             selectProcessor(processor);\n        //             // canvasView.markDirty();\n        //             break;\n        //     }\n        // } else {\n        //     console.error('No MIDI processor found of type: ', specs.type);\n        // }\n\n        // return processor;\n    },\n\n\n    /**\n     * Delete a processor.\n     * @param {String} id ID of processor to delete.\n     */\n    deleteProcessor = function deleteProcessor(id) {\n        var processor;\n        for (var i = 0, n = processors.length; i < n; i++) {\n            if (processors[i].getID() === id) {\n                processor = processors[i];\n                if (typeof processor.terminate === 'function') {\n                    processor.terminate();\n                }\n                processors.splice(processors.indexOf(processor), 1);\n                break;\n            }\n        }\n        numProcessors = processors.length;\n\n        // if (processor) {\n        //     console.log('Delete processor ' + processor.getType() + ' (id ' + processor.getID() + ')');\n\n        // disconnect other processors that have this processor as destination\n        // for (var i = 0; i < numProcessors; i++) {\n        //     if (typeof processors[i].disconnect === 'function') {\n        //         disconnectProcessors(processors[i], processor);\n        //     }\n        // }\n\n        // delete the views for the processor\n        // switch (processor.getType()) {\n        //     case 'input':\n        //         numInputProcessors--;\n        //         break;\n        //     case 'output':\n        //         canvasView.deleteProcessorView(processor);\n        //         break;\n        //     case 'epg':\n        //         appView.deleteSettingsView(processor);\n        //         canvasView.deleteProcessorView(processor);\n        //         midiRemote.unregisterProcessor(processor);\n        //         break;\n        // }\n\n        // disconnect this processor from its destinations\n        // if (typeof processor.disconnect === 'function') {\n        //     const destinationProcessors = processor.getDestinations();\n        //     for (let i = 0, n = destinationProcessors.length; i < n; i++) {\n        //         disconnectProcessors(processor, destinationProcessors[i]);\n        //     }\n        // }\n\n        // selectNextProcessor(processor);\n\n        // if (typeof processor.terminate === 'function') {\n        //     processor.terminate();\n        // }\n\n        // processors.splice(processors.indexOf(processor), 1);\n        // numProcessors = processors.length;\n        // }\n    },\n\n\n    /**\n     * Select a processor.\n     * @param  {Object} processor Processor to select.\n     */\n    // selectProcessor = function(processor) {\n    //     app.togglePanel('settings', processor != null);\n    //     app.appUpdated('settings', processor != null);\n    //     for (var i = 0; i < numProcessors; i++) {\n    //         var proc = processors[i];\n    //         if (typeof proc.setSelected == 'function') {\n    //             proc.setSelected(proc === processor);\n    //         }\n    //     }\n    // },\n\n    /**\n     * Select the next processor from the given.\n     * @param  {Object} processor Processor to select.\n     */\n    // selectNextProcessor = function(processor) {\n    //     let processorIndex = processors.indexOf(processor),\n    //         nextIndex,\n    //         nextProcessor,\n    //         isNextProcessor;\n    //     for (let i = 1, n = processors.length; i <= n; i++) {\n    //         nextIndex = (processorIndex + i) % n;\n    //         nextProcessor = processors[nextIndex];\n    //         if (nextProcessor.getType() !== 'input' && nextProcessor.getType() !== 'output' && nextProcessor !== processor) {\n    //             isNextProcessor = true;\n    //             selectProcessor(nextProcessor);\n    //             break;\n    //         }\n    //     }\n\n    //     if (!isNextProcessor) {\n    //         selectProcessor(null);\n    //     }\n    // },\n\n    connectProcessors = function connectProcessors(payload) {\n        var sourceProcessor = processors.find(function (processor) {\n            return processor.getID() === payload.sourceProcessorID;\n        });\n        var destinationProcessor = processors.find(function (processor) {\n            return processor.getID() === payload.destinationProcessorID;\n        });\n\n        if (sourceProcessor && destinationProcessor) {\n            sourceProcessor.connect(destinationProcessor);\n        }\n\n        // if (!sourceProcessor.getDestinations().includes(destinationProcessor)) {\n        //     sourceProcessor.connect(destinationProcessor);\n        // }\n    },\n        disconnectProcessors = function disconnectProcessors(sourceProcessor, destinationProcessor) {\n        if (sourceProcessor.getDestinations().includes(destinationProcessor)) {\n            sourceProcessor.disconnect(destinationProcessor);\n        }\n    },\n\n\n    /**\n     * Set default processor name.\n     * @param {Object} processor Processor to name.\n     */\n    // setProcessorDefaultName = function(processor) {\n    //     let name, number, spaceIndex, \n    //         highestNumber = 0,\n    //         staticName = 'Processor';\n    //     for (let i = 0; i < numProcessors; i++) {\n    //         name = processors[i].getParamValue('name');\n    //         if (name && name.indexOf(staticName) == 0) {\n    //             spaceIndex = name.lastIndexOf(' ');\n    //             if (spaceIndex != -1) {\n    //                 number = parseInt(name.substr(spaceIndex), 10);\n    //                 if (!isNaN(number)) {\n    //                     highestNumber = Math.max(highestNumber, number);\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     processor.setParamValue('name', 'Processor ' + (highestNumber + 1));\n    // },\n\n    /**\n     * Let all processors process their data.\n     * @param {Number} start Start time in ticks of timespan to process.\n     * @param {Number} end End time in ticks of timespan to process.\n     * @param {Number} nowToScanStart Duration from now until start time in ticks.\n     * @param {Number} ticksToMsMultiplier Ticks to ms. conversion multiplier.\n     * @param {Number} offset Position of transport playhead in ticks.\n     * @param {Object} processorEvents Object to collect processor generated events to displayin the view.\n     */\n    process = function process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n        for (var i = 0; i < numProcessors; i++) {\n            processors[i].process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents);\n        }\n    },\n\n\n    /**\n     * Update view. At requestAnimationFrame speed.\n     * @param  {Number} position Transport playback position in ticks.\n     */\n    // render = function(position) {\n    //     for (var i = 0; i < numProcessors; i++) {\n    //         if (processors[i].render) {\n    //             processors[i].render(position);\n    //         }\n    //     }\n    // },\n\n    setProcessors = function setProcessors(newProcessors) {\n        clearProcessors();\n        newProcessors.forEach(function (processor) {\n            if (processor.type !== 'input' && processor.type !== 'output') {\n                createProcessor(newProcessors);\n            }\n        });\n    },\n\n\n    /**\n     * Clear the whole network.\n     * Remove all processors except the inputs and outputs.\n     * Remove all the connections.\n     */\n    clearProcessors = function clearProcessors() {\n        var type = void 0,\n            n = numProcessors;\n        while (--n >= 0) {\n            type = processors[n].getType();\n            if (type !== 'input' && type !== 'output') {\n                deleteProcessor(processors[n]);\n            }\n        }\n    };\n\n    /**\n     * Restore network from data object.\n     * @param {Object} data Preferences data object.\n     */\n    // setData = function(data = {}) {\n    //     // clear all old data\n    //     clear();\n\n    //     if (!data.processors || data.processors.length == 0) {\n    //         return;\n    //     }\n\n    //     // create the processors\n    //     // data.processors.forEach(function(item) {\n    //     //     // don't create MIDI inputs and outputs yet\n    //     //     if (item.type !== 'input' && item.type !== 'output') {\n    //     //         createProcessor({\n    //     //             type: item.type,\n    //     //             id: item.id\n    //     //         }, true);\n    //     //     }\n    //     // });\n\n    //     // find midi processors created for the detected midi ports,\n    //     // match them with the saved midi processor data,\n    //     // by comparing the midi port ids\n    //     // then give the matched processors the processor id from the saved data\n    //     // so that connections to input and output processors can be restored\n    //     var pdata = data.processors,\n    //         n = pdata.length,\n    //         procType,\n    //         numProcessors = processors.length;\n    //     for (var i = 0; i < n; i++) {\n    //         if (pdata[i].type === 'input' || pdata[i].type === 'output') {\n    //             for (var j = 0; j < numProcessors; j++) {\n    //                 procType = processors[j].getType();\n    //                 if (procType === 'input' || procType === 'output') {\n    //                     if (pdata[i].midiPortID === processors[j].getPort().id) {\n    //                         processors[j].setID(pdata[i].id);\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n\n    //     // restore state of the processor\n    //     for (var i = 0; i < n; i++) {\n    //         for (var j = 0; j < numProcessors; j++) {\n    //             if (pdata[i].id === processors[j].getID()) {\n    //                 processors[j].setData(pdata[i]);\n    //             }\n    //         }\n    //     }\n\n    //     // connect the processors\n    //     var sourceProcessor, numDestinations, destinationIDs;\n    //     for (var i = 0; i < n; i++) {\n    //         destinationIDs = pdata[i].destinations;\n    //         if (destinationIDs && destinationIDs.length) {\n    //             // find source processor\n    //             sourceProcessor = null;\n    //             for (var j = 0; j < numProcessors; j++) {\n    //                 if (pdata[i].id === processors[j].getID()) {\n    //                     sourceProcessor = processors[j];\n    //                 }\n    //             }\n\n    //             // find destination processor(s)\n    //             if (sourceProcessor) {\n    //                 numDestinations = destinationIDs.length;\n    //                 for (var j = 0; j < numDestinations; j++) {\n    //                     for (var k = 0; k < numProcessors; k++) {\n    //                         if (destinationIDs[j] == processors[k].getID()) {\n    //                             connectProcessors(sourceProcessor, processors[k]);\n    //                             console.log('Connect ' + sourceProcessor.getType() + ' to ' + processors[k].getType());\n    //                         }\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    // },\n\n    /**\n     * Write network settings to data object.\n     * @return {Object} Data to store.\n     */\n    // getData = function() {\n    //     // collect data from all processors\n    //     var processor,\n    //         procData = [];\n    //     for (var i = 0; i < numProcessors; i++) {\n    //         procData.push(processors[i].getData());\n    //     }\n\n    //     return {\n    //         processors: procData\n    //     };\n    // };\n\n    my = my || {};\n\n    that = (0, _networkconnections2.default)(specs, my);\n\n    init();\n\n    // that.createProcessor = createProcessor;\n    // that.deleteProcessor = deleteProcessor;\n    // that.selectProcessor = selectProcessor;\n    // that.connectProcessors = connectProcessors;\n    // that.disconnectProcessors = disconnectProcessors;\n    that.process = process;\n    // that.render = render;\n    // that.clear = clear;\n    // that.setData = setData;\n    // that.getData = getData;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDINetworkConnections;\n/**\n * \n */\nfunction createMIDINetworkConnections(specs, my) {\n    var that,\n        app = specs.app,\n        canvasView = specs.canvasView,\n        isConnectModeEnabled = false,\n\n\n    /**\n     * Enter or leave application connect mode.\n     * @param  {Boolean} isEnabled True to enable connect mode.\n     */\n    toggleConnections = function toggleConnections(isEnabled) {\n        isConnectModeEnabled = isEnabled;\n        canvasView.toggleConnectMode(isConnectModeEnabled);\n        app.appUpdated('connections', isConnectModeEnabled);\n    };\n\n    my = my || {};\n\n    that = specs.that || {};\n\n    that.toggleConnections = toggleConnections;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9uZXR3b3JrY29ubmVjdGlvbnMuanM/YmNjZiJdLCJuYW1lcyI6WyJjcmVhdGVNSURJTmV0d29ya0Nvbm5lY3Rpb25zIiwic3BlY3MiLCJteSIsInRoYXQiLCJhcHAiLCJjYW52YXNWaWV3IiwiaXNDb25uZWN0TW9kZUVuYWJsZWQiLCJ0b2dnbGVDb25uZWN0aW9ucyIsImlzRW5hYmxlZCIsInRvZ2dsZUNvbm5lY3RNb2RlIiwiYXBwVXBkYXRlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBR3dCQSw0QjtBQUh4Qjs7O0FBR2UsU0FBU0EsNEJBQVQsQ0FBc0NDLEtBQXRDLEVBQTZDQyxFQUE3QyxFQUFpRDtBQUM1RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsTUFBTUgsTUFBTUcsR0FEaEI7QUFBQSxRQUVJQyxhQUFhSixNQUFNSSxVQUZ2QjtBQUFBLFFBR0lDLHVCQUF1QixLQUgzQjs7O0FBS0k7Ozs7QUFJQUMsd0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBU0MsU0FBVCxFQUFvQjtBQUNwQ0YsK0JBQXVCRSxTQUF2QjtBQUNBSCxtQkFBV0ksaUJBQVgsQ0FBNkJILG9CQUE3QjtBQUNBRixZQUFJTSxVQUFKLENBQWUsYUFBZixFQUE4Qkosb0JBQTlCO0FBQ0gsS0FiTDs7QUFlQUosU0FBS0EsTUFBTSxFQUFYOztBQUVBQyxXQUFPRixNQUFNRSxJQUFOLElBQWMsRUFBckI7O0FBRUFBLFNBQUtJLGlCQUFMLEdBQXlCQSxpQkFBekI7QUFDQSxXQUFPSixJQUFQO0FBQ0giLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNSURJTmV0d29ya0Nvbm5lY3Rpb25zKHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBhcHAgPSBzcGVjcy5hcHAsXG4gICAgICAgIGNhbnZhc1ZpZXcgPSBzcGVjcy5jYW52YXNWaWV3LFxuICAgICAgICBpc0Nvbm5lY3RNb2RlRW5hYmxlZCA9IGZhbHNlLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVudGVyIG9yIGxlYXZlIGFwcGxpY2F0aW9uIGNvbm5lY3QgbW9kZS5cbiAgICAgICAgICogQHBhcmFtICB7Qm9vbGVhbn0gaXNFbmFibGVkIFRydWUgdG8gZW5hYmxlIGNvbm5lY3QgbW9kZS5cbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZUNvbm5lY3Rpb25zID0gZnVuY3Rpb24oaXNFbmFibGVkKSB7XG4gICAgICAgICAgICBpc0Nvbm5lY3RNb2RlRW5hYmxlZCA9IGlzRW5hYmxlZDtcbiAgICAgICAgICAgIGNhbnZhc1ZpZXcudG9nZ2xlQ29ubmVjdE1vZGUoaXNDb25uZWN0TW9kZUVuYWJsZWQpO1xuICAgICAgICAgICAgYXBwLmFwcFVwZGF0ZWQoJ2Nvbm5lY3Rpb25zJywgaXNDb25uZWN0TW9kZUVuYWJsZWQpO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgdGhhdC50b2dnbGVDb25uZWN0aW9ucyA9IHRvZ2dsZUNvbm5lY3Rpb25zO1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL21pZGkvbmV0d29ya2Nvbm5lY3Rpb25zLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/processor\": 17,\n\t\"./example/processor\": 26,\n\t\"./output/processor\": 27\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9wcm9jZXNzb3IkPzcyN2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvcHJvY2Vzc29yXCI6IDE3LFxuXHRcIi4vZXhhbXBsZS9wcm9jZXNzb3JcIjogMjYsXG5cdFwiLi9vdXRwdXQvcHJvY2Vzc29yXCI6IDI3XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIik7XG5cdHJldHVybiBpZDtcbn07XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTY7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9wcm9jZXNzb3IkXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(4);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _config = __webpack_require__(5);\n\nvar _selectors = __webpack_require__(0);\n\nvar _euclid = __webpack_require__(6);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        position = 0,\n        duration = 0,\n        noteDuration = void 0,\n        euclidPattern = [],\n        noteOffEvents = [],\n        pulsesOnly = [];\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.CHANGE_PARAMETER:\n                    if (e.detail.action.processorID === my.id) {\n                        my.params = (0, _selectors.getProcessorByID)(my.id).params;\n                        switch (e.detail.action.paramKey) {\n                            case 'steps':\n                                updatePulsesAndRotation();\n                                updatePattern(true);\n                                break;\n                            case 'pulses':\n                                updatePattern(true);\n                                break;\n                            case 'rotation':\n                            case 'is_triplets':\n                            case 'rate':\n                            case 'note_length':\n                                updatePattern();\n                                break;\n                            case 'is_mute':\n                                break;\n                        }\n                    }\n                    break;\n            }\n            updatePattern(true);\n        });\n    },\n        terminate = function terminate() {},\n\n\n    /**\n     * Process events to happen in a time slice.\n     * timeline start        now      scanStart     scanEnd\n     * |----------------------|-----------|------------|\n     *                        |-----------| \n     *                        nowToScanStart\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     * @param {Array} processorEvents Array to collect processor generated events to displayin the view.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n\n        // if the processor is muted only process remaining note offs.\n        if (my.params.is_mute.value) {\n            processNoteOffs(scanStart, scanEnd);\n            return;\n        }\n\n        // if the pattern loops during this timespan.\n        var localStart = scanStart % duration,\n            localEnd = scanEnd % duration,\n            localStart2 = false,\n            localEnd2;\n        if (localStart > localEnd) {\n            localStart2 = 0, localEnd2 = localEnd;\n            localEnd = duration;\n        }\n\n        // check if notes occur during the current timespan\n        var n = pulsesOnly.length;\n        for (var i = 0; i < n; i++) {\n            var pulseStartTime = pulsesOnly[i].startTime,\n                scanStartToNoteStart = pulseStartTime - localStart,\n                isOn = localStart <= pulseStartTime && pulseStartTime < localEnd;\n\n            // if pattern looped back to the start\n            if (localStart2 !== false) {\n                scanStartToNoteStart = pulseStartTime - localStart + duration;\n                isOn = isOn || localStart2 <= pulseStartTime && pulseStartTime < localEnd2;\n            }\n\n            // if a note should play\n            if (isOn) {\n                var channel = my.params.channel_out.value,\n                    pitch = my.params.pitch_out.value,\n                    velocity = my.params.velocity_out.value,\n                    pulseStartTimestamp = scanStart + scanStartToNoteStart;\n\n                // send the Note On message\n                my.setOutputData({\n                    timestampTicks: pulseStartTimestamp,\n                    channel: channel,\n                    type: 'noteon',\n                    pitch: pitch,\n                    velocity: velocity\n                });\n\n                // store the Note Off message to send later\n                noteOffEvents.push({\n                    timestampTicks: pulseStartTimestamp + noteDuration,\n                    channel: channel,\n                    type: 'noteoff',\n                    pitch: pitch,\n                    velocity: 0\n                });\n\n                // update pattern graphic view\n                // var stepIndex = pulsesOnly[i].stepIndex,\n                //     delayFromNowToNoteStart = (nowToScanStart + scanStartToNoteStart) * ticksToMsMultiplier,\n                //     delayFromNowToNoteEnd = (delayFromNowToNoteStart + noteDuration) * ticksToMsMultiplier;\n                // processCallback(stepIndex, delayFromNowToNoteStart, delayFromNowToNoteEnd);\n\n                if (!processorEvents[my.id]) {\n                    processorEvents[my.id] = [];\n                }\n                var delayFromNowToNoteStart = (nowToScanStart + scanStartToNoteStart) * ticksToMsMultiplier;\n                processorEvents[my.id].push({\n                    stepIndex: pulsesOnly[i].stepIndex,\n                    delayFromNowToNoteStart: delayFromNowToNoteStart,\n                    delayFromNowToNoteEnd: (delayFromNowToNoteStart + noteDuration) * ticksToMsMultiplier\n                });\n            }\n        }\n\n        if (localStart2 !== false) {\n            localStart = localStart2;\n        }\n\n        processNoteOffs(scanStart, scanEnd);\n    },\n\n\n    /**\n     * Check for scheduled note off events.\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     */\n    processNoteOffs = function processNoteOffs(scanStart, scanEnd) {\n        var i = noteOffEvents.length;\n        while (--i > -1) {\n            var noteOffTime = noteOffEvents[i].timestampTicks;\n            if (scanStart <= noteOffTime && scanEnd > noteOffTime) {\n                my.setOutputData(noteOffEvents.splice(i, 1)[0]);\n            }\n        }\n    },\n\n\n    /**\n     * After a change of the steps parameter update the pulses and rotation parameters.\n     */\n    updatePulsesAndRotation = function updatePulsesAndRotation() {\n        store.dispatch(store.getActions().recreateParameter(my.id, 'pulses', { max: my.params.steps.value }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'rotation', { max: my.params.steps.value - 1 }));\n        store.dispatch(store.getActions().changeParameter(my.id, 'pulses', my.params.pulses.value));\n        store.dispatch(store.getActions().changeParameter(my.id, 'rotation', my.params.rotation.value));\n    },\n\n\n    /**\n     * Update all pattern properties.\n     * @param {Boolean} isEuclidChange Steps, pulses or rotation change.\n     */\n    updatePattern = function updatePattern(isEuclidChange) {\n        // euclidean pattern properties, changes in steps, pulses, rotation\n        if (isEuclidChange) {\n            euclidPattern = (0, _euclid.getEuclidPattern)(my.params.steps.value, my.params.pulses.value);\n            euclidPattern = (0, _euclid.rotateEuclidPattern)(euclidPattern, my.params.rotation.value);\n        }\n\n        // playback propertie)s, changes in isTriplets, rate, noteLength\n        var rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        noteDuration = my.params.note_length.value * _config.PPQN;\n        duration = my.params.steps.value * stepDuration;\n        position = position % duration;\n\n        // create array of note start times in ticks\n        pulsesOnly.length = 0;\n        var n = euclidPattern.length;\n        for (var i = 0; i < n; i++) {\n            if (euclidPattern[i]) {\n                pulsesOnly.push({\n                    startTime: i * stepDuration,\n                    stepIndex: i\n                });\n            }\n        }\n    };\n\n    my = my || {};\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBooleanParameter;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parameter for Boolean values.\n */\nfunction createBooleanParameter(specs, my) {\n    var that,\n        normalize = function normalize(value) {\n        return value ? 1 : 0;\n    },\n        deNormalize = function deNormalize(normalizedValue) {\n        return normalizedValue > .5;\n    };\n\n    my = my || {};\n    my.normalize = normalize;\n    my.deNormalize = deNormalize;\n\n    that = (0, _base2.default)(specs, my);\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcGFyYW1ldGVyL2Jvb2xlYW4uanM/NTcwNiJdLCJuYW1lcyI6WyJjcmVhdGVCb29sZWFuUGFyYW1ldGVyIiwic3BlY3MiLCJteSIsInRoYXQiLCJub3JtYWxpemUiLCJ2YWx1ZSIsImRlTm9ybWFsaXplIiwibm9ybWFsaXplZFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLHNCOztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLHNCQUFULENBQWdDQyxLQUFoQyxFQUF1Q0MsRUFBdkMsRUFBMkM7QUFDdEQsUUFBSUMsSUFBSjtBQUFBLFFBRUlDLFlBQVksU0FBWkEsU0FBWSxDQUFTQyxLQUFULEVBQWdCO0FBQ3hCLGVBQU9BLFFBQVEsQ0FBUixHQUFZLENBQW5CO0FBQ0gsS0FKTDtBQUFBLFFBTUlDLGNBQWMsU0FBZEEsV0FBYyxDQUFTQyxlQUFULEVBQTBCO0FBQ3BDLGVBQU9BLGtCQUFrQixFQUF6QjtBQUNILEtBUkw7O0FBVUFMLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHRSxTQUFILEdBQWVBLFNBQWY7QUFDQUYsT0FBR0ksV0FBSCxHQUFpQkEsV0FBakI7O0FBRUFILFdBQU8sb0JBQW9CRixLQUFwQixFQUEyQkMsRUFBM0IsQ0FBUDs7QUFFQSxXQUFPQyxJQUFQO0FBQ0giLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVBhcmFtZXRlciBmcm9tICcuL2Jhc2UnXG5cbi8qKlxuICogUGFyYW1ldGVyIGZvciBCb29sZWFuIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm9vbGVhblBhcmFtZXRlcihzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPyAxIDogMDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGRlTm9ybWFsaXplID0gZnVuY3Rpb24obm9ybWFsaXplZFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplZFZhbHVlID4gLjU7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgbXkuZGVOb3JtYWxpemUgPSBkZU5vcm1hbGl6ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVBhcmFtZXRlcihzcGVjcywgbXkpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3BhcmFtZXRlci9ib29sZWFuLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteParameter;\n/**\n * Functionality for parameters that are controllable by external MIDI CC values.\n * Also includes functionality for MIDI learn mode.\n */\nfunction createRemoteParameter(specs, my) {\n    var that,\n        remoteStateChangeCallbacks = [],\n\n\n    /**\n     * Set the remote state of the parameter.\n     * This calls the setting view associated with this parameter, so that\n     * it goes into learn mode or shows it's selected or assigned.\n     * @param {String} state Remote assignment state, for example 'selected' or 'assigned'\n     * @param {Function} callback Function to call when in learn mode (ugly, improve some day)\n     */\n    setRemoteState = function setRemoteState(state, callback) {\n        for (var i = 0, n = remoteStateChangeCallbacks.length; i < n; i++) {\n            remoteStateChangeCallbacks[i](state, callback);\n        }\n    },\n\n\n    /**\n     * Add a callback function to update the remote overlay on the\n     * parameter's setting view, so that the setting view can go\n     * into learn mode, or show that it's selected or assigned.\n     * It also updates the remote view entries of assigned parameters.\n     * @param {Function} callback Callback function.\n     */\n    addRemoteStateCallback = function addRemoteStateCallback(callback) {\n        remoteStateChangeCallbacks.push(callback);\n    },\n\n\n    /**\n     * Removes a callback function.\n     * @param {Function} callback The function that will be removed.\n     */\n    removeRemoteStateCallback = function removeRemoteStateCallback(callback) {\n        var index = remoteStateChangeCallbacks.indexOf(callback);\n        if (index > -1) {\n            remoteStateChangeCallbacks.splice(index, 1);\n        }\n    },\n        setRemoteProperty = function setRemoteProperty(key, value) {\n        if (my.remoteProps.hasOwnProperty(key)) {\n            my.remoteProps[key] = value;\n        }\n    },\n        getRemoteProperty = function getRemoteProperty(key) {\n        if (my.remoteProps.hasOwnProperty(key)) {\n            return my.remoteProps[key];\n        }\n    },\n        getRemoteData = function getRemoteData() {\n        return my.remoteProps;\n    };\n\n    my = my || {};\n    my.remoteProps = {\n        channel: null,\n        controller: null\n    };\n\n    that = specs.that || {};\n\n    that.setRemoteState = setRemoteState;\n    that.addRemoteStateCallback = addRemoteStateCallback;\n    that.removeRemoteStateCallback = removeRemoteStateCallback;\n    that.setRemoteProperty = setRemoteProperty;\n    that.getRemoteProperty = getRemoteProperty;\n    that.getRemoteData = getRemoteData;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcGFyYW1ldGVyL3JlbW90ZS5qcz9lMGI3Il0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZVBhcmFtZXRlciIsInNwZWNzIiwibXkiLCJ0aGF0IiwicmVtb3RlU3RhdGVDaGFuZ2VDYWxsYmFja3MiLCJzZXRSZW1vdGVTdGF0ZSIsInN0YXRlIiwiY2FsbGJhY2siLCJpIiwibiIsImxlbmd0aCIsImFkZFJlbW90ZVN0YXRlQ2FsbGJhY2siLCJwdXNoIiwicmVtb3ZlUmVtb3RlU3RhdGVDYWxsYmFjayIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInNldFJlbW90ZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJyZW1vdGVQcm9wcyIsImhhc093blByb3BlcnR5IiwiZ2V0UmVtb3RlUHJvcGVydHkiLCJnZXRSZW1vdGVEYXRhIiwiY2hhbm5lbCIsImNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUl3QkEscUI7QUFKeEI7Ozs7QUFJZSxTQUFTQSxxQkFBVCxDQUErQkMsS0FBL0IsRUFBc0NDLEVBQXRDLEVBQTBDO0FBQ3JELFFBQUlDLElBQUo7QUFBQSxRQUNJQyw2QkFBNkIsRUFEakM7OztBQUdJOzs7Ozs7O0FBT0FDLHFCQUFpQixTQUFqQkEsY0FBaUIsQ0FBU0MsS0FBVCxFQUFnQkMsUUFBaEIsRUFBMEI7QUFDdkMsYUFBSyxJQUFJQyxJQUFJLENBQVIsRUFBV0MsSUFBSUwsMkJBQTJCTSxNQUEvQyxFQUF1REYsSUFBSUMsQ0FBM0QsRUFBOERELEdBQTlELEVBQW1FO0FBQy9ESix1Q0FBMkJJLENBQTNCLEVBQThCRixLQUE5QixFQUFxQ0MsUUFBckM7QUFDSDtBQUNKLEtBZEw7OztBQWdCSTs7Ozs7OztBQU9BSSw2QkFBeUIsU0FBekJBLHNCQUF5QixDQUFTSixRQUFULEVBQW1CO0FBQ3hDSCxtQ0FBMkJRLElBQTNCLENBQWdDTCxRQUFoQztBQUNILEtBekJMOzs7QUEyQkk7Ozs7QUFJQU0sZ0NBQTRCLFNBQTVCQSx5QkFBNEIsQ0FBU04sUUFBVCxFQUFtQjtBQUMzQyxZQUFJTyxRQUFRViwyQkFBMkJXLE9BQTNCLENBQW1DUixRQUFuQyxDQUFaO0FBQ0EsWUFBSU8sUUFBUSxDQUFDLENBQWIsRUFBZ0I7QUFDWlYsdUNBQTJCWSxNQUEzQixDQUFrQ0YsS0FBbEMsRUFBeUMsQ0FBekM7QUFDSDtBQUNKLEtBcENMO0FBQUEsUUFzQ0lHLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQVNDLEdBQVQsRUFBY0MsS0FBZCxFQUFxQjtBQUNyQyxZQUFJakIsR0FBR2tCLFdBQUgsQ0FBZUMsY0FBZixDQUE4QkgsR0FBOUIsQ0FBSixFQUF3QztBQUNwQ2hCLGVBQUdrQixXQUFILENBQWVGLEdBQWYsSUFBc0JDLEtBQXRCO0FBQ0g7QUFDSixLQTFDTDtBQUFBLFFBNENJRyxvQkFBb0IsU0FBcEJBLGlCQUFvQixDQUFTSixHQUFULEVBQWM7QUFDOUIsWUFBSWhCLEdBQUdrQixXQUFILENBQWVDLGNBQWYsQ0FBOEJILEdBQTlCLENBQUosRUFBd0M7QUFDcEMsbUJBQU9oQixHQUFHa0IsV0FBSCxDQUFlRixHQUFmLENBQVA7QUFDSDtBQUNKLEtBaERMO0FBQUEsUUFrRElLLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPckIsR0FBR2tCLFdBQVY7QUFDSCxLQXBETDs7QUFzREFsQixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR2tCLFdBQUgsR0FBaUI7QUFDYkksaUJBQVMsSUFESTtBQUViQyxvQkFBWTtBQUZDLEtBQWpCOztBQUtBdEIsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBQSxTQUFLRSxjQUFMLEdBQXNCQSxjQUF0QjtBQUNBRixTQUFLUSxzQkFBTCxHQUE4QkEsc0JBQTlCO0FBQ0FSLFNBQUtVLHlCQUFMLEdBQWlDQSx5QkFBakM7QUFDQVYsU0FBS2MsaUJBQUwsR0FBeUJBLGlCQUF6QjtBQUNBZCxTQUFLbUIsaUJBQUwsR0FBeUJBLGlCQUF6QjtBQUNBbkIsU0FBS29CLGFBQUwsR0FBcUJBLGFBQXJCO0FBQ0EsV0FBT3BCLElBQVA7QUFDSCIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRnVuY3Rpb25hbGl0eSBmb3IgcGFyYW1ldGVycyB0aGF0IGFyZSBjb250cm9sbGFibGUgYnkgZXh0ZXJuYWwgTUlESSBDQyB2YWx1ZXMuXG4gKiBBbHNvIGluY2x1ZGVzIGZ1bmN0aW9uYWxpdHkgZm9yIE1JREkgbGVhcm4gbW9kZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUmVtb3RlUGFyYW1ldGVyKHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICByZW1vdGVTdGF0ZUNoYW5nZUNhbGxiYWNrcyA9IFtdLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCB0aGUgcmVtb3RlIHN0YXRlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICAgICAqIFRoaXMgY2FsbHMgdGhlIHNldHRpbmcgdmlldyBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXJhbWV0ZXIsIHNvIHRoYXRcbiAgICAgICAgICogaXQgZ29lcyBpbnRvIGxlYXJuIG1vZGUgb3Igc2hvd3MgaXQncyBzZWxlY3RlZCBvciBhc3NpZ25lZC5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXRlIFJlbW90ZSBhc3NpZ25tZW50IHN0YXRlLCBmb3IgZXhhbXBsZSAnc2VsZWN0ZWQnIG9yICdhc3NpZ25lZCdcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIGluIGxlYXJuIG1vZGUgKHVnbHksIGltcHJvdmUgc29tZSBkYXkpXG4gICAgICAgICAqL1xuICAgICAgICBzZXRSZW1vdGVTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSByZW1vdGVTdGF0ZUNoYW5nZUNhbGxiYWNrcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZW1vdGVTdGF0ZUNoYW5nZUNhbGxiYWNrc1tpXShzdGF0ZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgcmVtb3RlIG92ZXJsYXkgb24gdGhlXG4gICAgICAgICAqIHBhcmFtZXRlcidzIHNldHRpbmcgdmlldywgc28gdGhhdCB0aGUgc2V0dGluZyB2aWV3IGNhbiBnb1xuICAgICAgICAgKiBpbnRvIGxlYXJuIG1vZGUsIG9yIHNob3cgdGhhdCBpdCdzIHNlbGVjdGVkIG9yIGFzc2lnbmVkLlxuICAgICAgICAgKiBJdCBhbHNvIHVwZGF0ZXMgdGhlIHJlbW90ZSB2aWV3IGVudHJpZXMgb2YgYXNzaWduZWQgcGFyYW1ldGVycy5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRSZW1vdGVTdGF0ZUNhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlbW90ZVN0YXRlQ2hhbmdlQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmVzIGEgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZVJlbW90ZVN0YXRlQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcmVtb3RlU3RhdGVDaGFuZ2VDYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIHJlbW90ZVN0YXRlQ2hhbmdlQ2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRSZW1vdGVQcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChteS5yZW1vdGVQcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbXkucmVtb3RlUHJvcHNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0UmVtb3RlUHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIGlmIChteS5yZW1vdGVQcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG15LnJlbW90ZVByb3BzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBnZXRSZW1vdGVEYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbXkucmVtb3RlUHJvcHM7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5yZW1vdGVQcm9wcyA9IHtcbiAgICAgICAgY2hhbm5lbDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbFxuICAgIH07XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgdGhhdC5zZXRSZW1vdGVTdGF0ZSA9IHNldFJlbW90ZVN0YXRlO1xuICAgIHRoYXQuYWRkUmVtb3RlU3RhdGVDYWxsYmFjayA9IGFkZFJlbW90ZVN0YXRlQ2FsbGJhY2s7XG4gICAgdGhhdC5yZW1vdmVSZW1vdGVTdGF0ZUNhbGxiYWNrID0gcmVtb3ZlUmVtb3RlU3RhdGVDYWxsYmFjaztcbiAgICB0aGF0LnNldFJlbW90ZVByb3BlcnR5ID0gc2V0UmVtb3RlUHJvcGVydHk7XG4gICAgdGhhdC5nZXRSZW1vdGVQcm9wZXJ0eSA9IGdldFJlbW90ZVByb3BlcnR5O1xuICAgIHRoYXQuZ2V0UmVtb3RlRGF0YSA9IGdldFJlbW90ZURhdGE7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcGFyYW1ldGVyL3JlbW90ZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIntegerParameter;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parameter for integer values between a minimum and maximum.\n */\nfunction createIntegerParameter(specs, my) {\n    var that,\n        changedMaxCallbacks = [],\n        init = function init() {\n        my.props.min = specs.min;\n        my.props.max = specs.max;\n    },\n\n\n    /**\n     * Convert value to number between 0 and 1.\n     * @param  {Number} value Parameter's value.\n     * @return {Number} Normalised value between 0 and 1.\n     */\n    normalize = function normalize(value) {\n        return (value - my.props.min) / (my.props.max - my.props.min);\n    },\n\n\n    /**\n     * Get value from number between 0 and 1.\n     * @param  {Number} normalizedValue Normalised value between 0 and 1.\n     * @return {Number} Parameter's value.\n     */\n    deNormalize = function deNormalize(normalizedValue) {\n        return Math.round(my.props.min + normalizedValue * (my.props.max - my.props.min));\n    },\n\n\n    /**\n     * Set a new maximum value.\n     * This happens to EPG pulses and rotation when steps change.\n     * @param {Number} newMax The new Maximum value for this parameter.\n     */\n    setMax = function setMax(newMax) {\n        my.props.max = newMax;\n        var n = changedMaxCallbacks.length;\n        for (var i = 0; i < n; i++) {\n            changedMaxCallbacks[i](my.props.max);\n        }\n    },\n\n\n    /**\n     * Adds a max callback function.\n     * @param {Function} callback The function, that will be invoked on max value changed.\n     */\n    addChangedMaxCallback = function addChangedMaxCallback(callback) {\n        changedMaxCallbacks.push(callback);\n    },\n\n\n    /**\n     * Removes a max callback function.\n     * @param {Function} callback The function that will be removed.\n     */\n    removeChangedMaxCallback = function removeChangedMaxCallback(callback) {\n        var index = changedMaxCallbacks.indexOf(callback);\n        if (index > -1) {\n            changedMaxCallbacks.splice(index, 1);\n        }\n    };\n\n    my = my || {};\n    my.normalize = normalize;\n    my.deNormalize = deNormalize;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    that.setMax = setMax;\n    that.addChangedMaxCallback = addChangedMaxCallback;\n    that.removeChangedMaxCallback = removeChangedMaxCallback;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcGFyYW1ldGVyL2ludGVnZXIuanM/NjhjMCJdLCJuYW1lcyI6WyJjcmVhdGVJbnRlZ2VyUGFyYW1ldGVyIiwic3BlY3MiLCJteSIsInRoYXQiLCJjaGFuZ2VkTWF4Q2FsbGJhY2tzIiwiaW5pdCIsInByb3BzIiwibWluIiwibWF4Iiwibm9ybWFsaXplIiwidmFsdWUiLCJkZU5vcm1hbGl6ZSIsIm5vcm1hbGl6ZWRWYWx1ZSIsIk1hdGgiLCJyb3VuZCIsInNldE1heCIsIm5ld01heCIsIm4iLCJsZW5ndGgiLCJpIiwiYWRkQ2hhbmdlZE1heENhbGxiYWNrIiwiY2FsbGJhY2siLCJwdXNoIiwicmVtb3ZlQ2hhbmdlZE1heENhbGxiYWNrIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLHNCOztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLHNCQUFULENBQWdDQyxLQUFoQyxFQUF1Q0MsRUFBdkMsRUFBMkM7QUFDdEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLHNCQUFzQixFQUQxQjtBQUFBLFFBR0lDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RILFdBQUdJLEtBQUgsQ0FBU0MsR0FBVCxHQUFlTixNQUFNTSxHQUFyQjtBQUNBTCxXQUFHSSxLQUFILENBQVNFLEdBQVQsR0FBZVAsTUFBTU8sR0FBckI7QUFDSCxLQU5MOzs7QUFRSTs7Ozs7QUFLQUMsZ0JBQVksU0FBWkEsU0FBWSxDQUFTQyxLQUFULEVBQWdCO0FBQ3hCLGVBQU8sQ0FBQ0EsUUFBUVIsR0FBR0ksS0FBSCxDQUFTQyxHQUFsQixLQUEwQkwsR0FBR0ksS0FBSCxDQUFTRSxHQUFULEdBQWVOLEdBQUdJLEtBQUgsQ0FBU0MsR0FBbEQsQ0FBUDtBQUNILEtBZkw7OztBQWlCSTs7Ozs7QUFLQUksa0JBQWMsU0FBZEEsV0FBYyxDQUFTQyxlQUFULEVBQTBCO0FBQ3BDLGVBQU9DLEtBQUtDLEtBQUwsQ0FBV1osR0FBR0ksS0FBSCxDQUFTQyxHQUFULEdBQWVLLG1CQUFtQlYsR0FBR0ksS0FBSCxDQUFTRSxHQUFULEdBQWVOLEdBQUdJLEtBQUgsQ0FBU0MsR0FBM0MsQ0FBMUIsQ0FBUDtBQUNILEtBeEJMOzs7QUEwQkk7Ozs7O0FBS0FRLGFBQVMsU0FBVEEsTUFBUyxDQUFTQyxNQUFULEVBQWlCO0FBQ3RCZCxXQUFHSSxLQUFILENBQVNFLEdBQVQsR0FBZVEsTUFBZjtBQUNBLFlBQUlDLElBQUliLG9CQUFvQmMsTUFBNUI7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsQ0FBcEIsRUFBdUJFLEdBQXZCLEVBQTRCO0FBQ3hCZixnQ0FBb0JlLENBQXBCLEVBQXVCakIsR0FBR0ksS0FBSCxDQUFTRSxHQUFoQztBQUNIO0FBQ0osS0FyQ0w7OztBQXVDSTs7OztBQUlBWSw0QkFBd0IsU0FBeEJBLHFCQUF3QixDQUFTQyxRQUFULEVBQW1CO0FBQ3ZDakIsNEJBQW9Ca0IsSUFBcEIsQ0FBeUJELFFBQXpCO0FBQ0gsS0E3Q0w7OztBQStDSTs7OztBQUlBRSwrQkFBMkIsU0FBM0JBLHdCQUEyQixDQUFTRixRQUFULEVBQW1CO0FBQzFDLFlBQUlHLFFBQVFwQixvQkFBb0JxQixPQUFwQixDQUE0QkosUUFBNUIsQ0FBWjtBQUNBLFlBQUlHLFFBQVEsQ0FBQyxDQUFiLEVBQWdCO0FBQ1pwQixnQ0FBb0JzQixNQUFwQixDQUEyQkYsS0FBM0IsRUFBa0MsQ0FBbEM7QUFDSDtBQUNKLEtBeERMOztBQTBEQXRCLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHTyxTQUFILEdBQWVBLFNBQWY7QUFDQVAsT0FBR1MsV0FBSCxHQUFpQkEsV0FBakI7O0FBRUFSLFdBQU8sb0JBQW9CRixLQUFwQixFQUEyQkMsRUFBM0IsQ0FBUDs7QUFFQUc7O0FBRUFGLFNBQUtZLE1BQUwsR0FBY0EsTUFBZDtBQUNBWixTQUFLaUIscUJBQUwsR0FBNkJBLHFCQUE3QjtBQUNBakIsU0FBS29CLHdCQUFMLEdBQWdDQSx3QkFBaEM7QUFDQSxXQUFPcEIsSUFBUDtBQUNIIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VQYXJhbWV0ZXIgZnJvbSAnLi9iYXNlJ1xuXG4vKipcbiAqIFBhcmFtZXRlciBmb3IgaW50ZWdlciB2YWx1ZXMgYmV0d2VlbiBhIG1pbmltdW0gYW5kIG1heGltdW0uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUludGVnZXJQYXJhbWV0ZXIoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIGNoYW5nZWRNYXhDYWxsYmFja3MgPSBbXSxcbiAgICAgICAgXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG15LnByb3BzLm1pbiA9IHNwZWNzLm1pbjtcbiAgICAgICAgICAgIG15LnByb3BzLm1heCA9IHNwZWNzLm1heDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0IHZhbHVlIHRvIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICAgICAqIEBwYXJhbSAge051bWJlcn0gdmFsdWUgUGFyYW1ldGVyJ3MgdmFsdWUuXG4gICAgICAgICAqIEByZXR1cm4ge051bWJlcn0gTm9ybWFsaXNlZCB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICAgICAqL1xuICAgICAgICBub3JtYWxpemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSAtIG15LnByb3BzLm1pbikgLyAobXkucHJvcHMubWF4IC0gbXkucHJvcHMubWluKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdmFsdWUgZnJvbSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG5vcm1hbGl6ZWRWYWx1ZSBOb3JtYWxpc2VkIHZhbHVlIGJldHdlZW4gMCBhbmQgMS5cbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfSBQYXJhbWV0ZXIncyB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGRlTm9ybWFsaXplID0gZnVuY3Rpb24obm9ybWFsaXplZFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChteS5wcm9wcy5taW4gKyBub3JtYWxpemVkVmFsdWUgKiAobXkucHJvcHMubWF4IC0gbXkucHJvcHMubWluKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGEgbmV3IG1heGltdW0gdmFsdWUuXG4gICAgICAgICAqIFRoaXMgaGFwcGVucyB0byBFUEcgcHVsc2VzIGFuZCByb3RhdGlvbiB3aGVuIHN0ZXBzIGNoYW5nZS5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG5ld01heCBUaGUgbmV3IE1heGltdW0gdmFsdWUgZm9yIHRoaXMgcGFyYW1ldGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0TWF4ID0gZnVuY3Rpb24obmV3TWF4KSB7XG4gICAgICAgICAgICBteS5wcm9wcy5tYXggPSBuZXdNYXg7XG4gICAgICAgICAgICB2YXIgbiA9IGNoYW5nZWRNYXhDYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkTWF4Q2FsbGJhY2tzW2ldKG15LnByb3BzLm1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGEgbWF4IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24sIHRoYXQgd2lsbCBiZSBpbnZva2VkIG9uIG1heCB2YWx1ZSBjaGFuZ2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkQ2hhbmdlZE1heENhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNoYW5nZWRNYXhDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZXMgYSBtYXggY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZUNoYW5nZWRNYXhDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBjaGFuZ2VkTWF4Q2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkTWF4Q2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgbXkuZGVOb3JtYWxpemUgPSBkZU5vcm1hbGl6ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVBhcmFtZXRlcihzcGVjcywgbXkpO1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICB0aGF0LnNldE1heCA9IHNldE1heDtcbiAgICB0aGF0LmFkZENoYW5nZWRNYXhDYWxsYmFjayA9IGFkZENoYW5nZWRNYXhDYWxsYmFjaztcbiAgICB0aGF0LnJlbW92ZUNoYW5nZWRNYXhDYWxsYmFjayA9IHJlbW92ZUNoYW5nZWRNYXhDYWxsYmFjaztcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9wYXJhbWV0ZXIvaW50ZWdlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createItemizedParameter;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parameter for integer values between an minimum and maximum.\n */\nfunction createItemizedParameter(specs, my) {\n    var that,\n        normalize = function normalize(value) {\n        return (value - my.min) / (my.max - my.min);\n    },\n        deNormalize = function deNormalize(normalizedValue) {\n        if (normalizedValue == 1) {\n            return values[my.model[my.model.length - 1].value];\n        }\n        return my.model[Math.floor(normalizedValue * my.model.length)].value;\n    },\n        getModel = function getModel() {\n        return my.model;\n    };\n\n    my = my || {};\n    my.model = specs.model;\n    my.normalize = normalize;\n    my.deNormalize = deNormalize;\n\n    that = (0, _base2.default)(specs, my);\n\n    that.getModel = getModel;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcGFyYW1ldGVyL2l0ZW1pemVkLmpzPzUwZDQiXSwibmFtZXMiOlsiY3JlYXRlSXRlbWl6ZWRQYXJhbWV0ZXIiLCJzcGVjcyIsIm15IiwidGhhdCIsIm5vcm1hbGl6ZSIsInZhbHVlIiwibWluIiwibWF4IiwiZGVOb3JtYWxpemUiLCJub3JtYWxpemVkVmFsdWUiLCJ2YWx1ZXMiLCJtb2RlbCIsImxlbmd0aCIsIk1hdGgiLCJmbG9vciIsImdldE1vZGVsIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLHVCOztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLHVCQUFULENBQWlDQyxLQUFqQyxFQUF3Q0MsRUFBeEMsRUFBNEM7QUFDdkQsUUFBSUMsSUFBSjtBQUFBLFFBRUlDLFlBQVksU0FBWkEsU0FBWSxDQUFTQyxLQUFULEVBQWdCO0FBQ3hCLGVBQU8sQ0FBQ0EsUUFBUUgsR0FBR0ksR0FBWixLQUFvQkosR0FBR0ssR0FBSCxHQUFTTCxHQUFHSSxHQUFoQyxDQUFQO0FBQ0gsS0FKTDtBQUFBLFFBTUlFLGNBQWMsU0FBZEEsV0FBYyxDQUFTQyxlQUFULEVBQTBCO0FBQ3BDLFlBQUlBLG1CQUFtQixDQUF2QixFQUEwQjtBQUN0QixtQkFBT0MsT0FBT1IsR0FBR1MsS0FBSCxDQUFTVCxHQUFHUyxLQUFILENBQVNDLE1BQVQsR0FBa0IsQ0FBM0IsRUFBOEJQLEtBQXJDLENBQVA7QUFDSDtBQUNELGVBQU9ILEdBQUdTLEtBQUgsQ0FBU0UsS0FBS0MsS0FBTCxDQUFXTCxrQkFBa0JQLEdBQUdTLEtBQUgsQ0FBU0MsTUFBdEMsQ0FBVCxFQUF3RFAsS0FBL0Q7QUFDSCxLQVhMO0FBQUEsUUFhSVUsV0FBVyxTQUFYQSxRQUFXLEdBQVc7QUFDbEIsZUFBT2IsR0FBR1MsS0FBVjtBQUNILEtBZkw7O0FBaUJBVCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR1MsS0FBSCxHQUFXVixNQUFNVSxLQUFqQjtBQUNBVCxPQUFHRSxTQUFILEdBQWVBLFNBQWY7QUFDQUYsT0FBR00sV0FBSCxHQUFpQkEsV0FBakI7O0FBRUFMLFdBQU8sb0JBQW9CRixLQUFwQixFQUEyQkMsRUFBM0IsQ0FBUDs7QUFFQUMsU0FBS1ksUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxXQUFPWixJQUFQO0FBQ0giLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVBhcmFtZXRlciBmcm9tICcuL2Jhc2UnXG5cbi8qKlxuICogUGFyYW1ldGVyIGZvciBpbnRlZ2VyIHZhbHVlcyBiZXR3ZWVuIGFuIG1pbmltdW0gYW5kIG1heGltdW0uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1pemVkUGFyYW1ldGVyKHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBcbiAgICAgICAgbm9ybWFsaXplID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgLSBteS5taW4pIC8gKG15Lm1heCAtIG15Lm1pbik7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBkZU5vcm1hbGl6ZSA9IGZ1bmN0aW9uKG5vcm1hbGl6ZWRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRWYWx1ZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1tteS5tb2RlbFtteS5tb2RlbC5sZW5ndGggLSAxXS52YWx1ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbXkubW9kZWxbTWF0aC5mbG9vcihub3JtYWxpemVkVmFsdWUgKiBteS5tb2RlbC5sZW5ndGgpXS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGdldE1vZGVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbXkubW9kZWw7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5tb2RlbCA9IHNwZWNzLm1vZGVsO1xuICAgIG15Lm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcbiAgICBteS5kZU5vcm1hbGl6ZSA9IGRlTm9ybWFsaXplO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlUGFyYW1ldGVyKHNwZWNzLCBteSk7XG4gICAgXG4gICAgdGhhdC5nZXRNb2RlbCA9IGdldE1vZGVsO1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3BhcmFtZXRlci9pdGVtaXplZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStringParameter;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parameter for String values.\n */\nfunction createStringParameter(specs, my) {\n    var that,\n        normalize = function normalize(value) {\n        return value ? 1 : 0;\n    },\n        deNormalize = function deNormalize(normalizedValue) {\n        return value;\n    };\n\n    my = my || {};\n    my.normalize = normalize;\n    my.deNormalize = deNormalize;\n\n    that = (0, _base2.default)(specs, my);\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcGFyYW1ldGVyL3N0cmluZy5qcz85NGMxIl0sIm5hbWVzIjpbImNyZWF0ZVN0cmluZ1BhcmFtZXRlciIsInNwZWNzIiwibXkiLCJ0aGF0Iiwibm9ybWFsaXplIiwidmFsdWUiLCJkZU5vcm1hbGl6ZSIsIm5vcm1hbGl6ZWRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBS3dCQSxxQjs7QUFMeEI7Ozs7OztBQUVBOzs7QUFHZSxTQUFTQSxxQkFBVCxDQUErQkMsS0FBL0IsRUFBc0NDLEVBQXRDLEVBQTBDO0FBQ3JELFFBQUlDLElBQUo7QUFBQSxRQUVJQyxZQUFZLFNBQVpBLFNBQVksQ0FBU0MsS0FBVCxFQUFnQjtBQUN4QixlQUFPQSxRQUFRLENBQVIsR0FBWSxDQUFuQjtBQUNILEtBSkw7QUFBQSxRQU1JQyxjQUFjLFNBQWRBLFdBQWMsQ0FBU0MsZUFBVCxFQUEwQjtBQUNwQyxlQUFPRixLQUFQO0FBQ0gsS0FSTDs7QUFVQUgsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdFLFNBQUgsR0FBZUEsU0FBZjtBQUNBRixPQUFHSSxXQUFILEdBQWlCQSxXQUFqQjs7QUFFQUgsV0FBTyxvQkFBb0JGLEtBQXBCLEVBQTJCQyxFQUEzQixDQUFQOztBQUVBLFdBQU9DLElBQVA7QUFDSCIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlUGFyYW1ldGVyIGZyb20gJy4vYmFzZSdcblxuLyoqXG4gKiBQYXJhbWV0ZXIgZm9yIFN0cmluZyB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0cmluZ1BhcmFtZXRlcihzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPyAxIDogMDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGRlTm9ybWFsaXplID0gZnVuY3Rpb24obm9ybWFsaXplZFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgbXkuZGVOb3JtYWxpemUgPSBkZU5vcm1hbGl6ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVBhcmFtZXRlcihzcGVjcywgbXkpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3BhcmFtZXRlci9zdHJpbmcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createVector2DParameter;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parameter for Boolean values.\n */\nfunction createVector2DParameter(specs, my) {\n    var that,\n        normalize = function normalize(value) {\n        return value ? 1 : 0;\n    },\n        deNormalize = function deNormalize(normalizedValue) {\n        return value;\n    };\n\n    my = my || {};\n    my.normalize = normalize;\n    my.deNormalize = deNormalize;\n\n    that = (0, _base2.default)(specs, my);\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcGFyYW1ldGVyL3ZlY3RvcjJkLmpzP2E1NjAiXSwibmFtZXMiOlsiY3JlYXRlVmVjdG9yMkRQYXJhbWV0ZXIiLCJzcGVjcyIsIm15IiwidGhhdCIsIm5vcm1hbGl6ZSIsInZhbHVlIiwiZGVOb3JtYWxpemUiLCJub3JtYWxpemVkVmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUt3QkEsdUI7O0FBTHhCOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsdUJBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDQyxFQUF4QyxFQUE0QztBQUN2RCxRQUFJQyxJQUFKO0FBQUEsUUFFSUMsWUFBWSxTQUFaQSxTQUFZLENBQVNDLEtBQVQsRUFBZ0I7QUFDeEIsZUFBT0EsUUFBUSxDQUFSLEdBQVksQ0FBbkI7QUFDSCxLQUpMO0FBQUEsUUFNSUMsY0FBYyxTQUFkQSxXQUFjLENBQVNDLGVBQVQsRUFBMEI7QUFDcEMsZUFBT0YsS0FBUDtBQUNILEtBUkw7O0FBVUFILFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHRSxTQUFILEdBQWVBLFNBQWY7QUFDQUYsT0FBR0ksV0FBSCxHQUFpQkEsV0FBakI7O0FBRUFILFdBQU8sb0JBQW9CRixLQUFwQixFQUEyQkMsRUFBM0IsQ0FBUDs7QUFFQSxXQUFPQyxJQUFQO0FBQ0giLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVBhcmFtZXRlciBmcm9tICcuL2Jhc2UnXG5cbi8qKlxuICogUGFyYW1ldGVyIGZvciBCb29sZWFuIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVmVjdG9yMkRQYXJhbWV0ZXIoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICBub3JtYWxpemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID8gMSA6IDA7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBkZU5vcm1hbGl6ZSA9IGZ1bmN0aW9uKG5vcm1hbGl6ZWRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkubm9ybWFsaXplID0gbm9ybWFsaXplO1xuICAgIG15LmRlTm9ybWFsaXplID0gZGVOb3JtYWxpemU7XG4gICAgXG4gICAgdGhhdCA9IGNyZWF0ZUJhc2VQYXJhbWV0ZXIoc3BlY3MsIG15KTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9wYXJhbWV0ZXIvdmVjdG9yMmQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIConnectorIn;\n/**\n * MIDI network processor in connector.\n */\nfunction createMIDIConnectorIn(specs, my) {\n    var that,\n        sources = [],\n        numSources = 0,\n\n\n    /**\n     * Collects data from all processors this input is connected to.\n     * @return {Array} MIDI event data from all connected processors.\n     */\n    getInputData = function getInputData() {\n        var outputData = [],\n            data = [];\n        for (var i = 0; i < numSources; i++) {\n            data = sources[i].getOutputData();\n            outputData = outputData.concat(data);\n            data.length = 0;\n        }\n        return outputData;\n    },\n\n\n    /**\n     * Connect a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    addConnection = function addConnection(processor) {\n        sources.push(processor);\n        numSources = sources.length;\n        console.log('Connect ' + processor.getType() + ' (id ' + processor.getID() + ') to ' + that.getType() + ' (id ' + that.getID() + ')');\n    },\n\n\n    /**\n     * Remove a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    removeConnection = function removeConnection(processor) {\n        var n = sources.length;\n        while (--n >= 0) {\n            if (processor === sources[n]) {\n                sources.splice(n, 1);\n                numSources = sources.length;\n                console.log('Disconnect ' + processor.getType() + ' (id ' + processor.getID() + ') from ' + that.getType() + ' (id ' + that.getID() + ')');\n                break;\n            }\n        }\n    },\n\n\n    /**\n     * Get number of connections.\n     * Used by the output port module to determine if \n     * @return {Number} Number of connections to this output processor.\n     */\n    hasInputConnections = function hasInputConnections() {\n        return numSources > 0;\n    };\n\n    my = my || {};\n    my.getInputData = getInputData;\n\n    that = specs.that || {};\n    that.addConnection = addConnection;\n    that.removeConnection = removeConnection;\n    that.hasInputConnections = hasInputConnections;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3Jpbi5qcz9mZDIwIl0sIm5hbWVzIjpbImNyZWF0ZU1JRElDb25uZWN0b3JJbiIsInNwZWNzIiwibXkiLCJ0aGF0Iiwic291cmNlcyIsIm51bVNvdXJjZXMiLCJnZXRJbnB1dERhdGEiLCJvdXRwdXREYXRhIiwiZGF0YSIsImkiLCJnZXRPdXRwdXREYXRhIiwiY29uY2F0IiwibGVuZ3RoIiwiYWRkQ29ubmVjdGlvbiIsInByb2Nlc3NvciIsInB1c2giLCJjb25zb2xlIiwibG9nIiwiZ2V0VHlwZSIsImdldElEIiwicmVtb3ZlQ29ubmVjdGlvbiIsIm4iLCJzcGxpY2UiLCJoYXNJbnB1dENvbm5lY3Rpb25zIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFHd0JBLHFCO0FBSHhCOzs7QUFHZSxTQUFTQSxxQkFBVCxDQUErQkMsS0FBL0IsRUFBc0NDLEVBQXRDLEVBQTBDO0FBQ3JELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxVQUFVLEVBRGQ7QUFBQSxRQUVJQyxhQUFhLENBRmpCOzs7QUFJSTs7OztBQUlBQyxtQkFBZSxTQUFmQSxZQUFlLEdBQVc7QUFDdEIsWUFBSUMsYUFBYSxFQUFqQjtBQUFBLFlBQ0lDLE9BQU8sRUFEWDtBQUVBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSixVQUFwQixFQUFnQ0ksR0FBaEMsRUFBcUM7QUFDakNELG1CQUFPSixRQUFRSyxDQUFSLEVBQVdDLGFBQVgsRUFBUDtBQUNBSCx5QkFBYUEsV0FBV0ksTUFBWCxDQUFrQkgsSUFBbEIsQ0FBYjtBQUNBQSxpQkFBS0ksTUFBTCxHQUFjLENBQWQ7QUFDSDtBQUNELGVBQU9MLFVBQVA7QUFDSCxLQWpCTDs7O0FBbUJJOzs7O0FBSUFNLG9CQUFnQixTQUFoQkEsYUFBZ0IsQ0FBU0MsU0FBVCxFQUFvQjtBQUNoQ1YsZ0JBQVFXLElBQVIsQ0FBYUQsU0FBYjtBQUNBVCxxQkFBYUQsUUFBUVEsTUFBckI7QUFDQUksZ0JBQVFDLEdBQVIsQ0FBWSxhQUFhSCxVQUFVSSxPQUFWLEVBQWIsR0FBbUMsT0FBbkMsR0FBNkNKLFVBQVVLLEtBQVYsRUFBN0MsR0FBaUUsT0FBakUsR0FBMkVoQixLQUFLZSxPQUFMLEVBQTNFLEdBQTRGLE9BQTVGLEdBQXNHZixLQUFLZ0IsS0FBTCxFQUF0RyxHQUFxSCxHQUFqSTtBQUNILEtBM0JMOzs7QUE2Qkk7Ozs7QUFJQUMsdUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBU04sU0FBVCxFQUFvQjtBQUNuQyxZQUFJTyxJQUFJakIsUUFBUVEsTUFBaEI7QUFDQSxlQUFPLEVBQUVTLENBQUYsSUFBTyxDQUFkLEVBQWlCO0FBQ2IsZ0JBQUlQLGNBQWNWLFFBQVFpQixDQUFSLENBQWxCLEVBQThCO0FBQzFCakIsd0JBQVFrQixNQUFSLENBQWVELENBQWYsRUFBa0IsQ0FBbEI7QUFDQWhCLDZCQUFhRCxRQUFRUSxNQUFyQjtBQUNBSSx3QkFBUUMsR0FBUixDQUFZLGdCQUFnQkgsVUFBVUksT0FBVixFQUFoQixHQUFzQyxPQUF0QyxHQUFnREosVUFBVUssS0FBVixFQUFoRCxHQUFvRSxTQUFwRSxHQUFnRmhCLEtBQUtlLE9BQUwsRUFBaEYsR0FBaUcsT0FBakcsR0FBMkdmLEtBQUtnQixLQUFMLEVBQTNHLEdBQTBILEdBQXRJO0FBQ0E7QUFDSDtBQUNKO0FBQ0osS0EzQ0w7OztBQTZDSTs7Ozs7QUFLQUksMEJBQXNCLFNBQXRCQSxtQkFBc0IsR0FBVztBQUM3QixlQUFPbEIsYUFBYSxDQUFwQjtBQUNILEtBcERMOztBQXNEQUgsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdJLFlBQUgsR0FBa0JBLFlBQWxCOztBQUVBSCxXQUFPRixNQUFNRSxJQUFOLElBQWMsRUFBckI7QUFDQUEsU0FBS1UsYUFBTCxHQUFxQkEsYUFBckI7QUFDQVYsU0FBS2lCLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFDQWpCLFNBQUtvQixtQkFBTCxHQUEyQkEsbUJBQTNCO0FBQ0EsV0FBT3BCLElBQVA7QUFDSCIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTUlESSBuZXR3b3JrIHByb2Nlc3NvciBpbiBjb25uZWN0b3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1JRElDb25uZWN0b3JJbihzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc291cmNlcyA9IFtdLFxuICAgICAgICBudW1Tb3VyY2VzID0gMCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsZWN0cyBkYXRhIGZyb20gYWxsIHByb2Nlc3NvcnMgdGhpcyBpbnB1dCBpcyBjb25uZWN0ZWQgdG8uXG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBNSURJIGV2ZW50IGRhdGEgZnJvbSBhbGwgY29ubmVjdGVkIHByb2Nlc3NvcnMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRJbnB1dERhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXREYXRhID0gW10sIFxuICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU291cmNlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHNvdXJjZXNbaV0uZ2V0T3V0cHV0RGF0YSgpO1xuICAgICAgICAgICAgICAgIG91dHB1dERhdGEgPSBvdXRwdXREYXRhLmNvbmNhdChkYXRhKTtcbiAgICAgICAgICAgICAgICBkYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0RGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25uZWN0IGEgcHJvY2Vzc29yIGFzIHNvdXJjZSBmb3IgdGhpcyBwcm9jZXNzb3IuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIE5ldHdvcmsgTUlESSBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRDb25uZWN0aW9uID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2gocHJvY2Vzc29yKTtcbiAgICAgICAgICAgIG51bVNvdXJjZXMgPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ICcgKyBwcm9jZXNzb3IuZ2V0VHlwZSgpICsgJyAoaWQgJyArIHByb2Nlc3Nvci5nZXRJRCgpICsgJykgdG8gJyArIHRoYXQuZ2V0VHlwZSgpICsgJyAoaWQgJyArIHRoYXQuZ2V0SUQoKSArICcpJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGEgcHJvY2Vzc29yIGFzIHNvdXJjZSBmb3IgdGhpcyBwcm9jZXNzb3IuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIE5ldHdvcmsgTUlESSBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVDb25uZWN0aW9uID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NvciA9PT0gc291cmNlc1tuXSkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzLnNwbGljZShuLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgbnVtU291cmNlcyA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGlzY29ubmVjdCAnICsgcHJvY2Vzc29yLmdldFR5cGUoKSArICcgKGlkICcgKyBwcm9jZXNzb3IuZ2V0SUQoKSArICcpIGZyb20gJyArIHRoYXQuZ2V0VHlwZSgpICsgJyAoaWQgJyArIHRoYXQuZ2V0SUQoKSArICcpJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgbnVtYmVyIG9mIGNvbm5lY3Rpb25zLlxuICAgICAgICAgKiBVc2VkIGJ5IHRoZSBvdXRwdXQgcG9ydCBtb2R1bGUgdG8gZGV0ZXJtaW5lIGlmIFxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE51bWJlciBvZiBjb25uZWN0aW9ucyB0byB0aGlzIG91dHB1dCBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICBoYXNJbnB1dENvbm5lY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtU291cmNlcyA+IDA7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5nZXRJbnB1dERhdGEgPSBnZXRJbnB1dERhdGE7XG5cbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICB0aGF0LmFkZENvbm5lY3Rpb24gPSBhZGRDb25uZWN0aW9uO1xuICAgIHRoYXQucmVtb3ZlQ29ubmVjdGlvbiA9IHJlbW92ZUNvbm5lY3Rpb247XG4gICAgdGhhdC5oYXNJbnB1dENvbm5lY3Rpb25zID0gaGFzSW5wdXRDb25uZWN0aW9ucztcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9taWRpL2Nvbm5lY3RvcmluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIConnectorOut;\n/**\n * MIDI network processor out connector.\n */\nfunction createMIDIConnectorOut(specs, my) {\n    var that,\n        outputData = [],\n        destinations = [],\n\n\n    /**\n     * Set output data that is the result of this processor's processing.\n     * It will be collected by the processors attached to this output.\n     * @param {Object} eventData MIDI event data.\n     */\n    setOutputData = function setOutputData(eventData) {\n        outputData.push(eventData);\n    },\n\n\n    /**\n     * Public function for processors connected to this output to\n     * collect the data this processor's process function has produced.\n     * @return {Object} MIDI event data.\n     */\n    getOutputData = function getOutputData() {\n        return outputData;\n    },\n\n\n    /**\n     * Connect this processor's output to another processor's input.\n     * @param  {Object} processor Processor to connect to.\n     */\n    connect = function connect(processor) {\n        var isConnected = false,\n            n = destinations.length;\n        for (var i = 0; i < n; i++) {\n            if (processor === destinations[i]) {\n                isConnected = true;\n                break;\n            }\n        }\n        if (!isConnected) {\n            processor.addConnection(that);\n            destinations.push(processor);\n        }\n    },\n\n\n    /**\n     * Disconnect this processor's output from another processor's input.\n     * @param  {Object} processor Processor to disconnect from, or undefined to remove all.\n     */\n    disconnect = function disconnect(processor) {\n        var n = destinations.length;\n        while (--n >= 0) {\n            if (!processor || processor && processor === destinations[n]) {\n                destinations[n].removeConnection(that);\n                destinations.splice(n, 1);\n            }\n        }\n    },\n\n\n    /**\n     * Get destination processors.\n     * Used to draw the connection cables on canvas.\n     * @return {Array} Processors this output connects to.\n     */\n    getDestinations = function getDestinations() {\n        return destinations;\n    },\n\n\n    /**\n     * The destinations are the processors this output is connected to.\n     * This function collects the ID's of these processors and adds them\n     * to a data object that can be stored.\n     * So this project and its processor connections can be restored.\n     * @param  {Object} data Project data object.\n     */\n    getDestinationsData = function getDestinationsData(data) {\n        data.destinations = [];\n        var n = destinations.length;\n        for (var i = 0; i < n; i++) {\n            data.destinations.push(destinations[i].getID());\n        }\n    };\n\n    my = my || {};\n    my.setOutputData = setOutputData;\n    my.getDestinationsData = getDestinationsData;\n\n    that = specs.that || {};\n\n    that.getDestinations = getDestinations;\n    that.getOutputData = getOutputData;\n    that.connect = connect;\n    that.disconnect = disconnect;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3JvdXQuanM/ZTZlMiJdLCJuYW1lcyI6WyJjcmVhdGVNSURJQ29ubmVjdG9yT3V0Iiwic3BlY3MiLCJteSIsInRoYXQiLCJvdXRwdXREYXRhIiwiZGVzdGluYXRpb25zIiwic2V0T3V0cHV0RGF0YSIsImV2ZW50RGF0YSIsInB1c2giLCJnZXRPdXRwdXREYXRhIiwiY29ubmVjdCIsInByb2Nlc3NvciIsImlzQ29ubmVjdGVkIiwibiIsImxlbmd0aCIsImkiLCJhZGRDb25uZWN0aW9uIiwiZGlzY29ubmVjdCIsInJlbW92ZUNvbm5lY3Rpb24iLCJzcGxpY2UiLCJnZXREZXN0aW5hdGlvbnMiLCJnZXREZXN0aW5hdGlvbnNEYXRhIiwiZGF0YSIsImdldElEIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFHd0JBLHNCO0FBSHhCOzs7QUFHZSxTQUFTQSxzQkFBVCxDQUFnQ0MsS0FBaEMsRUFBdUNDLEVBQXZDLEVBQTJDO0FBQ3RELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxhQUFhLEVBRGpCO0FBQUEsUUFFSUMsZUFBZSxFQUZuQjs7O0FBSUk7Ozs7O0FBS0FDLG9CQUFnQixTQUFoQkEsYUFBZ0IsQ0FBU0MsU0FBVCxFQUFvQjtBQUNoQ0gsbUJBQVdJLElBQVgsQ0FBZ0JELFNBQWhCO0FBQ0gsS0FYTDs7O0FBYUk7Ozs7O0FBS0FFLG9CQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPTCxVQUFQO0FBQ0gsS0FwQkw7OztBQXNCSTs7OztBQUlBTSxjQUFVLFNBQVZBLE9BQVUsQ0FBU0MsU0FBVCxFQUFvQjtBQUMxQixZQUFJQyxjQUFjLEtBQWxCO0FBQUEsWUFDSUMsSUFBSVIsYUFBYVMsTUFEckI7QUFFQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsQ0FBcEIsRUFBdUJFLEdBQXZCLEVBQTRCO0FBQ3hCLGdCQUFJSixjQUFjTixhQUFhVSxDQUFiLENBQWxCLEVBQW1DO0FBQy9CSCw4QkFBYyxJQUFkO0FBQ0E7QUFDSDtBQUNKO0FBQ0QsWUFBSSxDQUFDQSxXQUFMLEVBQWtCO0FBQ2RELHNCQUFVSyxhQUFWLENBQXdCYixJQUF4QjtBQUNBRSx5QkFBYUcsSUFBYixDQUFrQkcsU0FBbEI7QUFDSDtBQUNKLEtBdkNMOzs7QUF5Q0k7Ozs7QUFJQU0saUJBQWEsU0FBYkEsVUFBYSxDQUFTTixTQUFULEVBQW9CO0FBQzdCLFlBQUlFLElBQUlSLGFBQWFTLE1BQXJCO0FBQ0EsZUFBTyxFQUFFRCxDQUFGLElBQU8sQ0FBZCxFQUFpQjtBQUNiLGdCQUFJLENBQUNGLFNBQUQsSUFBZUEsYUFBYUEsY0FBY04sYUFBYVEsQ0FBYixDQUE5QyxFQUFnRTtBQUM1RFIsNkJBQWFRLENBQWIsRUFBZ0JLLGdCQUFoQixDQUFpQ2YsSUFBakM7QUFDQUUsNkJBQWFjLE1BQWIsQ0FBb0JOLENBQXBCLEVBQXVCLENBQXZCO0FBQ0g7QUFDSjtBQUNKLEtBckRMOzs7QUF1REk7Ozs7O0FBS0FPLHNCQUFrQixTQUFsQkEsZUFBa0IsR0FBVztBQUN6QixlQUFPZixZQUFQO0FBQ0gsS0E5REw7OztBQWdFSTs7Ozs7OztBQU9BZ0IsMEJBQXNCLFNBQXRCQSxtQkFBc0IsQ0FBU0MsSUFBVCxFQUFlO0FBQ2pDQSxhQUFLakIsWUFBTCxHQUFvQixFQUFwQjtBQUNBLFlBQUlRLElBQUlSLGFBQWFTLE1BQXJCO0FBQ0EsYUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlGLENBQXBCLEVBQXVCRSxHQUF2QixFQUE0QjtBQUN4Qk8saUJBQUtqQixZQUFMLENBQWtCRyxJQUFsQixDQUF1QkgsYUFBYVUsQ0FBYixFQUFnQlEsS0FBaEIsRUFBdkI7QUFDSDtBQUNKLEtBN0VMOztBQStFQXJCLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHSSxhQUFILEdBQW1CQSxhQUFuQjtBQUNBSixPQUFHbUIsbUJBQUgsR0FBeUJBLG1CQUF6Qjs7QUFFQWxCLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQUEsU0FBS2lCLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0FqQixTQUFLTSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBTixTQUFLTyxPQUFMLEdBQWVBLE9BQWY7QUFDQVAsU0FBS2MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxXQUFPZCxJQUFQO0FBQ0giLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1JREkgbmV0d29yayBwcm9jZXNzb3Igb3V0IGNvbm5lY3Rvci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUNvbm5lY3Rvck91dChzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgb3V0cHV0RGF0YSA9IFtdLFxuICAgICAgICBkZXN0aW5hdGlvbnMgPSBbXSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgb3V0cHV0IGRhdGEgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIHRoaXMgcHJvY2Vzc29yJ3MgcHJvY2Vzc2luZy5cbiAgICAgICAgICogSXQgd2lsbCBiZSBjb2xsZWN0ZWQgYnkgdGhlIHByb2Nlc3NvcnMgYXR0YWNoZWQgdG8gdGhpcyBvdXRwdXQuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudERhdGEgTUlESSBldmVudCBkYXRhLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0T3V0cHV0RGF0YSA9IGZ1bmN0aW9uKGV2ZW50RGF0YSkge1xuICAgICAgICAgICAgb3V0cHV0RGF0YS5wdXNoKGV2ZW50RGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUHVibGljIGZ1bmN0aW9uIGZvciBwcm9jZXNzb3JzIGNvbm5lY3RlZCB0byB0aGlzIG91dHB1dCB0b1xuICAgICAgICAgKiBjb2xsZWN0IHRoZSBkYXRhIHRoaXMgcHJvY2Vzc29yJ3MgcHJvY2VzcyBmdW5jdGlvbiBoYXMgcHJvZHVjZWQuXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gTUlESSBldmVudCBkYXRhLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0T3V0cHV0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dERhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ29ubmVjdCB0aGlzIHByb2Nlc3NvcidzIG91dHB1dCB0byBhbm90aGVyIHByb2Nlc3NvcidzIGlucHV0LlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHByb2Nlc3NvciBQcm9jZXNzb3IgdG8gY29ubmVjdCB0by5cbiAgICAgICAgICovXG4gICAgICAgIGNvbm5lY3QgPSBmdW5jdGlvbihwcm9jZXNzb3IpIHtcbiAgICAgICAgICAgIHZhciBpc0Nvbm5lY3RlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIG4gPSBkZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc29yID09PSBkZXN0aW5hdGlvbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc29yLmFkZENvbm5lY3Rpb24odGhhdCk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25zLnB1c2gocHJvY2Vzc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNjb25uZWN0IHRoaXMgcHJvY2Vzc29yJ3Mgb3V0cHV0IGZyb20gYW5vdGhlciBwcm9jZXNzb3IncyBpbnB1dC5cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBwcm9jZXNzb3IgUHJvY2Vzc29yIHRvIGRpc2Nvbm5lY3QgZnJvbSwgb3IgdW5kZWZpbmVkIHRvIHJlbW92ZSBhbGwuXG4gICAgICAgICAqL1xuICAgICAgICBkaXNjb25uZWN0ID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGRlc3RpbmF0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIXByb2Nlc3NvciB8fCAocHJvY2Vzc29yICYmIHByb2Nlc3NvciA9PT0gZGVzdGluYXRpb25zW25dKSkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbnNbbl0ucmVtb3ZlQ29ubmVjdGlvbih0aGF0KTtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25zLnNwbGljZShuLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGRlc3RpbmF0aW9uIHByb2Nlc3NvcnMuXG4gICAgICAgICAqIFVzZWQgdG8gZHJhdyB0aGUgY29ubmVjdGlvbiBjYWJsZXMgb24gY2FudmFzLlxuICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gUHJvY2Vzc29ycyB0aGlzIG91dHB1dCBjb25uZWN0cyB0by5cbiAgICAgICAgICovXG4gICAgICAgIGdldERlc3RpbmF0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9ucztcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVzdGluYXRpb25zIGFyZSB0aGUgcHJvY2Vzc29ycyB0aGlzIG91dHB1dCBpcyBjb25uZWN0ZWQgdG8uXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gY29sbGVjdHMgdGhlIElEJ3Mgb2YgdGhlc2UgcHJvY2Vzc29ycyBhbmQgYWRkcyB0aGVtXG4gICAgICAgICAqIHRvIGEgZGF0YSBvYmplY3QgdGhhdCBjYW4gYmUgc3RvcmVkLlxuICAgICAgICAgKiBTbyB0aGlzIHByb2plY3QgYW5kIGl0cyBwcm9jZXNzb3IgY29ubmVjdGlvbnMgY2FuIGJlIHJlc3RvcmVkLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgUHJvamVjdCBkYXRhIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldERlc3RpbmF0aW9uc0RhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBkYXRhLmRlc3RpbmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgdmFyIG4gPSBkZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBkYXRhLmRlc3RpbmF0aW9ucy5wdXNoKGRlc3RpbmF0aW9uc1tpXS5nZXRJRCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnNldE91dHB1dERhdGEgPSBzZXRPdXRwdXREYXRhO1xuICAgIG15LmdldERlc3RpbmF0aW9uc0RhdGEgPSBnZXREZXN0aW5hdGlvbnNEYXRhO1xuXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgdGhhdC5nZXREZXN0aW5hdGlvbnMgPSBnZXREZXN0aW5hdGlvbnM7XG4gICAgdGhhdC5nZXRPdXRwdXREYXRhID0gZ2V0T3V0cHV0RGF0YTtcbiAgICB0aGF0LmNvbm5lY3QgPSBjb25uZWN0O1xuICAgIHRoYXQuZGlzY29ubmVjdCA9IGRpc2Nvbm5lY3Q7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3JvdXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createMIDIProcessor = createMIDIProcessor;\nfunction createMIDIProcessor(specs) {\n    var that = void 0;\n\n    var initialize = function initialize() {\n        console.log(midiProcessors);\n    },\n        terminate = function terminate() {},\n        process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset) {};\n\n    that = createMIDIProcessorBase(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    that.render = render;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9leGFtcGxlL3Byb2Nlc3Nvci5qcz82ZWNhIl0sIm5hbWVzIjpbImNyZWF0ZU1JRElQcm9jZXNzb3IiLCJzcGVjcyIsInRoYXQiLCJpbml0aWFsaXplIiwiY29uc29sZSIsImxvZyIsIm1pZGlQcm9jZXNzb3JzIiwidGVybWluYXRlIiwicHJvY2VzcyIsInNjYW5TdGFydCIsInNjYW5FbmQiLCJub3dUb1NjYW5TdGFydCIsInRpY2tzVG9Nc011bHRpcGxpZXIiLCJvZmZzZXQiLCJjcmVhdGVNSURJUHJvY2Vzc29yQmFzZSIsIm15IiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7OztRQUFnQkEsbUIsR0FBQUEsbUI7QUFBVCxTQUFTQSxtQkFBVCxDQUE2QkMsS0FBN0IsRUFBb0M7QUFDdkMsUUFBSUMsYUFBSjs7QUFFQSxRQUFNQyxhQUFhLFNBQWJBLFVBQWEsR0FBVztBQUN0QkMsZ0JBQVFDLEdBQVIsQ0FBWUMsY0FBWjtBQUNILEtBRkw7QUFBQSxRQUlJQyxZQUFZLFNBQVpBLFNBQVksR0FBVyxDQUFFLENBSjdCO0FBQUEsUUFNSUMsVUFBVSxTQUFWQSxPQUFVLENBQVNDLFNBQVQsRUFBb0JDLE9BQXBCLEVBQTZCQyxjQUE3QixFQUE2Q0MsbUJBQTdDLEVBQWtFQyxNQUFsRSxFQUEwRSxDQUFFLENBTjFGOztBQVFBWCxXQUFPWSx3QkFBd0JiLEtBQXhCLEVBQStCYyxFQUEvQixDQUFQOztBQUVBWjs7QUFFQUQsU0FBS0ssU0FBTCxHQUFpQkEsU0FBakI7QUFDQUwsU0FBS00sT0FBTCxHQUFlQSxPQUFmO0FBQ0FOLFNBQUtjLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFdBQU9kLElBQVA7QUFDSCIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNSURJUHJvY2Vzc29yKHNwZWNzKSB7XG4gICAgbGV0IHRoYXQ7XG5cbiAgICBjb25zdCBpbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtaWRpUHJvY2Vzc29ycyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGVybWluYXRlID0gZnVuY3Rpb24oKSB7fSxcblxuICAgICAgICBwcm9jZXNzID0gZnVuY3Rpb24oc2NhblN0YXJ0LCBzY2FuRW5kLCBub3dUb1NjYW5TdGFydCwgdGlja3NUb01zTXVsdGlwbGllciwgb2Zmc2V0KSB7fTtcblxuICAgIHRoYXQgPSBjcmVhdGVNSURJUHJvY2Vzc29yQmFzZShzcGVjcywgbXkpO1xuXG4gICAgaW5pdGlhbGl6ZSgpO1xuXG4gICAgdGhhdC50ZXJtaW5hdGUgPSB0ZXJtaW5hdGU7XG4gICAgdGhhdC5wcm9jZXNzID0gcHJvY2VzcztcbiAgICB0aGF0LnJlbmRlciA9IHJlbmRlcjtcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9leGFtcGxlL3Byb2Nlc3Nvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(4);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _midi = __webpack_require__(3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output port processor.\n */\nfunction createProcessor(specs, my) {\n    var that,\n        portID = specs.data.portID,\n        midiOutput = (0, _midi.getMIDIPortByID)(portID),\n\n\n    /**\n     * Process events to happen in a time slice.\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset) {\n        var inputData = my.getInputData(),\n            origin = performance.now() - offset * ticksToMsMultiplier,\n            n = inputData.length;\n\n        if (midiOutput.state === 'connected') {\n            for (var i = 0; i < n; i++) {\n                var item = inputData[i],\n\n                // item.timestampTicks is time since transport play started\n                timestamp = origin + item.timestampTicks * ticksToMsMultiplier;\n\n                switch (item.type) {\n                    case 'noteon':\n                        midiOutput.send([0x90 + (item.channel - 1), item.pitch, item.velocity], timestamp);\n                        break;\n                    case 'noteoff':\n                        midiOutput.send([0x80 + (item.channel - 1), item.pitch, 0], timestamp);\n                        break;\n                }\n            }\n        }\n    },\n        setEnabled = function setEnabled(isEnabled) {\n        my.isEnabled = isEnabled;\n    },\n        getMIDIPortID = function getMIDIPortID() {\n        return portID;\n    };\n\n    // getProcessorSpecificData = function(data) {\n    //     data.midiPortID = midiOutput.id;\n    // };\n\n\n    my = my || {};\n    // my.info = {\n    //     inputs: 1,\n    //     outputs: 0\n    // };\n    my.isEnabled = true;\n    // my.getProcessorSpecificData = getProcessorSpecificData;\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    that.process = process;\n    that.setEnabled = setEnabled;\n    that.getMIDIPortID = getMIDIPortID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvcHJvY2Vzc29yLmpzP2QxNWMiXSwibmFtZXMiOlsiY3JlYXRlUHJvY2Vzc29yIiwic3BlY3MiLCJteSIsInRoYXQiLCJwb3J0SUQiLCJkYXRhIiwibWlkaU91dHB1dCIsInByb2Nlc3MiLCJzY2FuU3RhcnQiLCJzY2FuRW5kIiwibm93VG9TY2FuU3RhcnQiLCJ0aWNrc1RvTXNNdWx0aXBsaWVyIiwib2Zmc2V0IiwiaW5wdXREYXRhIiwiZ2V0SW5wdXREYXRhIiwib3JpZ2luIiwicGVyZm9ybWFuY2UiLCJub3ciLCJuIiwibGVuZ3RoIiwic3RhdGUiLCJpIiwiaXRlbSIsInRpbWVzdGFtcCIsInRpbWVzdGFtcFRpY2tzIiwidHlwZSIsInNlbmQiLCJjaGFubmVsIiwicGl0Y2giLCJ2ZWxvY2l0eSIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJnZXRNSURJUG9ydElEIl0sIm1hcHBpbmdzIjoiOzs7OztRQU1nQkEsZSxHQUFBQSxlOztBQU5oQjs7OztBQUNBOzs7O0FBRUE7OztBQUdPLFNBQVNBLGVBQVQsQ0FBeUJDLEtBQXpCLEVBQWdDQyxFQUFoQyxFQUFvQztBQUN2QyxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsU0FBU0gsTUFBTUksSUFBTixDQUFXRCxNQUR4QjtBQUFBLFFBRUlFLGFBQWEsMkJBQWdCRixNQUFoQixDQUZqQjs7O0FBSUk7Ozs7Ozs7O0FBUUFHLGNBQVUsU0FBVkEsT0FBVSxDQUFTQyxTQUFULEVBQW9CQyxPQUFwQixFQUE2QkMsY0FBN0IsRUFBNkNDLG1CQUE3QyxFQUFrRUMsTUFBbEUsRUFBMEU7QUFDaEYsWUFBSUMsWUFBWVgsR0FBR1ksWUFBSCxFQUFoQjtBQUFBLFlBQ0lDLFNBQVNDLFlBQVlDLEdBQVosS0FBcUJMLFNBQVNELG1CQUQzQztBQUFBLFlBRUlPLElBQUlMLFVBQVVNLE1BRmxCOztBQUlBLFlBQUliLFdBQVdjLEtBQVgsS0FBcUIsV0FBekIsRUFBc0M7QUFDbEMsaUJBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxDQUFwQixFQUF1QkcsR0FBdkIsRUFBNEI7QUFDeEIsb0JBQUlDLE9BQU9ULFVBQVVRLENBQVYsQ0FBWDs7QUFDSTtBQUNBRSw0QkFBWVIsU0FBVU8sS0FBS0UsY0FBTCxHQUFzQmIsbUJBRmhEOztBQUlBLHdCQUFRVyxLQUFLRyxJQUFiO0FBQ0kseUJBQUssUUFBTDtBQUNJbkIsbUNBQVdvQixJQUFYLENBQWdCLENBQUMsUUFBUUosS0FBS0ssT0FBTCxHQUFlLENBQXZCLENBQUQsRUFBNEJMLEtBQUtNLEtBQWpDLEVBQXdDTixLQUFLTyxRQUE3QyxDQUFoQixFQUF3RU4sU0FBeEU7QUFDQTtBQUNKLHlCQUFLLFNBQUw7QUFDSWpCLG1DQUFXb0IsSUFBWCxDQUFnQixDQUFDLFFBQVFKLEtBQUtLLE9BQUwsR0FBZSxDQUF2QixDQUFELEVBQTRCTCxLQUFLTSxLQUFqQyxFQUF3QyxDQUF4QyxDQUFoQixFQUE0REwsU0FBNUQ7QUFDQTtBQU5SO0FBUUg7QUFDSjtBQUNKLEtBakNMO0FBQUEsUUFtQ0lPLGFBQWEsU0FBYkEsVUFBYSxDQUFTQyxTQUFULEVBQW9CO0FBQzdCN0IsV0FBRzZCLFNBQUgsR0FBZUEsU0FBZjtBQUNILEtBckNMO0FBQUEsUUF1Q0lDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPNUIsTUFBUDtBQUNILEtBekNMOztBQTJDSTtBQUNBO0FBQ0E7OztBQUdKRixTQUFLQSxNQUFNLEVBQVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxPQUFHNkIsU0FBSCxHQUFlLElBQWY7QUFDQTs7QUFFQTVCLFdBQU8sNkJBQXdCRixLQUF4QixFQUErQkMsRUFBL0IsQ0FBUDs7QUFFQUMsU0FBS0ksT0FBTCxHQUFlQSxPQUFmO0FBQ0FKLFNBQUsyQixVQUFMLEdBQWtCQSxVQUFsQjtBQUNBM0IsU0FBSzZCLGFBQUwsR0FBcUJBLGFBQXJCO0FBQ0EsV0FBTzdCLElBQVA7QUFDSCIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVNSURJUHJvY2Vzc29yQmFzZSBmcm9tICcuLi8uLi9taWRpL3Byb2Nlc3NvcmJhc2UnO1xuaW1wb3J0IHsgZ2V0TUlESVBvcnRCeUlEIH0gZnJvbSAnLi4vLi4vbWlkaS9taWRpJztcblxuLyoqXG4gKiBNSURJIG91dHB1dCBwb3J0IHByb2Nlc3Nvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2Nlc3NvcihzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgcG9ydElEID0gc3BlY3MuZGF0YS5wb3J0SUQsXG4gICAgICAgIG1pZGlPdXRwdXQgPSBnZXRNSURJUG9ydEJ5SUQocG9ydElEKSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvY2VzcyBldmVudHMgdG8gaGFwcGVuIGluIGEgdGltZSBzbGljZS5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYW5TdGFydCBUaW1lc3BhbiBzdGFydCBpbiB0aWNrcyBmcm9tIHRpbWVsaW5lIHN0YXJ0LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbkVuZCAgIFRpbWVzcGFuIGVuZCBpbiB0aWNrcyBmcm9tIHRpbWVsaW5lIHN0YXJ0LlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gbm93VG9TY2FuU3RhcnQgVGltZXNwYW4gZnJvbSBjdXJyZW50IHRpbWVsaW5lIHBvc2l0aW9uIHRvIHNjYW5TdGFydC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHRpY2tzVG9Nc011bHRpcGxpZXIgRHVyYXRpb24gb2Ygb25lIHRpY2sgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRpbWUgZnJvbSBkb2Mgc3RhcnQgdG8gdGltZWxpbmUgc3RhcnQgaW4gdGlja3MuXG4gICAgICAgICAqL1xuICAgICAgICBwcm9jZXNzID0gZnVuY3Rpb24oc2NhblN0YXJ0LCBzY2FuRW5kLCBub3dUb1NjYW5TdGFydCwgdGlja3NUb01zTXVsdGlwbGllciwgb2Zmc2V0KSB7XG4gICAgICAgICAgICB2YXIgaW5wdXREYXRhID0gbXkuZ2V0SW5wdXREYXRhKCksXG4gICAgICAgICAgICAgICAgb3JpZ2luID0gcGVyZm9ybWFuY2Uubm93KCkgLSAob2Zmc2V0ICogdGlja3NUb01zTXVsdGlwbGllciksXG4gICAgICAgICAgICAgICAgbiA9IGlucHV0RGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtaWRpT3V0cHV0LnN0YXRlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gaW5wdXREYXRhW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXRlbS50aW1lc3RhbXBUaWNrcyBpcyB0aW1lIHNpbmNlIHRyYW5zcG9ydCBwbGF5IHN0YXJ0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IG9yaWdpbiArIChpdGVtLnRpbWVzdGFtcFRpY2tzICogdGlja3NUb01zTXVsdGlwbGllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vdGVvbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlkaU91dHB1dC5zZW5kKFsweDkwICsgKGl0ZW0uY2hhbm5lbCAtIDEpLCBpdGVtLnBpdGNoLCBpdGVtLnZlbG9jaXR5XSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vdGVvZmYnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pZGlPdXRwdXQuc2VuZChbMHg4MCArIChpdGVtLmNoYW5uZWwgLSAxKSwgaXRlbS5waXRjaCwgMF0sIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRFbmFibGVkID0gZnVuY3Rpb24oaXNFbmFibGVkKSB7XG4gICAgICAgICAgICBteS5pc0VuYWJsZWQgPSBpc0VuYWJsZWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0TUlESVBvcnRJRCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvcnRJRDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXRQcm9jZXNzb3JTcGVjaWZpY0RhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIC8vICAgICBkYXRhLm1pZGlQb3J0SUQgPSBtaWRpT3V0cHV0LmlkO1xuICAgICAgICAvLyB9O1xuXG5cbiAgICBteSA9IG15IHx8IHt9O1xuICAgIC8vIG15LmluZm8gPSB7XG4gICAgLy8gICAgIGlucHV0czogMSxcbiAgICAvLyAgICAgb3V0cHV0czogMFxuICAgIC8vIH07XG4gICAgbXkuaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAvLyBteS5nZXRQcm9jZXNzb3JTcGVjaWZpY0RhdGEgPSBnZXRQcm9jZXNzb3JTcGVjaWZpY0RhdGE7XG5cbiAgICB0aGF0ID0gY3JlYXRlTUlESVByb2Nlc3NvckJhc2Uoc3BlY3MsIG15KTtcblxuICAgIHRoYXQucHJvY2VzcyA9IHByb2Nlc3M7XG4gICAgdGhhdC5zZXRFbmFibGVkID0gc2V0RW5hYmxlZDtcbiAgICB0aGF0LmdldE1JRElQb3J0SUQgPSBnZXRNSURJUG9ydElEO1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvb3V0cHV0L3Byb2Nlc3Nvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createActions;\n\nvar _util = __webpack_require__(7);\n\nvar _selectors = __webpack_require__(0);\n\nfunction createActions() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var SET_PREFERENCES = 'SET_PREFERENCES',\n        NEW_PROJECT = 'NEW_PROJECT',\n        SET_PROJECT = 'SET_PROJECT',\n        SET_THEME = 'SET_THEME',\n        CREATE_PROCESSOR = 'CREATE_PROCESSOR',\n        ADD_PROCESSOR = 'ADD_PROCESSOR',\n        DELETE_PROCESSOR = 'DELETE_PROCESSOR',\n        SELECT_PROCESSOR = 'SELECT_PROCESSOR',\n        DRAG_SELECTED_PROCESSOR = 'DRAG_SELECTED_PROCESSOR',\n        DRAG_ALL_PROCESSORS = 'DRAG_ALL_PROCESSORS',\n        CHANGE_PARAMETER = 'CHANGE_PARAMETER',\n        RECREATE_PARAMETER = 'RECREATE_PARAMETER',\n        SET_TEMPO = 'SET_TEMPO',\n\n    // ADD_MIDI_PORT = 'ADD_MIDI_PORT',\n    // REMOVE_MIDI_PORT = 'REMOVE_MIDI_PORT',\n    MIDI_PORT_CHANGE = 'MIDI_PORT_CHANGE',\n        TOGGLE_PORT_NETWORK = 'TOGGLE_PORT_NETWORK',\n        TOGGLE_PORT_SYNC = 'TOGGLE_PORT_SYNC',\n        TOGGLE_PORT_REMOTE = 'TOGGLE_PORT_REMOTE',\n        TOGGLE_MIDI_PREFERENCE = 'TOGGLE_MIDI_PREFERENCE',\n        TOGGLE_MIDI_LEARN_MODE = 'TOGGLE_MIDI_LEARN_MODE',\n        TOGGLE_MIDI_LEARN_TARGET = 'TOGGLE_MIDI_LEARN_TARGET',\n        SET_TRANSPORT = 'SET_TRANSPORT',\n        RECEIVE_MIDI_CC = 'RECEIVE_MIDI_CC',\n        ASSIGN_EXTERNAL_CONTROL = 'ASSIGN_EXTERNAL_CONTROL',\n        UNASSIGN_EXTERNAL_CONTROL = 'UNASSIGN_EXTERNAL_CONTROL',\n        TOGGLE_PANEL = 'TOGGLE_PANEL',\n        TOGGLE_CONNECT_MODE = 'TOGGLE_CONNECT_MODE',\n        CONNECT_PROCESSORS = 'CONNECT_PROCESSORS',\n        DISCONNECT_PROCESSORS = 'DISCONNECT_PROCESSORS';\n\n    return {\n        SET_PREFERENCES: SET_PREFERENCES,\n        setPreferences: function setPreferences(data) {\n            return { type: SET_PREFERENCES, data: data };\n        },\n\n        importProject: function importProject(file) {\n            return function (dispatch, getState, getActions) {\n                var fileReader = new FileReader();\n                // closure to capture the file information\n                fileReader.onload = function (f) {\n                    return function (e) {\n                        var isJSON = true;\n                        try {\n                            var data = JSON.parse(e.target.result);\n                            if (data) {\n                                dispatch(getActions().setProject(data));\n                            }\n                        } catch (errorMessage) {\n                            console.log(errorMessage);\n                            isJSON = false;\n                        }\n                        if (!isJSON) {\n                            // try if it's a legacy xml file\n                            var legacyData = my.convertLegacyFile(e.target.result);\n                            if (legacyData) {\n                                dispatch(getActions().setProject(legacyData));\n                            }\n                        }\n                    };\n                }(file);\n                fileReader.readAsText(file);\n            };\n        },\n\n        exportProject: function exportProject() {\n            return function (dispatch, getState, getActions) {\n                var jsonString = JSON.stringify(getState()),\n                    blob = new Blob([jsonString], { type: 'application/json' }),\n                    a = document.createElement('a');\n                a.download = 'epg.json';\n                a.href = URL.createObjectURL(blob);\n                a.click();\n            };\n        },\n\n        NEW_PROJECT: NEW_PROJECT,\n        newProject: function newProject(data) {\n            return { type: NEW_PROJECT };\n        },\n\n        SET_PROJECT: SET_PROJECT,\n        setProject: function setProject(data) {\n            return { type: SET_PROJECT, data: data };\n        },\n\n        SET_THEME: SET_THEME,\n        setTheme: function setTheme(data) {\n            return { type: SET_THEME, data: data };\n        },\n\n        CREATE_PROCESSOR: CREATE_PROCESSOR,\n        createProcessor: function createProcessor(data) {\n            return function (dispatch, getState, getActions) {\n                var dataTemplate = __webpack_require__(29)(\"./\" + data.type + '/config.json');\n                var fullData = JSON.parse(JSON.stringify(dataTemplate));\n                var id = data.type + '_' + (0, _util.createUUID)();\n                fullData = Object.assign(fullData, data);\n                fullData.id = id;\n                fullData.positionX = data.positionX;\n                fullData.positionY = data.positionY;\n                fullData.params.name.value = getProcessorDefaultName(getState().processors);\n                dispatch(getActions().addProcessor(fullData));\n                dispatch(getActions().selectProcessor(id));\n            };\n        },\n\n        ADD_PROCESSOR: ADD_PROCESSOR,\n        addProcessor: function addProcessor(data) {\n            return { type: ADD_PROCESSOR, data: data };\n        },\n\n        DELETE_PROCESSOR: DELETE_PROCESSOR,\n        deleteProcessor: function deleteProcessor(id) {\n            return { type: DELETE_PROCESSOR, id: id };\n        },\n\n        SELECT_PROCESSOR: SELECT_PROCESSOR,\n        selectProcessor: function selectProcessor(id) {\n            return { type: SELECT_PROCESSOR, id: id };\n        },\n\n        DRAG_SELECTED_PROCESSOR: DRAG_SELECTED_PROCESSOR,\n        dragSelectedProcessor: function dragSelectedProcessor(x, y) {\n            return { type: DRAG_SELECTED_PROCESSOR, x: x, y: y };\n        },\n\n        DRAG_ALL_PROCESSORS: DRAG_ALL_PROCESSORS,\n        dragAllProcessors: function dragAllProcessors(x, y) {\n            return { type: DRAG_ALL_PROCESSORS, x: x, y: y };\n        },\n\n        CHANGE_PARAMETER: CHANGE_PARAMETER,\n        changeParameter: function changeParameter(processorID, paramKey, paramValue) {\n            return { type: CHANGE_PARAMETER, processorID: processorID, paramKey: paramKey, paramValue: paramValue };\n        },\n\n        RECREATE_PARAMETER: RECREATE_PARAMETER,\n        recreateParameter: function recreateParameter(processorID, paramKey, paramObj) {\n            return { type: RECREATE_PARAMETER, processorID: processorID, paramKey: paramKey, paramObj: paramObj };\n        },\n\n        SET_TEMPO: SET_TEMPO,\n        setTempo: function setTempo(value) {\n            return { type: SET_TEMPO, value: value };\n        },\n\n        // ADD_MIDI_PORT: ADD_MIDI_PORT,\n        // addMIDIPort: (id, name, isInput) => { return { type: ADD_MIDI_PORT, id: id, name: name, isInput: isInput } },\n\n        // REMOVE_MIDI_PORT: REMOVE_MIDI_PORT,\n        // removeMIDIPort: id => { return { type: REMOVE_MIDI_PORT, id: id } },\n\n        MIDI_PORT_CHANGE: MIDI_PORT_CHANGE,\n        midiPortChange: function midiPortChange(data) {\n            return { type: MIDI_PORT_CHANGE, data: data };\n        },\n        // midiPortChange: (data) => {\n        //     return (dispatch, getState, getActions) => {\n        //         let port = getMIDIPortByID(data.id);\n        //         if (port) {\n\n        //         } else {\n\n        //         }\n        //     }\n        // },\n\n        TOGGLE_PORT_NETWORK: TOGGLE_PORT_NETWORK,\n        togglePortNetwork: function togglePortNetwork(portID, isInput) {\n            return function (dispatch, getState, getActions) {\n                dispatch(getActions().toggleMIDIPreference(portID, isInput, 'networkEnabled'));\n                if ((0, _selectors.getMIDIPortByID)(portID).networkEnabled) {\n                    dispatch(getActions().createProcessor({\n                        type: 'output',\n                        portID: portID,\n                        positionX: window.innerWidth / 2,\n                        positionY: window.innerHeight - 100\n                    }));\n                } else {\n                    getState().processors.forEach(function (processor) {\n                        if (processor.portID && processor.portID === portID) {\n                            dispatch(getActions().deleteProcessor(processor.id));\n                        }\n                    });\n                }\n            };\n        },\n\n        TOGGLE_PORT_SYNC: TOGGLE_PORT_SYNC,\n        togglePortSync: function togglePortSync(id, isInput) {\n            return { type: TOGGLE_PORT_SYNC, id: id, isInput: isInput };\n        },\n\n        TOGGLE_PORT_REMOTE: TOGGLE_PORT_REMOTE,\n        togglePortRemote: function togglePortRemote(id, isInput) {\n            return { type: TOGGLE_PORT_REMOTE, id: id, isInput: isInput };\n        },\n        // togglePortRemote: (id, isInput) => {\n        //     return (dispatch, getState, getActions) => {\n        //         dispatch(getActions().toggleMIDIPreference(id, isInput, 'remoteEnabled'));\n\n        //     }\n        // },\n\n        TOGGLE_MIDI_PREFERENCE: TOGGLE_MIDI_PREFERENCE,\n        toggleMIDIPreference: function toggleMIDIPreference(id, isInput, preferenceName) {\n            return { type: TOGGLE_MIDI_PREFERENCE, id: id, isInput: isInput, preferenceName: preferenceName };\n        },\n\n        TOGGLE_MIDI_LEARN_MODE: TOGGLE_MIDI_LEARN_MODE,\n        toggleMIDILearnMode: function toggleMIDILearnMode() {\n            return { type: TOGGLE_MIDI_LEARN_MODE };\n        },\n\n        TOGGLE_MIDI_LEARN_TARGET: TOGGLE_MIDI_LEARN_TARGET,\n        toggleMIDILearnTarget: function toggleMIDILearnTarget(processorID, parameterKey) {\n            return { type: TOGGLE_MIDI_LEARN_TARGET, processorID: processorID, parameterKey: parameterKey };\n        },\n\n        SET_TRANSPORT: SET_TRANSPORT,\n        setTransport: function setTransport(command) {\n            return { type: SET_TRANSPORT, command: command };\n        },\n\n        RECEIVE_MIDI_CC: RECEIVE_MIDI_CC,\n        receiveMIDIControlChange: function receiveMIDIControlChange(data) {\n            return function (dispatch, getState, getActions) {\n                if (getState().learnModeActive) {\n                    dispatch(getActions().assignExternalControl(data));\n                } else {\n                    // find all parameters with the channel and conctrol\n                    var remoteChannel = (data[0] & 0xf) + 1,\n                        remoteCC = data[1];\n                    getState().processors.forEach(function (processor) {\n                        for (var key in processor.parameters) {\n                            if (processor.parameters.hasOwnProperty(key)) {\n                                var param = processor.parameters[key];\n                                if (param.isMidiControllable && param.remoteChannel === remoteChannel && param.remoteCC == remoteCC) {\n                                    var paramValue = midiControlToParameterValue(param, data[2]);\n                                    dispatch(getActions().changeParameter(processor.id, key, paramValue));\n                                }\n                            }\n                        }\n                    });\n                }\n            };\n        },\n\n        ASSIGN_EXTERNAL_CONTROL: ASSIGN_EXTERNAL_CONTROL,\n        assignExternalControl: function assignExternalControl(data) {\n            return { type: ASSIGN_EXTERNAL_CONTROL, data: data };\n        },\n\n        UNASSIGN_EXTERNAL_CONTROL: UNASSIGN_EXTERNAL_CONTROL,\n        unassignExternalControl: function unassignExternalControl(processorID, paramKey) {\n            return { type: UNASSIGN_EXTERNAL_CONTROL, processorID: processorID, paramKey: paramKey };\n        },\n\n        TOGGLE_PANEL: TOGGLE_PANEL,\n        togglePanel: function togglePanel(panelName) {\n            return { type: TOGGLE_PANEL, panelName: panelName };\n        },\n\n        TOGGLE_CONNECT_MODE: TOGGLE_CONNECT_MODE,\n        toggleConnectMode: function toggleConnectMode() {\n            return { type: TOGGLE_CONNECT_MODE };\n        },\n\n        CONNECT_PROCESSORS: CONNECT_PROCESSORS,\n        connectProcessors: function connectProcessors(payload) {\n            return { type: CONNECT_PROCESSORS, payload: payload, id: (0, _util.createUUID)() };\n        },\n\n        DISCONNECT_PROCESSORS: DISCONNECT_PROCESSORS,\n        disconnectProcessors: function disconnectProcessors(id) {\n            return { type: DISCONNECT_PROCESSORS, id: id };\n        }\n    };\n}\n\nfunction midiControlToParameterValue(param, controllerValue) {\n    var normalizedValue = controllerValue / 127;\n    switch (param.type) {\n        case 'integer':\n            return Math.round(param.min + (param.max - param.min) * normalizedValue);\n        case 'boolean':\n            return normalizedValue > .5;\n        case 'itemized':\n            if (normalizedValue === 1) {\n                return param.model[param.model.length - 1].value;\n            }\n            return param.model[Math.floor(normalizedValue * param.model.length)].value;\n        case 'string':\n        case 'position':\n        default:\n            return param.value;\n    }\n}\n\n/**\n * Set default processor name.\n * @param {Object} processor Processor to name.\n */\nfunction getProcessorDefaultName(processors) {\n    var name = void 0,\n        number = void 0,\n        spaceIndex = void 0,\n        highestNumber = 0,\n        staticName = 'Processor';\n    for (var i = 0, n = processors.length; i < n; i++) {\n        name = processors[i].params.name.value;\n        if (name && name.indexOf(staticName) == 0) {\n            spaceIndex = name.lastIndexOf(' ');\n            if (spaceIndex != -1) {\n                number = parseInt(name.substr(spaceIndex), 10);\n                if (!isNaN(number)) {\n                    highestNumber = Math.max(highestNumber, number);\n                }\n            }\n        }\n    }\n    return staticName + ' ' + (highestNumber + 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/config.json\": 30,\n\t\"./example/config.json\": 31,\n\t\"./output/config.json\": 32\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciBeXFwuXFwvLipcXC9jb25maWdcXC5qc29uJD9hMTE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vZXBnL2NvbmZpZy5qc29uXCI6IDMwLFxuXHRcIi4vZXhhbXBsZS9jb25maWcuanNvblwiOiAzMSxcblx0XCIuL291dHB1dC9jb25maWcuanNvblwiOiAzMlxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDI5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMgLi9ub2RlX21vZHVsZXMvanNvbi1sb2FkZXIgXlxcLlxcLy4qXFwvY29uZmlnXFwuanNvbiRcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Euclidean\",\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{},\"allIds\":[]},\"outputs\":{\"byId\":{\"out\":{\"x\":0,\"y\":50}},\"allIds\":[\"out\"]},\"params\":{\"steps\":{\"label\":\"Steps\",\"type\":\"integer\",\"default\":16,\"value\":16,\"min\":1,\"max\":64,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"pulses\":{\"label\":\"Pulses\",\"type\":\"integer\",\"default\":4,\"value\":4,\"min\":0,\"max\":16,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"rotation\":{\"label\":\"Rotation\",\"type\":\"integer\",\"default\":0,\"value\":0,\"min\":0,\"max\":15,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"channel_out\":{\"label\":\"Channel\",\"type\":\"integer\",\"default\":1,\"value\":1,\"min\":1,\"max\":16,\"isMidiControllable\":false},\"pitch_out\":{\"label\":\"Pitch\",\"type\":\"integer\",\"default\":60,\"value\":60,\"min\":0,\"max\":127,\"isMidiControllable\":false},\"velocity_out\":{\"label\":\"Velocity\",\"type\":\"integer\",\"default\":100,\"value\":100,\"min\":0,\"max\":127,\"isMidiControllable\":false,\"\":\"\"},\"rate\":{\"label\":\"Rate\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}],\"isMidiControllable\":false},\"is_triplets\":{\"label\":\"Triplets\",\"type\":\"boolean\",\"default\":false,\"value\":false,\"isMidiControllable\":false},\"note_length\":{\"label\":\"Note length\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}],\"isMidiControllable\":false},\"is_mute\":{\"label\":\"Mute\",\"type\":\"boolean\",\"default\":false,\"value\":false,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\",\"isMidiControllable\":false}}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvY29uZmlnLmpzb24/NmI0MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IseURBQXlELFNBQVMsYUFBYSxZQUFZLFFBQVEsT0FBTyxjQUFjLGtCQUFrQixXQUFXLFNBQVMseUlBQXlJLFdBQVcsd0lBQXdJLGFBQWEsMElBQTBJLGdCQUFnQixxR0FBcUcsY0FBYyxzR0FBc0csaUJBQWlCLGlIQUFpSCxTQUFTLHVFQUF1RSxzQkFBc0IsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSw0QkFBNEIsRUFBRSw2QkFBNkIsNkJBQTZCLGdCQUFnQiw2RkFBNkYsZ0JBQWdCLDhFQUE4RSxzQkFBc0IsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSw0QkFBNEIsRUFBRSw2QkFBNkIsNkJBQTZCLFlBQVksNkhBQTZILFNBQVMiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcIkV1Y2xpZGVhblwiLFwicG9zaXRpb25YXCI6MCxcInBvc2l0aW9uWVwiOjAsXCJpbnB1dHNcIjp7XCJieUlkXCI6e30sXCJhbGxJZHNcIjpbXX0sXCJvdXRwdXRzXCI6e1wiYnlJZFwiOntcIm91dFwiOntcInhcIjowLFwieVwiOjUwfX0sXCJhbGxJZHNcIjpbXCJvdXRcIl19LFwicGFyYW1zXCI6e1wic3RlcHNcIjp7XCJsYWJlbFwiOlwiU3RlcHNcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjoxNixcInZhbHVlXCI6MTYsXCJtaW5cIjoxLFwibWF4XCI6NjQsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlLFwicmVtb3RlQ2hhbm5lbFwiOm51bGwsXCJyZW1vdGVDQ1wiOm51bGx9LFwicHVsc2VzXCI6e1wibGFiZWxcIjpcIlB1bHNlc1wiLFwidHlwZVwiOlwiaW50ZWdlclwiLFwiZGVmYXVsdFwiOjQsXCJ2YWx1ZVwiOjQsXCJtaW5cIjowLFwibWF4XCI6MTYsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlLFwicmVtb3RlQ2hhbm5lbFwiOm51bGwsXCJyZW1vdGVDQ1wiOm51bGx9LFwicm90YXRpb25cIjp7XCJsYWJlbFwiOlwiUm90YXRpb25cIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjowLFwidmFsdWVcIjowLFwibWluXCI6MCxcIm1heFwiOjE1LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZSxcInJlbW90ZUNoYW5uZWxcIjpudWxsLFwicmVtb3RlQ0NcIjpudWxsfSxcImNoYW5uZWxfb3V0XCI6e1wibGFiZWxcIjpcIkNoYW5uZWxcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjoxLFwidmFsdWVcIjoxLFwibWluXCI6MSxcIm1heFwiOjE2LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6ZmFsc2V9LFwicGl0Y2hfb3V0XCI6e1wibGFiZWxcIjpcIlBpdGNoXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6NjAsXCJ2YWx1ZVwiOjYwLFwibWluXCI6MCxcIm1heFwiOjEyNyxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfSxcInZlbG9jaXR5X291dFwiOntcImxhYmVsXCI6XCJWZWxvY2l0eVwiLFwidHlwZVwiOlwiaW50ZWdlclwiLFwiZGVmYXVsdFwiOjEwMCxcInZhbHVlXCI6MTAwLFwibWluXCI6MCxcIm1heFwiOjEyNyxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlLFwiXCI6XCJcIn0sXCJyYXRlXCI6e1wibGFiZWxcIjpcIlJhdGVcIixcInR5cGVcIjpcIml0ZW1pemVkXCIsXCJkZWZhdWx0XCI6MC4yNSxcInZhbHVlXCI6MC4yNSxcIm1vZGVsXCI6W3tcImxhYmVsXCI6XCIxXCIsXCJ2YWx1ZVwiOjR9LHtcImxhYmVsXCI6XCIxLzJcIixcInZhbHVlXCI6Mn0se1wibGFiZWxcIjpcIjEvNFwiLFwidmFsdWVcIjoxfSx7XCJsYWJlbFwiOlwiMS84XCIsXCJ2YWx1ZVwiOjAuNX0se1wibGFiZWxcIjpcIjEvMTZcIixcInZhbHVlXCI6MC4yNX0se1wibGFiZWxcIjpcIjEvMzJcIixcInZhbHVlXCI6MC4xMjV9XSxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfSxcImlzX3RyaXBsZXRzXCI6e1wibGFiZWxcIjpcIlRyaXBsZXRzXCIsXCJ0eXBlXCI6XCJib29sZWFuXCIsXCJkZWZhdWx0XCI6ZmFsc2UsXCJ2YWx1ZVwiOmZhbHNlLFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6ZmFsc2V9LFwibm90ZV9sZW5ndGhcIjp7XCJsYWJlbFwiOlwiTm90ZSBsZW5ndGhcIixcInR5cGVcIjpcIml0ZW1pemVkXCIsXCJkZWZhdWx0XCI6MC4yNSxcInZhbHVlXCI6MC4yNSxcIm1vZGVsXCI6W3tcImxhYmVsXCI6XCIxXCIsXCJ2YWx1ZVwiOjR9LHtcImxhYmVsXCI6XCIxLzJcIixcInZhbHVlXCI6Mn0se1wibGFiZWxcIjpcIjEvNFwiLFwidmFsdWVcIjoxfSx7XCJsYWJlbFwiOlwiMS84XCIsXCJ2YWx1ZVwiOjAuNX0se1wibGFiZWxcIjpcIjEvMTZcIixcInZhbHVlXCI6MC4yNX0se1wibGFiZWxcIjpcIjEvMzJcIixcInZhbHVlXCI6MC4xMjV9XSxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfSxcImlzX211dGVcIjp7XCJsYWJlbFwiOlwiTXV0ZVwiLFwidHlwZVwiOlwiYm9vbGVhblwiLFwiZGVmYXVsdFwiOmZhbHNlLFwidmFsdWVcIjpmYWxzZSxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOnRydWUsXCJyZW1vdGVDaGFubmVsXCI6bnVsbCxcInJlbW90ZUNDXCI6bnVsbH0sXCJuYW1lXCI6e1wibGFiZWxcIjpcIk5hbWVcIixcInR5cGVcIjpcInN0cmluZ1wiLFwiZGVmYXVsdFwiOlwiVW5uYW1lZFwiLFwidmFsdWVcIjpcIlVubmFtZWRcIixcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfX19XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvanNvbi1sb2FkZXIhLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvY29uZmlnLmpzb25cbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports) {

eval("module.exports = {\"info\":{\"name\":\"\",\"version\":\"0.0.0\"},\"params\":{}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9leGFtcGxlL2NvbmZpZy5qc29uPzE2ZDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLFFBQVEsNEJBQTRCIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XCJpbmZvXCI6e1wibmFtZVwiOlwiXCIsXCJ2ZXJzaW9uXCI6XCIwLjAuMFwifSxcInBhcmFtc1wiOnt9fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2pzb24tbG9hZGVyIS4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXhhbXBsZS9jb25maWcuanNvblxuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Output\",\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{\"in\":{\"x\":0,\"y\":-50}},\"allIds\":[\"in\"]},\"outputs\":{\"byId\":{},\"allIds\":[]},\"params\":{\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\",\"isMidiControllable\":false}}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvY29uZmlnLmpzb24/N2FjNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0Isc0RBQXNELFFBQVEsTUFBTSxlQUFlLGlCQUFpQixZQUFZLFNBQVMsYUFBYSxXQUFXLFFBQVEiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcIk91dHB1dFwiLFwicG9zaXRpb25YXCI6MCxcInBvc2l0aW9uWVwiOjAsXCJpbnB1dHNcIjp7XCJieUlkXCI6e1wiaW5cIjp7XCJ4XCI6MCxcInlcIjotNTB9fSxcImFsbElkc1wiOltcImluXCJdfSxcIm91dHB1dHNcIjp7XCJieUlkXCI6e30sXCJhbGxJZHNcIjpbXX0sXCJwYXJhbXNcIjp7XCJuYW1lXCI6e1wibGFiZWxcIjpcIk5hbWVcIixcInR5cGVcIjpcInN0cmluZ1wiLFwiZGVmYXVsdFwiOlwiVW5uYW1lZFwiLFwidmFsdWVcIjpcIlVubmFtZWRcIixcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfX19XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvanNvbi1sb2FkZXIhLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvY29uZmlnLmpzb25cbi8vIG1vZHVsZSBpZCA9IDMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createReducers;\n\nvar _selectors = __webpack_require__(0);\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction createReducers() {\n\n    var initialState = {\n        bpm: 120,\n        processors: {\n            byId: {},\n            allIds: []\n        },\n        connections: {\n            byId: {},\n            allIds: []\n        },\n        selectedID: null,\n        preferences: {\n            isDarkTheme: false\n        },\n        transport: 'stop', // 'play|pause|stop'\n        // inputs: [],\n        // outputs: [],\n        ports: [],\n        connectModeActive: false,\n        learnModeActive: false,\n        learnTargetProcessorID: null,\n        learnTargetParameterKey: null,\n        showHelpPanel: false,\n        showPreferencesPanel: false,\n        showSettingsPanel: false\n    },\n        reduce = function reduce() {\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actions = arguments[2];\n\n        var newState = void 0;\n        switch (action.type) {\n\n            case actions.SET_PREFERENCES:\n                newState = Object.assign({}, state);\n                newState.preferences.isDarkTheme = action.data ? action.data.isDarkTheme : false;\n                return newState;\n\n            case actions.NEW_PROJECT:\n                return _extends({}, initialState);\n\n            case actions.SET_PROJECT:\n                return _extends({}, state, action.data);\n\n            case actions.SET_THEME:\n                return Object.assign({}, state, {\n                    preferences: {\n                        isDarkTheme: action.data || false\n                    }\n                });\n\n            case actions.ADD_PROCESSOR:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId, _defineProperty({}, action.data.id, action.data)),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // array index depends on processor type\n                // let numInputProcessors = newState.processors.allIds.filter(item => item.type === 'input').length;\n                var numInputProcessors = newState.processors.allIds.filter(function (id) {\n                    newState.processors.byId[id].type === 'input';\n                }).length;\n                switch (action.data.type) {\n                    case 'input':\n                        newState.processors.allIds.unshift(action.data.id);\n                        numInputProcessors++;\n                        break;\n                    case 'output':\n                        newState.processors.allIds.push(action.data.id);\n                        break;\n                    default:\n                        newState.processors.allIds.splice(numInputProcessors, 0, action.data.id);\n                        newState.showSettingsPanel = true;\n\n                }\n                return newState;\n\n            case actions.DELETE_PROCESSOR:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: state.processors.allIds.filter(function (id) {\n                            return id !== action.id;\n                        })\n                    } });\n                delete newState.processors.byId[action.id];\n                return newState;\n            // return Object.assign({}, state, {\n            //     processors: state.processors.filter(processor => processor.id !== action.id)\n            // });\n\n            case actions.SELECT_PROCESSOR:\n                return Object.assign({}, state, {\n                    selectedID: action.id\n                });\n\n            case actions.DRAG_SELECTED_PROCESSOR:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                newState.processors.byId[newState.selectedID].positionX = action.x;\n                newState.processors.byId[newState.selectedID].positionY = action.y;\n                return newState;\n            // newState = Object.assign({}, state);\n            // newState.processors.forEach(processor => {\n            //     if (processor.id === newState.selectedID) {\n            //         processor.positionX = action.x;\n            //         processor.positionY = action.y;\n            //     }\n            // });\n            // return newState;\n\n            case actions.DRAG_ALL_PROCESSORS:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                newState.processors.allIds.forEach(function (id) {\n                    newState.processors.byId[id].positionX += action.x;\n                    newState.processors.byId[id].positionY += action.y;\n                });\n                return newState;\n            // newState = Object.assign({}, state);\n            // newState.processors.forEach(processor => {\n            //     processor.positionX += action.x;\n            //     processor.positionY += action.y;\n            // });\n            // return newState;\n\n            case actions.CHANGE_PARAMETER:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                var param = newState.processors.byId[action.processorID].params[action.paramKey];\n                switch (param.type) {\n                    case 'integer':\n                        param.value = Math.max(param.min, Math.min(action.paramValue, param.max));\n                        break;\n                    case 'boolean':\n                        param.value = !!action.paramValue;\n                        break;\n                    case 'itemized':\n                        param.value = action.paramValue;\n                        break;\n                    case 'string':\n                        param.value = action.paramValue;\n                        break;\n                }\n                return newState;\n            // newState = Object.assign({}, state);\n            // newState.processors.forEach(processor => {\n            //     if (processor.id === action.processorID) {\n            //         const param = processor.params[action.paramKey];\n            //         switch (param.type) {\n            //             case 'integer':\n            //                 param.value = Math.max(param.min, Math.min(action.paramValue, param.max));\n            //                 break;\n            //             case 'boolean':\n            //                 param.value = !!action.paramValue;\n            //                 break;\n            //             case 'itemized':\n            //                 param.value = action.paramValue;\n            //                 break;\n            //             case 'string':\n            //                 param.value = action.paramValue;\n            //                 break;\n            //         }\n            //     }\n            // });\n            // return newState;\n\n            case actions.RECREATE_PARAMETER:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                newState.processors.byId[action.processorID].params[action.paramKey] = _extends({}, newState.processors.byId[action.processorID].params[action.paramKey], action.paramObj);\n                return newState;\n            // newState = Object.assign({}, state);\n            // newState.processors.forEach(processor => {\n            //     if (processor.id === action.processorID) {\n            //         processor.params[action.paramKey] = Object.assign(\n            //             processor.params[action.paramKey],\n            //             action.paramObj);\n            //     }\n            // });\n            // return newState;\n\n            case actions.SET_TEMPO:\n                return Object.assign({}, state, { bpm: action.value });\n\n            // case actions.ADD_MIDI_PORT:\n            //     newState = Object.assign({}, state);\n            //     let portObj = { \n            //         id: action.id, \n            //         name: action.name,\n            //         networkEnabled: false,\n            //         syncEnabled: false,\n            //         remoteEnabled: false\n            //     };\n            //     if (action.isInput) {\n            //         newState.inputs = [ ...state.inputs, portObj ]\n            //         newState.inputs.sort((a, b) => {\n            //             if (a.name < b.name) { return -1 }\n            //             if (a.name > b.name) { return 1 }\n            //             return 0;\n            //         });\n            //     } else {\n            //         newState.outputs = [ ...state.outputs, portObj ]\n            //         newState.outputs.sort((a, b) => {\n            //             if (a.name < b.name) { return -1 }\n            //             if (a.name > b.name) { return 1 }\n            //             return 0;\n            //         });\n            //     }\n            //     return newState;\n\n            // case actions.REMOVE_MIDI_PORT:\n            //     newState = Object.assign({}, state);\n            //     if (action.isInput) {\n            //         newState.inputs = newState.inputs.filter(input => input.id !== action.id);\n            //     } else {\n            //         newState.outputs = newState.outputs.filter(output => output.id !== action.id);\n            //     }\n            //     return newState;\n\n            case actions.MIDI_PORT_CHANGE:\n                if ((0, _selectors.getMIDIPortByID)(action.data.id)) {\n                    newState = Object.assign({}, state, {\n                        ports: state.ports.map(function (port) {\n                            if (port.id == action.data.id) {\n                                port.connection = action.data.connection;\n                                port.state = action.data.state;\n                            }\n                            return port;\n                        })\n                    });\n                } else {\n                    newState = Object.assign({}, state, {\n                        ports: [].concat(_toConsumableArray(state.ports), [{\n                            id: action.data.id,\n                            type: action.data.type,\n                            name: action.data.name,\n                            connection: action.data.connection,\n                            state: action.data.state,\n                            networkEnabled: false,\n                            syncEnabled: false,\n                            remoteEnabled: false\n                        }])\n                    });\n                    newState.ports.sort(function (a, b) {\n                        if (a.name < b.name) {\n                            return -1;\n                        }\n                        if (a.name > b.name) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n                }\n                return newState;\n\n            case actions.TOGGLE_PORT_SYNC:\n                return toggleMIDIPreference(state, action.id, action.isInput, 'syncEnabled');\n\n            case actions.TOGGLE_PORT_REMOTE:\n                return toggleMIDIPreference(state, action.id, action.isInput, 'remoteEnabled');\n\n            case actions.TOGGLE_MIDI_PREFERENCE:\n                return toggleMIDIPreference(state, action.id, action.isInput, action.preferenceName);\n\n            case actions.TOGGLE_MIDI_LEARN_MODE:\n                return Object.assign({}, state, {\n                    learnModeActive: !state.learnModeActive });\n\n            case actions.TOGGLE_MIDI_LEARN_TARGET:\n                return Object.assign({}, state, {\n                    learnTargetProcessorID: action.processorID,\n                    learnTargetParameterKey: action.parameterKey\n                });\n\n            case actions.SET_TRANSPORT:\n                var value = action.command;\n                if (action.command === 'toggle') {\n                    value = state.transport === 'play' ? 'pause' : 'play';\n                }\n                return Object.assign({}, state, {\n                    transport: value\n                });\n\n            case actions.ASSIGN_EXTERNAL_CONTROL:\n                if (state.learnModeActive && state.learnTargetProcessorID && state.learnTargetParameterKey) {\n                    return _extends({}, state, {\n                        processors: state.processors.map(function (processor) {\n                            if (processor.id !== state.learnTargetProcessorID) {\n                                return processor;\n                            }\n                            return _extends({}, processor, {\n                                parameters: assignParameter(processor.params, action, state)\n                            });\n                        })\n                    });\n                }\n                return state;\n\n            case actions.UNASSIGN_EXTERNAL_CONTROL:\n                return _extends({}, state, {\n                    processors: state.processors.map(function (processor) {\n                        if (processor.id !== action.processorID) {\n                            return processor;\n                        }\n                        return _extends({}, processor, {\n                            parameters: unassignParameter(processor.params, action, state)\n                        });\n                    })\n                });\n\n            case actions.TOGGLE_PANEL:\n                return _extends({}, state, {\n                    showHelpPanel: action.panelName === 'help' ? !state.showHelpPanel : state.showHelpPanel,\n                    showPreferencesPanel: action.panelName === 'preferences' ? !state.showPreferencesPanel : state.showPreferencesPanel,\n                    showSettingsPanel: action.panelName === 'settings' ? !state.showSettingsPanel : state.showSettingsPanel\n                });\n                return state;\n\n            case actions.TOGGLE_CONNECT_MODE:\n                return _extends({}, state, {\n                    connectModeActive: !state.connectModeActive\n                });\n\n            case actions.CONNECT_PROCESSORS:\n                return _extends({}, state, {\n                    connections: addToNormalizedData(state.connections, action.id, action.payload)\n                });\n\n            case actions.DISCONNECT_PROCESSORS:\n                return _extends({}, state, {\n                    connections: deleteFromNormalizedTable(state.connections, action.id)\n                });\n\n            default:\n                return state;\n        }\n    };\n\n    return {\n        reduce: reduce\n    };\n}\n\nfunction addToNormalizedData(stateObj, newItemID, newItem) {\n    var clone = {\n        byId: _extends({}, stateObj.byId, _defineProperty({}, newItemID, newItem)),\n        allIds: [].concat(_toConsumableArray(stateObj.allIds), [newItemID])\n    };\n    return clone;\n}\n\nfunction deleteFromNormalizedTable(table, id) {\n    var clone = {\n        byId: _extends({}, table.byId),\n        allIds: table.allIds.filter(function (iid) {\n            return iid !== id;\n        })\n    };\n    delete clone.byId[id];\n    return clone;\n}\n\nfunction assignParameter(parameters, action, state) {\n    var params = _extends({}, parameters);\n    params[state.learnTargetParameterKey].remoteChannel = (action.data[0] & 0xf) + 1;\n    params[state.learnTargetParameterKey].remoteCC = action.data[1];\n    return params;\n}\n\nfunction unassignParameter(parameters, action, state) {\n    var params = _extends({}, parameters);\n    params[action.paramKey].remoteChannel = null;\n    params[action.paramKey].remoteCC = null;\n    return params;\n}\n\nfunction toggleMIDIPreference(state, id, isInput, preferenceName) {\n    return _extends({}, state, {\n        ports: state.ports.map(function (port) {\n            if (port.id === id) {\n                port[preferenceName] = !port[preferenceName];\n            }\n            return port;\n        })\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStore;\n\nvar _selectors = __webpack_require__(0);\n\nfunction createStore() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var STATE_CHANGE = 'STATE_CHANGE';\n\n    var that = {},\n        actions = specs.actions,\n        reducers = specs.reducers,\n        currentState = void 0,\n        dispatch = function dispatch(action) {\n        // thunk or not\n        if (typeof action === 'function') {\n            action(dispatch, getState, getActions);\n        } else {\n            currentState = reducers.reduce(currentState, action, actions);\n            (0, _selectors.memoize)(currentState, action, actions);\n            document.dispatchEvent(new CustomEvent(STATE_CHANGE, { detail: {\n                    state: currentState,\n                    action: action,\n                    actions: actions\n                } }));\n        }\n    },\n        getActions = function getActions() {\n        return actions;\n    },\n        getState = function getState() {\n        return currentState;\n    },\n        persist = function persist() {\n        return;\n        var name = 'persist';\n        window.addEventListener('beforeunload', function (e) {\n            localStorage.setItem(name, JSON.stringify(currentState));\n        });\n        var data = localStorage.getItem(name);\n        if (data) {\n            dispatch(getActions().setProject(JSON.parse(data)));\n        }\n    };\n\n    that = specs.that || {};\n\n    that.STATE_CHANGE = STATE_CHANGE;\n    that.dispatch = dispatch;\n    that.getActions = getActions;\n    that.getState = getState;\n    that.persist = persist;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanM/ZDhjZSJdLCJuYW1lcyI6WyJjcmVhdGVTdG9yZSIsInNwZWNzIiwibXkiLCJTVEFURV9DSEFOR0UiLCJ0aGF0IiwiYWN0aW9ucyIsInJlZHVjZXJzIiwiY3VycmVudFN0YXRlIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJnZXRTdGF0ZSIsImdldEFjdGlvbnMiLCJyZWR1Y2UiLCJkb2N1bWVudCIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsInN0YXRlIiwicGVyc2lzdCIsIm5hbWUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiZ2V0SXRlbSIsInNldFByb2plY3QiLCJwYXJzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxXOztBQUZ4Qjs7QUFFZSxTQUFTQSxXQUFULEdBQTBDO0FBQUEsUUFBckJDLEtBQXFCLHVFQUFiLEVBQWE7QUFBQSxRQUFUQyxFQUFTLHVFQUFKLEVBQUk7O0FBQ3JELFFBQU1DLGVBQWUsY0FBckI7O0FBRUEsUUFBSUMsT0FBTyxFQUFYO0FBQUEsUUFDSUMsVUFBVUosTUFBTUksT0FEcEI7QUFBQSxRQUVJQyxXQUFXTCxNQUFNSyxRQUZyQjtBQUFBLFFBR0lDLHFCQUhKO0FBQUEsUUFLSUMsV0FBVyxTQUFYQSxRQUFXLENBQUNDLE1BQUQsRUFBWTtBQUNuQjtBQUNBLFlBQUksT0FBT0EsTUFBUCxLQUFrQixVQUF0QixFQUFrQztBQUM5QkEsbUJBQU9ELFFBQVAsRUFBaUJFLFFBQWpCLEVBQTJCQyxVQUEzQjtBQUNILFNBRkQsTUFFTztBQUNISiwyQkFBZUQsU0FBU00sTUFBVCxDQUFnQkwsWUFBaEIsRUFBOEJFLE1BQTlCLEVBQXNDSixPQUF0QyxDQUFmO0FBQ0Esb0NBQVFFLFlBQVIsRUFBc0JFLE1BQXRCLEVBQThCSixPQUE5QjtBQUNBUSxxQkFBU0MsYUFBVCxDQUF1QixJQUFJQyxXQUFKLENBQWdCWixZQUFoQixFQUE4QixFQUFFYSxRQUFRO0FBQzNEQywyQkFBT1YsWUFEb0Q7QUFFM0RFLDRCQUFRQSxNQUZtRDtBQUczREosNkJBQVNBO0FBSGtELGlCQUFWLEVBQTlCLENBQXZCO0FBS0g7QUFDSixLQWxCTDtBQUFBLFFBb0JJTSxhQUFhLFNBQWJBLFVBQWEsR0FBTTtBQUNmLGVBQU9OLE9BQVA7QUFDSCxLQXRCTDtBQUFBLFFBd0JJSyxXQUFXLFNBQVhBLFFBQVcsR0FBTTtBQUNiLGVBQU9ILFlBQVA7QUFDSCxLQTFCTDtBQUFBLFFBNEJJVyxVQUFVLFNBQVZBLE9BQVUsR0FBTTtBQUNaO0FBQ0EsWUFBTUMsT0FBTyxTQUFiO0FBQ0FDLGVBQU9DLGdCQUFQLENBQXdCLGNBQXhCLEVBQXdDLGFBQUs7QUFDekNDLHlCQUFhQyxPQUFiLENBQXFCSixJQUFyQixFQUEyQkssS0FBS0MsU0FBTCxDQUFlbEIsWUFBZixDQUEzQjtBQUNILFNBRkQ7QUFHQSxZQUFJbUIsT0FBT0osYUFBYUssT0FBYixDQUFxQlIsSUFBckIsQ0FBWDtBQUNBLFlBQUlPLElBQUosRUFBVTtBQUNObEIscUJBQVNHLGFBQWFpQixVQUFiLENBQXdCSixLQUFLSyxLQUFMLENBQVdILElBQVgsQ0FBeEIsQ0FBVDtBQUNIO0FBQ0osS0F0Q0w7O0FBd0NBdEIsV0FBT0gsTUFBTUcsSUFBTixJQUFjLEVBQXJCOztBQUVBQSxTQUFLRCxZQUFMLEdBQW9CQSxZQUFwQjtBQUNBQyxTQUFLSSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBSixTQUFLTyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBUCxTQUFLTSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBTixTQUFLYyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxXQUFPZCxJQUFQO0FBQ0giLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZW1vaXplIH0gZnJvbSAnLi9zZWxlY3RvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdG9yZShzcGVjcyA9IHt9LCBteSA9IHt9KSB7XG4gICAgY29uc3QgU1RBVEVfQ0hBTkdFID0gJ1NUQVRFX0NIQU5HRSc7XG5cbiAgICBsZXQgdGhhdCA9IHt9LFxuICAgICAgICBhY3Rpb25zID0gc3BlY3MuYWN0aW9ucyxcbiAgICAgICAgcmVkdWNlcnMgPSBzcGVjcy5yZWR1Y2VycyxcbiAgICAgICAgY3VycmVudFN0YXRlLFxuICAgICAgICBcbiAgICAgICAgZGlzcGF0Y2ggPSAoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAvLyB0aHVuayBvciBub3RcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZ2V0QWN0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHJlZHVjZXJzLnJlZHVjZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgbWVtb2l6ZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoU1RBVEVfQ0hBTkdFLCB7IGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogY3VycmVudFN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogYWN0aW9uc1xuICAgICAgICAgICAgICAgIH19KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgZ2V0QWN0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgcGVyc2lzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAncGVyc2lzdCc7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkoY3VycmVudFN0YXRlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5zZXRQcm9qZWN0KEpTT04ucGFyc2UoZGF0YSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIHRoYXQgPSBzcGVjcy50aGF0IHx8IHt9O1xuICAgIFxuICAgIHRoYXQuU1RBVEVfQ0hBTkdFID0gU1RBVEVfQ0hBTkdFO1xuICAgIHRoYXQuZGlzcGF0Y2ggPSBkaXNwYXRjaDtcbiAgICB0aGF0LmdldEFjdGlvbnMgPSBnZXRBY3Rpb25zO1xuICAgIHRoYXQuZ2V0U3RhdGUgPSBnZXRTdGF0ZTtcbiAgICB0aGF0LnBlcnNpc3QgPSBwZXJzaXN0O1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3N0YXRlL3N0b3JlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createAppView;\n\nvar _settings = __webpack_require__(36);\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _windowresize = __webpack_require__(8);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Main application view.\n */\nfunction createAppView(specs, my) {\n    var that,\n        store = specs.store,\n\n    // app = specs.app,\n    rootEl = document.querySelector('#app'),\n        panelsEl = document.querySelector('.panels'),\n        helpEl = document.querySelector('.help'),\n        prefsEl = document.querySelector('.prefs'),\n        editEl = document.querySelector('.edit'),\n        editContentEl = document.querySelector('.edit .panel__content'),\n        remoteEl = document.querySelector('.remote'),\n        settingsViews = [],\n        panelHeaderHeight,\n        controls = {\n        new: {\n            type: 'checkbox',\n            input: document.querySelector('#file-new')\n        },\n        import: {\n            type: 'checkbox',\n            input: document.querySelector('#file-import')\n        },\n        export: {\n            type: 'checkbox',\n            input: document.querySelector('#file-export')\n        },\n        play: {\n            type: 'checkbox',\n            input: document.getElementById('play-check')\n        },\n        bpm: {\n            type: 'number',\n            input: document.getElementById('bpm-number')\n        },\n        remote: {\n            type: 'checkbox',\n            input: document.getElementById('learn-check')\n        },\n        prefs: {\n            type: 'checkbox',\n            input: document.getElementById('prefs-check')\n        },\n        edit: {\n            type: 'checkbox',\n            input: document.getElementById('edit-check')\n        },\n        connections: {\n            type: 'checkbox',\n            input: document.getElementById('connections-check')\n        },\n        help: {\n            type: 'checkbox',\n            input: document.getElementById('help-check')\n        }\n    },\n        init = function init() {\n        controls.new.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().newProject());\n        });\n        controls.import.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().importProject(e.target.files[0]));\n        });\n        controls.export.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().exportProject());\n        });\n        controls.play.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTransport('toggle'));\n        });\n        controls.bpm.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTempo(controls.bpm.input.value));\n        });\n        controls.remote.input.addEventListener('change', function (e) {\n            // app.updateApp('remote', e.target.checked);\n            // app.togglePanel('remote', e.target.checked);\n            store.dispatch(store.getActions().toggleMIDILearnMode());\n        });\n        controls.prefs.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('preferences'));\n            // app.togglePanel('preferences', e.target.checked);\n        });\n        controls.edit.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('settings'));\n            // app.togglePanel('settings', e.target.checked);\n        });\n        controls.connections.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleConnectMode());\n            // app.updateApp('connections', e.target.checked);\n        });\n        controls.help.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('help'));\n            // app.togglePanel('help', e.target.checked);\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 32:\n                    // don't toggle play while typing space key in a text field.\n                    if (!(e.target.tagName.toLowerCase() == 'input' && e.target.getAttribute('type') == 'text')) {\n                        store.dispatch(store.getActions().setTransport('toggle'));\n                    }\n                    break;\n            }\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_PREFERENCES:\n                case e.detail.actions.SET_THEME:\n                    rootEl.dataset.theme = 'dev'; // e.detail.state.preferences.isDarkTheme ? 'dark' : '';\n                    break;\n\n                case e.detail.actions.SET_PROJECT:\n                case e.detail.actions.NEW_PROJECT:\n                    setProject(e.detail.state.processors);\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createSettingsViews(e.detail.state.processors);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteSettingsView(e.detail.action.id);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.SET_TRANSPORT:\n                    controls.play.input.checked = e.detail.state.transport === 'play';\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n                case e.detail.actions.TOGGLE_PANEL:\n                    showPanels(e.detail.state);\n                    break;\n            }\n        });\n\n        // get panel header height from CSS.\n        var style = getComputedStyle(document.body);\n        panelHeaderHeight = parseInt(style.getPropertyValue('--header-height'), 10);\n\n        my.addWindowResizeCallback(renderLayout);\n        renderLayout();\n    },\n\n\n    /**\n     * Create settings controls view for a processor.\n     * @param  {Object} processor MIDI processor to control with the settings.\n     */\n    createSettingsViews = function createSettingsViews(processors) {\n        processors.allIds.forEach(function (id, i) {\n            var processorData = processors.byId[id];\n            if (!settingsViews[i] || id !== settingsViews[i].getID()) {\n                try {\n                    var template = __webpack_require__(42)(\"./\" + processorData.type + '/settings.html');\n                    settingsViews.splice(i, 0, (0, _settings2.default)({\n                        data: processorData,\n                        store: store,\n                        parentEl: editContentEl,\n                        template: template\n                    }));\n                } catch (err) {}\n            }\n        });\n    },\n\n\n    // createSettingsView = function(processor) {\n    //     var settingsView = createSettingsView({\n    //         midiNetwork: midiNetwork,\n    //         processor: processor,\n    //         parentEl: editContentEl\n    //     });\n    //     settingsViews.push(settingsView);\n    // },\n\n    /**\n     * Delete settings controls view for a processor.\n     * @param  {String} id MIDI processor ID.\n     */\n    deleteSettingsView = function deleteSettingsView(id) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            if (settingsViews[n].getID() === id) {\n                settingsViews[n].terminate();\n                settingsViews.splice(n, 1);\n                return false;\n            }\n        }\n    },\n        setProject = function setProject(processors) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            deleteSettingsView(settingsViews[n].getID());\n        }\n        createSettingsViews(processors);\n    },\n        renderLayout = function renderLayout() {\n        var leftColumn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var rightColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (leftColumn) {\n            renderColumnLayout(prefsEl, remoteEl, false);\n        }\n        if (rightColumn) {\n            renderColumnLayout(helpEl, editEl, true);\n        }\n    },\n        renderColumnLayout = function renderColumnLayout(topEl, btmEl, isRightColumn) {\n        var totalHeight = panelsEl.clientHeight,\n            columnWidth = document.querySelector('.panels__right').clientWidth,\n            topWidth = topEl.clientWidth,\n            btmWidth = btmEl.clientWidth,\n            isTopVisible = topEl.dataset.show == 'true',\n            isBtmVisible = btmEl.dataset.show == 'true',\n            topViewportEl = topEl.querySelector('.panel__viewport'),\n            btmViewportEl = btmEl.querySelector('.panel__viewport');\n\n        var topHeight = void 0,\n            btmHeight = void 0,\n            topContentHeight = void 0,\n            btmContentHeight = void 0;\n\n        // reset heights before measuring them\n        topViewportEl.style.height = 'auto';\n        btmViewportEl.style.height = 'auto';\n\n        topHeight = topEl.clientHeight, btmHeight = btmEl.clientHeight, topContentHeight = topEl.querySelector('.panel__content').clientHeight, btmContentHeight = btmEl.querySelector('.panel__content').clientHeight;\n\n        if (isRightColumn && topWidth + btmWidth < columnWidth) {\n            if (topContentHeight + panelHeaderHeight > totalHeight) {\n                topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                topViewportEl.style.height = 'auto';\n            }\n            if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                btmViewportEl.style.height = 'auto';\n            }\n        } else {\n            if (isTopVisible && isBtmVisible) {\n                var combinedHeight = topContentHeight + btmContentHeight + panelHeaderHeight * 2;\n                if (combinedHeight > totalHeight) {\n                    if (topContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = prefsEl.topContentHeight + 'px';\n                        btmViewportEl.style.height = totalHeight - topContentHeight - panelHeaderHeight * 2 + 'px';\n                    } else if (btmContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = totalHeight - btmContentHeight - panelHeaderHeight * 2 + 'px';\n                        btmViewportEl.style.height = remoteEl.topContentHeight + 'px';\n                    } else {\n                        topViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                        btmViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                    }\n                } else {\n                    topViewportEl.style.height = 'auto';\n                    btmViewportEl.style.height = 'auto';\n                }\n            } else if (isTopVisible) {\n                if (topContentHeight + panelHeaderHeight > totalHeight) {\n                    topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    topViewportEl.style.height = 'auto';\n                }\n            } else if (isBtmVisible) {\n                if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                    btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    btmViewportEl.style.height = 'auto';\n                }\n            }\n        }\n    },\n\n\n    // updateControl = function(property, value) {\n    //     switch(property) {\n    //         case 'bpm':\n    //             controls.bpm.input.value = value;\n    //             break;\n    //         case 'play':\n    //             controls.play.input.checked = value;\n    //             break;\n    //         case 'remote':\n    //             controls.remote.input.checked = value;\n    //             break;\n    //         case 'settings':\n    //             controls.edit.input.checked = value;\n    //             break;\n    //         case 'connections':\n    //             controls.connections.input.checked = value;\n    //             break;\n    //         default:\n    //             console.error('Unknown updateControl property:', property);\n    //     }\n    // },\n\n    showPanels = function showPanels(state) {\n        helpEl.dataset.show = state.showHelpPanel;\n        prefsEl.dataset.show = state.showPreferencesPanel;\n        remoteEl.dataset.show = state.learnModeActive;\n        editEl.dataset.show = state.showSettingsPanel;\n        renderLayout();\n    };\n\n    my = my || {};\n\n    that = (0, _windowresize2.default)(specs, my);\n\n    init();\n\n    that.renderLayout = renderLayout;\n    // that.createSettingsView = createSettingsView;\n    that.deleteSettingsView = deleteSettingsView;\n    // that.updateControl = updateControl;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createSettingsPanel;\n\nvar _boolean = __webpack_require__(37);\n\nvar _boolean2 = _interopRequireDefault(_boolean);\n\nvar _integer = __webpack_require__(39);\n\nvar _integer2 = _interopRequireDefault(_integer);\n\nvar _itemized = __webpack_require__(40);\n\nvar _itemized2 = _interopRequireDefault(_itemized);\n\nvar _string = __webpack_require__(41);\n\nvar _string2 = _interopRequireDefault(_string);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor settings view.\n */\nfunction createSettingsPanel(specs, my) {\n    var that,\n        store = specs.store,\n        data = specs.data,\n        parentEl = specs.parentEl,\n\n    // midiNetwork = specs.midiNetwork,\n    // processor = specs.processor,\n    settingViews = [],\n        el,\n        initialize = function initialize() {\n        // const htmlString = require(`html-loader!../processors/${data.type}/settings.html`);\n        el = document.createElement('div');\n        el.innerHTML = specs.template;\n\n        // loop through all processor parameters and add setting view if required\n        for (var key in data.params) {\n            if (data.params.hasOwnProperty(key)) {\n\n                // only create setting if there's a container el for it in the settings panel\n                var settingContainerEl = el.querySelector('.' + key);\n                if (settingContainerEl) {\n                    var paramData = data.params[key],\n                        settingView = void 0,\n                        settingViewSpecs = {\n                        store: store,\n                        key: key,\n                        data: paramData,\n                        parentEl: settingContainerEl,\n                        processorID: data.id\n                    };\n\n                    // create the setting view based on the parameter type\n                    switch (paramData.type) {\n                        case 'integer':\n                            settingView = (0, _integer2.default)(settingViewSpecs);\n                            break;\n                        case 'boolean':\n                            settingView = (0, _boolean2.default)(settingViewSpecs);\n                            break;\n                        case 'itemized':\n                            settingView = (0, _itemized2.default)(settingViewSpecs);\n                            break;\n                        case 'string':\n                            settingView = (0, _string2.default)(settingViewSpecs);\n                            break;\n                    }\n                }\n            }\n        }\n\n        // default delete button of the settings panel\n        if (el) {\n            el.querySelector('.settings__delete').addEventListener('click', function (e) {\n                e.preventDefault();\n                // midiNetwork.deleteProcessor(processor);\n                store.dispatch(store.getActions().deleteProcessor(data.id));\n            });\n        }\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SELECT_PROCESSOR:\n                    show(e.detail.action.id === data.id);\n                    break;\n            }\n        });\n\n        // const params = processor.getParameters();\n        // let template = document.querySelector('#template-settings-' + processor.getType());\n        // let clone = template.content.cloneNode(true);\n        // el = clone.firstElementChild;\n\n        // if (typeof processor.addSelectCallback === 'function') {\n        //     processor.addSelectCallback(show);\n        // }\n\n        // // loop through all processor parameters and add setting view if required\n        // for (var key in params) {\n        //     if (params.hasOwnProperty(key)) {\n        //         // only create setting if there's a container el for it in the settings panel\n        //         var settingContainerEl = el.querySelector('.' + key);\n        //         if (settingContainerEl) {\n        //             var param = params[key],\n        //                 settingView = {},\n        //                 settingViewSpecs = {\n        //                     that: settingView,\n        //                     param: param,\n        //                     containerEl: settingContainerEl\n        //                 };\n        //             // create the setting view based on the parameter type\n        //             switch (param.getProperty('type')) {\n        //                 case 'integer':\n        //                     settingView = ns.createIntegerSettingView(settingViewSpecs);\n        //                     break;\n        //                 case 'boolean':\n        //                     settingView = ns.createBooleanSettingView(settingViewSpecs);\n        //                     break;\n        //                 case 'itemized':\n        //                     settingView = ns.createItemizedSettingView(settingViewSpecs);\n        //                     break;\n        //                 case 'string':\n        //                     settingView = ns.createStringSettingView(settingViewSpecs);\n        //                     break;\n        //             }\n        //             // add view to list for future reference\n        //             settingViews.push(settingView);\n        //         }\n        //     }\n        // }\n\n        // // default delete button of the settings panel\n        // if (el) {\n        //     el.querySelector('.settings__delete').addEventListener('click', function(e) {\n        //         e.preventDefault();\n        //         midiNetwork.deleteProcessor(processor);\n        //     });\n        // }\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (el && parentEl) {\n            show(false);\n        }\n    },\n\n\n    /**\n     * Show settings if the processor is selected, else remove.\n     * @param {Boolean} isSelected True if selected.\n     */\n    show = function show(isSelected) {\n        if (isSelected) {\n            parentEl.appendChild(el);\n        } else if (el.parentNode === parentEl) {\n            parentEl.removeChild(el);\n        }\n    },\n\n\n    /**\n     * Check if this view is for a certain processor.\n     * @param  {Object} proc MIDI processor object.\n     * @return {Boolean} True if the processors match.\n     */\n    // hasProcessor = function(proc) {\n    //     return proc === processor;\n    // },\n\n    getID = function getID() {\n        return data.id;\n    };\n\n    that = data.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    // that.hasProcessor = hasProcessor;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBooleanSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\nfunction createBooleanSettingView(specs, my) {\n    var that,\n        checkEl,\n        init = function init() {\n        var id = getTemporaryInputAndLabelId();\n\n        checkEl = my.el.querySelector('.setting__check');\n        checkEl.value = my.data.default;\n        checkEl.setAttribute('id', id);\n        checkEl.addEventListener('change', onChange);\n\n        var labelEl = my.el.querySelector('.toggle__label');\n        labelEl.setAttribute('for', id);\n\n        // my.param.addChangedCallback(changedCallback);\n    },\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        // my.data.setValue(e.target.checked);\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.checked));\n    },\n\n\n    // changedCallback = function(parameter, oldValue, newValue) {\n    //     checkEl.checked = newValue;\n    // },\n\n    setValue = function setValue(value) {\n        checkEl.checked = value;\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jvb2xlYW4uanM/ZTAyMiJdLCJuYW1lcyI6WyJjcmVhdGVCb29sZWFuU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImNoZWNrRWwiLCJpbml0IiwiaWQiLCJnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQiLCJlbCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZSIsImRhdGEiLCJkZWZhdWx0Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwibGFiZWxFbCIsIk1hdGgiLCJyYW5kb20iLCJwZXJmb3JtYW5jZSIsIm5vdyIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwia2V5IiwidGFyZ2V0IiwiY2hlY2tlZCIsInNldFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHdCOztBQU54Qjs7Ozs7O0FBRUE7Ozs7QUFJZSxTQUFTQSx3QkFBVCxDQUFrQ0MsS0FBbEMsRUFBeUNDLEVBQXpDLEVBQTZDO0FBQ3hELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxPQURKO0FBQUEsUUFHSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZCxZQUFJQyxLQUFLQyw2QkFBVDs7QUFFQUgsa0JBQVVGLEdBQUdNLEVBQUgsQ0FBTUMsYUFBTixDQUFvQixpQkFBcEIsQ0FBVjtBQUNBTCxnQkFBUU0sS0FBUixHQUFnQlIsR0FBR1MsSUFBSCxDQUFRQyxPQUF4QjtBQUNBUixnQkFBUVMsWUFBUixDQUFxQixJQUFyQixFQUEyQlAsRUFBM0I7QUFDQUYsZ0JBQVFVLGdCQUFSLENBQXlCLFFBQXpCLEVBQW1DQyxRQUFuQzs7QUFFQSxZQUFJQyxVQUFVZCxHQUFHTSxFQUFILENBQU1DLGFBQU4sQ0FBb0IsZ0JBQXBCLENBQWQ7QUFDQU8sZ0JBQVFILFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJQLEVBQTVCOztBQUVBO0FBQ0gsS0FmTDs7O0FBaUJJOzs7O0FBSUFDLGtDQUE4QixTQUE5QkEsMkJBQThCLEdBQVc7QUFDckMsZUFBTyxPQUFPVSxLQUFLQyxNQUFMLEVBQVAsR0FBdUJDLFlBQVlDLEdBQVosRUFBOUI7QUFDSCxLQXZCTDtBQUFBLFFBeUJJTCxXQUFXLFNBQVhBLFFBQVcsQ0FBU00sQ0FBVCxFQUFZO0FBQ25CO0FBQ0FuQixXQUFHb0IsS0FBSCxDQUFTQyxRQUFULENBQWtCckIsR0FBR29CLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZHZCLEdBQUd3QixXQURXLEVBRWR4QixHQUFHeUIsR0FGVyxFQUdkTixFQUFFTyxNQUFGLENBQVNDLE9BSEssQ0FBbEI7QUFJSCxLQS9CTDs7O0FBaUNJO0FBQ0E7QUFDQTs7QUFFQUMsZUFBVyxTQUFYQSxRQUFXLENBQVNwQixLQUFULEVBQWdCO0FBQ3ZCTixnQkFBUXlCLE9BQVIsR0FBa0JuQixLQUFsQjtBQUNILEtBdkNMOztBQXlDQVIsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUc0QixRQUFILEdBQWNBLFFBQWQ7O0FBRUEzQixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFHOztBQUVBLFdBQU9GLElBQVA7QUFDSCIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIEJvb2xlYW4gdHlwZSBwYXJhbWV0ZXIsXG4gKiB3aGljaCBoYXMgYSBjaGVja2JveCBpbnB1dC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm9vbGVhblNldHRpbmdWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBjaGVja0VsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGlkID0gZ2V0VGVtcG9yYXJ5SW5wdXRBbmRMYWJlbElkKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNoZWNrRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fY2hlY2snKTtcbiAgICAgICAgICAgIGNoZWNrRWwudmFsdWUgPSBteS5kYXRhLmRlZmF1bHQ7XG4gICAgICAgICAgICBjaGVja0VsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgICAgICBjaGVja0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGxhYmVsRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcudG9nZ2xlX19sYWJlbCcpO1xuICAgICAgICAgICAgbGFiZWxFbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbXkucGFyYW0uYWRkQ2hhbmdlZENhbGxiYWNrKGNoYW5nZWRDYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQSBxdWljayBJRCB0byB0aWUgbGFiZWwgdG8gaW5wdXQgZWxlbWVudHMuXG4gICAgICAgICAqIEByZXR1cm4ge051bWJlcn0gVW5pcXVlIElELlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0VGVtcG9yYXJ5SW5wdXRBbmRMYWJlbElkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2lkJyArIE1hdGgucmFuZG9tKCkgKyBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgLy8gbXkuZGF0YS5zZXRWYWx1ZShlLnRhcmdldC5jaGVja2VkKTtcbiAgICAgICAgICAgIG15LnN0b3JlLmRpc3BhdGNoKG15LnN0b3JlLmdldEFjdGlvbnMoKS5jaGFuZ2VQYXJhbWV0ZXIoXG4gICAgICAgICAgICAgICAgbXkucHJvY2Vzc29ySUQsIFxuICAgICAgICAgICAgICAgIG15LmtleSwgXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2hlY2tlZCkpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLy8gY2hhbmdlZENhbGxiYWNrID0gZnVuY3Rpb24ocGFyYW1ldGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgLy8gICAgIGNoZWNrRWwuY2hlY2tlZCA9IG5ld1ZhbHVlO1xuICAgICAgICAvLyB9LFxuICAgICAgICBcbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgY2hlY2tFbC5jaGVja2VkID0gdmFsdWU7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jvb2xlYW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteSettingView;\n/**\n * Processor setting overlay for assinging MIDI control to the parameter.\n */\nfunction createRemoteSettingView(specs, my) {\n    var that,\n        learnClickLayer,\n        learnCallback,\n        init = function init() {\n        if (my.data.isMidiControllable) {\n\n            // set callback on parameter\n            // my.param.addRemoteStateCallback(changeRemoteState);\n\n            var template = document.querySelector('#template-setting-learnmode');\n            var clone = template.content.cloneNode(true);\n            learnClickLayer = clone.firstElementChild;\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     * @param {Function} callback In learn mode, the function to call on click.\n     */\n    changeRemoteState = function changeRemoteState(state, callback) {\n        switch (state) {\n            case 'enter':\n                my.el.appendChild(learnClickLayer);\n                learnCallback = callback;\n                learnClickLayer.addEventListener('click', onLearnLayerClick);\n                break;\n            case 'exit':\n                if (my.el.contains(learnClickLayer)) {\n                    my.el.removeChild(learnClickLayer);\n                    learnCallback = null;\n                    learnClickLayer.removeEventListener('click', onLearnLayerClick);\n                }\n                break;\n            case 'selected':\n                learnClickLayer.dataset.selected = true;\n                break;\n            case 'deselected':\n                learnClickLayer.dataset.selected = false;\n                break;\n            case 'assigned':\n                learnClickLayer.dataset.assigned = true;\n                break;\n            case 'unassigned':\n                learnClickLayer.dataset.assigned = false;\n                break;\n            default:\n                console.log('Unknown remote state: ', state);\n                break;\n        }\n    },\n        onLearnLayerClick = function onLearnLayerClick(e) {\n        // learnCallback(my.data);\n        my.store.dispatch(my.store.getActions().toggleMIDILearnTarget(my.processorID, my.key));\n    };\n\n    my = my || {};\n    my.changeRemoteState = changeRemoteState;\n\n    that = that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3JlbW90ZS5qcz83MTA3Il0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZVNldHRpbmdWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJsZWFybkNsaWNrTGF5ZXIiLCJsZWFybkNhbGxiYWNrIiwiaW5pdCIsImRhdGEiLCJpc01pZGlDb250cm9sbGFibGUiLCJ0ZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lIiwiY29udGVudCIsImNsb25lTm9kZSIsImZpcnN0RWxlbWVudENoaWxkIiwiY2hhbmdlUmVtb3RlU3RhdGUiLCJzdGF0ZSIsImNhbGxiYWNrIiwiZWwiLCJhcHBlbmRDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkxlYXJuTGF5ZXJDbGljayIsImNvbnRhaW5zIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGF0YXNldCIsInNlbGVjdGVkIiwiYXNzaWduZWQiLCJjb25zb2xlIiwibG9nIiwiZSIsInN0b3JlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwidG9nZ2xlTUlESUxlYXJuVGFyZ2V0IiwicHJvY2Vzc29ySUQiLCJrZXkiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUd3QkEsdUI7QUFIeEI7OztBQUdlLFNBQVNBLHVCQUFULENBQWlDQyxLQUFqQyxFQUF3Q0MsRUFBeEMsRUFBNEM7QUFDdkQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLGVBREo7QUFBQSxRQUVJQyxhQUZKO0FBQUEsUUFJSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZCxZQUFJSixHQUFHSyxJQUFILENBQVFDLGtCQUFaLEVBQWdDOztBQUU1QjtBQUNBOztBQUVBLGdCQUFJQyxXQUFXQyxTQUFTQyxhQUFULENBQXVCLDZCQUF2QixDQUFmO0FBQ0EsZ0JBQUlDLFFBQVFILFNBQVNJLE9BQVQsQ0FBaUJDLFNBQWpCLENBQTJCLElBQTNCLENBQVo7QUFDQVYsOEJBQWtCUSxNQUFNRyxpQkFBeEI7QUFDSDtBQUNKLEtBZEw7OztBQWdCSTs7Ozs7O0FBTUFDLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNDLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQTBCO0FBQzFDLGdCQUFRRCxLQUFSO0FBQ0ksaUJBQUssT0FBTDtBQUNJZixtQkFBR2lCLEVBQUgsQ0FBTUMsV0FBTixDQUFrQmhCLGVBQWxCO0FBQ0FDLGdDQUFnQmEsUUFBaEI7QUFDQWQsZ0NBQWdCaUIsZ0JBQWhCLENBQWlDLE9BQWpDLEVBQTBDQyxpQkFBMUM7QUFDQTtBQUNKLGlCQUFLLE1BQUw7QUFDSSxvQkFBSXBCLEdBQUdpQixFQUFILENBQU1JLFFBQU4sQ0FBZW5CLGVBQWYsQ0FBSixFQUFxQztBQUNqQ0YsdUJBQUdpQixFQUFILENBQU1LLFdBQU4sQ0FBa0JwQixlQUFsQjtBQUNBQyxvQ0FBZ0IsSUFBaEI7QUFDQUQsb0NBQWdCcUIsbUJBQWhCLENBQW9DLE9BQXBDLEVBQTZDSCxpQkFBN0M7QUFDSDtBQUNEO0FBQ0osaUJBQUssVUFBTDtBQUNJbEIsZ0NBQWdCc0IsT0FBaEIsQ0FBd0JDLFFBQXhCLEdBQW1DLElBQW5DO0FBQ0E7QUFDSixpQkFBSyxZQUFMO0FBQ0l2QixnQ0FBZ0JzQixPQUFoQixDQUF3QkMsUUFBeEIsR0FBbUMsS0FBbkM7QUFDQTtBQUNKLGlCQUFLLFVBQUw7QUFDSXZCLGdDQUFnQnNCLE9BQWhCLENBQXdCRSxRQUF4QixHQUFtQyxJQUFuQztBQUNBO0FBQ0osaUJBQUssWUFBTDtBQUNJeEIsZ0NBQWdCc0IsT0FBaEIsQ0FBd0JFLFFBQXhCLEdBQW1DLEtBQW5DO0FBQ0E7QUFDSjtBQUNJQyx3QkFBUUMsR0FBUixDQUFZLHdCQUFaLEVBQXNDYixLQUF0QztBQUNBO0FBM0JSO0FBNkJILEtBcERMO0FBQUEsUUFzRElLLG9CQUFvQixTQUFwQkEsaUJBQW9CLENBQVNTLENBQVQsRUFBWTtBQUM1QjtBQUNBN0IsV0FBRzhCLEtBQUgsQ0FBU0MsUUFBVCxDQUFrQi9CLEdBQUc4QixLQUFILENBQVNFLFVBQVQsR0FBc0JDLHFCQUF0QixDQUE0Q2pDLEdBQUdrQyxXQUEvQyxFQUE0RGxDLEdBQUdtQyxHQUEvRCxDQUFsQjtBQUNILEtBekRMOztBQTJEQW5DLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHYyxpQkFBSCxHQUF1QkEsaUJBQXZCOztBQUVBYixXQUFPQSxRQUFRLEVBQWY7O0FBRUFHOztBQUVBLFdBQU9ILElBQVA7QUFDSCIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJvY2Vzc29yIHNldHRpbmcgb3ZlcmxheSBmb3IgYXNzaW5naW5nIE1JREkgY29udHJvbCB0byB0aGUgcGFyYW1ldGVyLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZW1vdGVTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgbGVhcm5DbGlja0xheWVyLFxuICAgICAgICBsZWFybkNhbGxiYWNrLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKG15LmRhdGEuaXNNaWRpQ29udHJvbGxhYmxlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gc2V0IGNhbGxiYWNrIG9uIHBhcmFtZXRlclxuICAgICAgICAgICAgICAgIC8vIG15LnBhcmFtLmFkZFJlbW90ZVN0YXRlQ2FsbGJhY2soY2hhbmdlUmVtb3RlU3RhdGUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1zZXR0aW5nLWxlYXJubW9kZScpO1xuICAgICAgICAgICAgICAgIGxldCBjbG9uZSA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIGxlYXJuQ2xpY2tMYXllciA9IGNsb25lLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YXRlIG9mIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIGFzc2lnbm1lbnQgcHJvY2VzcyBjaGFuZ2VkLFxuICAgICAgICAgKiB0aGUgZWxlbWVudCB3aWxsIHNob3cgdGhpcyB2aXN1YWxseS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXRlIE5ldyBzdGF0ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBJbiBsZWFybiBtb2RlLCB0aGUgZnVuY3Rpb24gdG8gY2FsbCBvbiBjbGljay5cbiAgICAgICAgICovXG4gICAgICAgIGNoYW5nZVJlbW90ZVN0YXRlID0gZnVuY3Rpb24oc3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZW50ZXInOlxuICAgICAgICAgICAgICAgICAgICBteS5lbC5hcHBlbmRDaGlsZChsZWFybkNsaWNrTGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICBsZWFybkNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgICAgIGxlYXJuQ2xpY2tMYXllci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uTGVhcm5MYXllckNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhpdCc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChteS5lbC5jb250YWlucyhsZWFybkNsaWNrTGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBteS5lbC5yZW1vdmVDaGlsZChsZWFybkNsaWNrTGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhcm5DYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFybkNsaWNrTGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkxlYXJuTGF5ZXJDbGljayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBsZWFybkNsaWNrTGF5ZXIuZGF0YXNldC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Rlc2VsZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBsZWFybkNsaWNrTGF5ZXIuZGF0YXNldC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhc3NpZ25lZCc6XG4gICAgICAgICAgICAgICAgICAgIGxlYXJuQ2xpY2tMYXllci5kYXRhc2V0LmFzc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndW5hc3NpZ25lZCc6XG4gICAgICAgICAgICAgICAgICAgIGxlYXJuQ2xpY2tMYXllci5kYXRhc2V0LmFzc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmtub3duIHJlbW90ZSBzdGF0ZTogJywgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uTGVhcm5MYXllckNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgLy8gbGVhcm5DYWxsYmFjayhteS5kYXRhKTtcbiAgICAgICAgICAgIG15LnN0b3JlLmRpc3BhdGNoKG15LnN0b3JlLmdldEFjdGlvbnMoKS50b2dnbGVNSURJTGVhcm5UYXJnZXQobXkucHJvY2Vzc29ySUQsIG15LmtleSkpO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuY2hhbmdlUmVtb3RlU3RhdGUgPSBjaGFuZ2VSZW1vdGVTdGF0ZTtcbiAgICBcbiAgICB0aGF0ID0gdGhhdCB8fCB7fTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3JlbW90ZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIntegerSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createIntegerSettingView(specs, my) {\n    var that,\n        rangeEl,\n        numberEl,\n        init = function init() {\n        rangeEl = my.el.getElementsByClassName('setting__range')[0];\n        // rangeEl.setAttribute('min', my.data.min);\n        // rangeEl.setAttribute('max', my.data.max);\n        // rangeEl.value = my.data.default;\n        rangeEl.addEventListener('input', onChange);\n        rangeEl.addEventListener('change', onChange);\n\n        numberEl = my.el.getElementsByClassName('setting__number')[0];\n        // numberEl.setAttribute('min', my.data.min);\n        // numberEl.setAttribute('max', my.data.max);\n        // numberEl.value = my.data.default;\n        numberEl.addEventListener('change', onChange);\n\n        // my.param.addChangedCallback(changedCallback);\n        // my.param.addChangedMaxCallback(changedMaxCallback);\n\n        initData();\n    },\n        initData = function initData() {\n        rangeEl.setAttribute('min', my.data.min);\n        rangeEl.setAttribute('max', my.data.max);\n        rangeEl.value = my.data.value;\n\n        numberEl.setAttribute('min', my.data.min);\n        numberEl.setAttribute('max', my.data.max);\n        numberEl.value = my.data.value;\n    },\n        onChange = function onChange(e) {\n        // my.param.setValue(parseInt(e.target.value, 10));\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, parseInt(e.target.value, 10)));\n    },\n\n\n    // changedCallback = function(parameter, oldValue, newValue) {\n    //     rangeEl.value = newValue;\n    //     numberEl.value = newValue;\n    // },\n\n    /**\n     * The maximum value of the parameter has changed.\n     * @param {Number} max New maximum value. \n     */\n    // changedMaxCallback = function(max) {\n    //     rangeEl.setAttribute('max', max);\n    //     numberEl.setAttribute('max', max);\n    // },\n\n    setValue = function setValue(value) {\n        rangeEl.value = value;\n        numberEl.value = value;\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanM/NTk2MCJdLCJuYW1lcyI6WyJjcmVhdGVJbnRlZ2VyU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInJhbmdlRWwiLCJudW1iZXJFbCIsImluaXQiLCJlbCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwib25DaGFuZ2UiLCJpbml0RGF0YSIsInNldEF0dHJpYnV0ZSIsImRhdGEiLCJtaW4iLCJtYXgiLCJ2YWx1ZSIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwia2V5IiwicGFyc2VJbnQiLCJ0YXJnZXQiLCJzZXRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBTXdCQSx3Qjs7QUFOeEI7Ozs7OztBQUVBOzs7O0FBSWUsU0FBU0Esd0JBQVQsQ0FBa0NDLEtBQWxDLEVBQXlDQyxFQUF6QyxFQUE2QztBQUN4RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsT0FESjtBQUFBLFFBRUlDLFFBRko7QUFBQSxRQUlJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixrQkFBVUYsR0FBR0ssRUFBSCxDQUFNQyxzQkFBTixDQUE2QixnQkFBN0IsRUFBK0MsQ0FBL0MsQ0FBVjtBQUNBO0FBQ0E7QUFDQTtBQUNBSixnQkFBUUssZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0NDLFFBQWxDO0FBQ0FOLGdCQUFRSyxnQkFBUixDQUF5QixRQUF6QixFQUFtQ0MsUUFBbkM7O0FBRUFMLG1CQUFXSCxHQUFHSyxFQUFILENBQU1DLHNCQUFOLENBQTZCLGlCQUE3QixFQUFnRCxDQUFoRCxDQUFYO0FBQ0E7QUFDQTtBQUNBO0FBQ0FILGlCQUFTSSxnQkFBVCxDQUEwQixRQUExQixFQUFvQ0MsUUFBcEM7O0FBRUE7QUFDQTs7QUFFQUM7QUFDSCxLQXRCTDtBQUFBLFFBd0JJQSxXQUFXLFNBQVhBLFFBQVcsR0FBVztBQUNsQlAsZ0JBQVFRLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJWLEdBQUdXLElBQUgsQ0FBUUMsR0FBcEM7QUFDQVYsZ0JBQVFRLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJWLEdBQUdXLElBQUgsQ0FBUUUsR0FBcEM7QUFDQVgsZ0JBQVFZLEtBQVIsR0FBZ0JkLEdBQUdXLElBQUgsQ0FBUUcsS0FBeEI7O0FBRUFYLGlCQUFTTyxZQUFULENBQXNCLEtBQXRCLEVBQTZCVixHQUFHVyxJQUFILENBQVFDLEdBQXJDO0FBQ0FULGlCQUFTTyxZQUFULENBQXNCLEtBQXRCLEVBQTZCVixHQUFHVyxJQUFILENBQVFFLEdBQXJDO0FBQ0FWLGlCQUFTVyxLQUFULEdBQWlCZCxHQUFHVyxJQUFILENBQVFHLEtBQXpCO0FBQ0gsS0FoQ0w7QUFBQSxRQWtDSU4sV0FBVyxTQUFYQSxRQUFXLENBQVNPLENBQVQsRUFBWTtBQUNuQjtBQUNBZixXQUFHZ0IsS0FBSCxDQUFTQyxRQUFULENBQWtCakIsR0FBR2dCLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZG5CLEdBQUdvQixXQURXLEVBRWRwQixHQUFHcUIsR0FGVyxFQUdkQyxTQUFTUCxFQUFFUSxNQUFGLENBQVNULEtBQWxCLEVBQXlCLEVBQXpCLENBSGMsQ0FBbEI7QUFJSCxLQXhDTDs7O0FBMENJO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUFVLGVBQVcsU0FBWEEsUUFBVyxDQUFTVixLQUFULEVBQWdCO0FBQ3ZCWixnQkFBUVksS0FBUixHQUFnQkEsS0FBaEI7QUFDQVgsaUJBQVNXLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0gsS0EzREw7O0FBNkRBZCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR1MsUUFBSCxHQUFjQSxRQUFkO0FBQ0FULE9BQUd3QixRQUFILEdBQWNBLFFBQWQ7O0FBRUF2QixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFJOztBQUVBLFdBQU9ILElBQVA7QUFDSCIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIGxpbmVhciBpbnRlZ2VyIHR5cGUgcGFyYW1ldGVyLFxuICogd2hpY2ggaGFzIGEgc2xpZGVyIGFuZCBhIG51bWJlciBmaWVsZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlSW50ZWdlclNldHRpbmdWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICByYW5nZUVsLFxuICAgICAgICBudW1iZXJFbCxcbiAgICAgICAgXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJhbmdlRWwgPSBteS5lbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzZXR0aW5nX19yYW5nZScpWzBdO1xuICAgICAgICAgICAgLy8gcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoJ21pbicsIG15LmRhdGEubWluKTtcbiAgICAgICAgICAgIC8vIHJhbmdlRWwuc2V0QXR0cmlidXRlKCdtYXgnLCBteS5kYXRhLm1heCk7XG4gICAgICAgICAgICAvLyByYW5nZUVsLnZhbHVlID0gbXkuZGF0YS5kZWZhdWx0O1xuICAgICAgICAgICAgcmFuZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIHJhbmdlRWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBudW1iZXJFbCA9IG15LmVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NldHRpbmdfX251bWJlcicpWzBdO1xuICAgICAgICAgICAgLy8gbnVtYmVyRWwuc2V0QXR0cmlidXRlKCdtaW4nLCBteS5kYXRhLm1pbik7XG4gICAgICAgICAgICAvLyBudW1iZXJFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcbiAgICAgICAgICAgIC8vIG51bWJlckVsLnZhbHVlID0gbXkuZGF0YS5kZWZhdWx0O1xuICAgICAgICAgICAgbnVtYmVyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBteS5wYXJhbS5hZGRDaGFuZ2VkQ2FsbGJhY2soY2hhbmdlZENhbGxiYWNrKTtcbiAgICAgICAgICAgIC8vIG15LnBhcmFtLmFkZENoYW5nZWRNYXhDYWxsYmFjayhjaGFuZ2VkTWF4Q2FsbGJhY2spO1xuXG4gICAgICAgICAgICBpbml0RGF0YSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsLnNldEF0dHJpYnV0ZSgnbWluJywgbXkuZGF0YS5taW4pO1xuICAgICAgICAgICAgcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcbiAgICAgICAgICAgIHJhbmdlRWwudmFsdWUgPSBteS5kYXRhLnZhbHVlO1xuXG4gICAgICAgICAgICBudW1iZXJFbC5zZXRBdHRyaWJ1dGUoJ21pbicsIG15LmRhdGEubWluKTtcbiAgICAgICAgICAgIG51bWJlckVsLnNldEF0dHJpYnV0ZSgnbWF4JywgbXkuZGF0YS5tYXgpO1xuICAgICAgICAgICAgbnVtYmVyRWwudmFsdWUgPSBteS5kYXRhLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAvLyBteS5wYXJhbS5zZXRWYWx1ZShwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApKTtcbiAgICAgICAgICAgIG15LnN0b3JlLmRpc3BhdGNoKG15LnN0b3JlLmdldEFjdGlvbnMoKS5jaGFuZ2VQYXJhbWV0ZXIoXG4gICAgICAgICAgICAgICAgbXkucHJvY2Vzc29ySUQsIFxuICAgICAgICAgICAgICAgIG15LmtleSwgXG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoZS50YXJnZXQudmFsdWUsIDEwKSkpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLy8gY2hhbmdlZENhbGxiYWNrID0gZnVuY3Rpb24ocGFyYW1ldGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgLy8gICAgIHJhbmdlRWwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgLy8gICAgIG51bWJlckVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIC8vIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1heGltdW0gdmFsdWUgb2YgdGhlIHBhcmFtZXRlciBoYXMgY2hhbmdlZC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG1heCBOZXcgbWF4aW11bSB2YWx1ZS4gXG4gICAgICAgICAqL1xuICAgICAgICAvLyBjaGFuZ2VkTWF4Q2FsbGJhY2sgPSBmdW5jdGlvbihtYXgpIHtcbiAgICAgICAgLy8gICAgIHJhbmdlRWwuc2V0QXR0cmlidXRlKCdtYXgnLCBtYXgpO1xuICAgICAgICAvLyAgICAgbnVtYmVyRWwuc2V0QXR0cmlidXRlKCdtYXgnLCBtYXgpO1xuICAgICAgICAvLyB9LFxuICAgICAgICBcbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmFuZ2VFbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgbnVtYmVyRWwudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LmluaXREYXRhID0gaW5pdERhdGE7XG4gICAgbXkuc2V0VmFsdWUgPSBzZXRWYWx1ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVNldHRpbmdWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvc2V0dGluZy9pbnRlZ2VyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createItemizedSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a itemized type parameter,\n * which has a radio buttons for item selection.\n */\nfunction createItemizedSettingView(specs, my) {\n    var that,\n        radioInputs = [],\n        numInputs,\n        init = function init() {\n        var parentEl = my.el.parentNode;\n\n        // add the main label\n        var label = my.el.querySelector('.setting__label-text');\n        parentEl.appendChild(label);\n\n        // add the radio buttons\n        var radioTemplate = document.querySelector('#template-setting-itemized-item'),\n            model = my.data.model;\n        numInputs = model.length;\n        for (var i = 0; i < numInputs; i++) {\n            var id = getTemporaryInputAndLabelId();\n\n            // add a new cloned radio element\n            var radioInputEl = radioTemplate.content.children[0].cloneNode(true);\n            parentEl.appendChild(radioInputEl);\n            radioInputEl.setAttribute('name', specs.key);\n            radioInputEl.setAttribute('id', id);\n            radioInputEl.value = model[i].value;\n            radioInputEl.checked = model[i].value == my.data.default;\n            radioInputEl.addEventListener('change', onChange);\n            radioInputs.push(radioInputEl);\n\n            // add a new cloned label element\n            var radioLabelEl = radioTemplate.content.children[1].cloneNode(true);\n            parentEl.appendChild(radioLabelEl);\n            radioLabelEl.setAttribute('for', id);\n            radioLabelEl.innerHTML = model[i].label;\n        }\n\n        // remove the original element\n        parentEl.removeChild(my.el);\n\n        // my.param.addChangedCallback(changedCallback);\n    },\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        // my.data.setValue(e.target.value);\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n\n\n    // changedCallback = function(parameter, oldValue, newValue) {\n    //     for (i = 0; i < numInputs; i++) {\n    //         radioInputs[i].checked = (radioInputs[i].value == newValue);\n    //     }\n    // };\n\n    setValue = function setValue(value) {\n        for (var i = 0; i < numInputs; i++) {\n            radioInputs[i].checked = radioInputs[i].value == value;\n        }\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2l0ZW1pemVkLmpzPzdhMjAiXSwibmFtZXMiOlsiY3JlYXRlSXRlbWl6ZWRTZXR0aW5nVmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwicmFkaW9JbnB1dHMiLCJudW1JbnB1dHMiLCJpbml0IiwicGFyZW50RWwiLCJlbCIsInBhcmVudE5vZGUiLCJsYWJlbCIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsInJhZGlvVGVtcGxhdGUiLCJkb2N1bWVudCIsIm1vZGVsIiwiZGF0YSIsImxlbmd0aCIsImkiLCJpZCIsImdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCIsInJhZGlvSW5wdXRFbCIsImNvbnRlbnQiLCJjaGlsZHJlbiIsImNsb25lTm9kZSIsInNldEF0dHJpYnV0ZSIsImtleSIsInZhbHVlIiwiY2hlY2tlZCIsImRlZmF1bHQiLCJhZGRFdmVudExpc3RlbmVyIiwib25DaGFuZ2UiLCJwdXNoIiwicmFkaW9MYWJlbEVsIiwiaW5uZXJIVE1MIiwicmVtb3ZlQ2hpbGQiLCJNYXRoIiwicmFuZG9tIiwicGVyZm9ybWFuY2UiLCJub3ciLCJlIiwic3RvcmUiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjaGFuZ2VQYXJhbWV0ZXIiLCJwcm9jZXNzb3JJRCIsInRhcmdldCIsInNldFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHlCOztBQU54Qjs7Ozs7O0FBRUE7Ozs7QUFJZSxTQUFTQSx5QkFBVCxDQUFtQ0MsS0FBbkMsRUFBMENDLEVBQTFDLEVBQThDO0FBQ3pELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxjQUFjLEVBRGxCO0FBQUEsUUFFSUMsU0FGSjtBQUFBLFFBSUlDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2QsWUFBSUMsV0FBV0wsR0FBR00sRUFBSCxDQUFNQyxVQUFyQjs7QUFFQTtBQUNBLFlBQUlDLFFBQVFSLEdBQUdNLEVBQUgsQ0FBTUcsYUFBTixDQUFvQixzQkFBcEIsQ0FBWjtBQUNBSixpQkFBU0ssV0FBVCxDQUFxQkYsS0FBckI7O0FBRUE7QUFDQSxZQUFJRyxnQkFBZ0JDLFNBQVNILGFBQVQsQ0FBdUIsaUNBQXZCLENBQXBCO0FBQUEsWUFDSUksUUFBUWIsR0FBR2MsSUFBSCxDQUFRRCxLQURwQjtBQUVBVixvQkFBWVUsTUFBTUUsTUFBbEI7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSWIsU0FBcEIsRUFBK0JhLEdBQS9CLEVBQW9DO0FBQ2hDLGdCQUFJQyxLQUFLQyw2QkFBVDs7QUFFQTtBQUNBLGdCQUFJQyxlQUFlUixjQUFjUyxPQUFkLENBQXNCQyxRQUF0QixDQUErQixDQUEvQixFQUFrQ0MsU0FBbEMsQ0FBNEMsSUFBNUMsQ0FBbkI7QUFDQWpCLHFCQUFTSyxXQUFULENBQXFCUyxZQUFyQjtBQUNBQSx5QkFBYUksWUFBYixDQUEwQixNQUExQixFQUFrQ3hCLE1BQU15QixHQUF4QztBQUNBTCx5QkFBYUksWUFBYixDQUEwQixJQUExQixFQUFnQ04sRUFBaEM7QUFDQUUseUJBQWFNLEtBQWIsR0FBcUJaLE1BQU1HLENBQU4sRUFBU1MsS0FBOUI7QUFDQU4seUJBQWFPLE9BQWIsR0FBdUJiLE1BQU1HLENBQU4sRUFBU1MsS0FBVCxJQUFrQnpCLEdBQUdjLElBQUgsQ0FBUWEsT0FBakQ7QUFDQVIseUJBQWFTLGdCQUFiLENBQThCLFFBQTlCLEVBQXdDQyxRQUF4QztBQUNBM0Isd0JBQVk0QixJQUFaLENBQWlCWCxZQUFqQjs7QUFFQTtBQUNBLGdCQUFJWSxlQUFlcEIsY0FBY1MsT0FBZCxDQUFzQkMsUUFBdEIsQ0FBK0IsQ0FBL0IsRUFBa0NDLFNBQWxDLENBQTRDLElBQTVDLENBQW5CO0FBQ0FqQixxQkFBU0ssV0FBVCxDQUFxQnFCLFlBQXJCO0FBQ0FBLHlCQUFhUixZQUFiLENBQTBCLEtBQTFCLEVBQWlDTixFQUFqQztBQUNBYyx5QkFBYUMsU0FBYixHQUF5Qm5CLE1BQU1HLENBQU4sRUFBU1IsS0FBbEM7QUFDSDs7QUFFRDtBQUNBSCxpQkFBUzRCLFdBQVQsQ0FBcUJqQyxHQUFHTSxFQUF4Qjs7QUFFQTtBQUNILEtBdkNMOzs7QUF5Q0k7Ozs7QUFJQVksa0NBQThCLFNBQTlCQSwyQkFBOEIsR0FBVztBQUNyQyxlQUFPLE9BQU9nQixLQUFLQyxNQUFMLEVBQVAsR0FBdUJDLFlBQVlDLEdBQVosRUFBOUI7QUFDSCxLQS9DTDtBQUFBLFFBaURJUixXQUFXLFNBQVhBLFFBQVcsQ0FBU1MsQ0FBVCxFQUFZO0FBQ25CO0FBQ0F0QyxXQUFHdUMsS0FBSCxDQUFTQyxRQUFULENBQWtCeEMsR0FBR3VDLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZDFDLEdBQUcyQyxXQURXLEVBRWQzQyxHQUFHd0IsR0FGVyxFQUdkYyxFQUFFTSxNQUFGLENBQVNuQixLQUhLLENBQWxCO0FBSUgsS0F2REw7OztBQXlESTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBb0IsZUFBVyxTQUFYQSxRQUFXLENBQVNwQixLQUFULEVBQWdCO0FBQ3ZCLGFBQUssSUFBSVQsSUFBSSxDQUFiLEVBQWdCQSxJQUFJYixTQUFwQixFQUErQmEsR0FBL0IsRUFBb0M7QUFDaENkLHdCQUFZYyxDQUFaLEVBQWVVLE9BQWYsR0FBMEJ4QixZQUFZYyxDQUFaLEVBQWVTLEtBQWYsSUFBd0JBLEtBQWxEO0FBQ0g7QUFDSixLQW5FTDs7QUFxRUF6QixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBRzZDLFFBQUgsR0FBY0EsUUFBZDs7QUFFQTVDLFdBQU8sb0JBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDs7QUFFQUk7O0FBRUEsV0FBT0gsSUFBUDtBQUNIIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyBmcm9tICcuL2Jhc2UnO1xuXG4vKipcbiAqIFByb2Nlc3NvciBzZXR0aW5nIHZpZXcgZm9yIGEgaXRlbWl6ZWQgdHlwZSBwYXJhbWV0ZXIsXG4gKiB3aGljaCBoYXMgYSByYWRpbyBidXR0b25zIGZvciBpdGVtIHNlbGVjdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlSXRlbWl6ZWRTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgcmFkaW9JbnB1dHMgPSBbXSxcbiAgICAgICAgbnVtSW5wdXRzLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHBhcmVudEVsID0gbXkuZWwucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYWRkIHRoZSBtYWluIGxhYmVsXG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fbGFiZWwtdGV4dCcpO1xuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhZGQgdGhlIHJhZGlvIGJ1dHRvbnNcbiAgICAgICAgICAgIGxldCByYWRpb1RlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLXNldHRpbmctaXRlbWl6ZWQtaXRlbScpLFxuICAgICAgICAgICAgICAgIG1vZGVsID0gbXkuZGF0YS5tb2RlbDtcbiAgICAgICAgICAgIG51bUlucHV0cyA9IG1vZGVsLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtSW5wdXRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBhZGQgYSBuZXcgY2xvbmVkIHJhZGlvIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBsZXQgcmFkaW9JbnB1dEVsID0gcmFkaW9UZW1wbGF0ZS5jb250ZW50LmNoaWxkcmVuWzBdLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChyYWRpb0lucHV0RWwpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBzcGVjcy5rZXkpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC52YWx1ZSA9IG1vZGVsW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5jaGVja2VkID0gbW9kZWxbaV0udmFsdWUgPT0gbXkuZGF0YS5kZWZhdWx0O1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNoYW5nZSk7XG4gICAgICAgICAgICAgICAgcmFkaW9JbnB1dHMucHVzaChyYWRpb0lucHV0RWwpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCBhIG5ldyBjbG9uZWQgbGFiZWwgZWxlbWVudFxuICAgICAgICAgICAgICAgIGxldCByYWRpb0xhYmVsRWwgPSByYWRpb1RlbXBsYXRlLmNvbnRlbnQuY2hpbGRyZW5bMV0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKHJhZGlvTGFiZWxFbCk7XG4gICAgICAgICAgICAgICAgcmFkaW9MYWJlbEVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaWQpO1xuICAgICAgICAgICAgICAgIHJhZGlvTGFiZWxFbC5pbm5lckhUTUwgPSBtb2RlbFtpXS5sYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgICAgICAgICBwYXJlbnRFbC5yZW1vdmVDaGlsZChteS5lbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIG15LnBhcmFtLmFkZENoYW5nZWRDYWxsYmFjayhjaGFuZ2VkQ2FsbGJhY2spO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcXVpY2sgSUQgdG8gdGllIGxhYmVsIHRvIGlucHV0IGVsZW1lbnRzLlxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFVuaXF1ZSBJRC5cbiAgICAgICAgICovXG4gICAgICAgIGdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdpZCcgKyBNYXRoLnJhbmRvbSgpICsgcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBvbkNoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIC8vIG15LmRhdGEuc2V0VmFsdWUoZS50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgbXkuc3RvcmUuZGlzcGF0Y2gobXkuc3RvcmUuZ2V0QWN0aW9ucygpLmNoYW5nZVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgICBteS5wcm9jZXNzb3JJRCwgXG4gICAgICAgICAgICAgICAgbXkua2V5LCBcbiAgICAgICAgICAgICAgICBlLnRhcmdldC52YWx1ZSkpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLy8gY2hhbmdlZENhbGxiYWNrID0gZnVuY3Rpb24ocGFyYW1ldGVyLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgLy8gICAgIGZvciAoaSA9IDA7IGkgPCBudW1JbnB1dHM7IGkrKykge1xuICAgICAgICAvLyAgICAgICAgIHJhZGlvSW5wdXRzW2ldLmNoZWNrZWQgPSAocmFkaW9JbnB1dHNbaV0udmFsdWUgPT0gbmV3VmFsdWUpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9O1xuXG4gICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtSW5wdXRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0c1tpXS5jaGVja2VkID0gKHJhZGlvSW5wdXRzW2ldLnZhbHVlID09IHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2l0ZW1pemVkLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStringSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\n\nfunction createStringSettingView(specs, my) {\n    var that,\n        textEl,\n        init = function init() {\n        textEl = my.el.getElementsByClassName('setting__text')[0];\n        textEl.value = my.data.value;\n        textEl.addEventListener('input', onChange);\n\n        // my.param.addChangedCallback(changedCallback);\n    },\n        onChange = function onChange(e) {\n        e.preventDefault();\n        // my.param.setValue(e.target.value);\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n\n\n    // changedCallback = function(parameter, oldValue, newValue) {\n    //     // only update if the text input doesn't have focus,\n    //     // else value gets refreshed and cursor jumps to end\n    //     if (textEl != document.activeElement) {\n    //         textEl.value = newValue;\n    //     }\n    // };\n\n    setValue = function setValue(value) {\n        // only update if the text input doesn't have focus,\n        // else value gets refreshed and cursor jumps to end\n        if (textEl != document.activeElement) {\n            textEl.value = value;\n        }\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3N0cmluZy5qcz83MjVmIl0sIm5hbWVzIjpbImNyZWF0ZVN0cmluZ1NldHRpbmdWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJ0ZXh0RWwiLCJpbml0IiwiZWwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidmFsdWUiLCJkYXRhIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcmUiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjaGFuZ2VQYXJhbWV0ZXIiLCJwcm9jZXNzb3JJRCIsImtleSIsInRhcmdldCIsInNldFZhbHVlIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFPd0JBLHVCOztBQVB4Qjs7Ozs7O0FBRUE7Ozs7O0FBS2UsU0FBU0EsdUJBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDQyxFQUF4QyxFQUE0QztBQUN2RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsTUFESjtBQUFBLFFBR0lDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RELGlCQUFTRixHQUFHSSxFQUFILENBQU1DLHNCQUFOLENBQTZCLGVBQTdCLEVBQThDLENBQTlDLENBQVQ7QUFDQUgsZUFBT0ksS0FBUCxHQUFlTixHQUFHTyxJQUFILENBQVFELEtBQXZCO0FBQ0FKLGVBQU9NLGdCQUFQLENBQXdCLE9BQXhCLEVBQWlDQyxRQUFqQzs7QUFFQTtBQUNILEtBVEw7QUFBQSxRQVdJQSxXQUFXLFNBQVhBLFFBQVcsQ0FBU0MsQ0FBVCxFQUFZO0FBQ25CQSxVQUFFQyxjQUFGO0FBQ0E7QUFDQVgsV0FBR1ksS0FBSCxDQUFTQyxRQUFULENBQWtCYixHQUFHWSxLQUFILENBQVNFLFVBQVQsR0FBc0JDLGVBQXRCLENBQ2RmLEdBQUdnQixXQURXLEVBRWRoQixHQUFHaUIsR0FGVyxFQUdkUCxFQUFFUSxNQUFGLENBQVNaLEtBSEssQ0FBbEI7QUFJSCxLQWxCTDs7O0FBb0JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBYSxlQUFXLFNBQVhBLFFBQVcsQ0FBU2IsS0FBVCxFQUFnQjtBQUN2QjtBQUNBO0FBQ0EsWUFBSUosVUFBVWtCLFNBQVNDLGFBQXZCLEVBQXNDO0FBQ2xDbkIsbUJBQU9JLEtBQVAsR0FBZUEsS0FBZjtBQUNIO0FBQ0osS0FsQ0w7O0FBb0NBTixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR21CLFFBQUgsR0FBY0EsUUFBZDs7QUFFQWxCLFdBQU8sb0JBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDs7QUFFQUc7O0FBRUEsV0FBT0YsSUFBUDtBQUNIIiwiZmlsZSI6IjQxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyBmcm9tICcuL2Jhc2UnO1xuXG4vKipcbiAqIFByb2Nlc3NvciBzZXR0aW5nIHZpZXcgZm9yIGEgQm9vbGVhbiB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIGNoZWNrYm94IGlucHV0LlxuICovXG4gXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHJpbmdTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgdGV4dEVsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGV4dEVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fdGV4dCcpWzBdO1xuICAgICAgICAgICAgdGV4dEVsLnZhbHVlID0gbXkuZGF0YS52YWx1ZTtcbiAgICAgICAgICAgIHRleHRFbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbXkucGFyYW0uYWRkQ2hhbmdlZENhbGxiYWNrKGNoYW5nZWRDYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBvbkNoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIG15LnBhcmFtLnNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIG15LnN0b3JlLmRpc3BhdGNoKG15LnN0b3JlLmdldEFjdGlvbnMoKS5jaGFuZ2VQYXJhbWV0ZXIoXG4gICAgICAgICAgICAgICAgbXkucHJvY2Vzc29ySUQsIFxuICAgICAgICAgICAgICAgIG15LmtleSwgXG4gICAgICAgICAgICAgICAgZS50YXJnZXQudmFsdWUpKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8vIGNoYW5nZWRDYWxsYmFjayA9IGZ1bmN0aW9uKHBhcmFtZXRlciwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIC8vICAgICAvLyBvbmx5IHVwZGF0ZSBpZiB0aGUgdGV4dCBpbnB1dCBkb2Vzbid0IGhhdmUgZm9jdXMsXG4gICAgICAgIC8vICAgICAvLyBlbHNlIHZhbHVlIGdldHMgcmVmcmVzaGVkIGFuZCBjdXJzb3IganVtcHMgdG8gZW5kXG4gICAgICAgIC8vICAgICBpZiAodGV4dEVsICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgLy8gICAgICAgICB0ZXh0RWwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfTtcbiAgICAgICAgXG4gICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgdXBkYXRlIGlmIHRoZSB0ZXh0IGlucHV0IGRvZXNuJ3QgaGF2ZSBmb2N1cyxcbiAgICAgICAgICAgIC8vIGVsc2UgdmFsdWUgZ2V0cyByZWZyZXNoZWQgYW5kIGN1cnNvciBqdW1wcyB0byBlbmRcbiAgICAgICAgICAgIGlmICh0ZXh0RWwgIT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRleHRFbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuc2V0VmFsdWUgPSBzZXRWYWx1ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVNldHRpbmdWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvc2V0dGluZy9zdHJpbmcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/settings.html\": 43,\n\t\"./example/settings.html\": 44\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 42;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciBeXFwuXFwvLipcXC9zZXR0aW5nc1xcLmh0bWwkPzZmNjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vZXBnL3NldHRpbmdzLmh0bWxcIjogNDMsXG5cdFwiLi9leGFtcGxlL3NldHRpbmdzLmh0bWxcIjogNDRcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA0MjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy93aC9wcm9jZXNzb3JzIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIF5cXC5cXC8uKlxcL3NldHRpbmdzXFwuaHRtbCRcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"settings settings--epg\\\">\\n    <form>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Euclidean Rhythm</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row steps\\\"></div>\\n            <div class=\\\"settings__row pulses\\\"></div>\\n            <div class=\\\"settings__row rotation\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Playback</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row rate\\\"></div>\\n            <div class=\\\"settings__row note_length\\\"></div>\\n            <div class=\\\"settings__row is_triplets\\\"></div>\\n            <div class=\\\"settings__row is_mute\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">MIDI Out</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row channel_out\\\"></div>\\n            <div class=\\\"settings__row pitch_out\\\"></div>\\n            <div class=\\\"settings__row velocity_out\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Other</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row name\\\"></div>\\n            <span class=\\\"setting__label-text\\\"></span>\\n            <button type=\\\"button\\\" class=\\\"settings__delete btn\\\">Delete</button>\\n        </fieldset>\\n    </form>\\n</div>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvc2V0dGluZ3MuaHRtbD85ZjY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNldHRpbmdzIHNldHRpbmdzLS1lcGdcXFwiPlxcbiAgICA8Zm9ybT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+RXVjbGlkZWFuIFJoeXRobTwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJzZXR0aW5nc19fZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgc3RlcHNcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgcHVsc2VzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHJvdGF0aW9uXFxcIj48L2Rpdj5cXG4gICAgICAgIDwvZmllbGRzZXQ+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbF9faGVhZGVyIHBhbmVsX19oZWFkZXItLXN1YlxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlYWRlcl9fbGFiZWxcXFwiPlBsYXliYWNrPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcInNldHRpbmdzX19maWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyByYXRlXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IG5vdGVfbGVuZ3RoXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGlzX3RyaXBsZXRzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGlzX211dGVcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+TUlESSBPdXQ8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGNoYW5uZWxfb3V0XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHBpdGNoX291dFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyB2ZWxvY2l0eV9vdXRcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+T3RoZXI8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IG5hbWVcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZXR0aW5nX19sYWJlbC10ZXh0XFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJzZXR0aW5nc19fZGVsZXRlIGJ0blxcXCI+RGVsZXRlPC9idXR0b24+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICA8L2Zvcm0+XFxuPC9kaXY+XCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvc2V0dGluZ3MuaHRtbFxuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

eval("module.exports = \"\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9leGFtcGxlL3NldHRpbmdzLmh0bWw/YjY4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL2V4YW1wbGUvc2V0dGluZ3MuaHRtbFxuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasView;\n\nvar _util = __webpack_require__(7);\n\nvar _windowresize = __webpack_require__(8);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nvar _canvasprocessors = __webpack_require__(46);\n\nvar _canvasprocessors2 = _interopRequireDefault(_canvasprocessors);\n\nvar _canvasconnections = __webpack_require__(52);\n\nvar _canvasconnections2 = _interopRequireDefault(_canvasconnections);\n\nvar _tween = __webpack_require__(10);\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Graphic 2D view of the processor network.\n *\n * CanvasView draws the graphics for all processors.\n * DynamicCanvas shows all elements that update each requestAnimationFrame.\n * StaticCanvas shows all elements that update only infrequently.\n * \n * Each processor has its own view.\n * When a change happens to a processor that \n * requires the static canvas to be redrawn:\n * - The processor's view receives a callback from a changed parameter.\n * - The view redraws its static graphics on an off-screen canvas.\n * - The view sets a dirty flag on the canvasView (this).\n * - The canvasView receives the next draw request.\n * - It clears the staticCanvas.\n * - It draws each view's off-screen canvas on the staticCanvas.\n * - It clears the dirty flag.\n */\nfunction createCanvasView(specs, my) {\n    var that,\n        store = specs.store,\n\n    // midiNetwork = specs.midiNetwork,\n    rootEl,\n        staticCanvas,\n        dynamicCanvas,\n        staticCtx,\n        dynamicCtx,\n        isDirty = false,\n        doubleClickCounter = 0,\n        doubleClickDelay = 300,\n        doubleClickTimer,\n        dragObjectType,\n        // 'background|processor|connection'\n\n    init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        staticCanvas = document.querySelector('.canvas-static');\n        dynamicCanvas = document.querySelector('.canvas-dynamic');\n        staticCtx = staticCanvas.getContext('2d');\n        dynamicCtx = dynamicCanvas.getContext('2d');\n\n        rootEl.addEventListener(_util.util.eventType.click, onClick);\n        rootEl.addEventListener(_util.util.eventType.start, onTouchStart);\n        rootEl.addEventListener(_util.util.eventType.move, dragMove);\n        rootEl.addEventListener(_util.util.eventType.end, dragEnd);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_PREFERENCES:\n                case e.detail.actions.SET_THEME:\n                    var themeName = e.detail.state.preferences.isDarkTheme ? 'dark' : '';\n                    setTheme(themeName);\n                    break;\n\n                case e.detail.actions.NEW_PROJECT:\n                case e.detail.actions.SET_PROJECT:\n                    my.setProcessorViews(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    my.createProcessorViews(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    my.deleteProcessorView(e.detail.action.id);\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                    my.selectProcessorView(e.detail.state.selectedID);\n                    break;\n\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                    my.markDirty();\n                    break;\n            }\n        });\n\n        my.addWindowResizeCallback(onWindowResize);\n        onWindowResize();\n    },\n\n\n    /**\n     * Window resize event handler.\n     */\n    onWindowResize = function onWindowResize() {\n        staticCanvas.width = rootEl.clientWidth;\n        staticCanvas.height = rootEl.clientHeight;\n        dynamicCanvas.width = rootEl.clientWidth;\n        dynamicCanvas.height = rootEl.clientHeight;\n        my.canvasRect = dynamicCanvas.getBoundingClientRect();\n        markDirty();\n    },\n\n\n    /**\n     * Separate click and doubleclick.\n     * @see http://stackoverflow.com/questions/6330431/jquery-bind-double-click-and-single-click-separately\n     */\n    onClick = function onClick(e) {\n        // separate click from doubleclick\n        doubleClickCounter++;\n        if (doubleClickCounter == 1) {\n            doubleClickTimer = setTimeout(function () {\n                doubleClickCounter = 0;\n                // implement single click behaviour here\n            }, doubleClickDelay);\n        } else {\n            clearTimeout(doubleClickTimer);\n            doubleClickCounter = 0;\n            // implement double click behaviour here\n            onDoubleClick(e);\n        }\n    },\n\n\n    /**\n     * Handler for the custom doubleclick event detection.\n     * Create a new pattern at the location of the doubleclick.\n     */\n    onDoubleClick = function onDoubleClick(e) {\n        // create a new processor\n        store.dispatch(store.getActions().createProcessor({\n            type: 'epg',\n            positionX: e.clientX - my.canvasRect.left + window.scrollX,\n            positionY: e.clientY - my.canvasRect.top + window.scrollY\n        }));\n    },\n\n\n    /**\n     * Select the object under the mouse.\n     * Start dragging the object.\n     */\n    onTouchStart = function onTouchStart(e) {\n        var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n            canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n        if (my.isConnectMode && my.intersectsCableHandle(canvasX, canvasY)) {\n            dragObjectType = 'cablehandle';\n        } else if (my.isConnectMode && my.intersectsConnector(canvasX, canvasY, false)) {\n            dragObjectType = 'connection';\n        } else if (my.intersectsProcessor(canvasX, canvasY)) {\n            dragObjectType = 'processor';\n        } else {\n            dragObjectType = 'background';\n        }\n    },\n\n\n    /**\n     * Drag a view.\n     * @param  {Object} e Event.\n     */\n    dragMove = function dragMove(e) {\n        e.preventDefault();\n        if (dragObjectType) {\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n            switch (dragObjectType) {\n                case 'connection':\n                    my.dragMoveConnection(canvasX, canvasY);\n                    break;\n                case 'processor':\n                    my.dragSelectedProcessor(canvasX, canvasY);\n                    // my.updateConnectorsInfo();\n                    // my.drawCablesCanvas();\n                    break;\n                case 'background':\n                    my.dragAllProcessors(canvasX, canvasY);\n                    // my.updateConnectorsInfo();\n                    // my.drawCablesCanvas();\n                    break;\n            }\n\n            // my.markDirty();\n        }\n    },\n\n\n    /**\n     * Dragging 3D object ended.\n     * @param  {Object} e Event.\n     */\n    dragEnd = function dragEnd(e) {\n        e.preventDefault();\n\n        if (dragObjectType) {\n            dragMove(e);\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n            switch (dragObjectType) {\n                case 'connection':\n                    my.intersectsConnector(canvasX, canvasY, true);\n                    my.dragEndConnection();\n                    break;\n                case 'processor':\n                    break;\n                case 'background':\n                    break;\n                case 'cablehandle':\n                    var connectionID = my.intersectsCableHandle(canvasX, canvasY);\n                    if (connectionID) {\n                        store.dispatch(store.getActions().disconnectProcessors(connectionID));\n                    }\n                    break;\n            }\n            dragObjectType = null;\n            // my.markDirty();\n        }\n    },\n\n\n    /**\n     * Set the theme colours of the processor canvas views.\n     * @param {String} theme Theme name, 'dark' or ''.\n     */\n    setTheme = function setTheme(theme) {\n        // possibly have to set theme data attribute first\n        var themeStyles = window.getComputedStyle(document.querySelector('[data-theme]'));\n\n        my.theme = {\n            colorHigh: themeStyles.getPropertyValue('--text-color'),\n            colorMid: themeStyles.getPropertyValue('--border-color'),\n            colorLow: themeStyles.getPropertyValue('--panel-bg-color')\n        };\n        my.setThemeOnViews();\n        my.setThemeOnConnections();\n        my.markDirty();\n    },\n\n\n    /**\n     * Set a flag to indicate the static canvas should be redrawn.\n     */\n    markDirty = function markDirty() {\n        isDirty = true;\n    },\n\n\n    /**\n     * Update any tween animations that are going on and\n     * redraw the canvases if needed.\n     * @param {Number} position Transport playback position in ticks.\n     * @param {Array} processorEvents Array to processor generated events to displayin the view.\n     */\n    draw = function draw(position, processorEvents) {\n        _tween2.default.update();\n        var i = void 0,\n            views = my.getProcessorViews(),\n            n = views.length;\n        for (i = 0; i < n; i++) {\n            views[i].draw(position, processorEvents);\n        }\n        if (isDirty) {\n            isDirty = false;\n            staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            dynamicCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            my.addConnectionsToCanvas(staticCtx);\n            for (i = 0; i < n; i++) {\n                views[i].addToStaticView(staticCtx);\n            }\n        }\n\n        for (i = 0; i < n; i++) {\n            views[i].clearFromDynamicView(dynamicCtx);\n        }\n        for (i = 0; i < n; i++) {\n            views[i].addToDynamicView(dynamicCtx);\n        }\n    };\n\n    my = my || {};\n    my.theme;\n    my.canvasRect, my.markDirty = markDirty;\n\n    that = (0, _windowresize2.default)(specs, my);\n    that = (0, _canvasprocessors2.default)(specs, my);\n    that = (0, _canvasconnections2.default)(specs, my);\n\n    init();\n\n    that.setTheme = setTheme;\n    that.draw = draw;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorViews;\n\nvar _selectors = __webpack_require__(0);\n\n/**\n * Manages the canvas views of the processors in the network.\n * - Processor view lifecycle.\n * - Processor view user interaction, itersection with (mouse) point.\n * - Processor view dragging.\n * - Processor view theme changes.\n */\nfunction createCanvasProcessorViews(specs, my) {\n    var that,\n        store = specs.store,\n        midiNetwork = specs.midiNetwork,\n        views = [],\n\n    // numViews = 0,\n    // selectedView,\n    connectionSourceProcessor,\n        dragOffsetX,\n        dragOffsetY,\n        setProcessorViews = function setProcessorViews(newProcessors) {\n        clearProcessorViews();\n        createProcessorViews(newProcessors);\n    },\n        clearProcessorViews = function clearProcessorViews() {\n        var type = void 0,\n            n = views.length;\n        while (--n >= 0) {\n            type = views[n].getType();\n            if (type !== 'input' && type !== 'output') {\n                deleteProcessorView(views[n].getID());\n            }\n        }\n    },\n\n\n    /**\n     * Create canvas 2D object if it exists for the type.\n     * @param  {Array} data Array of current processors' state.\n     */\n    createProcessorViews = function createProcessorViews(processors) {\n        processors.allIds.forEach(function (id, i) {\n            var processorData = processors.byId[id];\n            if (!views[i] || id !== views[i].getID()) {\n                var module = __webpack_require__(47)(\"./\" + processorData.type + '/graphic');\n                var view = module.createGraphic({\n                    data: processorData,\n                    store: store,\n                    canvasDirtyCallback: my.markDirty\n                });\n                views.splice(i, 0, view);\n            }\n        });\n\n        // let view,\n        //     specs = {\n        //         processor: processor,\n        //         canvasDirtyCallback: my.markDirty\n        //     };\n\n        // switch (processor.getType()) {\n        //     case 'epg':\n        //         view = WH.midiProcessors[processor.getType()].createCanvasView(specs);\n        //         break;\n        //     case 'output':\n        //         specs.initialPosition = {x: my.canvasRect.width / 2, y: my.canvasRect.height - 70};\n        //         view = WH.midiProcessors[processor.getType()].createCanvasView(specs);\n        //         break;\n        // }\n\n        // views.push(view);\n        // numViews = views.length;\n\n        // set theme on the new view\n        // if (my.theme && typeof view.setTheme == 'function') {\n        //     view.setTheme(my.theme);\n        // }\n\n        // my.updateConnectorsInfo();\n    },\n        selectProcessorView = function selectProcessorView(id) {\n        views.forEach(function (view) {\n            if (typeof view.setSelected === 'function') {\n                view.setSelected(view.getID() === id);\n            }\n        });\n    },\n\n\n    /**\n     * Delete canvas 2D object when the processor is deleted.\n     * @param  {Object} processor MIDI processor for which the 3D object will be a view.\n     */\n    deleteProcessorView = function deleteProcessorView(id) {\n        var i = views.length;\n        while (--i >= 0) {\n            if (views[i].getID() === id) {\n                views[i].terminate();\n                views.splice(i, 1);\n                // my.updateConnectorsInfo();\n                my.markDirty();\n                return;\n            }\n        }\n    },\n\n\n    /**\n     * Check and handle intersection of point with view.\n     * @param  {Number} x Canvas X coordinate.\n     * @param  {Number} y Canvas Y coordinate.\n     * @return {Boolean} True if intersects.\n     */\n    intersectsProcessor = function intersectsProcessor(x, y) {\n        var isIntersect = false;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        for (var i = views.length - 1; i >= 0; i--) {\n            if (views[i].intersectsWithPoint(x, y, 'processor')) {\n                isIntersect = true;\n                // selectedView = views[i];\n                // select the found view's processor\n                // midiNetwork.selectProcessor(selectedView.getProcessor());\n                store.dispatch(store.getActions().selectProcessor(views[i].getID()));\n                // start dragging the view's graphic\n                var pos2d = views[i].getPosition2d();\n                dragOffsetX = x - pos2d.x;\n                dragOffsetY = y - pos2d.y;\n                break;\n            }\n        }\n        return isIntersect;\n    },\n        dragSelectedProcessor = function dragSelectedProcessor(x, y) {\n        store.dispatch(store.getActions().dragSelectedProcessor(x - dragOffsetX, y - dragOffsetY));\n\n        // let newX = x - dragOffsetX,\n        //     newY = y - dragOffsetY;\n        // dragOffsetX = x;\n        // dragOffsetY = y;\n        // selectedView.setPosition2d({\n        //     x: x - dragOffsetX,\n        //     y: y - dragOffsetY\n        // });\n    },\n        dragAllProcessors = function dragAllProcessors(x, y) {\n        var newX = x - dragOffsetX,\n            newY = y - dragOffsetY;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        store.dispatch(store.getActions().dragAllProcessors(newX, newY));\n        // for (let i = 0, n = views.length, view, position2d; i < n; i++) {\n        //     view = views[i];\n        //     position2d = view.getPosition2d();\n        //     view.setPosition2d({\n        //         x: position2d.x + newX,\n        //         y: position2d.y + newY\n        //     });\n        //     store.\n        // }\n    },\n\n\n    // setProcessorPosition = function(state, id) {\n    // for (let i = 0, n = views.length; i < n; i++) {\n    //     if (id === views[i].getID()) {\n    //         const pos = getProcessorByID(id).params.position2d.value;\n    //         views[i].updatePosition({\n    //             x: pos.x,\n    //             y: pos.y\n    //         });\n    //         break;\n    //     }\n    // }\n    // },\n\n    // setAllProcessorPositions = function(state) {\n    // state.forEach((data) => {\n    //     for (let i = 0, n = views.length; i < n; i++) {\n    //         if (data.id === views[i].getID()) {\n    //             views[i].updatePosition({\n    //                 x: data.params.position2d.value.x,\n    //                 y: data.params.position2d.value.y\n    //             });\n    //         }\n    //     }\n    // });\n    // }, \n\n    getProcessorViews = function getProcessorViews() {\n        return views;\n    },\n\n\n    /**\n     * Update all processor views with changed theme.\n     */\n    setThemeOnViews = function setThemeOnViews() {\n        for (var i = 0, n = views.length; i < n; i++) {\n            if (views[i].setTheme instanceof Function) {\n                views[i].setTheme(my.theme);\n            }\n        }\n    };\n\n    my = my || {};\n    my.setProcessorViews = setProcessorViews;\n    my.createProcessorViews = createProcessorViews;\n    my.selectProcessorView = selectProcessorView;\n    my.deleteProcessorView = deleteProcessorView;\n    my.intersectsProcessor = intersectsProcessor;\n    my.dragSelectedProcessor = dragSelectedProcessor;\n    my.dragAllProcessors = dragAllProcessors;\n    // my.setProcessorPosition = setProcessorPosition\n    // my.setAllProcessorPositions = setAllProcessorPositions;\n    my.getProcessorViews = getProcessorViews;\n    my.setThemeOnViews = setThemeOnViews;\n\n    that = specs.that || {};\n\n    // that.createProcessorView = createProcessorView;\n    // that.deleteProcessorView = deleteProcessorView;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/graphic\": 48,\n\t\"./example/graphic\": 50,\n\t\"./output/graphic\": 51\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 47;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9ncmFwaGljJD9kOTQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vZXBnL2dyYXBoaWNcIjogNDgsXG5cdFwiLi9leGFtcGxlL2dyYXBoaWNcIjogNTAsXG5cdFwiLi9vdXRwdXQvZ3JhcGhpY1wiOiA1MVxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDQ3O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMgXlxcLlxcLy4qXFwvZ3JhcGhpYyRcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(9);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _selectors = __webpack_require__(0);\n\nvar _euclid = __webpack_require__(6);\n\nvar _tween = __webpack_require__(10);\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nvar _config = __webpack_require__(5);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Euclidean pattern animated necklace wheel drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        necklaceCanvas = void 0,\n        necklaceCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        pointerCanvas = void 0,\n        pointerCtx = void 0,\n        pointerRotation = void 0,\n        pointerRotationPrevious = 0,\n        pointerMutedRadius = 30,\n        pointerCanvasCenter = void 0,\n        radius = 110,\n        necklaceMinRadius = 50,\n        necklaceRadius = void 0,\n        centerDotFullRadius = 10,\n        centerDotRadius = void 0,\n        centerDotSize = void 0,\n        centerDotX = void 0,\n        centerDotY = void 0,\n        centerDotStartTween = void 0,\n        centerDotEndTween = void 0,\n        centerRadius = 20,\n        outConnectorY = 35,\n        selectRadius = 15,\n        dotRadius = void 0,\n        dotMaxRadius = 10,\n        dotActiveRadius = void 0,\n        zeroMarkerRadius = 3,\n        lineWidth = 2,\n        isSelected = false,\n        doublePI = Math.PI * 2,\n        dotAnimations = {},\n        isNoteActive = false,\n        necklace = [],\n        duration = 0,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.CHANGE_PARAMETER:\n                    if (e.detail.action.processorID === my.data.id) {\n                        my.data.params = (0, _selectors.getProcessorByID)(my.data.id).params;\n                        switch (e.detail.action.paramKey) {\n                            case 'steps':\n                            case 'pulses':\n                                updateDuration();\n                            case 'rotation':\n                                updateNecklace();\n                                break;\n                            case 'is_mute':\n                                updatePointer();\n                                break;\n                            case 'name':\n                                updateName();\n                                break;\n                            case 'is_triplets':\n                            case 'rate':\n                            case 'note_length':\n                                updateDuration();\n                                break;\n                        }\n                    }\n                    break;\n            }\n        });\n\n        // offscreen canvas for static shapes\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = radius * 2;\n        staticCanvas.width = radius * 2;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n        staticCtx.strokeStyle = my.colorHigh;\n\n        // offscreen canvas for dots ring and polygon\n        necklaceCanvas = document.createElement('canvas');\n        necklaceCanvas.height = radius * 2;\n        necklaceCanvas.width = radius * 2;\n        necklaceCtx = necklaceCanvas.getContext('2d');\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.lineWidth = lineWidth;\n        necklaceCtx.strokeStyle = my.colorHigh;\n\n        // offscreen canvas for the pointer\n        pointerCanvas = document.createElement('canvas');\n        pointerCanvas.height = radius;\n        pointerCanvas.width = centerRadius * 2;\n        pointerCtx = pointerCanvas.getContext('2d');\n        pointerCtx.lineWidth = lineWidth;\n        pointerCtx.strokeStyle = my.colorHigh;\n        pointerCanvasCenter = pointerCanvas.width / 2;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = radius * 2;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n\n        // width and height to clear center dot \n        centerDotSize = (centerDotFullRadius + 1) * 2;\n\n        // add callback to update before render.\n        // my.processor.addRenderCallback(showPlaybackPosition);\n        // my.processor.addProcessCallback(showNote);\n        // my.processor.addSelectCallback(updateSelectCircle);\n\n        // add listeners to parameters\n        // let params = my.processor.getParameters();\n        // params.steps.addChangedCallback(updateNecklace);\n        // params.pulses.addChangedCallback(updateNecklace);\n        // params.rotation.addChangedCallback(updateNecklace);\n        // params.is_mute.addChangedCallback(updatePointer);\n        // params.position2d.addChangedCallback(updatePosition);\n        // params.name.addChangedCallback(updateName);\n\n        // set drawing values\n        my.positionX = my.data.positionX;\n        my.positionY = my.data.positionY;\n        updatePosition(my.positionX, my.positionY);\n        updateName();\n        updateNecklace();\n        redrawStaticCanvas();\n        updateDuration();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        // let params = my.processor.getParameters();\n        // params.steps.removeChangedCallback(updateNecklace);\n        // params.pulses.removeChangedCallback(updateNecklace);\n        // params.rotation.removeChangedCallback(updateNecklace);\n        // params.is_mute.removeChangedCallback(updatePointer);\n        // params.position2d.removeChangedCallback(updatePosition);\n        // params.name.removeChangedCallback(updateName);\n        canvasDirtyCallback = null;\n    },\n        setSelected = function setSelected(isSelected) {\n        updateSelectCircle(isSelected);\n    },\n        draw = function draw(position, processorEvents) {\n        showPlaybackPosition(position);\n        var event = void 0;\n        if (processorEvents[my.data.id] && processorEvents[my.data.id].length) {\n            for (var i = 0, n = processorEvents[my.data.id].length; i < n; i++) {\n                event = processorEvents[my.data.id][i];\n                showNote(event.stepIndex, event.delayFromNowToNoteStart, event.delayFromNowToNoteEnd);\n            }\n        }\n    },\n\n\n    /**\n     * Show the playback position within the pattern.\n     * Indicated by the pointer's rotation.\n     * @param  {Number} position Position within pattern in ticks.\n     */\n    showPlaybackPosition = function showPlaybackPosition(position) {\n        pointerRotationPrevious = pointerRotation;\n        pointerRotation = doublePI * (position % duration / duration);\n    },\n\n\n    /**\n     * Show animation of the pattern dot that is about to play. \n     * @param {Number} stepIndex Index of the step to play.\n     * @param {Number} noteStartDelay Delay from now until note start in ms.\n     * @param {Number} noteStopDelay Delay from now until note end in ms.\n     */\n    showNote = function showNote(stepIndex, noteStartDelay, noteStopDelay) {\n        // get the coordinates of the dot for this step\n        var steps = my.data.params.steps.value;\n\n        // retain necklace dot state in object\n        dotAnimations[stepIndex] = {\n            positionX: necklace[stepIndex].center.x,\n            positionY: necklace[stepIndex].center.y,\n            boundingBox: necklace[stepIndex].rect,\n            dotRadius: 0\n        };\n\n        var tweeningDot = dotAnimations[stepIndex];\n\n        // animate the necklace dot\n        new _tween2.default.Tween({ currentRadius: dotActiveRadius }).to({ currentRadius: dotRadius }, 300).onUpdate(function () {\n            // store new dot size\n            tweeningDot.dotRadius = this.currentRadius;\n        }).onComplete(function () {\n            // delete dot state object\n            delete dotAnimations[stepIndex];\n        }).delay(noteStartDelay).start();\n    },\n        updateDuration = function updateDuration() {\n        var rate = my.data.params.is_triplets.value ? my.data.params.rate.value * (2 / 3) : my.data.params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        duration = my.data.params.steps.value * stepDuration;\n    },\n\n\n    /**\n     * Update the pattern dots.\n     * If the steps, pulses or rotation properties have changed.\n     * If steps change it might invalidate the pointer.\n     */\n    updateNecklace = function updateNecklace() {\n        var steps = my.data.params.steps.value,\n            pulses = my.data.params.pulses.value,\n            rotation = my.data.params.rotation.value,\n            euclid = void 0,\n            rad = void 0,\n            x = void 0,\n            y = void 0;\n\n        euclid = (0, _euclid.getEuclidPattern)(steps, pulses);\n        euclid = (0, _euclid.rotateEuclidPattern)(euclid, rotation);\n\n        necklace = [];\n\n        // calculate the dot positions\n        necklaceRadius = necklaceMinRadius + Math.max(0, steps - 16) * 0.8;\n        for (var i = 0; i < steps; i++) {\n            rad = doublePI * (i / steps);\n            x = Math.sin(rad) * necklaceRadius;\n            y = Math.cos(rad) * necklaceRadius;\n            necklace.push({\n                center: {\n                    x: x,\n                    y: y\n                },\n                rect: {\n                    x: x - dotMaxRadius * 2,\n                    y: y + dotMaxRadius * 2,\n                    xAbs: 0,\n                    yAbs: 0,\n                    height: dotMaxRadius * 4,\n                    width: dotMaxRadius * 4\n                }\n            });\n        }\n\n        necklaceCtx.clearRect(0, 0, necklaceCanvas.width, necklaceCanvas.height);\n\n        updateNecklaceAbsolute();\n        updatePolygon(steps, pulses, euclid, necklace);\n        updateDots(steps, euclid, necklace);\n        updatePointer();\n        updateZeroMarker(steps, rotation);\n        updateRotatedMarker(steps, rotation);\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update the coordinates of the necklace nodes relative to the main canvas.\n     */\n    updateNecklaceAbsolute = function updateNecklaceAbsolute() {\n        var rect = void 0;\n        for (var i = 0, n = necklace.length; i < n; i++) {\n            rect = necklace[i].rect;\n            rect.xAbs = my.positionX + rect.x;\n            rect.yAbs = my.positionY - rect.y;\n        }\n    },\n\n\n    /**\n     * Show circle if the my.processor is selected, else hide.\n     * @param {Boolean} isSelectedView True if selected.\n     */\n    updateSelectCircle = function updateSelectCircle(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        centerDotX = my.positionX - centerDotFullRadius - 1;\n        centerDotY = my.positionY - centerDotFullRadius - 1;\n        updateNecklaceAbsolute();\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Draw polygon.\n     */\n    updatePolygon = function updatePolygon(steps, pulses, euclid, necklace) {\n        if (pulses > 1) {\n            necklaceCtx.fillStyle = my.colorLow;\n            necklaceCtx.strokeStyle = my.colorLow;\n            necklaceCtx.beginPath();\n            var isFirstPoint = true,\n                firstPoint = void 0,\n                dotCenter = void 0;\n            for (var i = 0; i < steps; i++) {\n                if (euclid[i]) {\n                    dotCenter = necklace[i].center;\n                    if (isFirstPoint) {\n                        isFirstPoint = false;\n                        firstPoint = dotCenter;\n                        necklaceCtx.moveTo(radius + firstPoint.x, radius - firstPoint.y);\n                    } else {\n                        necklaceCtx.lineTo(radius + dotCenter.x, radius - dotCenter.y);\n                    }\n                }\n            }\n            necklaceCtx.lineTo(radius + firstPoint.x, radius - firstPoint.y);\n            necklaceCtx.stroke();\n            necklaceCtx.globalAlpha = 0.6;\n            necklaceCtx.fill();\n            necklaceCtx.globalAlpha = 1.0;\n        }\n    },\n\n\n    /**\n     * Draw the necklace dots in their inactive state.\n     */\n    updateDots = function updateDots(steps, euclid, necklace) {\n        dotRadius = dotMaxRadius - 3 - Math.max(0, steps - 16) * 0.09;\n        dotActiveRadius = dotRadius * 2;\n\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        var point = void 0;\n        for (var i = 0; i < steps; i++) {\n            point = necklace[i].center;\n            if (euclid[i]) {\n                // active dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.fill();\n                necklaceCtx.stroke();\n            } else {\n                // passive dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.stroke();\n            }\n        }\n    },\n\n\n    /**\n     * Update the pointer that connects the dots.\n     */\n    updatePointer = function updatePointer() {\n        var isMute = my.data.params.is_mute.value,\n            pointerRadius = isMute ? pointerMutedRadius : necklaceRadius,\n            pointerX = isMute ? 15 : 19,\n            pointerY = isMute ? 15 : 6;\n\n        pointerCtx.clearRect(0, 0, pointerCanvas.width, pointerCanvas.height);\n        pointerCtx.beginPath();\n        pointerCtx.moveTo(pointerCanvasCenter - pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.lineTo(pointerCanvasCenter, pointerCanvas.height - pointerRadius);\n        pointerCtx.lineTo(pointerCanvasCenter + pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.stroke();\n    },\n\n\n    /**\n     * Update the zero marker.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateZeroMarker = function updateZeroMarker(steps, rotation) {\n        var rad = doublePI * (-rotation / steps),\n            markerRadius = necklaceRadius + 15,\n            x = radius + Math.sin(rad) * markerRadius,\n            y = radius - Math.cos(rad) * markerRadius;\n\n        necklaceCtx.beginPath();\n        necklaceCtx.moveTo(x, y + zeroMarkerRadius);\n        necklaceCtx.arc(x, y, zeroMarkerRadius, 0, doublePI, true);\n        necklaceCtx.stroke();\n    },\n\n\n    /**\n     * Update the marker that indicates if the pattern is rotated.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateRotatedMarker = function updateRotatedMarker(steps, rotation) {\n        if (rotation !== 0) {\n            var x = radius,\n                y = radius - necklaceRadius - 10;\n\n            necklaceCtx.beginPath();\n            necklaceCtx.moveTo(x, y);\n            necklaceCtx.lineTo(x, y - 10);\n            necklaceCtx.lineTo(x + 6, y - 7);\n            necklaceCtx.lineTo(x, y - 4);\n            necklaceCtx.stroke();\n        }\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName() {\n        // let name = my.processor.getParamValue('name');\n        var name = my.data.params.name.value;\n        nameCtx.clearRect(0, 0, nameCanvas.width, nameCanvas.height);\n        nameCtx.fillText(my.data.params.name.value, nameCanvas.width / 2, nameCanvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Redraw the pattern's static shapes canvas.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n        staticCtx.beginPath();\n\n        // necklace\n        staticCtx.drawImage(necklaceCanvas, 0, 0);\n\n        // center ring\n        staticCtx.moveTo(radius + centerRadius, radius);\n        staticCtx.arc(radius, radius, centerRadius, 0, doublePI, true);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(radius + selectRadius, radius);\n            staticCtx.arc(radius, radius, selectRadius, 0, doublePI, true);\n        }\n        staticCtx.stroke();\n    },\n\n\n    /**\n     * Add the pattern's static canvas to the main static canvas.\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - radius, my.positionY - radius);\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - radius, my.positionY + necklaceRadius + 4);\n    },\n\n\n    /**\n     * Draw the pattern's dynamic shapes on the main dymamic canvas\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToDynamicView = function addToDynamicView(mainDynamicCtx) {\n        // draw rotating pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotation);\n        mainDynamicCtx.drawImage(pointerCanvas, -pointerCanvasCenter, -pointerCanvas.height);\n        mainDynamicCtx.restore();\n\n        mainDynamicCtx.fillStyle = my.colorHigh;\n        mainDynamicCtx.strokeStyle = my.colorHigh;\n        mainDynamicCtx.beginPath();\n\n        // necklace dots\n        isNoteActive = false;\n        var n = dotAnimations.length,\n            largestDot = dotRadius,\n            hasDotAnimations = false,\n            dotState = void 0,\n            x = void 0,\n            y = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                dotState = dotAnimations[key];\n                x = my.positionX + dotState.positionX;\n                y = my.positionY - dotState.positionY;\n                mainDynamicCtx.moveTo(x + dotState.dotRadius, y);\n                mainDynamicCtx.arc(x, y, dotState.dotRadius, 0, doublePI, true);\n                largestDot = Math.max(largestDot, dotState.dotRadius);\n                isNoteActive = true;\n            }\n        }\n\n        // center dot\n        if (isNoteActive) {\n            var largestDotNormalised = (largestDot - dotRadius) / (dotActiveRadius - dotRadius);\n            centerDotRadius = largestDotNormalised * centerDotFullRadius;\n            mainDynamicCtx.moveTo(my.positionX + centerDotRadius, my.positionY);\n            mainDynamicCtx.arc(my.positionX, my.positionY, centerDotRadius, 0, doublePI, true);\n        }\n\n        mainDynamicCtx.fill();\n        mainDynamicCtx.stroke();\n    },\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {\n        // center dot\n        if (isNoteActive) {\n            mainDynamicCtx.clearRect(centerDotX, centerDotY, centerDotSize, centerDotSize);\n        }\n\n        // necklace dots\n        var rect = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                rect = dotAnimations[key].boundingBox;\n                mainDynamicCtx.clearRect(rect.xAbs, rect.yAbs, rect.height, rect.width);\n            }\n        }\n\n        // pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotationPrevious);\n        mainDynamicCtx.clearRect(-pointerCanvasCenter, -pointerCanvas.height, pointerCanvas.width, pointerCanvas.height);\n        mainDynamicCtx.restore();\n    },\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @param  {String} type Hit area type, 'processor|inconnector|outconnector'\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y, type) {\n        var distance = void 0;\n        switch (type) {\n            case 'processor':\n                distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n                return distance <= necklaceRadius + dotRadius;\n            case 'inconnector':\n                return false;\n            case 'outconnector':\n                distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY - outConnectorY, 2));\n                return distance <= my.getConnectorGraphic().canvas.width / 2;\n        }\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        staticCtx.strokeStyle = my.colorHigh;\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        pointerCtx.strokeStyle = my.colorHigh;\n        nameCtx.fillStyle = my.colorMid;\n        updateName();\n        updateNecklace();\n        my.getConnectorGraphic().setTheme(theme);\n    },\n        getOutConnectorPoint = function getOutConnectorPoint() {\n        return {\n            x: my.positionX,\n            y: my.positionY + outConnectorY\n        };\n    },\n\n\n    /**\n     * Provide output connector image for editing connections.\n     * @return {Object} Contains canvas and coordinates.\n     */\n    getOutConnectorGraphic = function getOutConnectorGraphic() {\n        var canvas = my.getConnectorGraphic().canvas,\n            point = getOutConnectorPoint();\n        return {\n            canvas: canvas,\n            x: point.x - canvas.width / 2,\n            y: point.y - canvas.height / 2\n        };\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.updatePosition = updatePosition;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    that.getOutConnectorPoint = getOutConnectorPoint;\n    that.getOutConnectorGraphic = getOutConnectorGraphic;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while (len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n    return [];\n};\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n    return '/';\n};\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () {\n    return 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI1MC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(9);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _selectors = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output object drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        connectorCanvas = specs.connectorCanvas,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        lineWidth = 2,\n        initialise = function initialise() {\n        // offscreen canvas for static shapes\n        var width = 100,\n            height = 50,\n            radius = 10,\n            boxWidth = 80;\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = height;\n        staticCanvas.width = width;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n        staticCtx.strokeStyle = my.colorHigh;\n        staticCtx.clearRect(0, 0, width, height);\n        staticCtx.save();\n        staticCtx.translate(width / 2, height / 2 - 10);\n        staticCtx.beginPath();\n        // box\n        staticCtx.rect(-boxWidth / 2, -radius, boxWidth, radius * 2);\n        // arrow\n        staticCtx.moveTo(-boxWidth / 2, radius);\n        staticCtx.lineTo(0, radius + 20);\n        staticCtx.lineTo(boxWidth / 2, radius);\n        // circle\n        staticCtx.moveTo(radius, 0);\n        staticCtx.arc(0, 0, radius, 0, Math.PI * 2, true);\n        staticCtx.stroke();\n        staticCtx.restore90;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = 200;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n        nameCtx.fillText((0, _selectors.getMIDIPortByID)(specs.data.portID).name, nameCanvas.width / 2, nameCanvas.height / 2);\n\n        // add listeners to parameters\n        // let params = my.processor.getParameters();\n        // params.position2d.addChangedCallback(updatePosition);\n\n        // set position on the canvas\n        // position2d = my.data.params.position2d.value;\n        // if (!position2d || (position2d.x == 0 && position2d.y == 0)) {\n        //     // use initial position centered on the canvas\n        //     position2d = specs.data.initialPosition;\n        // }\n        // updatePosition(params.position2d, position2d, position2d);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        // let params = my.processor.getParameters();\n        // params.position2d.removeChangedCallback(updatePosition);\n        canvasDirtyCallback = null;\n    },\n        setSelected = function setSelected(isSelected) {\n        console.log('TODO: setSelected');\n    },\n        draw = function draw() {},\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        canvasDirtyCallback();\n    },\n        addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - 50, my.positionY - 15);\n\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - nameCanvas.width / 2, my.positionY + 30);\n    },\n        addToDynamicView = function addToDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @param  {String} type Hit area type, 'processor|inconnector|outconnector'\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y, type) {\n        var distance = void 0;\n        switch (type) {\n            case 'processor':\n                distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n                return distance <= 10;\n            case 'inconnector':\n                distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n                return distance <= my.getConnectorGraphic().canvas.width / 2;\n            case 'outconnector':\n                return false;\n        }\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        my.getConnectorGraphic().setTheme(theme);\n    },\n        getInConnectorPoint = function getInConnectorPoint() {\n        return {\n            x: my.positionX,\n            y: my.positionY\n        };\n    },\n\n\n    /**\n     * Provide output connector image for editing connections.\n     * @return {Object} Contains canvas and coordinates.\n     */\n    getInConnectorGraphic = function getInConnectorGraphic() {\n        var canvas = my.getConnectorGraphic().canvas,\n            point = getInConnectorPoint();\n        return {\n            canvas: canvas,\n            x: point.x - canvas.width / 2,\n            y: point.y - canvas.height / 2\n        };\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    that.getInConnectorPoint = getInConnectorPoint;\n    that.getInConnectorGraphic = getInConnectorGraphic;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasConnectionsView;\n/**\n * Canvas processor connector input and output points,\n * cables between the processor connectors,\n * Delete circles halfway the cables.\n * \n * OFFLINE CANVAS\n * All connection lines are drawn on the offline canvas,\n * This happens when processors are created, deleted or moved,\n * or when Connect Mode is entered or exited.\n * \n * The offline context is drawn on the static canvas.\n * It's the first thing that's drawn on the static canvas,\n * so that the connection lines appear behind the processors.\n * \n * CONNECT CANVAS\n * All input and output connector circles are drawn on the connect canvas.\n * The currently dragged cable is also drawn on the canvas.\n * \n * The connect canvas appears in front of the processors.\n */\nfunction createCanvasConnectionsView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl,\n        connectorsCanvas,\n        connectorsCtx,\n        cablesCanvas,\n        cablesCtx,\n        activeCableCanvas,\n        activeCableCtx,\n        connectorCanvas,\n        connectorCtx,\n\n    // inConnectors,\n    // outConnectors,\n    cableData = {\n        byId: {},\n        allIds: []\n    },\n        cableHandleRadius = 10,\n        connectorRadius = 12,\n        sourceProcessorID,\n        sourceConnectorID,\n        dragData = {\n        isDragging: false,\n        startPoint: { x: 0, y: 0 },\n        endPoint: { x: 0, y: 0 },\n        lineColor: '#ccc',\n        lineWidth: 1,\n        lineWidthActive: 2\n    },\n        init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        connectorsCanvas = document.querySelector('.canvas-connect');\n        connectorsCtx = connectorsCanvas.getContext('2d');\n        cablesCanvas = document.createElement('canvas');\n        cablesCtx = cablesCanvas.getContext('2d');\n        activeCableCanvas = document.createElement('canvas');\n        activeCableCtx = activeCableCanvas.getContext('2d');\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.TOGGLE_CONNECT_MODE:\n                    toggleConnectMode(e.detail.state.connectModeActive);\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                case e.detail.actions.DELETE_PROCESSOR:\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                case e.detail.actions.CONNECT_PROCESSORS:\n                case e.detail.actions.DISCONNECT_PROCESSORS:\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n            }\n        });\n\n        createConnectorGraphic();\n\n        my.addWindowResizeCallback(onResize);\n        onResize();\n    },\n        onResize = function onResize() {\n        connectorsCanvas.width = rootEl.clientWidth;\n        connectorsCanvas.height = rootEl.clientHeight;\n        cablesCanvas.width = rootEl.clientWidth;\n        cablesCanvas.height = rootEl.clientHeight;\n        activeCableCanvas.width = rootEl.clientWidth;\n        activeCableCanvas.height = rootEl.clientHeight;\n    },\n\n\n    /**\n     * Create the connector canvas once and use it for all \n     * processor input and output connectors.\n     */\n    createConnectorGraphic = function createConnectorGraphic(theme) {\n        var lineWidth = 2,\n            size = (connectorRadius + lineWidth) * 2;\n\n        connectorCanvas = document.createElement('canvas');\n        connectorCanvas.width = size;\n        connectorCanvas.height = size;\n\n        connectorCtx = connectorCanvas.getContext('2d');\n        connectorCtx.lineWidth = lineWidth;\n        connectorCtx.strokeStyle = theme ? theme.colorHigh : '#333333';\n        connectorCtx.setLineDash([4, 4]);\n\n        connectorCtx.save();\n        connectorCtx.translate(size / 2, size / 2);\n        connectorCtx.arc(0, 0, size / 2, 0, Math.PI * 2, true);\n        connectorCtx.stroke();\n        connectorCtx.restore();\n    },\n\n\n    /**\n     * Enter or leave application connect mode.\n     * @param {Boolean} isEnabled True to enable connect mode.\n     */\n    toggleConnectMode = function toggleConnectMode(isEnabled) {\n        my.isConnectMode = isEnabled;\n\n        // show the canvas\n        connectorsCanvas.dataset.show = isEnabled;\n\n        // drawCablesCanvas();\n        // drawConnectCanvas();\n        my.markDirty();\n    },\n        dragStartConnection = function dragStartConnection(startX, startY, x, y) {\n        dragData.isDragging = true;\n        dragData.startPoint = { x: startX, y: startY };\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragMoveConnection = function dragMoveConnection(x, y) {\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragEndConnection = function dragEndConnection() {\n        dragData.isDragging = false;\n        drawActiveCableCanvas();\n    },\n        setThemeOnConnections = function setThemeOnConnections() {\n        dragData.lineColor = my.theme.colorHigh || '#333';\n        drawCablesCanvas();\n        drawConnectCanvas();\n    },\n        intersectsConnector = function intersectsConnector(x, y, isInput) {\n        var isIntersect = false,\n            isFound = false;\n        store.getState().processors.allIds.forEach(function (id) {\n            var processor = store.getState().processors.byId[id];\n            var connectorData = processor[isInput ? 'inputs' : 'outputs'];\n            connectorData.allIds.forEach(function (id) {\n                if (!isFound) {\n                    var connectorX = processor.positionX + connectorData.byId[id].x,\n                        connectorY = processor.positionY + connectorData.byId[id].y,\n                        distance = Math.sqrt(Math.pow(x - connectorX, 2) + Math.pow(y - connectorY, 2));\n                    isIntersect = distance <= connectorRadius;\n                    if (isIntersect) {\n                        isFound = true;\n                        if (isInput) {\n                            store.dispatch(store.getActions().connectProcessors({\n                                sourceProcessorID: sourceProcessorID,\n                                sourceConnectorID: sourceConnectorID,\n                                destinationProcessorID: processor.id,\n                                destinationConnectorID: id\n                            }));\n                            sourceProcessorID = null;\n                        } else {\n                            sourceProcessorID = processor.id;\n                            sourceConnectorID = id;\n                            dragStartConnection(connectorX, connectorY, x, y);\n                        }\n                    }\n                }\n            });\n        });\n        return isIntersect;\n\n        // for (let i = 0; i < numViews; i++) {\n        //     if (views[i].intersectsWithPoint(x, y, 'inconnector')) {\n        //         const destinationProcessor = views[i].getProcessor();\n        //         midiNetwork.connectProcessors(connectionSourceProcessor, destinationProcessor);\n        //         break;\n        //     }\n        // }\n        // my.dragEndConnection();\n    },\n        intersectsCableHandle = function intersectsCableHandle(x, y) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = cableData.allIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var id = _step.value;\n\n                var data = cableData.byId[id],\n                    distance = Math.sqrt(Math.pow(x - data.handleX, 2) + Math.pow(y - data.handleY, 2));\n                if (distance <= cableHandleRadius) {\n                    return id;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        ;\n        return null;\n    },\n\n\n    // updateConnectorsInfo = function() {\n    //     // clear the old info\n    //     inConnectors = {};\n    //     outConnectors = {};\n\n    //     // loop over all processor views to collect current info\n    //     const views = my.getProcessorViews(),\n    //         n = views.length; \n    //     for (let i = 0, view, processor, viewInfo, viewPos, graphic; i < n; i++) {\n    //         view = views[i];\n    //         processor = view.getProcessor();\n    //         viewInfo = processor.getInfo();\n    //         viewPos = view.getPosition2d();\n    //         if (viewInfo.inputs == 1) {\n    //             inConnectors[processor.getID()] = {\n    //                 point: view.getInConnectorPoint(),\n    //                 graphic: view.getInConnectorGraphic()\n    //             }\n    //         }\n    //         if (viewInfo.outputs == 1) {\n    //             outConnectors[processor.getID()] = {\n    //                 point: view.getOutConnectorPoint(),\n    //                 graphic: view.getOutConnectorGraphic()\n    //             }\n    //         }\n    //     }\n\n    //     if (my.isConnectMode) {\n    //         drawConnectCanvas();\n    //     }\n    // },\n\n    /**\n     * All connection lines are drawn on the offline canvas,\n     * This happens when processors are created, deleted or moved,\n     * or when Connect Mode is entered or exited.\n     */\n    drawCablesCanvas = function drawCablesCanvas(state) {\n        cableData.byId = {};\n        cableData.allIds = [];\n        cablesCtx.clearRect(0, 0, cablesCanvas.width, cablesCanvas.height);\n        cablesCtx.strokeStyle = '#cccccc';\n        cablesCtx.beginPath();\n\n        state.connections.allIds.forEach(function (connectionID) {\n            var connection = state.connections.byId[connectionID];\n            var sourceProcessor = state.processors.byId[connection.sourceProcessorID],\n                destinationProcessor = state.processors.byId[connection.destinationProcessorID],\n                sourceConnector = sourceProcessor.outputs.byId[connection.sourceConnectorID],\n                destinationConnector = destinationProcessor.inputs.byId[connection.destinationConnectorID];\n            var handlePosition = drawCable(cablesCtx, {\n                x: sourceProcessor.positionX + sourceConnector.x,\n                y: sourceProcessor.positionY + sourceConnector.y\n            }, {\n                x: destinationProcessor.positionX + destinationConnector.x,\n                y: destinationProcessor.positionY + destinationConnector.y\n            });\n\n            cableData.byId[connectionID] = {\n                handleX: handlePosition.x,\n                handleY: handlePosition.y\n            };\n            cableData.allIds.push(connectionID);\n        });\n\n        cablesCtx.stroke();\n\n        // // clear the old info\n        // connections = [];\n\n        // const lineWidth = my.isConnectMode ? dragData.lineWidthActive : dragData.lineWidth;\n\n        // // show cables\n        // const views = my.getProcessorViews(),\n        //     n = views.length; \n        // let processor, sourceID, destinationID, destinations, numDestinations;\n        // cablesCtx.lineWidth = lineWidth;\n        // cablesCtx.strokeStyle = dragData.lineColor;\n        // cablesCtx.beginPath();\n        // for (let i = 0; i < n; i++) {\n        //     processor = views[i].getProcessor();\n        //     sourceID = processor.getID();\n        //     destinations = processor.getDestinations instanceof Function ? processor.getDestinations() : [],\n        //     numDestinations = destinations.length;\n        //     for (let j = 0; j < numDestinations; j++) {\n        //         destinationID = destinations[j].getID();\n        //         let selectPoint = drawCable(cablesCtx, outConnectors[sourceID].point, inConnectors[destinationID].point);\n        //         connections.push({\n        //             sourceProcessor: processor,\n        //             destinationProcessor: destinations[j],\n        //             selectPoint: selectPoint\n        //         });\n        //     }\n        // }\n\n        // // cable currently being dragged\n        // if (dragData.isDragging) {\n        //     drawCable(cablesCtx, dragData.startPoint, dragData.endPoint);\n        // }\n\n        // cablesCtx.stroke();\n    },\n\n\n    /**\n     * Draw connector circles and currently dragged line on connectorsCanvas.\n     */\n    drawConnectCanvas = function drawConnectCanvas(state) {\n        connectorsCtx.clearRect(0, 0, connectorsCanvas.width, connectorsCanvas.height);\n\n        if (state.connectModeActive) {\n            state.processors.allIds.forEach(function (id) {\n                var processor = state.processors.byId[id];\n                processor.inputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.inputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.inputs.byId[id].y - connectorCanvas.height / 2);\n                });\n                processor.outputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.outputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.outputs.byId[id].y - connectorCanvas.height / 2);\n                });\n            });\n            my.markDirty();\n\n            // for (id in inConnectors) {\n            //     if (inConnectors.hasOwnProperty(id)) {\n            //         graphic = inConnectors[id].graphic;\n            //         connectorsCtx.drawImage(graphic.canvas, graphic.x, graphic.y);\n            //     }\n            // }\n            // for (id in outConnectors) {\n            //     if (outConnectors.hasOwnProperty(id)) {\n            //         graphic = outConnectors[id].graphic;\n            //         connectorsCtx.drawImage(graphic.canvas, graphic.x, graphic.y);\n            //     }\n            // }\n        }\n    },\n        drawActiveCableCanvas = function drawActiveCableCanvas() {\n        activeCableCtx.clearRect(0, 0, activeCableCanvas.width, activeCableCanvas.height);\n        if (dragData.isDragging) {\n            activeCableCtx.lineWidth = 2;\n            activeCableCtx.strokeStyle = dragData.lineColor;\n            activeCableCtx.beginPath();\n            drawCable(activeCableCtx, dragData.startPoint, dragData.endPoint);\n            activeCableCtx.stroke();\n        }\n        my.markDirty();\n    },\n\n\n    /**\n     * Draw a processor connection cable.\n     * @param  {Object} startPoint {x, y} start coordinate.\n     * @param  {Object} endPoint   {x, y} end coordinate.\n     */\n    drawCable = function drawCable(context, startPoint, endPoint) {\n        // line\n        var distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2)),\n            tension = distance / 2,\n            cp1x = startPoint.x,\n            cp1y = startPoint.y + tension,\n            cp2x = endPoint.x,\n            cp2y = endPoint.y + tension;\n        context.moveTo(startPoint.x, startPoint.y);\n        context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y);\n\n        // endpoint\n        var radius = 5;\n        context.moveTo(endPoint.x + radius, endPoint.y);\n        context.arc(endPoint.x, endPoint.y, radius, 0, Math.PI * 2, true);\n\n        return drawCableHandle(context, startPoint.x, startPoint.y, cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y);\n    },\n\n\n    /**\n     * Draw select button halfway the bezier curved cable.\n     * @see https://stackoverflow.com/questions/15397596/find-all-the-points-of-a-cubic-bezier-curve-in-javascript\n     * @param  {Object} context The canvas context to draw on.\n     * @param  {[type]} ax [description]\n     * @param  {[type]} ay [description]\n     * @param  {[type]} bx [description]\n     * @param  {[type]} by [description]\n     * @param  {[type]} cx [description]\n     * @param  {[type]} cy [description]\n     * @param  {[type]} dx [description]\n     * @param  {[type]} dy [description]\n     * @return {Object}    Canvas x, y coordinate.\n     */\n    drawCableHandle = function drawCableHandle(context, ax, ay, bx, by, cx, cy, dx, dy) {\n        var t = 0.5,\n            // halfway the cable\n        b0t = Math.pow(1 - t, 3),\n            b1t = 3 * t * Math.pow(1 - t, 2),\n            b2t = 3 * Math.pow(t, 2) * (1 - t),\n            b3t = Math.pow(t, 3),\n            pxt = b0t * ax + b1t * bx + b2t * cx + b3t * dx,\n            pyt = b0t * ay + b1t * by + b2t * cy + b3t * dy;\n\n        if (my.isConnectMode) {\n            context.moveTo(pxt + cableHandleRadius, pyt);\n            context.arc(pxt, pyt, cableHandleRadius, 0, Math.PI * 2, true);\n        }\n\n        return { x: pxt, y: pyt };\n    },\n        addConnectionsToCanvas = function addConnectionsToCanvas(ctx) {\n        ctx.drawImage(cablesCanvas, 0, 0);\n        if (my.isConnectMode) {\n            ctx.drawImage(connectorsCanvas, 0, 0);\n            ctx.drawImage(activeCableCanvas, 0, 0);\n        }\n    };\n\n    // drawConnections = function() {\n    //     connectorsCtx.clearRect(0, 0, connectorsCanvas.width, connectorsCanvas.height);\n    //     \n    //     // show inputs and outputs\n    //     inConnectors = {};\n    //     outConnectors = {};\n    //     const views = my.getProcessorViews(),\n    //         n = views.length; \n    //     for (let i = 0, view, processor, viewInfo, viewPos, graphic; i < n; i++) {\n    //         view = views[i];\n    //         processor = view.getProcessor();\n    //         viewInfo = processor.getInfo();\n    //         viewPos = view.getPosition2d();\n    //         if (viewInfo.inputs == 1) {\n    //             graphic = view.getInConnectorGraphic();\n    //             connectorsCtx.drawImage(graphic.canvas, graphic.x, graphic.y);\n    //             inConnectors[processor.getID()] = view.getInConnectorPoint();\n    //         }\n    //         if (viewInfo.outputs == 1) {\n    //             graphic = view.getOutConnectorGraphic();\n    //             connectorsCtx.drawImage(graphic.canvas, graphic.x, graphic.y);\n    //             outConnectors[processor.getID()] = view.getOutConnectorPoint();\n    //         }\n    //     }\n    //     \n    //     // show cables\n    //     let processor, sourceID, destinationID, destinations, numDestinations;\n    //     for (let i = 0; i < n; i++) {\n    //         processor = views[i].getProcessor();\n    //         sourceID = processor.getID();\n    //         destinations = processor.getDestinations instanceof Function ? processor.getDestinations() : [],\n    //         numDestinations = destinations.length;\n    //         for (let j = 0; j < numDestinations; j++) {\n    //             destinationID = destinations[j].getID();\n    //             drawCable(outConnectors[sourceID], inConnectors[destinationID]);\n    //         }\n    //     }\n    //     \n    //     // cable currently being dragged\n    //     if (dragData.isDragging) {\n    //         drawCable(dragData.startPoint, dragData.endPoint);\n    //     }\n    // };\n\n    my = my || {};\n    my.isConnectMode = false,\n    // my.dragStartConnection = dragStartConnection;\n    my.dragMoveConnection = dragMoveConnection;\n    my.dragEndConnection = dragEndConnection;\n    my.intersectsConnector = intersectsConnector;\n    my.intersectsCableHandle = intersectsCableHandle;\n    my.setThemeOnConnections = setThemeOnConnections;\n    // my.updateConnectorsInfo = updateConnectorsInfo;\n    // my.drawCablesCanvas = drawCablesCanvas;\n    my.addConnectionsToCanvas = addConnectionsToCanvas;\n\n    that = specs.that || {};\n\n    init();\n\n    // that.toggleConnectMode = toggleConnectMode;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createPreferencesView;\n\nvar _midi_input = __webpack_require__(54);\n\nvar _midi_input2 = _interopRequireDefault(_midi_input);\n\nvar _midi_output = __webpack_require__(55);\n\nvar _midi_output2 = _interopRequireDefault(_midi_output);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Preferences settings view.\n */\nfunction createPreferencesView(specs) {\n    var that,\n        store = specs.store,\n        preferencesEl = document.querySelector('.prefs'),\n        midiInputsEl = document.querySelector('.prefs__inputs'),\n        midiOutputsEl = document.querySelector('.prefs__outputs'),\n        midiPortViews = [],\n\n    // midiInputsViews = [],\n    // midiOutputsViews = [],\n    controls = {\n        darkTheme: {\n            type: 'checkbox',\n            input: document.querySelector('.prefs__dark-theme')\n        }\n    },\n        init = function init() {\n        controls.darkTheme.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTheme(e.target.checked));\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_PREFERENCES:\n                case e.detail.actions.SET_THEME:\n                    updateControl('dark-theme', e.detail.state.preferences.isDarkTheme);\n                    break;\n\n                case e.detail.actions.MIDI_PORT_CHANGE:\n                    updateMIDIPortViews(e.detail.state.ports);\n                    break;\n\n                // case e.detail.actions.REMOVE_MIDI_PORT:\n                //     deleteMIDIPortView(e.detail.state, e.detail.action.isInput);\n                //     break;\n            }\n        });\n    },\n\n\n    /**\n     * Callback function to update one of the controls after if the\n     * preference's state changed.\n     * @param {String} key Key that indicates the control.\n     * @param {Boolean} value Value of the control.\n     */\n    updateControl = function updateControl(key, value) {\n        switch (key) {\n            case 'dark-theme':\n                controls.darkTheme.input.checked = value;\n                break;\n        }\n    },\n\n\n    /**\n     * Update lists of ports after a change.\n     * @param {Array} ports MIDI port objects.\n     */\n    updateMIDIPortViews = function updateMIDIPortViews(ports) {\n        ports.forEach(function (port) {\n            var view = midiPortViews.find(function (view) {\n                return port.id === view.getID();\n            });\n            if (view && port.state === 'disconnected') {\n                view.terminate();\n                midiPortViews.splice(midiPortViews.findIndex(function (view) {\n                    return port.id === view.getID();\n                }), 1);\n            }\n            if (!view && port.state === 'connected') {\n                var createFunction = void 0,\n                    parentEl = void 0;\n                if (port.type === 'input') {\n                    createFunction = _midi_input2.default;\n                    parentEl = midiInputsEl;\n                } else {\n                    createFunction = _midi_output2.default;\n                    parentEl = midiOutputsEl;\n                }\n                midiPortViews.push(createFunction({\n                    store: store,\n                    id: port.id,\n                    name: port.name,\n                    parentEl: parentEl,\n                    isInput: port.type === 'input'\n                }));\n            }\n        });\n    };\n\n    /**\n     * Create view for a MIDI input or output port.\n     * @param {Boolean} isInput True if the port in an input.\n     * @param {Object} port MIDI port object.\n     */\n    // createMIDIPortView = function(state, isInput) {\n    //     let data, views, createFunction, parentEl;\n    //     if (isInput) {\n    //         data = state.inputs;\n    //         views = midiInputsViews;\n    //         createFunction = createMIDIInputView;\n    //         parentEl = midiInputsEl;\n    //     } else {\n    //         data = state.outputs;\n    //         views = midiOutputsViews;\n    //         createFunction = createMIDIOutputView;\n    //         parentEl = midiOutputsEl;\n    //     }\n\n    //     for (let i = 0, n = data.length; i < n; i++) {\n    //         let isFound = false;\n    //         for (let j = 0, p = views.length; j < p; j++) {\n    //             if (data[i].id === views[j].getID()) {\n    //                 isFound = true;\n    //                 break;\n    //             }\n    //         }\n    //         if (!isFound) {\n    //             let view = createFunction({\n    //                 store: store,\n    //                 id: data[i].id,\n    //                 name: data[i].name,\n    //                 parentEl: parentEl,\n    //                 isInput: isInput\n    //             });\n    //             views.splice(i, 0, view);\n    //         }\n    //     }\n\n    // var view;\n    // if (isInput) {\n    //     view = ns.createMIDIInputView({\n    //         parentEl: midiInputsEl,\n    //         port: port\n    //     });\n    // } else {\n    //     view = ns.createMIDIOutputView({\n    //         parentEl: midiOutputsEl,\n    //         port: port\n    //     });\n    // }\n    // midiPortViews.push(view);\n    // },\n\n    /**\n     * Delete view for a MIDI input or output processor.\n     * @param  {Object} processor MIDI processor for a MIDI input or output.\n     */\n    // deleteMIDIPortView = function(state, isInput) {\n    //     if (isInput) {\n    //         data = state.inputs;\n    //         views = midiInputsViews;\n    //     } else {\n    //         data = state.outputs;\n    //         views = midiOutputsViews;\n    //     }\n    //     var n = views.length;\n    //     while (--n >= 0) {\n    //         let isFound = false;\n    //         for (let i = 0, p = data.length; i < p; i++) {\n    //             if (data[i].id === views[n].getID()) {\n    //                 isFound = true;\n    //                 break\n    //             }\n    //         }\n    //         if (!isFound) {\n    //             views[n].terminate();\n    //             views.splice(n, 1);\n    //             return;\n    //         }\n\n    //         // if (midiPortViews[n].hasProcessor(processor)) {\n    //         //     midiPortViews[n].terminate();\n    //         //     midiPortViews.splice(n, 1);\n    //         //     return false;\n    //         // }\n    //     }\n    // };\n\n    that = specs.that;\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIInputView;\n\nvar _midi_base = __webpack_require__(11);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Input processor view.\n */\nfunction createMIDIInputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.networkEl.dataset.disabled = 'true';\n        my.networkEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX2lucHV0LmpzPzdjZTUiXSwibmFtZXMiOlsiY3JlYXRlTUlESUlucHV0VmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwiaW5pdCIsIm5ldHdvcmtFbCIsImRhdGFzZXQiLCJkaXNhYmxlZCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUt3QkEsbUI7O0FBTHhCOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxFQUFwQyxFQUF3QztBQUNuRCxRQUFJQyxJQUFKOzs7QUFFSTs7OztBQUlBQyxXQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixXQUFHRyxTQUFILENBQWFDLE9BQWIsQ0FBcUJDLFFBQXJCLEdBQWdDLE1BQWhDO0FBQ0FMLFdBQUdHLFNBQUgsQ0FBYUcsYUFBYixDQUEyQixPQUEzQixFQUFvQ0MsWUFBcEMsQ0FBaUQsVUFBakQsRUFBNkQsVUFBN0Q7QUFDSCxLQVRMOztBQVdBUCxTQUFLQSxNQUFNLEVBQVg7O0FBRUFDLFdBQU8seUJBQW1CRixLQUFuQixFQUEwQkMsRUFBMUIsQ0FBUDs7QUFFQUU7O0FBRUEsV0FBT0QsSUFBUDtBQUNIIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU1JRElCYXNlVmlldyBmcm9tICcuL21pZGlfYmFzZSc7XG5cbi8qKlxuICogTUlESSBJbnB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUlucHV0VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGluaXQgZnVuY3Rpb24gaXMgY2FsbGVkIGFmdGVyIHRoZSBiYXNlIHZpZXcncyBpbml0aWFsaXNlIGZ1bmN0aW9uLFxuICAgICAgICAgKiBzbyBwcm9wZXJ0aWVzIG9mIG9uICdteScgYXJlIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG15Lm5ldHdvcmtFbC5kYXRhc2V0LmRpc2FibGVkID0gJ3RydWUnO1xuICAgICAgICAgICAgbXkubmV0d29ya0VsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jykuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVNSURJQmFzZVZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG5cbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L21pZGlfaW5wdXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIOutputView;\n\nvar _midi_base = __webpack_require__(11);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Output processor view.\n */\nfunction createMIDIOutputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.syncEl.dataset.disabled = 'true';\n        my.syncEl.querySelector('input').setAttribute('disabled', 'disabled');\n        my.remoteEl.dataset.disabled = 'true';\n        my.remoteEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcz83Nzk4Il0sIm5hbWVzIjpbImNyZWF0ZU1JRElPdXRwdXRWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJpbml0Iiwic3luY0VsIiwiZGF0YXNldCIsImRpc2FibGVkIiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsInJlbW90ZUVsIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLG9COztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLG9CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsRUFBckMsRUFBeUM7QUFDcEQsUUFBSUMsSUFBSjs7O0FBRUk7Ozs7QUFJQUMsV0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEYsV0FBR0csTUFBSCxDQUFVQyxPQUFWLENBQWtCQyxRQUFsQixHQUE2QixNQUE3QjtBQUNBTCxXQUFHRyxNQUFILENBQVVHLGFBQVYsQ0FBd0IsT0FBeEIsRUFBaUNDLFlBQWpDLENBQThDLFVBQTlDLEVBQTBELFVBQTFEO0FBQ0FQLFdBQUdRLFFBQUgsQ0FBWUosT0FBWixDQUFvQkMsUUFBcEIsR0FBK0IsTUFBL0I7QUFDQUwsV0FBR1EsUUFBSCxDQUFZRixhQUFaLENBQTBCLE9BQTFCLEVBQW1DQyxZQUFuQyxDQUFnRCxVQUFoRCxFQUE0RCxVQUE1RDtBQUNILEtBWEw7O0FBYUFQLFNBQUtBLE1BQU0sRUFBWDs7QUFFQUMsV0FBTyx5QkFBbUJGLEtBQW5CLEVBQTBCQyxFQUExQixDQUFQOztBQUVBRTs7QUFFQSxXQUFPRCxJQUFQO0FBQ0giLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTUlESUJhc2VWaWV3IGZyb20gJy4vbWlkaV9iYXNlJztcblxuLyoqXG4gKiBNSURJIE91dHB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESU91dHB1dFZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpbml0IGZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciB0aGUgYmFzZSB2aWV3J3MgaW5pdGlhbGlzZSBmdW5jdGlvbixcbiAgICAgICAgICogc28gcHJvcGVydGllcyBvZiBvbiAnbXknIGFyZSBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBteS5zeW5jRWwuZGF0YXNldC5kaXNhYmxlZCA9ICd0cnVlJztcbiAgICAgICAgICAgIG15LnN5bmNFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIG15LnJlbW90ZUVsLmRhdGFzZXQuZGlzYWJsZWQgPSAndHJ1ZSc7XG4gICAgICAgICAgICBteS5yZW1vdGVFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlTUlESUJhc2VWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteView;\n\nvar _remote_group = __webpack_require__(57);\n\nvar _remote_group2 = _interopRequireDefault(_remote_group);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Overview list of all assigned MIDI controller assignments.\n */\nfunction createRemoteView(specs, my) {\n    var that,\n        store = specs.store,\n        appView = specs.appView,\n\n    // midiRemote = specs.midiRemote,\n    rootEl = document.querySelector('.remote'),\n        listEl = document.querySelector('.remote__list'),\n        groupViews = [],\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.ADD_PROCESSOR:\n                    createRemoteGroup(e.detail.state.processors.byId[e.detail.action.data.id]);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    // TODO: remote view delete processor\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Create a container view to hold assigned parameter views.\n     * @param {Array} processors Processor list.\n     */\n    createRemoteGroup = function createRemoteGroup(processor) {\n        groupViews.push((0, _remote_group2.default)({\n            store: store,\n            id: processor.id,\n            name: processor.name,\n            parentEl: listEl\n        }));\n\n        // processors.forEach(processor => {\n        //     let exists = false;\n        //     for (let i = 0, n = groupViews.length; i < n; i++) {\n        //         if (groupViews.getID() === processor.id) {\n        //             exists = true;\n        //             break;\n        //         }\n        //     }\n        //     if (!exists) {\n        //         groupViews.push(createRemoteGroupView({\n        //             id: processor.id,\n        //             parentEl: listEl\n        //         }));\n        //     }\n        // });\n\n        // var remoteGroupView = ns.createRemoteGroupView({\n        //     processor: processor,\n        //     parentEl: listEl\n        // });\n        // groupViews.push(remoteGroupView);\n        // appView.renderLayout();\n    },\n\n\n    /**\n     * Delete a container view to hold assigned parameter views.\n     * @param {Object} processor Processor with assignable parameters.\n     */\n    deleteRemoteGroup = function deleteRemoteGroup(processor) {\n        var n = groupViews.length;\n        while (--n >= 0) {\n            if (groupViews[n].hasProcessor(processor)) {\n                groupViews[n].terminate();\n                groupViews.splice(n, 1);\n                appView.renderLayout();\n                return false;\n            }\n        }\n    },\n\n\n    /**\n     * Add a parameter that is assigned.\n     * @param  {Object} param Processor parameter.\n     */\n    // addParameter = function(param) {\n    //     var n = groupViews.length;\n    //     while (--n >= 0) {\n    //         if (groupViews[n].hasParameter(param)) {\n    //             groupViews[n].addParameter(param, midiRemote.unassingParameter);\n    //             appView.renderLayout();\n    //             return;\n    //         }\n    //     }\n    // },\n\n    /**\n     * Remove a parameter that isn't assigned anymore.\n     * @param  {Object} param Processor parameter.\n     */\n    // removeParameter = function(param) {\n    //     var n = groupViews.length;\n    //     while (--n >= 0) {\n    //         if (groupViews[n].hasParameter(param)) {\n    //             groupViews[n].removeParameter(param);\n    //             appView.renderLayout();\n    //             return;\n    //         }\n    //     }\n    // };\n\n    that = specs.that || {};\n\n    init();\n\n    that.createRemoteGroup = createRemoteGroup;\n    that.deleteRemoteGroup = deleteRemoteGroup;\n    // that.addParameter = addParameter;\n    // that.removeParameter = removeParameter;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteGroupView;\n\nvar _selectors = __webpack_require__(0);\n\nvar _remote_item = __webpack_require__(58);\n\nvar _remote_item2 = _interopRequireDefault(_remote_item);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Group within overview list of all assigned MIDI controller assignments.\n * The items are grouped by processor.\n */\nfunction createRemoteGroupView(specs, my) {\n    var that,\n        store = specs.store,\n\n    // processor = specs.processor,\n    processorID = specs.id,\n        parentEl = specs.parentEl,\n        el,\n        listEl,\n        nameParam,\n        views = {},\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-group');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        parentEl.appendChild(el);\n\n        listEl = el.querySelector('.remote__group-list');\n\n        // listen for name parameter changes\n        // nameParam = processor.getParameters()['name'];\n        // if (nameParam) {\n        //     nameParam.addChangedCallback(setName);\n        //     setName(nameParam);\n        // }\n\n        setName(specs.name);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.CHANGE_PARAMETER:\n                    if (e.detail.action.processorID === processorID && e.detail.action.paramKey === 'name') {\n                        setName((0, _selectors.getProcessorByID)(processorID).params['name'].value);\n                    }\n                    break;\n\n                case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n                    if (e.detail.state.learnTargetProcessorID === processorID) {\n                        updateViews(e.detail.state.processors.find(function (processor) {\n                            return processor.id === processorID;\n                        }));\n                    }\n                    break;\n\n                case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                    if (e.detail.action.processorID === processorID) {\n                        updateViews(e.detail.state.processors.find(function (processor) {\n                            return processor.id === processorID;\n                        }));\n                    }\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        Object.values(views).forEach(function (view) {\n            view.terminate();\n        });\n        // var n = views.length;\n        // while (--n >= 0) {\n        //     views[n].terminate();\n        // }\n        parentEl.removeChild(el);\n        // nameParam.removeChangedCallback(setName);\n        views = null;\n        parentEl = null;\n    },\n        updateViews = function updateViews(processor) {\n        for (var key in processor.parameters) {\n            if (processor.parameters.hasOwnProperty(key)) {\n                var param = processor.parameters[key],\n                    isAssigned = param.isMidiControllable && param.remoteChannel && param.remoteCC,\n                    viewExists = views[key];\n                if (isAssigned && !viewExists) {\n                    addView(key, param);\n                } else if (!isAssigned && viewExists) {\n                    removeView(key);\n                }\n            }\n        }\n        el.dataset.hasAssignments = views.length > 0;\n    },\n        addView = function addView(key, param) {\n        views[key] = (0, _remote_item2.default)({\n            store: store,\n            paramKey: key,\n            param: param,\n            processorID: processorID,\n            parentEl: listEl\n        });\n    },\n        removeView = function removeView(key) {\n        views[key].terminate();\n        delete views[key];\n    },\n\n\n    /**\n     * Check if this view is for a certain processor.\n     * @param  {Object} proc MIDI processor object.\n     * @return {Boolean} True if the processors match.\n     */\n    // hasProcessor = function(proc) {\n    //     return proc === processor;\n    // },\n\n    /**\n     * Check if this view's processor has a certain parameter.\n     * @param  {Object} proc Parameter object.\n     * @return {Boolean} True if the parameter exists for the processor.\n     */\n    // hasParameter = function(param) {\n    //     return processor.hasParameter(param);\n    // },\n\n    /**\n     * Add a parameter that is assigned.\n     * @param  {Object} param Processor parameter.\n     * @param  {Function} unregisterCallback Callback for the unassign button click.\n     */\n    // addParameter = function(param, unregisterCallback) {\n    //     var itemView = ns.createRemoteItemView({\n    //         param: param,\n    //         parentEl: listEl,\n    //         unregisterCallback: unregisterCallback\n    //     });\n    //     itemViews.push(itemView);\n    //     updateGroupVisibility();\n    // },\n\n    /**\n     * Remove a parameter that isn't assigned anymore.\n     * @param  {Object} param Processor parameter.\n     */\n    // removeParameter = function(param) {\n    //     var n = itemViews.length;\n    //     while (--n >= 0) {\n    //         if (itemViews[n].hasParameter(param)) {\n    //             itemViews[n].terminate();\n    //             itemViews.splice(n, 1);\n    //             break;\n    //         }\n    //     }\n    //     updateGroupVisibility();\n    // },\n\n    /**\n     * If a group has no assignments its header is hidden.\n     */\n    updateGroupVisibility = function updateGroupVisibility() {\n        el.dataset.hasAssignments = itemViews.length > 0;\n    },\n\n\n    /**\n     * Set the group's header to the processor's name.\n     * @param {String} name Processor's name.\n     */\n    setName = function setName(name) {\n        el.querySelector('.remote__group-header-label').innerHTML = name;\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    // that.hasProcessor = hasProcessor;\n    // that.hasParameter = hasParameter;\n    // that.addParameter = addParameter;\n    // that.removeParameter = removeParameter;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteItemView;\n/**\n * View for a parameter that's linked to a remote MIDI controller.\n * The items are grouped by processor.\n */\nfunction createRemoteItemView(specs, my) {\n    var that,\n        store = specs.store,\n        paramKey = specs.paramKey,\n        param = specs.param,\n        processorID = specs.processorID,\n        parentEl = specs.parentEl,\n\n    // unregisterCallback = specs.unregisterCallback,\n    el,\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-item');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        el.querySelector('.remote__item-label').innerHTML = param.label;\n        el.querySelector('.remote__item-channel').innerHTML = param.remoteChannel;\n        el.querySelector('.remote__item-control').innerHTML = param.remoteCC;\n        parentEl.appendChild(el);\n\n        // add DOM event listeners\n        el.querySelector('.remote__item-delete').addEventListener('click', onUnregisterClick);\n        // set callback on parameter\n        // param.addRemoteStateCallback(changeRemoteState);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        el.querySelector('.remote__item-delete').removeEventListener('click', onUnregisterClick);\n        parentEl.removeChild(el);\n        param = null;\n        parentEl = null;\n    },\n\n\n    /**\n     * Unassign button click handler.\n     * @param  {Object} e Click event object.\n     */\n    onUnregisterClick = function onUnregisterClick(e) {\n        store.dispatch(store.getActions().unassignExternalControl(processorID, paramKey));\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     * @param {Function} callback Not used here.\n     */\n    changeRemoteState = function changeRemoteState(state, callback) {\n        switch (state) {\n            case 'assigned':\n                // TODO: normale tekst\n                break;\n            case 'inactive':\n                // TODO: tekst grijs of zoiets\n                break;\n        }\n    },\n\n\n    /**\n     * @return {String} Parameter key.\n     */\n    getKey = function getKey() {\n        return paramKey;\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getKey = getKey;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcz82ZWZmIl0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZUl0ZW1WaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJzdG9yZSIsInBhcmFtS2V5IiwicGFyYW0iLCJwcm9jZXNzb3JJRCIsInBhcmVudEVsIiwiZWwiLCJpbml0aWFsaXplIiwidGVtcGxhdGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbG9uZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImlubmVySFRNTCIsImxhYmVsIiwicmVtb3RlQ2hhbm5lbCIsInJlbW90ZUNDIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwib25VbnJlZ2lzdGVyQ2xpY2siLCJ0ZXJtaW5hdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwidW5hc3NpZ25FeHRlcm5hbENvbnRyb2wiLCJjaGFuZ2VSZW1vdGVTdGF0ZSIsInN0YXRlIiwiY2FsbGJhY2siLCJnZXRLZXkiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUl3QkEsb0I7QUFKeEI7Ozs7QUFJZSxTQUFTQSxvQkFBVCxDQUE4QkMsS0FBOUIsRUFBcUNDLEVBQXJDLEVBQXlDO0FBQ3BELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxRQUFRSCxNQUFNRyxLQURsQjtBQUFBLFFBRUlDLFdBQVdKLE1BQU1JLFFBRnJCO0FBQUEsUUFHSUMsUUFBUUwsTUFBTUssS0FIbEI7QUFBQSxRQUlJQyxjQUFjTixNQUFNTSxXQUp4QjtBQUFBLFFBS0lDLFdBQVdQLE1BQU1PLFFBTHJCOztBQU1JO0FBQ0FDLE1BUEo7QUFBQSxRQVNJQyxhQUFhLFNBQWJBLFVBQWEsR0FBVztBQUNwQjtBQUNBLFlBQUlDLFdBQVdDLFNBQVNDLGFBQVQsQ0FBdUIsdUJBQXZCLENBQWY7QUFDQSxZQUFJQyxRQUFRSCxTQUFTSSxPQUFULENBQWlCQyxTQUFqQixDQUEyQixJQUEzQixDQUFaO0FBQ0FQLGFBQUtLLE1BQU1HLGlCQUFYO0FBQ0FSLFdBQUdJLGFBQUgsQ0FBaUIscUJBQWpCLEVBQXdDSyxTQUF4QyxHQUFvRFosTUFBTWEsS0FBMUQ7QUFDQVYsV0FBR0ksYUFBSCxDQUFpQix1QkFBakIsRUFBMENLLFNBQTFDLEdBQXNEWixNQUFNYyxhQUE1RDtBQUNBWCxXQUFHSSxhQUFILENBQWlCLHVCQUFqQixFQUEwQ0ssU0FBMUMsR0FBc0RaLE1BQU1lLFFBQTVEO0FBQ0FiLGlCQUFTYyxXQUFULENBQXFCYixFQUFyQjs7QUFFQTtBQUNBQSxXQUFHSSxhQUFILENBQWlCLHNCQUFqQixFQUF5Q1UsZ0JBQXpDLENBQTBELE9BQTFELEVBQW1FQyxpQkFBbkU7QUFDQTtBQUNBO0FBQ0gsS0F2Qkw7OztBQXlCSTs7O0FBR0FDLGdCQUFZLFNBQVpBLFNBQVksR0FBVztBQUNuQmhCLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDYSxtQkFBekMsQ0FBNkQsT0FBN0QsRUFBc0VGLGlCQUF0RTtBQUNBaEIsaUJBQVNtQixXQUFULENBQXFCbEIsRUFBckI7QUFDQUgsZ0JBQVEsSUFBUjtBQUNBRSxtQkFBVyxJQUFYO0FBQ0gsS0FqQ0w7OztBQW1DSTs7OztBQUlBZ0Isd0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBU0ksQ0FBVCxFQUFZO0FBQzVCeEIsY0FBTXlCLFFBQU4sQ0FBZXpCLE1BQU0wQixVQUFOLEdBQW1CQyx1QkFBbkIsQ0FBMkN4QixXQUEzQyxFQUF3REYsUUFBeEQsQ0FBZjtBQUNILEtBekNMOzs7QUEyQ0k7Ozs7OztBQU1BMkIsd0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBU0MsS0FBVCxFQUFnQkMsUUFBaEIsRUFBMEI7QUFDMUMsZ0JBQVFELEtBQVI7QUFDSSxpQkFBSyxVQUFMO0FBQ0k7QUFDQTtBQUNKLGlCQUFLLFVBQUw7QUFDSTtBQUNBO0FBTlI7QUFRSCxLQTFETDs7O0FBNERJOzs7QUFHQUUsYUFBUyxTQUFUQSxNQUFTLEdBQVc7QUFDaEIsZUFBTzlCLFFBQVA7QUFDSCxLQWpFTDs7QUFtRUFGLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQU87O0FBRUFQLFNBQUtzQixTQUFMLEdBQWlCQSxTQUFqQjtBQUNBdEIsU0FBS2dDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFdBQU9oQyxJQUFQO0FBQ0giLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFZpZXcgZm9yIGEgcGFyYW1ldGVyIHRoYXQncyBsaW5rZWQgdG8gYSByZW1vdGUgTUlESSBjb250cm9sbGVyLlxuICogVGhlIGl0ZW1zIGFyZSBncm91cGVkIGJ5IHByb2Nlc3Nvci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUmVtb3RlSXRlbVZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHN0b3JlID0gc3BlY3Muc3RvcmUsXG4gICAgICAgIHBhcmFtS2V5ID0gc3BlY3MucGFyYW1LZXksXG4gICAgICAgIHBhcmFtID0gc3BlY3MucGFyYW0sXG4gICAgICAgIHByb2Nlc3NvcklEID0gc3BlY3MucHJvY2Vzc29ySUQsXG4gICAgICAgIHBhcmVudEVsID0gc3BlY3MucGFyZW50RWwsXG4gICAgICAgIC8vIHVucmVnaXN0ZXJDYWxsYmFjayA9IHNwZWNzLnVucmVnaXN0ZXJDYWxsYmFjayxcbiAgICAgICAgZWwsXG4gICAgICAgIFxuICAgICAgICBpbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgdGhlIERPTSBlbGVtZW50LlxuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLXJlbW90ZS1pdGVtJyk7XG4gICAgICAgICAgICBsZXQgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgIGVsID0gY2xvbmUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWxhYmVsJykuaW5uZXJIVE1MID0gcGFyYW0ubGFiZWw7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWNoYW5uZWwnKS5pbm5lckhUTUwgPSBwYXJhbS5yZW1vdGVDaGFubmVsO1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1jb250cm9sJykuaW5uZXJIVE1MID0gcGFyYW0ucmVtb3RlQ0M7XG4gICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCBET00gZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWRlbGV0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25VbnJlZ2lzdGVyQ2xpY2spO1xuICAgICAgICAgICAgLy8gc2V0IGNhbGxiYWNrIG9uIHBhcmFtZXRlclxuICAgICAgICAgICAgLy8gcGFyYW0uYWRkUmVtb3RlU3RhdGVDYWxsYmFjayhjaGFuZ2VSZW1vdGVTdGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIGJlZm9yZSB0aGlzIHZpZXcgaXMgZGVsZXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRlcm1pbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1kZWxldGUnKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uVW5yZWdpc3RlckNsaWNrKTtcbiAgICAgICAgICAgIHBhcmVudEVsLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgIHBhcmFtID0gbnVsbDtcbiAgICAgICAgICAgIHBhcmVudEVsID0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmFzc2lnbiBidXR0b24gY2xpY2sgaGFuZGxlci5cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBlIENsaWNrIGV2ZW50IG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIG9uVW5yZWdpc3RlckNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RvcmUuZ2V0QWN0aW9ucygpLnVuYXNzaWduRXh0ZXJuYWxDb250cm9sKHByb2Nlc3NvcklELCBwYXJhbUtleSkpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0YXRlIG9mIHRoZSBwYXJhbWV0ZXIgaW4gdGhlIGFzc2lnbm1lbnQgcHJvY2VzcyBjaGFuZ2VkLFxuICAgICAgICAgKiB0aGUgZWxlbWVudCB3aWxsIHNob3cgdGhpcyB2aXN1YWxseS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXRlIE5ldyBzdGF0ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBOb3QgdXNlZCBoZXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgY2hhbmdlUmVtb3RlU3RhdGUgPSBmdW5jdGlvbihzdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhc3NpZ25lZCc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IG5vcm1hbGUgdGVrc3RcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5hY3RpdmUnOlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB0ZWtzdCBncmlqcyBvZiB6b2lldHNcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBQYXJhbWV0ZXIga2V5LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0S2V5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1LZXk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgIHRoYXQgPSBzcGVjcy50aGF0IHx8IHt9O1xuICAgIFxuICAgIGluaXRpYWxpemUoKTtcbiAgICBcbiAgICB0aGF0LnRlcm1pbmF0ZSA9IHRlcm1pbmF0ZTtcbiAgICB0aGF0LmdldEtleSA9IGdldEtleTtcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3JlbW90ZV9pdGVtLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58\n");

/***/ })
/******/ ]);