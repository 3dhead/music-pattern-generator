/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Unchangeable application configuration settings.\n */\nvar PPQN = exports.PPQN = 480;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS9jb25maWcuanM/ZDg1NiJdLCJuYW1lcyI6WyJQUFFOIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7QUFHTyxJQUFNQSxzQkFBTyxHQUFiIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVuY2hhbmdlYWJsZSBhcHBsaWNhdGlvbiBjb25maWd1cmF0aW9uIHNldHRpbmdzLlxuICovXG5leHBvcnQgY29uc3QgUFBRTiA9IDQ4MDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9jb3JlL2NvbmZpZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBaseSettingView;\n\nvar _remote = __webpack_require__(30);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createBaseSettingView(specs, my) {\n    var that,\n        initialise = function initialise() {\n        // find template, add clone to settings panel\n        var template = document.querySelector('#template-setting-' + my.data.type);\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        specs.parentEl.appendChild(my.el);\n\n        // show label\n        my.el.querySelector('.setting__label').innerHTML = my.data.label;\n\n        if (my.data.isMidiControllable) {\n            my.changeRemoteState(specs.store.getState());\n        }\n\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.setValue(e.detail.state.processors.byId[my.processorID].params.byId[my.key].value);\n                }\n                break;\n\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.data = e.detail.state.processors.byId[my.processorID].params.byId[my.key];\n                    my.initData();\n                }\n                break;\n\n            case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n            case e.detail.actions.TOGGLE_MIDI_LEARN_TARGET:\n            case e.detail.actions.SELECT_PROCESSOR:\n            case e.detail.actions.DELETE_PROCESSOR:\n            case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n            case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                if (my.data.isMidiControllable) {\n                    my.changeRemoteState(e.detail.state);\n                }\n                break;\n        }\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.key = specs.key;\n    my.data = specs.data;\n    my.processorID = specs.processorID;\n    my.el;\n\n    that = that || {};\n    if (my.data.isMidiControllable) {\n        that = (0, _remote2.default)(specs, my);\n    }\n\n    initialise();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIProcessorBase;\n\nvar _connectorin = __webpack_require__(22);\n\nvar _connectorin2 = _interopRequireDefault(_connectorin);\n\nvar _connectorout = __webpack_require__(23);\n\nvar _connectorout2 = _interopRequireDefault(_connectorout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base functionality for all MIDI processors.\n */\nfunction createMIDIProcessorBase(specs, my) {\n    var that,\n        getType = function getType() {\n        return my.type;\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.type = specs.data.type, my.id = specs.data.id, my.params = specs.data.params.byId;\n\n    that = specs.that || {};\n    if (specs.data.inputs.allIds.length >= 1) {\n        that = (0, _connectorin2.default)(specs, my);\n    }\n    if (specs.data.outputs.allIds.length >= 1) {\n        that = (0, _connectorout2.default)(specs, my);\n    }\n    that.getType = getType;\n    that.getID = getID;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9wcm9jZXNzb3JiYXNlLmpzP2I3YmUiXSwibmFtZXMiOlsiY3JlYXRlTUlESVByb2Nlc3NvckJhc2UiLCJzcGVjcyIsIm15IiwidGhhdCIsImdldFR5cGUiLCJ0eXBlIiwiZ2V0SUQiLCJpZCIsImRhdGEiLCJwYXJhbXMiLCJieUlkIiwiaW5wdXRzIiwiYWxsSWRzIiwibGVuZ3RoIiwib3V0cHV0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBTXdCQSx1Qjs7QUFOeEI7Ozs7QUFDQTs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLHVCQUFULENBQWlDQyxLQUFqQyxFQUF3Q0MsRUFBeEMsRUFBNEM7QUFDdkQsUUFBSUMsSUFBSjtBQUFBLFFBRUlDLFVBQVUsU0FBVkEsT0FBVSxHQUFXO0FBQ2pCLGVBQU9GLEdBQUdHLElBQVY7QUFDSCxLQUpMO0FBQUEsUUFNSUMsUUFBUSxTQUFSQSxLQUFRLEdBQVc7QUFDZixlQUFPSixHQUFHSyxFQUFWO0FBQ0gsS0FSTDs7QUFVQUwsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdHLElBQUgsR0FBVUosTUFBTU8sSUFBTixDQUFXSCxJQUFyQixFQUNBSCxHQUFHSyxFQUFILEdBQVFOLE1BQU1PLElBQU4sQ0FBV0QsRUFEbkIsRUFFQUwsR0FBR08sTUFBSCxHQUFZUixNQUFNTyxJQUFOLENBQVdDLE1BQVgsQ0FBa0JDLElBRjlCOztBQUlBUCxXQUFPRixNQUFNRSxJQUFOLElBQWMsRUFBckI7QUFDQSxRQUFJRixNQUFNTyxJQUFOLENBQVdHLE1BQVgsQ0FBa0JDLE1BQWxCLENBQXlCQyxNQUF6QixJQUFtQyxDQUF2QyxFQUEwQztBQUN0Q1YsZUFBTywyQkFBc0JGLEtBQXRCLEVBQTZCQyxFQUE3QixDQUFQO0FBQ0g7QUFDRCxRQUFJRCxNQUFNTyxJQUFOLENBQVdNLE9BQVgsQ0FBbUJGLE1BQW5CLENBQTBCQyxNQUExQixJQUFvQyxDQUF4QyxFQUEyQztBQUN2Q1YsZUFBTyw0QkFBdUJGLEtBQXZCLEVBQThCQyxFQUE5QixDQUFQO0FBQ0g7QUFDREMsU0FBS0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0FELFNBQUtHLEtBQUwsR0FBYUEsS0FBYjs7QUFFQSxXQUFPSCxJQUFQO0FBQ0giLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVNSURJQ29ubmVjdG9ySW4gZnJvbSAnLi9jb25uZWN0b3Jpbic7XG5pbXBvcnQgY3JlYXRlTUlESUNvbm5lY3Rvck91dCBmcm9tICcuL2Nvbm5lY3Rvcm91dCc7XG5cbi8qKlxuICogQmFzZSBmdW5jdGlvbmFsaXR5IGZvciBhbGwgTUlESSBwcm9jZXNzb3JzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNSURJUHJvY2Vzc29yQmFzZShzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIGdldFR5cGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBteS50eXBlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0SUQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBteS5pZDtcbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnR5cGUgPSBzcGVjcy5kYXRhLnR5cGUsXG4gICAgbXkuaWQgPSBzcGVjcy5kYXRhLmlkLFxuICAgIG15LnBhcmFtcyA9IHNwZWNzLmRhdGEucGFyYW1zLmJ5SWQ7XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgaWYgKHNwZWNzLmRhdGEuaW5wdXRzLmFsbElkcy5sZW5ndGggPj0gMSkge1xuICAgICAgICB0aGF0ID0gY3JlYXRlTUlESUNvbm5lY3RvckluKHNwZWNzLCBteSk7XG4gICAgfVxuICAgIGlmIChzcGVjcy5kYXRhLm91dHB1dHMuYWxsSWRzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIHRoYXQgPSBjcmVhdGVNSURJQ29ubmVjdG9yT3V0KHNwZWNzLCBteSk7XG4gICAgfVxuICAgIHRoYXQuZ2V0VHlwZSA9IGdldFR5cGU7XG4gICAgdGhhdC5nZXRJRCA9IGdldElEO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL21pZGkvcHJvY2Vzc29yYmFzZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.memoize = memoize;\nexports.getThemeColors = getThemeColors;\nvar themeColors = {};\n\nfunction memoize(state) {\n    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var actions = arguments[2];\n\n    switch (action.type) {\n        case actions.SET_PROJECT:\n        case actions.NEW_PROJECT:\n        case actions.SET_THEME:\n            document.querySelector('#app').dataset.theme = state.theme;\n            var themeStyles = window.getComputedStyle(document.querySelector('[data-theme]'));\n            themeColors.colorHigh = themeStyles.getPropertyValue('--text-color'), themeColors.colorMid = themeStyles.getPropertyValue('--border-color'), themeColors.colorLow = themeStyles.getPropertyValue('--panel-bg-color');\n            break;\n    }\n}\n\n/**\n * Memoised selector to access processors by id as object key.\n * Recreates the memoised data each time a processor is created or deleted.\n */\nfunction getThemeColors() {\n    return themeColors;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc2VsZWN0b3JzLmpzPzFmY2MiXSwibmFtZXMiOlsibWVtb2l6ZSIsImdldFRoZW1lQ29sb3JzIiwidGhlbWVDb2xvcnMiLCJzdGF0ZSIsImFjdGlvbiIsImFjdGlvbnMiLCJ0eXBlIiwiU0VUX1BST0pFQ1QiLCJORVdfUFJPSkVDVCIsIlNFVF9USEVNRSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGFzZXQiLCJ0aGVtZSIsInRoZW1lU3R5bGVzIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbG9ySGlnaCIsImdldFByb3BlcnR5VmFsdWUiLCJjb2xvck1pZCIsImNvbG9yTG93Il0sIm1hcHBpbmdzIjoiOzs7OztRQUVnQkEsTyxHQUFBQSxPO1FBa0JBQyxjLEdBQUFBLGM7QUFwQmhCLElBQU1DLGNBQWMsRUFBcEI7O0FBRU8sU0FBU0YsT0FBVCxDQUFpQkcsS0FBakIsRUFBOEM7QUFBQSxRQUF0QkMsTUFBc0IsdUVBQWIsRUFBYTtBQUFBLFFBQVRDLE9BQVM7O0FBQ2pELFlBQVFELE9BQU9FLElBQWY7QUFDSSxhQUFLRCxRQUFRRSxXQUFiO0FBQ0EsYUFBS0YsUUFBUUcsV0FBYjtBQUNBLGFBQUtILFFBQVFJLFNBQWI7QUFDSUMscUJBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsRUFBK0JDLE9BQS9CLENBQXVDQyxLQUF2QyxHQUErQ1YsTUFBTVUsS0FBckQ7QUFDQSxnQkFBTUMsY0FBY0MsT0FBT0MsZ0JBQVAsQ0FBd0JOLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBeEIsQ0FBcEI7QUFDQVQsd0JBQVllLFNBQVosR0FBd0JILFlBQVlJLGdCQUFaLENBQTZCLGNBQTdCLENBQXhCLEVBQ0FoQixZQUFZaUIsUUFBWixHQUF1QkwsWUFBWUksZ0JBQVosQ0FBNkIsZ0JBQTdCLENBRHZCLEVBRUFoQixZQUFZa0IsUUFBWixHQUF1Qk4sWUFBWUksZ0JBQVosQ0FBNkIsa0JBQTdCLENBRnZCO0FBR0E7QUFUUjtBQVdIOztBQUVEOzs7O0FBSU8sU0FBU2pCLGNBQVQsR0FBMEI7QUFDN0IsV0FBT0MsV0FBUDtBQUNIIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0aGVtZUNvbG9ycyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVtb2l6ZShzdGF0ZSwgYWN0aW9uID0ge30sIGFjdGlvbnMpIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgYWN0aW9ucy5TRVRfUFJPSkVDVDpcbiAgICAgICAgY2FzZSBhY3Rpb25zLk5FV19QUk9KRUNUOlxuICAgICAgICBjYXNlIGFjdGlvbnMuU0VUX1RIRU1FOlxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FwcCcpLmRhdGFzZXQudGhlbWUgPSBzdGF0ZS50aGVtZTtcbiAgICAgICAgICAgIGNvbnN0IHRoZW1lU3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdGhlbWVdJykpO1xuICAgICAgICAgICAgdGhlbWVDb2xvcnMuY29sb3JIaWdoID0gdGhlbWVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnLS10ZXh0LWNvbG9yJyksXG4gICAgICAgICAgICB0aGVtZUNvbG9ycy5jb2xvck1pZCA9IHRoZW1lU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tYm9yZGVyLWNvbG9yJyksXG4gICAgICAgICAgICB0aGVtZUNvbG9ycy5jb2xvckxvdyA9IHRoZW1lU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tcGFuZWwtYmctY29sb3InKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuXG4vKipcbiAqIE1lbW9pc2VkIHNlbGVjdG9yIHRvIGFjY2VzcyBwcm9jZXNzb3JzIGJ5IGlkIGFzIG9iamVjdCBrZXkuXG4gKiBSZWNyZWF0ZXMgdGhlIG1lbW9pc2VkIGRhdGEgZWFjaCB0aW1lIGEgcHJvY2Vzc29yIGlzIGNyZWF0ZWQgb3IgZGVsZXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRoZW1lQ29sb3JzKCkge1xuICAgIHJldHVybiB0aGVtZUNvbG9ycztcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9zdGF0ZS9zZWxlY3RvcnMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorBaseView;\nfunction createCanvasProcessorBaseView(specs, my) {\n    var that,\n        initialiseBase = function initialiseBase() {},\n        terminateBase = function terminateBase() {},\n        getPosition2d = function getPosition2d() {\n        return { x: my.positionX, y: my.positionY };\n    },\n        getType = function getType() {\n        return my.type;\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.params = specs.data.params.byId;\n    my.store = specs.store;\n    my.type = specs.data.type;\n    my.id = specs.data.id;\n    my.positionX = specs.data.positionX;\n    my.positionY = specs.data.positionY;\n    my.colorHigh = '#cccccc';\n    my.colorMid = '#dddddd';\n    my.colorLow = '#eeeeee';\n\n    that = specs.that || {};\n\n    initialiseBase();\n\n    that.terminateBase = terminateBase;\n    that.getPosition2d = getPosition2d;\n    that.getID = getID;\n    that.getType = getType;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9jYW52YXNwcm9jZXNzb3JiYXNlLmpzP2VjMjkiXSwibmFtZXMiOlsiY3JlYXRlQ2FudmFzUHJvY2Vzc29yQmFzZVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImluaXRpYWxpc2VCYXNlIiwidGVybWluYXRlQmFzZSIsImdldFBvc2l0aW9uMmQiLCJ4IiwicG9zaXRpb25YIiwieSIsInBvc2l0aW9uWSIsImdldFR5cGUiLCJ0eXBlIiwiZ2V0SUQiLCJpZCIsInBhcmFtcyIsImRhdGEiLCJieUlkIiwic3RvcmUiLCJjb2xvckhpZ2giLCJjb2xvck1pZCIsImNvbG9yTG93Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFBd0JBLDZCO0FBQVQsU0FBU0EsNkJBQVQsQ0FBdUNDLEtBQXZDLEVBQThDQyxFQUE5QyxFQUFrRDtBQUM3RCxRQUFJQyxJQUFKO0FBQUEsUUFFSUMsaUJBQWlCLFNBQWpCQSxjQUFpQixHQUFXLENBQzNCLENBSEw7QUFBQSxRQUtJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVcsQ0FDMUIsQ0FOTDtBQUFBLFFBUUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPLEVBQUVDLEdBQUdMLEdBQUdNLFNBQVIsRUFBbUJDLEdBQUdQLEdBQUdRLFNBQXpCLEVBQVA7QUFDSCxLQVZMO0FBQUEsUUFZSUMsVUFBVSxTQUFWQSxPQUFVLEdBQVc7QUFDakIsZUFBT1QsR0FBR1UsSUFBVjtBQUNILEtBZEw7QUFBQSxRQWdCSUMsUUFBUSxTQUFSQSxLQUFRLEdBQVc7QUFDZixlQUFPWCxHQUFHWSxFQUFWO0FBQ0gsS0FsQkw7O0FBb0JBWixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR2EsTUFBSCxHQUFZZCxNQUFNZSxJQUFOLENBQVdELE1BQVgsQ0FBa0JFLElBQTlCO0FBQ0FmLE9BQUdnQixLQUFILEdBQVdqQixNQUFNaUIsS0FBakI7QUFDQWhCLE9BQUdVLElBQUgsR0FBVVgsTUFBTWUsSUFBTixDQUFXSixJQUFyQjtBQUNBVixPQUFHWSxFQUFILEdBQVFiLE1BQU1lLElBQU4sQ0FBV0YsRUFBbkI7QUFDQVosT0FBR00sU0FBSCxHQUFlUCxNQUFNZSxJQUFOLENBQVdSLFNBQTFCO0FBQ0FOLE9BQUdRLFNBQUgsR0FBZVQsTUFBTWUsSUFBTixDQUFXTixTQUExQjtBQUNBUixPQUFHaUIsU0FBSCxHQUFlLFNBQWY7QUFDQWpCLE9BQUdrQixRQUFILEdBQWMsU0FBZDtBQUNBbEIsT0FBR21CLFFBQUgsR0FBYyxTQUFkOztBQUVBbEIsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBQzs7QUFFQUQsU0FBS0UsYUFBTCxHQUFxQkEsYUFBckI7QUFDQUYsU0FBS0csYUFBTCxHQUFxQkEsYUFBckI7QUFDQUgsU0FBS1UsS0FBTCxHQUFhQSxLQUFiO0FBQ0FWLFNBQUtRLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFdBQU9SLElBQVA7QUFDSCIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzUHJvY2Vzc29yQmFzZVZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG5cbiAgICAgICAgaW5pdGlhbGlzZUJhc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgfSxcblxuICAgICAgICB0ZXJtaW5hdGVCYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBnZXRQb3NpdGlvbjJkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4geyB4OiBteS5wb3NpdGlvblgsIHk6IG15LnBvc2l0aW9uWSB9O1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG15LnR5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBnZXRJRCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG15LmlkO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkucGFyYW1zID0gc3BlY3MuZGF0YS5wYXJhbXMuYnlJZDtcbiAgICBteS5zdG9yZSA9IHNwZWNzLnN0b3JlO1xuICAgIG15LnR5cGUgPSBzcGVjcy5kYXRhLnR5cGU7XG4gICAgbXkuaWQgPSBzcGVjcy5kYXRhLmlkO1xuICAgIG15LnBvc2l0aW9uWCA9IHNwZWNzLmRhdGEucG9zaXRpb25YO1xuICAgIG15LnBvc2l0aW9uWSA9IHNwZWNzLmRhdGEucG9zaXRpb25ZO1xuICAgIG15LmNvbG9ySGlnaCA9ICcjY2NjY2NjJztcbiAgICBteS5jb2xvck1pZCA9ICcjZGRkZGRkJztcbiAgICBteS5jb2xvckxvdyA9ICcjZWVlZWVlJztcbiAgICBcbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcblxuICAgIGluaXRpYWxpc2VCYXNlKCk7XG4gICAgXG4gICAgdGhhdC50ZXJtaW5hdGVCYXNlID0gdGVybWluYXRlQmFzZTtcbiAgICB0aGF0LmdldFBvc2l0aW9uMmQgPSBnZXRQb3NpdGlvbjJkO1xuICAgIHRoYXQuZ2V0SUQgPSBnZXRJRDtcbiAgICB0aGF0LmdldFR5cGUgPSBnZXRUeXBlO1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvY2FudmFzcHJvY2Vzc29yYmFzZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createUUID = createUUID;\n/**\n * Utilities\n * Mouse or touch event detection.\n */\nvar util = exports.util = function () {\n    var isTouchDevice = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch;\n\n    /**\n     * Type of events to use, touch or mouse\n     * @type {String}\n     */\n    var eventType = {\n        start: isTouchDevice ? 'touchstart' : 'mousedown',\n        end: isTouchDevice ? 'touchend' : 'mouseup',\n        click: isTouchDevice ? 'touchend' : 'click',\n        move: isTouchDevice ? 'touchmove' : 'mousemove'\n    };\n\n    return {\n        isTouchDevice: isTouchDevice,\n        eventType: eventType\n    };\n}();\n\n/**\n * Create a fairly unique ID.\n * @see https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\nfunction createUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS91dGlsLmpzPzg5OWEiXSwibmFtZXMiOlsiY3JlYXRlVVVJRCIsInV0aWwiLCJpc1RvdWNoRGV2aWNlIiwid2luZG93IiwiRG9jdW1lbnRUb3VjaCIsImRvY3VtZW50IiwiZXZlbnRUeXBlIiwic3RhcnQiLCJlbmQiLCJjbGljayIsIm1vdmUiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwidiIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7OztRQTRCZ0JBLFUsR0FBQUEsVTtBQTVCaEI7Ozs7QUFJTyxJQUFNQyxzQkFBUyxZQUFXO0FBQzdCLFFBQU1DLGdCQUFnQixrQkFBa0JDLE1BQWxCLElBQTRCQSxPQUFPQyxhQUFQLElBQXdCQyxvQkFBb0JELGFBQTlGOztBQUVBOzs7O0FBSUEsUUFBTUUsWUFBWTtBQUNkQyxlQUFPTCxnQkFBZ0IsWUFBaEIsR0FBK0IsV0FEeEI7QUFFZE0sYUFBS04sZ0JBQWdCLFVBQWhCLEdBQTZCLFNBRnBCO0FBR2RPLGVBQU9QLGdCQUFnQixVQUFoQixHQUE2QixPQUh0QjtBQUlkUSxjQUFNUixnQkFBZ0IsV0FBaEIsR0FBOEI7QUFKdEIsS0FBbEI7O0FBT0EsV0FBTztBQUNIQSx1QkFBZUEsYUFEWjtBQUVISSxtQkFBV0E7QUFGUixLQUFQO0FBSUgsQ0FsQm1CLEVBQWI7O0FBb0JQOzs7O0FBSU8sU0FBU04sVUFBVCxHQUFzQjtBQUN6QixXQUFPLHVDQUF1Q1csT0FBdkMsQ0FBK0MsT0FBL0MsRUFBd0QsVUFBU0MsQ0FBVCxFQUFZO0FBQ3ZFLFlBQUlDLElBQUlDLEtBQUtDLE1BQUwsS0FBZ0IsRUFBaEIsR0FBcUIsQ0FBN0I7QUFBQSxZQUFnQ0MsSUFBSUosS0FBSyxHQUFMLEdBQVdDLENBQVgsR0FBZ0JBLElBQUksR0FBSixHQUFVLEdBQTlEO0FBQ0EsZUFBT0csRUFBRUMsUUFBRixDQUFXLEVBQVgsQ0FBUDtBQUNILEtBSE0sQ0FBUDtBQUlIIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllc1xuICogTW91c2Ugb3IgdG91Y2ggZXZlbnQgZGV0ZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgdXRpbCA9ICggZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaXNUb3VjaERldmljZSA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g7XG4gICAgXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBldmVudHMgdG8gdXNlLCB0b3VjaCBvciBtb3VzZVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgY29uc3QgZXZlbnRUeXBlID0ge1xuICAgICAgICBzdGFydDogaXNUb3VjaERldmljZSA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLFxuICAgICAgICBlbmQ6IGlzVG91Y2hEZXZpY2UgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnLFxuICAgICAgICBjbGljazogaXNUb3VjaERldmljZSA/ICd0b3VjaGVuZCcgOiAnY2xpY2snLFxuICAgICAgICBtb3ZlOiBpc1RvdWNoRGV2aWNlID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJyxcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIGlzVG91Y2hEZXZpY2U6IGlzVG91Y2hEZXZpY2UsXG4gICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlXG4gICAgfVxufSkoKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmYWlybHkgdW5pcXVlIElELlxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvY3JlYXRlLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvY29yZS91dGlsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/config.json\": 18,\n\t\"./euclidfx/config.json\": 19,\n\t\"./output/config.json\": 20\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciBeXFwuXFwvLipcXC9jb25maWdcXC5qc29uJD83Yjc5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvY29uZmlnLmpzb25cIjogMTgsXG5cdFwiLi9ldWNsaWRmeC9jb25maWcuanNvblwiOiAxOSxcblx0XCIuL291dHB1dC9jb25maWcuanNvblwiOiAyMFxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDY7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciBeXFwuXFwvLipcXC9jb25maWdcXC5qc29uJFxuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(2);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _config = __webpack_require__(0);\n\nvar _euclid = __webpack_require__(8);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        position = 0,\n        duration = 0,\n        noteDuration = void 0,\n        euclidPattern = [],\n        pulsesOnly = [];\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChanges);\n        updatePattern(true);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updatePulsesAndRotation();\n                            updatePattern(true);\n                            break;\n                        case 'pulses':\n                            updatePattern(true);\n                            break;\n                        case 'rotation':\n                        case 'is_triplets':\n                        case 'rate':\n                        case 'note_length':\n                            updatePattern();\n                            break;\n                        case 'is_mute':\n                            break;\n                    }\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice.\n     * timeline start        now      scanStart     scanEnd\n     * |----------------------|-----------|------------|\n     *                        |-----------| \n     *                        nowToScanStart\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart, in ticks.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     * @param {Array} processorEvents Array to collect processor generated events to displaying the view.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n\n        // abort if the processor is muted\n        if (my.params.is_mute.value) {\n            return;\n        }\n\n        // if the pattern loops during this timespan.\n        var localScanStart = scanStart % duration,\n            localScanEnd = scanEnd % duration,\n            localScanStart2 = false,\n            localScanEnd2;\n        if (localScanStart > localScanEnd) {\n            localScanStart2 = 0, localScanEnd2 = localScanEnd;\n            localScanEnd = duration;\n        }\n\n        // check if notes occur during the current timespan\n        var n = pulsesOnly.length;\n        for (var i = 0; i < n; i++) {\n            var pulseStartTime = pulsesOnly[i].startTime,\n                scanStartToNoteStart = pulseStartTime - localScanStart,\n                isOn = localScanStart <= pulseStartTime && pulseStartTime < localScanEnd;\n\n            // if pattern looped back to the start\n            if (localScanStart2 !== false) {\n                scanStartToNoteStart = pulseStartTime - localScanStart + duration;\n                isOn = isOn || localScanStart2 <= pulseStartTime && pulseStartTime < localScanEnd2;\n            }\n\n            // if a note should play\n            if (isOn) {\n                var channel = my.params.channel_out.value,\n                    pitch = my.params.pitch_out.value,\n                    velocity = my.params.velocity_out.value,\n                    pulseStartTimestamp = scanStart + scanStartToNoteStart;\n\n                // send the Note On message\n                my.setOutputData({\n                    timestampTicks: pulseStartTimestamp,\n                    durationTicks: noteDuration,\n                    channel: channel,\n                    type: 'note',\n                    pitch: pitch,\n                    velocity: velocity\n                });\n\n                // add events to processorEvents for the canvas to show them\n                if (!processorEvents[my.id]) {\n                    processorEvents[my.id] = [];\n                }\n\n                var delayFromNowToNoteStart = (nowToScanStart + scanStartToNoteStart) * ticksToMsMultiplier;\n                processorEvents[my.id].push({\n                    stepIndex: pulsesOnly[i].stepIndex,\n                    delayFromNowToNoteStart: delayFromNowToNoteStart,\n                    delayFromNowToNoteEnd: delayFromNowToNoteStart + noteDuration * ticksToMsMultiplier\n                });\n            }\n        }\n\n        if (localScanStart2 !== false) {\n            localScanStart = localScanStart2;\n        }\n    },\n\n\n    /**\n     * After a change of the steps parameter update the pulses and rotation parameters.\n     */\n    updatePulsesAndRotation = function updatePulsesAndRotation() {\n        store.dispatch(store.getActions().recreateParameter(my.id, 'pulses', { max: my.params.steps.value }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'rotation', { max: my.params.steps.value - 1 }));\n        store.dispatch(store.getActions().changeParameter(my.id, 'pulses', my.params.pulses.value));\n        store.dispatch(store.getActions().changeParameter(my.id, 'rotation', my.params.rotation.value));\n    },\n\n\n    /**\n     * Update all pattern properties.\n     * @param {Boolean} isEuclidChange Steps, pulses or rotation change.\n     */\n    updatePattern = function updatePattern(isEuclidChange) {\n        // euclidean pattern properties, changes in steps, pulses, rotation\n        if (isEuclidChange) {\n            euclidPattern = (0, _euclid.getEuclidPattern)(my.params.steps.value, my.params.pulses.value);\n            euclidPattern = (0, _euclid.rotateEuclidPattern)(euclidPattern, my.params.rotation.value);\n        }\n\n        // playback properties, changes in isTriplets, rate, noteLength\n        var rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        noteDuration = my.params.note_length.value * _config.PPQN;\n        duration = my.params.steps.value * stepDuration;\n        position = position % duration;\n\n        // create array of note start times in ticks\n        pulsesOnly.length = 0;\n        var n = euclidPattern.length;\n        for (var i = 0; i < n; i++) {\n            if (euclidPattern[i]) {\n                pulsesOnly.push({\n                    startTime: i * stepDuration,\n                    stepIndex: i\n                });\n            }\n        }\n    };\n\n    my = my || {};\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    var cacheKey = steps + '_' + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    var pauses = steps - pulses;\n    if (pulses >= steps) {\n        return buildPatternListFilledWith(steps, true);\n    } else if (steps == 1) {\n        return buildPatternListFilledWith(steps, pulses == 1);\n    } else if (steps == 0 || pulses == 0) {\n        return buildPatternListFilledWith(steps, false);\n    } else {\n        var distribution = [];\n        for (var i = 0; i < steps; i++) {\n            distribution.push([i < pulses]);\n        }\n        return splitDistributionAndContinue(distribution, pauses);\n    }\n}\n\n/**\n * Divide as much as possible of the remainder over the distribution arrays.\n * @param {Array} distributionArray Two dimensional array of booleans.\n * @param {Number} remainder Amount of items not yet in distribution array.\n * @return {Function} One dimensional array of booleans, the Euclidean pattern.\n */\nfunction splitDistributionAndContinue(distributionArray, remainder) {\n    var newDistributionArray = [],\n        newRemainderArray = [];\n    if (remainder == 0) {\n        newDistributionArray = distributionArray;\n    } else {\n        var newDistributionSize = distributionArray.length - remainder;\n        for (var i = 0, n = distributionArray.length; i < n; i++) {\n            if (i < newDistributionSize) {\n                newDistributionArray.push(distributionArray[i]);\n            } else {\n                newRemainderArray.push(distributionArray[i]);\n            }\n        }\n    }\n    return bjorklund(newDistributionArray, newRemainderArray);\n}\n\n/**\n * Divide as much as possible of the remainder over the distribution arrays.\n * @param {Object} distributionArray Two dimensional array.\n * @param {Object} remainderArray Two dimensional array.\n * @return {Object} One dimensional array of booleans, the Euclidean pattern.\n */\nfunction bjorklund(distributionArray, remainderArray) {\n    // handy for debugging\n    // console.log('distributionArray', toStringArrayList(distributionArray)); \n    // console.log('remainderArray', toStringArrayList(remainderArray));\n\n    if (remainderArray.length <= 1) {\n        return flattenArrays([distributionArray, remainderArray]);\n    } else {\n        var fullRounds = Math.floor(remainderArray.length / distributionArray.length),\n            remainder = remainderArray.length % distributionArray.length,\n            newRemainder = remainder == 0 ? 0 : distributionArray.length - remainder;\n        for (var i = 0; i < fullRounds; i++) {\n            var p = distributionArray.length;\n            for (var j = 0; j < p; j++) {\n                distributionArray[j].push(remainderArray.shift());\n            }\n        }\n        for (var _i = 0; _i < remainder; _i++) {\n            distributionArray[_i].push(remainderArray.shift());\n        }\n\n        return splitDistributionAndContinue(distributionArray, newRemainder);\n    }\n}\n\n/**\n * Create a pattern filled with only pulses or silences.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Boolen} value Value to fill the array with, true for pulses.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction buildPatternListFilledWith(steps, value) {\n    var distribution = [];\n    for (var i = 0; i < steps; i++) {\n        distribution.push(value);\n    }\n    return distribution;\n}\n\n/**\n * Flatten a multidimensional array.\n * @param {Object} arr The array to flatten.\n * @return {Object} One dimensional flattened array.\n */\nfunction flattenArrays(arr) {\n    return arr.reduce(function (flat, toFlatten) {\n        return flat.concat(Array.isArray(toFlatten) ? flattenArrays(toFlatten) : toFlatten);\n    }, []);\n}\n\nfunction toStringArrayList(arrayList) {\n    var str = '';\n    for (var i = 0, n = arrayList.length; i < n; i++) {\n        str += '[' + arrayList[i] + ']';\n    }\n    return str;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(2);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _config = __webpack_require__(0);\n\nvar _euclid = __webpack_require__(10);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        position = 0,\n        duration = 0,\n        stepDuration = 0,\n        euclidPattern = [],\n        params = {};\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChanges);\n        updateEffectParameters(specs.data.params.byId);\n        updateRelativeSetting(specs.data.params.byId);\n        updatePattern(true);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updatePulsesAndRotation();\n                            updatePattern(true);\n                            break;\n                        case 'pulses':\n                            updatePattern(true);\n                            break;\n                        case 'rotation':\n                        case 'is_triplets':\n                        case 'rate':\n                            updatePattern();\n                            break;\n                        case 'target':\n                            updateTarget(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                        case 'low':\n                        case 'high':\n                            updateEffectParameters(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                        case 'relative':\n                            updateRelativeSetting(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                    }\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice. This will\n     * - Get events waiting at the input\n     * - Process them according to the current parameter settings.\n     * - Send the processed events to the output.\n     * - Add the events to the processorEvents parameter for display in the view.\n     * \n     * Events are plain objects with properties:\n     * @param {String} type 'note'\n     * @param {Number} timestampTicks Event start time, meaured from timeline start\n     * @param {Number} durationTicks\n     * @param {Number} channel 1 - 16\n     * @param {Number} velocity 0 - 127\n     * @param {Number} pitch 0 - 127\n     * \n     * This method's parameters:\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart, in ticks\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     * @param {Array} processorEvents Array to collect processor generated events to display in the view.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n        // retrieve events waiting at the processor's input\n        var inputData = my.getInputData();\n\n        // abort if there's nothing to process\n        if (inputData.length === 0) {\n            return;\n        }\n\n        // calculate the processed timespan's position within the pattern, \n        // taking into account the pattern looping during this timespan.\n        var localScanStart = scanStart % duration,\n            localScanEnd = scanEnd % duration,\n            localScanStart2 = false,\n            localScanEnd2;\n        if (localScanStart > localScanEnd) {\n            localScanStart2 = 0, localScanEnd2 = localScanEnd;\n            localScanEnd = duration;\n        }\n\n        for (var i = 0, n = inputData.length; i < n; i++) {\n            var event = inputData[i];\n\n            // handle only MIDI Note events\n            if (event.type === 'note') {\n\n                // calculate the state of the effect at the event's time within the pattern\n                var stepIndex = Math.floor(event.timestampTicks % duration / stepDuration),\n                    state = euclidPattern[stepIndex],\n                    effectValue = state ? params.high : params.low;\n\n                // apply the effect to the event's target parameter\n                switch (params.target) {\n                    case 'velocity':\n                        event.velocity = params.relative ? event.velocity + effectValue : effectValue;\n                        event.velocity = Math.max(0, Math.min(event.velocity, 127));\n                        break;\n                    case 'pitch':\n                        event.pitch = params.relative ? event.pitch + effectValue : effectValue;\n                        event.pitch = Math.max(0, Math.min(event.pitch, 127));\n                        break;\n                    case 'channel':\n                        event.channel = params.relative ? event.channel + effectValue : effectValue;\n                        event.channel = Math.max(1, Math.min(event.channel, 16));\n                        break;\n                }\n\n                // add events to processorEvents for the canvas to show them\n                if (!processorEvents[my.id]) {\n                    processorEvents[my.id] = [];\n                }\n\n                var delayFromNowToNoteStart = (event.timestampTicks - scanStart) * ticksToMsMultiplier;\n                processorEvents[my.id].push({\n                    stepIndex: stepIndex,\n                    delayFromNowToNoteStart: delayFromNowToNoteStart,\n                    delayFromNowToNoteEnd: delayFromNowToNoteStart + event.durationTicks * ticksToMsMultiplier\n                });\n            }\n\n            // push the event to the processor's output\n            my.setOutputData(event);\n        }\n    },\n\n\n    /**\n     * After a change of the steps parameter update the pulses and rotation parameters.\n     */\n    updatePulsesAndRotation = function updatePulsesAndRotation() {\n        store.dispatch(store.getActions().recreateParameter(my.id, 'pulses', { max: my.params.steps.value }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'rotation', { max: my.params.steps.value - 1 }));\n        store.dispatch(store.getActions().changeParameter(my.id, 'pulses', my.params.pulses.value));\n        store.dispatch(store.getActions().changeParameter(my.id, 'rotation', my.params.rotation.value));\n    },\n\n\n    /**\n     * Update all pattern properties.\n     * @param {Boolean} isEuclidChange Steps, pulses or rotation change.\n     */\n    updatePattern = function updatePattern(isEuclidChange) {\n        // euclidean pattern properties, changes in steps, pulses, rotation\n        if (isEuclidChange) {\n            euclidPattern = (0, _euclid.getEuclidPattern)(my.params.steps.value, my.params.pulses.value);\n            euclidPattern = (0, _euclid.rotateEuclidPattern)(euclidPattern, my.params.rotation.value);\n        }\n\n        // playback properties, changes in isTriplets and rate\n        var rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value;\n        stepDuration = rate * _config.PPQN;\n        duration = my.params.steps.value * stepDuration;\n    },\n\n\n    /**\n     * Effect target changed.\n     * @param {Object} parameters Parameters object from state.\n     */\n    updateTarget = function updateTarget(parameters) {\n        params.target = parameters.target.value;\n\n        var min = void 0,\n            max = void 0,\n            lowValue = void 0,\n            highValue = void 0;\n\n        // set minimum and maximum value according to target type\n        switch (parameters.target.value) {\n            case 'velocity':\n            case 'pitch':\n                min = parameters.relative.value ? -127 : 0;\n                max = 127;\n                break;\n            case 'channel':\n                min = parameters.relative.value ? -16 : 1;\n                max = 16;\n                break;\n            case 'length':\n                min = 0;\n                max = 1;\n                break;\n            case 'output':\n                min = 0;\n                max = 1;\n                break;\n        }\n\n        // clamp parameter's value between minimum and maximum value\n        lowValue = Math.max(min, Math.min(parameters.low.value, max));\n        highValue = Math.max(min, Math.min(parameters.high.value, max));\n\n        // apply all new settings to the effect parameters \n        store.dispatch(store.getActions().recreateParameter(my.id, 'low', { min: min, max: max, value: lowValue }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'high', { min: min, max: max, value: highValue }));\n    },\n        updateEffectParameters = function updateEffectParameters(parameters) {\n        params.high = parameters.high.value;\n        params.low = parameters.low.value;\n    },\n        updateRelativeSetting = function updateRelativeSetting(parameters) {\n        params.relative = parameters.relative.value;\n\n        var min = void 0,\n            max = void 0,\n            lowValue = void 0,\n            highValue = void 0;\n\n        // set minimum and maximum value according to target type\n        switch (parameters.target.value) {\n            case 'velocity':\n            case 'pitch':\n                min = parameters.relative.value ? -127 : 0;\n                max = 127;\n                lowValue = parameters.relative.value ? 0 : 50;\n                highValue = parameters.relative.value ? 0 : 100;\n                break;\n            case 'channel':\n                min = parameters.relative.value ? -16 : 1;\n                max = 16;\n                lowValue = parameters.relative.value ? 0 : 1;\n                highValue = parameters.relative.value ? 0 : 1;\n                break;\n            case 'length':\n                min = 0;\n                max = 1;\n                lowValue = parameters.relative.value ? 0 : 1;\n                highValue = parameters.relative.value ? 0 : 1;\n                break;\n            case 'output':\n                min = 0;\n                max = 1;\n                lowValue = parameters.relative.value ? 0 : 0;\n                highValue = parameters.relative.value ? 0 : 0;\n                break;\n        }\n\n        // apply all new settings to the effect parameters \n        store.dispatch(store.getActions().recreateParameter(my.id, 'low', { min: min, max: max, value: lowValue }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'high', { min: min, max: max, value: highValue }));\n    };\n\n    my = my || {};\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    var cacheKey = steps + '_' + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    var pauses = steps - pulses;\n    if (pulses >= steps) {\n        return buildPatternListFilledWith(steps, true);\n    } else if (steps == 1) {\n        return buildPatternListFilledWith(steps, pulses == 1);\n    } else if (steps == 0 || pulses == 0) {\n        return buildPatternListFilledWith(steps, false);\n    } else {\n        var distribution = [];\n        for (var i = 0; i < steps; i++) {\n            distribution.push([i < pulses]);\n        }\n        return splitDistributionAndContinue(distribution, pauses);\n    }\n}\n\n/**\n * Divide as much as possible of the remainder over the distribution arrays.\n * @param {Array} distributionArray Two dimensional array of booleans.\n * @param {Number} remainder Amount of items not yet in distribution array.\n * @return {Function} One dimensional array of booleans, the Euclidean pattern.\n */\nfunction splitDistributionAndContinue(distributionArray, remainder) {\n    var newDistributionArray = [],\n        newRemainderArray = [];\n    if (remainder == 0) {\n        newDistributionArray = distributionArray;\n    } else {\n        var newDistributionSize = distributionArray.length - remainder;\n        for (var i = 0, n = distributionArray.length; i < n; i++) {\n            if (i < newDistributionSize) {\n                newDistributionArray.push(distributionArray[i]);\n            } else {\n                newRemainderArray.push(distributionArray[i]);\n            }\n        }\n    }\n    return bjorklund(newDistributionArray, newRemainderArray);\n}\n\n/**\n * Divide as much as possible of the remainder over the distribution arrays.\n * @param {Object} distributionArray Two dimensional array.\n * @param {Object} remainderArray Two dimensional array.\n * @return {Object} One dimensional array of booleans, the Euclidean pattern.\n */\nfunction bjorklund(distributionArray, remainderArray) {\n    // handy for debugging\n    // console.log('distributionArray', toStringArrayList(distributionArray)); \n    // console.log('remainderArray', toStringArrayList(remainderArray));\n\n    if (remainderArray.length <= 1) {\n        return flattenArrays([distributionArray, remainderArray]);\n    } else {\n        var fullRounds = Math.floor(remainderArray.length / distributionArray.length),\n            remainder = remainderArray.length % distributionArray.length,\n            newRemainder = remainder == 0 ? 0 : distributionArray.length - remainder;\n        for (var i = 0; i < fullRounds; i++) {\n            var p = distributionArray.length;\n            for (var j = 0; j < p; j++) {\n                distributionArray[j].push(remainderArray.shift());\n            }\n        }\n        for (var _i = 0; _i < remainder; _i++) {\n            distributionArray[_i].push(remainderArray.shift());\n        }\n\n        return splitDistributionAndContinue(distributionArray, newRemainder);\n    }\n}\n\n/**\n * Create a pattern filled with only pulses or silences.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Boolen} value Value to fill the array with, true for pulses.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction buildPatternListFilledWith(steps, value) {\n    var distribution = [];\n    for (var i = 0; i < steps; i++) {\n        distribution.push(value);\n    }\n    return distribution;\n}\n\n/**\n * Flatten a multidimensional array.\n * @param {Object} arr The array to flatten.\n * @return {Object} One dimensional flattened array.\n */\nfunction flattenArrays(arr) {\n    return arr.reduce(function (flat, toFlatten) {\n        return flat.concat(Array.isArray(toFlatten) ? flattenArrays(toFlatten) : toFlatten);\n    }, []);\n}\n\nfunction toStringArrayList(arrayList) {\n    var str = '';\n    for (var i = 0, n = arrayList.length; i < n; i++) {\n        str += '[' + arrayList[i] + ']';\n    }\n    return str;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanM/MDRkNSJdLCJuYW1lcyI6WyJnZXRFdWNsaWRQYXR0ZXJuIiwicm90YXRlRXVjbGlkUGF0dGVybiIsImNhY2hlIiwic3RlcHMiLCJwdWxzZXMiLCJjYWNoZUtleSIsImNyZWF0ZUJqb3JrbHVuZCIsInNsaWNlIiwicGF0dGVybiIsInJvdGF0aW9uIiwiZWxlbWVudHNUb1NoaWZ0Iiwic3BsaWNlIiwiY29uY2F0IiwicGF1c2VzIiwiYnVpbGRQYXR0ZXJuTGlzdEZpbGxlZFdpdGgiLCJkaXN0cmlidXRpb24iLCJpIiwicHVzaCIsInNwbGl0RGlzdHJpYnV0aW9uQW5kQ29udGludWUiLCJkaXN0cmlidXRpb25BcnJheSIsInJlbWFpbmRlciIsIm5ld0Rpc3RyaWJ1dGlvbkFycmF5IiwibmV3UmVtYWluZGVyQXJyYXkiLCJuZXdEaXN0cmlidXRpb25TaXplIiwibGVuZ3RoIiwibiIsImJqb3JrbHVuZCIsInJlbWFpbmRlckFycmF5IiwiZmxhdHRlbkFycmF5cyIsImZ1bGxSb3VuZHMiLCJNYXRoIiwiZmxvb3IiLCJuZXdSZW1haW5kZXIiLCJwIiwiaiIsInNoaWZ0IiwidmFsdWUiLCJhcnIiLCJyZWR1Y2UiLCJmbGF0IiwidG9GbGF0dGVuIiwiQXJyYXkiLCJpc0FycmF5IiwidG9TdHJpbmdBcnJheUxpc3QiLCJhcnJheUxpc3QiLCJzdHIiXSwibWFwcGluZ3MiOiI7Ozs7O1FBR2dCQSxnQixHQUFBQSxnQjtRQVFBQyxtQixHQUFBQSxtQjs7QUFWaEIsSUFBTUMsUUFBUSxFQUFkOztBQUVPLFNBQVNGLGdCQUFULENBQTBCRyxLQUExQixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDNUMsUUFBTUMsV0FBY0YsS0FBZCxTQUF1QkMsTUFBN0I7QUFDQSxRQUFJLENBQUNGLE1BQU1HLFFBQU4sQ0FBTCxFQUFzQjtBQUNsQkgsY0FBTUcsUUFBTixJQUFrQkMsZ0JBQWdCSCxLQUFoQixFQUF1QkMsTUFBdkIsQ0FBbEI7QUFDSDtBQUNELFdBQU9GLE1BQU1HLFFBQU4sRUFBZ0JFLEtBQWhCLENBQXNCLENBQXRCLENBQVA7QUFDSDs7QUFFTSxTQUFTTixtQkFBVCxDQUE2Qk8sT0FBN0IsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQ25ELFFBQU1DLGtCQUFrQkYsUUFBUUcsTUFBUixDQUFlRixRQUFmLENBQXhCO0FBQ0EsV0FBT0MsZ0JBQWdCRSxNQUFoQixDQUF1QkosT0FBdkIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixlQUFULENBQXlCSCxLQUF6QixFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDcEMsUUFBSVMsU0FBU1YsUUFBUUMsTUFBckI7QUFDQSxRQUFJQSxVQUFVRCxLQUFkLEVBQXFCO0FBQ2pCLGVBQU9XLDJCQUEyQlgsS0FBM0IsRUFBa0MsSUFBbEMsQ0FBUDtBQUNILEtBRkQsTUFFTyxJQUFJQSxTQUFTLENBQWIsRUFBZ0I7QUFDbkIsZUFBT1csMkJBQTJCWCxLQUEzQixFQUFrQ0MsVUFBVSxDQUE1QyxDQUFQO0FBQ0gsS0FGTSxNQUVBLElBQUlELFNBQVMsQ0FBVCxJQUFjQyxVQUFVLENBQTVCLEVBQStCO0FBQ2xDLGVBQU9VLDJCQUEyQlgsS0FBM0IsRUFBa0MsS0FBbEMsQ0FBUDtBQUNILEtBRk0sTUFFQTtBQUNILFlBQUlZLGVBQWUsRUFBbkI7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSWIsS0FBcEIsRUFBMkJhLEdBQTNCLEVBQWdDO0FBQzVCRCx5QkFBYUUsSUFBYixDQUFrQixDQUFDRCxJQUFJWixNQUFMLENBQWxCO0FBQ0g7QUFDRCxlQUFPYyw2QkFBNkJILFlBQTdCLEVBQTJDRixNQUEzQyxDQUFQO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7O0FBTUEsU0FBU0ssNEJBQVQsQ0FBc0NDLGlCQUF0QyxFQUF5REMsU0FBekQsRUFBb0U7QUFDaEUsUUFBSUMsdUJBQXVCLEVBQTNCO0FBQUEsUUFDSUMsb0JBQW9CLEVBRHhCO0FBRUEsUUFBSUYsYUFBYSxDQUFqQixFQUFvQjtBQUNoQkMsK0JBQXVCRixpQkFBdkI7QUFDSCxLQUZELE1BRU87QUFDSCxZQUFJSSxzQkFBc0JKLGtCQUFrQkssTUFBbEIsR0FBMkJKLFNBQXJEO0FBQ0EsYUFBSyxJQUFJSixJQUFJLENBQVIsRUFBV1MsSUFBSU4sa0JBQWtCSyxNQUF0QyxFQUE4Q1IsSUFBSVMsQ0FBbEQsRUFBcURULEdBQXJELEVBQTBEO0FBQ3RELGdCQUFJQSxJQUFJTyxtQkFBUixFQUE2QjtBQUN6QkYscUNBQXFCSixJQUFyQixDQUEwQkUsa0JBQWtCSCxDQUFsQixDQUExQjtBQUNILGFBRkQsTUFFTztBQUNITSxrQ0FBa0JMLElBQWxCLENBQXVCRSxrQkFBa0JILENBQWxCLENBQXZCO0FBQ0g7QUFDSjtBQUNKO0FBQ0QsV0FBT1UsVUFBVUwsb0JBQVYsRUFBZ0NDLGlCQUFoQyxDQUFQO0FBQ0g7O0FBRUQ7Ozs7OztBQU1BLFNBQVNJLFNBQVQsQ0FBbUJQLGlCQUFuQixFQUFzQ1EsY0FBdEMsRUFBc0Q7QUFDbEQ7QUFDQTtBQUNBOztBQUVBLFFBQUlBLGVBQWVILE1BQWYsSUFBeUIsQ0FBN0IsRUFBZ0M7QUFDNUIsZUFBT0ksY0FBYyxDQUFDVCxpQkFBRCxFQUFvQlEsY0FBcEIsQ0FBZCxDQUFQO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsWUFBSUUsYUFBYUMsS0FBS0MsS0FBTCxDQUFXSixlQUFlSCxNQUFmLEdBQXdCTCxrQkFBa0JLLE1BQXJELENBQWpCO0FBQUEsWUFDSUosWUFBWU8sZUFBZUgsTUFBZixHQUF3Qkwsa0JBQWtCSyxNQUQxRDtBQUFBLFlBRUlRLGVBQWVaLGFBQWEsQ0FBYixHQUFpQixDQUFqQixHQUFxQkQsa0JBQWtCSyxNQUFsQixHQUEyQkosU0FGbkU7QUFHQSxhQUFLLElBQUlKLElBQUksQ0FBYixFQUFnQkEsSUFBSWEsVUFBcEIsRUFBZ0NiLEdBQWhDLEVBQXFDO0FBQ2pDLGdCQUFJaUIsSUFBSWQsa0JBQWtCSyxNQUExQjtBQUNBLGlCQUFLLElBQUlVLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsQ0FBcEIsRUFBdUJDLEdBQXZCLEVBQTRCO0FBQ3hCZixrQ0FBa0JlLENBQWxCLEVBQXFCakIsSUFBckIsQ0FBMEJVLGVBQWVRLEtBQWYsRUFBMUI7QUFDSDtBQUNKO0FBQ0QsYUFBSyxJQUFJbkIsS0FBSSxDQUFiLEVBQWdCQSxLQUFJSSxTQUFwQixFQUErQkosSUFBL0IsRUFBcUM7QUFDakNHLDhCQUFrQkgsRUFBbEIsRUFBcUJDLElBQXJCLENBQTBCVSxlQUFlUSxLQUFmLEVBQTFCO0FBQ0g7O0FBRUQsZUFBT2pCLDZCQUE2QkMsaUJBQTdCLEVBQWdEYSxZQUFoRCxDQUFQO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7O0FBTUEsU0FBU2xCLDBCQUFULENBQW9DWCxLQUFwQyxFQUEyQ2lDLEtBQTNDLEVBQWtEO0FBQzlDLFFBQUlyQixlQUFlLEVBQW5CO0FBQ0EsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUliLEtBQXBCLEVBQTJCYSxHQUEzQixFQUFnQztBQUM1QkQscUJBQWFFLElBQWIsQ0FBa0JtQixLQUFsQjtBQUNIO0FBQ0QsV0FBT3JCLFlBQVA7QUFDSDs7QUFFRDs7Ozs7QUFLQSxTQUFTYSxhQUFULENBQXVCUyxHQUF2QixFQUE0QjtBQUN4QixXQUFPQSxJQUFJQyxNQUFKLENBQVcsVUFBVUMsSUFBVixFQUFnQkMsU0FBaEIsRUFBMkI7QUFDekMsZUFBT0QsS0FBSzNCLE1BQUwsQ0FBWTZCLE1BQU1DLE9BQU4sQ0FBY0YsU0FBZCxJQUEyQlosY0FBY1ksU0FBZCxDQUEzQixHQUFzREEsU0FBbEUsQ0FBUDtBQUNILEtBRk0sRUFFSixFQUZJLENBQVA7QUFHSDs7QUFFRCxTQUFTRyxpQkFBVCxDQUEyQkMsU0FBM0IsRUFBc0M7QUFDbEMsUUFBSUMsTUFBTSxFQUFWO0FBQ0EsU0FBSyxJQUFJN0IsSUFBSSxDQUFSLEVBQVdTLElBQUltQixVQUFVcEIsTUFBOUIsRUFBc0NSLElBQUlTLENBQTFDLEVBQTZDVCxHQUE3QyxFQUFrRDtBQUM5QzZCLGVBQU8sTUFBTUQsVUFBVTVCLENBQVYsQ0FBTixHQUFxQixHQUE1QjtBQUNIO0FBQ0QsV0FBTzZCLEdBQVA7QUFDSCIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgY2FjaGUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV1Y2xpZFBhdHRlcm4oc3RlcHMsIHB1bHNlcykge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7c3RlcHN9XyR7cHVsc2VzfWA7XG4gICAgaWYgKCFjYWNoZVtjYWNoZUtleV0pIHtcbiAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbY2FjaGVLZXldLnNsaWNlKDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlRXVjbGlkUGF0dGVybihwYXR0ZXJuLCByb3RhdGlvbikge1xuICAgIGNvbnN0IGVsZW1lbnRzVG9TaGlmdCA9IHBhdHRlcm4uc3BsaWNlKHJvdGF0aW9uKTtcbiAgICByZXR1cm4gZWxlbWVudHNUb1NoaWZ0LmNvbmNhdChwYXR0ZXJuKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgRXVjbGlkZWFuIHJoeXRobSBwYXR0ZXJuLlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBzIFRvdGFsIGFtb3VudCBvZiB0c3RlcHMgaW4gdGhlIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gcHVsc2VzIFB1bHNlcyB0byBzcHJlYWQgb3ZlciB0aGUgcGF0dGVybi5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBCb29sZWFucyB0aGF0IGZvcm0gdGhlIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJqb3JrbHVuZChzdGVwcywgcHVsc2VzKSB7XG4gICAgdmFyIHBhdXNlcyA9IHN0ZXBzIC0gcHVsc2VzO1xuICAgIGlmIChwdWxzZXMgPj0gc3RlcHMpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkUGF0dGVybkxpc3RGaWxsZWRXaXRoKHN0ZXBzLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXBzID09IDEpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkUGF0dGVybkxpc3RGaWxsZWRXaXRoKHN0ZXBzLCBwdWxzZXMgPT0gMSk7XG4gICAgfSBlbHNlIGlmIChzdGVwcyA9PSAwIHx8IHB1bHNlcyA9PSAwKSB7XG4gICAgICAgIHJldHVybiBidWlsZFBhdHRlcm5MaXN0RmlsbGVkV2l0aChzdGVwcywgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBkaXN0cmlidXRpb24gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwczsgaSsrKSB7XG4gICAgICAgICAgICBkaXN0cmlidXRpb24ucHVzaChbaSA8IHB1bHNlc10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGxpdERpc3RyaWJ1dGlvbkFuZENvbnRpbnVlKGRpc3RyaWJ1dGlvbiwgcGF1c2VzKTtcbiAgICB9XG59XG5cbi8qKlxuICogRGl2aWRlIGFzIG11Y2ggYXMgcG9zc2libGUgb2YgdGhlIHJlbWFpbmRlciBvdmVyIHRoZSBkaXN0cmlidXRpb24gYXJyYXlzLlxuICogQHBhcmFtIHtBcnJheX0gZGlzdHJpYnV0aW9uQXJyYXkgVHdvIGRpbWVuc2lvbmFsIGFycmF5IG9mIGJvb2xlYW5zLlxuICogQHBhcmFtIHtOdW1iZXJ9IHJlbWFpbmRlciBBbW91bnQgb2YgaXRlbXMgbm90IHlldCBpbiBkaXN0cmlidXRpb24gYXJyYXkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gT25lIGRpbWVuc2lvbmFsIGFycmF5IG9mIGJvb2xlYW5zLCB0aGUgRXVjbGlkZWFuIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIHNwbGl0RGlzdHJpYnV0aW9uQW5kQ29udGludWUoZGlzdHJpYnV0aW9uQXJyYXksIHJlbWFpbmRlcikge1xuICAgIGxldCBuZXdEaXN0cmlidXRpb25BcnJheSA9IFtdLFxuICAgICAgICBuZXdSZW1haW5kZXJBcnJheSA9IFtdO1xuICAgIGlmIChyZW1haW5kZXIgPT0gMCkge1xuICAgICAgICBuZXdEaXN0cmlidXRpb25BcnJheSA9IGRpc3RyaWJ1dGlvbkFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBuZXdEaXN0cmlidXRpb25TaXplID0gZGlzdHJpYnV0aW9uQXJyYXkubGVuZ3RoIC0gcmVtYWluZGVyO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbiA9IGRpc3RyaWJ1dGlvbkFycmF5Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCBuZXdEaXN0cmlidXRpb25TaXplKSB7XG4gICAgICAgICAgICAgICAgbmV3RGlzdHJpYnV0aW9uQXJyYXkucHVzaChkaXN0cmlidXRpb25BcnJheVtpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld1JlbWFpbmRlckFycmF5LnB1c2goZGlzdHJpYnV0aW9uQXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiam9ya2x1bmQobmV3RGlzdHJpYnV0aW9uQXJyYXksIG5ld1JlbWFpbmRlckFycmF5KTtcbn1cblxuLyoqXG4gKiBEaXZpZGUgYXMgbXVjaCBhcyBwb3NzaWJsZSBvZiB0aGUgcmVtYWluZGVyIG92ZXIgdGhlIGRpc3RyaWJ1dGlvbiBhcnJheXMuXG4gKiBAcGFyYW0ge09iamVjdH0gZGlzdHJpYnV0aW9uQXJyYXkgVHdvIGRpbWVuc2lvbmFsIGFycmF5LlxuICogQHBhcmFtIHtPYmplY3R9IHJlbWFpbmRlckFycmF5IFR3byBkaW1lbnNpb25hbCBhcnJheS5cbiAqIEByZXR1cm4ge09iamVjdH0gT25lIGRpbWVuc2lvbmFsIGFycmF5IG9mIGJvb2xlYW5zLCB0aGUgRXVjbGlkZWFuIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIGJqb3JrbHVuZChkaXN0cmlidXRpb25BcnJheSwgcmVtYWluZGVyQXJyYXkpIHtcbiAgICAvLyBoYW5keSBmb3IgZGVidWdnaW5nXG4gICAgLy8gY29uc29sZS5sb2coJ2Rpc3RyaWJ1dGlvbkFycmF5JywgdG9TdHJpbmdBcnJheUxpc3QoZGlzdHJpYnV0aW9uQXJyYXkpKTsgXG4gICAgLy8gY29uc29sZS5sb2coJ3JlbWFpbmRlckFycmF5JywgdG9TdHJpbmdBcnJheUxpc3QocmVtYWluZGVyQXJyYXkpKTtcbiAgICBcbiAgICBpZiAocmVtYWluZGVyQXJyYXkubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIGZsYXR0ZW5BcnJheXMoW2Rpc3RyaWJ1dGlvbkFycmF5LCByZW1haW5kZXJBcnJheV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBmdWxsUm91bmRzID0gTWF0aC5mbG9vcihyZW1haW5kZXJBcnJheS5sZW5ndGggLyBkaXN0cmlidXRpb25BcnJheS5sZW5ndGgpLFxuICAgICAgICAgICAgcmVtYWluZGVyID0gcmVtYWluZGVyQXJyYXkubGVuZ3RoICUgZGlzdHJpYnV0aW9uQXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgbmV3UmVtYWluZGVyID0gcmVtYWluZGVyID09IDAgPyAwIDogZGlzdHJpYnV0aW9uQXJyYXkubGVuZ3RoIC0gcmVtYWluZGVyO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZ1bGxSb3VuZHM7IGkrKykge1xuICAgICAgICAgICAgbGV0IHAgPSBkaXN0cmlidXRpb25BcnJheS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHA7IGorKykge1xuICAgICAgICAgICAgICAgIGRpc3RyaWJ1dGlvbkFycmF5W2pdLnB1c2gocmVtYWluZGVyQXJyYXkuc2hpZnQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1haW5kZXI7IGkrKyApIHtcbiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbkFycmF5W2ldLnB1c2gocmVtYWluZGVyQXJyYXkuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzcGxpdERpc3RyaWJ1dGlvbkFuZENvbnRpbnVlKGRpc3RyaWJ1dGlvbkFycmF5LCBuZXdSZW1haW5kZXIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXR0ZXJuIGZpbGxlZCB3aXRoIG9ubHkgcHVsc2VzIG9yIHNpbGVuY2VzLlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBzIFRvdGFsIGFtb3VudCBvZiB0c3RlcHMgaW4gdGhlIHBhdHRlcm4uXG4gKiBAcGFyYW0ge0Jvb2xlbn0gdmFsdWUgVmFsdWUgdG8gZmlsbCB0aGUgYXJyYXkgd2l0aCwgdHJ1ZSBmb3IgcHVsc2VzLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIEJvb2xlYW5zIHRoYXQgZm9ybSB0aGUgcGF0dGVybi5cbiAqL1xuZnVuY3Rpb24gYnVpbGRQYXR0ZXJuTGlzdEZpbGxlZFdpdGgoc3RlcHMsIHZhbHVlKSB7XG4gICAgbGV0IGRpc3RyaWJ1dGlvbiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RlcHM7IGkrKykge1xuICAgICAgICBkaXN0cmlidXRpb24ucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBkaXN0cmlidXRpb247XG59XG5cbi8qKlxuICogRmxhdHRlbiBhIG11bHRpZGltZW5zaW9uYWwgYXJyYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gYXJyIFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHJldHVybiB7T2JqZWN0fSBPbmUgZGltZW5zaW9uYWwgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBmbGF0dGVuQXJyYXlzKGFycikge1xuICAgIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChmbGF0LCB0b0ZsYXR0ZW4pIHtcbiAgICAgICAgcmV0dXJuIGZsYXQuY29uY2F0KEFycmF5LmlzQXJyYXkodG9GbGF0dGVuKSA/IGZsYXR0ZW5BcnJheXModG9GbGF0dGVuKSA6IHRvRmxhdHRlbik7XG4gICAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZ0FycmF5TGlzdChhcnJheUxpc3QpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDAsIG4gPSBhcnJheUxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIHN0ciArPSAnWycgKyBhcnJheUxpc3RbaV0gKyAnXSc7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXVjbGlkZngvZXVjbGlkLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(2);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _midi = __webpack_require__(12);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output port processor.\n */\nfunction createProcessor(specs, my) {\n    var that,\n        portID = specs.data.portID,\n        midiOutput = (0, _midi.getMIDIPortByID)(portID),\n\n\n    /**\n     * Process events to happen in a time slice.\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset) {\n        var inputData = my.getInputData(),\n            origin = performance.now() - offset * ticksToMsMultiplier,\n            n = inputData.length;\n\n        if (midiOutput.state === 'connected') {\n            for (var i = 0; i < n; i++) {\n                var item = inputData[i],\n\n                // item.timestampTicks is time since transport play started\n                timestamp = origin + item.timestampTicks * ticksToMsMultiplier,\n                    duration = item.durationTicks * ticksToMsMultiplier;\n\n                switch (item.type) {\n                    case 'note':\n                        midiOutput.send([0x90 + (item.channel - 1), item.pitch, item.velocity], timestamp);\n                        midiOutput.send([0x80 + (item.channel - 1), item.pitch, 0], timestamp + duration);\n                        break;\n                }\n            }\n        }\n    },\n        setEnabled = function setEnabled(isEnabled) {\n        my.isEnabled = isEnabled;\n    },\n        getMIDIPortID = function getMIDIPortID() {\n        return portID;\n    };\n\n    my = my || {};\n    my.isEnabled = true;\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    that.process = process;\n    that.setEnabled = setEnabled;\n    that.getMIDIPortID = getMIDIPortID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvcHJvY2Vzc29yLmpzP2QxNWMiXSwibmFtZXMiOlsiY3JlYXRlUHJvY2Vzc29yIiwic3BlY3MiLCJteSIsInRoYXQiLCJwb3J0SUQiLCJkYXRhIiwibWlkaU91dHB1dCIsInByb2Nlc3MiLCJzY2FuU3RhcnQiLCJzY2FuRW5kIiwibm93VG9TY2FuU3RhcnQiLCJ0aWNrc1RvTXNNdWx0aXBsaWVyIiwib2Zmc2V0IiwiaW5wdXREYXRhIiwiZ2V0SW5wdXREYXRhIiwib3JpZ2luIiwicGVyZm9ybWFuY2UiLCJub3ciLCJuIiwibGVuZ3RoIiwic3RhdGUiLCJpIiwiaXRlbSIsInRpbWVzdGFtcCIsInRpbWVzdGFtcFRpY2tzIiwiZHVyYXRpb24iLCJkdXJhdGlvblRpY2tzIiwidHlwZSIsInNlbmQiLCJjaGFubmVsIiwicGl0Y2giLCJ2ZWxvY2l0eSIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJnZXRNSURJUG9ydElEIl0sIm1hcHBpbmdzIjoiOzs7OztRQU1nQkEsZSxHQUFBQSxlOztBQU5oQjs7OztBQUNBOzs7O0FBRUE7OztBQUdPLFNBQVNBLGVBQVQsQ0FBeUJDLEtBQXpCLEVBQWdDQyxFQUFoQyxFQUFvQztBQUN2QyxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsU0FBU0gsTUFBTUksSUFBTixDQUFXRCxNQUR4QjtBQUFBLFFBRUlFLGFBQWEsMkJBQWdCRixNQUFoQixDQUZqQjs7O0FBSUk7Ozs7Ozs7O0FBUUFHLGNBQVUsU0FBVkEsT0FBVSxDQUFTQyxTQUFULEVBQW9CQyxPQUFwQixFQUE2QkMsY0FBN0IsRUFBNkNDLG1CQUE3QyxFQUFrRUMsTUFBbEUsRUFBMEU7QUFDaEYsWUFBSUMsWUFBWVgsR0FBR1ksWUFBSCxFQUFoQjtBQUFBLFlBQ0lDLFNBQVNDLFlBQVlDLEdBQVosS0FBcUJMLFNBQVNELG1CQUQzQztBQUFBLFlBRUlPLElBQUlMLFVBQVVNLE1BRmxCOztBQUlBLFlBQUliLFdBQVdjLEtBQVgsS0FBcUIsV0FBekIsRUFBc0M7QUFDbEMsaUJBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxDQUFwQixFQUF1QkcsR0FBdkIsRUFBNEI7QUFDeEIsb0JBQUlDLE9BQU9ULFVBQVVRLENBQVYsQ0FBWDs7QUFDSTtBQUNBRSw0QkFBWVIsU0FBVU8sS0FBS0UsY0FBTCxHQUFzQmIsbUJBRmhEO0FBQUEsb0JBR0ljLFdBQVdILEtBQUtJLGFBQUwsR0FBcUJmLG1CQUhwQzs7QUFLQSx3QkFBUVcsS0FBS0ssSUFBYjtBQUNJLHlCQUFLLE1BQUw7QUFDSXJCLG1DQUFXc0IsSUFBWCxDQUFnQixDQUFDLFFBQVFOLEtBQUtPLE9BQUwsR0FBZSxDQUF2QixDQUFELEVBQTRCUCxLQUFLUSxLQUFqQyxFQUF3Q1IsS0FBS1MsUUFBN0MsQ0FBaEIsRUFBd0VSLFNBQXhFO0FBQ0FqQixtQ0FBV3NCLElBQVgsQ0FBZ0IsQ0FBQyxRQUFRTixLQUFLTyxPQUFMLEdBQWUsQ0FBdkIsQ0FBRCxFQUE0QlAsS0FBS1EsS0FBakMsRUFBd0MsQ0FBeEMsQ0FBaEIsRUFBNERQLFlBQVlFLFFBQXhFO0FBQ0E7QUFKUjtBQU1IO0FBQ0o7QUFDSixLQWhDTDtBQUFBLFFBa0NJTyxhQUFhLFNBQWJBLFVBQWEsQ0FBU0MsU0FBVCxFQUFvQjtBQUM3Qi9CLFdBQUcrQixTQUFILEdBQWVBLFNBQWY7QUFDSCxLQXBDTDtBQUFBLFFBc0NJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDdkIsZUFBTzlCLE1BQVA7QUFDSCxLQXhDTDs7QUEyQ0FGLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHK0IsU0FBSCxHQUFlLElBQWY7O0FBRUE5QixXQUFPLDZCQUF3QkYsS0FBeEIsRUFBK0JDLEVBQS9CLENBQVA7O0FBRUFDLFNBQUtJLE9BQUwsR0FBZUEsT0FBZjtBQUNBSixTQUFLNkIsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQTdCLFNBQUsrQixhQUFMLEdBQXFCQSxhQUFyQjtBQUNBLFdBQU8vQixJQUFQO0FBQ0giLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTUlESVByb2Nlc3NvckJhc2UgZnJvbSAnLi4vLi4vbWlkaS9wcm9jZXNzb3JiYXNlJztcbmltcG9ydCB7IGdldE1JRElQb3J0QnlJRCB9IGZyb20gJy4uLy4uL21pZGkvbWlkaSc7XG5cbi8qKlxuICogTUlESSBvdXRwdXQgcG9ydCBwcm9jZXNzb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9jZXNzb3Ioc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHBvcnRJRCA9IHNwZWNzLmRhdGEucG9ydElELFxuICAgICAgICBtaWRpT3V0cHV0ID0gZ2V0TUlESVBvcnRCeUlEKHBvcnRJRCksXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2Nlc3MgZXZlbnRzIHRvIGhhcHBlbiBpbiBhIHRpbWUgc2xpY2UuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FuU3RhcnQgVGltZXNwYW4gc3RhcnQgaW4gdGlja3MgZnJvbSB0aW1lbGluZSBzdGFydC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYW5FbmQgICBUaW1lc3BhbiBlbmQgaW4gdGlja3MgZnJvbSB0aW1lbGluZSBzdGFydC5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG5vd1RvU2NhblN0YXJ0IFRpbWVzcGFuIGZyb20gY3VycmVudCB0aW1lbGluZSBwb3NpdGlvbiB0byBzY2FuU3RhcnQuXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aWNrc1RvTXNNdWx0aXBsaWVyIER1cmF0aW9uIG9mIG9uZSB0aWNrIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBUaW1lIGZyb20gZG9jIHN0YXJ0IHRvIHRpbWVsaW5lIHN0YXJ0IGluIHRpY2tzLlxuICAgICAgICAgKi9cbiAgICAgICAgcHJvY2VzcyA9IGZ1bmN0aW9uKHNjYW5TdGFydCwgc2NhbkVuZCwgbm93VG9TY2FuU3RhcnQsIHRpY2tzVG9Nc011bHRpcGxpZXIsIG9mZnNldCkge1xuICAgICAgICAgICAgdmFyIGlucHV0RGF0YSA9IG15LmdldElucHV0RGF0YSgpLFxuICAgICAgICAgICAgICAgIG9yaWdpbiA9IHBlcmZvcm1hbmNlLm5vdygpIC0gKG9mZnNldCAqIHRpY2tzVG9Nc011bHRpcGxpZXIpLFxuICAgICAgICAgICAgICAgIG4gPSBpbnB1dERhdGEubGVuZ3RoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWlkaU91dHB1dC5zdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGlucHV0RGF0YVtpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZW0udGltZXN0YW1wVGlja3MgaXMgdGltZSBzaW5jZSB0cmFuc3BvcnQgcGxheSBzdGFydGVkXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAgPSBvcmlnaW4gKyAoaXRlbS50aW1lc3RhbXBUaWNrcyAqIHRpY2tzVG9Nc011bHRpcGxpZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBpdGVtLmR1cmF0aW9uVGlja3MgKiB0aWNrc1RvTXNNdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdub3RlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaWRpT3V0cHV0LnNlbmQoWzB4OTAgKyAoaXRlbS5jaGFubmVsIC0gMSksIGl0ZW0ucGl0Y2gsIGl0ZW0udmVsb2NpdHldLCB0aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pZGlPdXRwdXQuc2VuZChbMHg4MCArIChpdGVtLmNoYW5uZWwgLSAxKSwgaXRlbS5waXRjaCwgMF0sIHRpbWVzdGFtcCArIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNldEVuYWJsZWQgPSBmdW5jdGlvbihpc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIG15LmlzRW5hYmxlZCA9IGlzRW5hYmxlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRNSURJUG9ydElEID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9ydElEO1xuICAgICAgICB9O1xuXG5cbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LmlzRW5hYmxlZCA9IHRydWU7XG5cbiAgICB0aGF0ID0gY3JlYXRlTUlESVByb2Nlc3NvckJhc2Uoc3BlY3MsIG15KTtcblxuICAgIHRoYXQucHJvY2VzcyA9IHByb2Nlc3M7XG4gICAgdGhhdC5zZXRFbmFibGVkID0gc2V0RW5hYmxlZDtcbiAgICB0aGF0LmdldE1JRElQb3J0SUQgPSBnZXRNSURJUG9ydElEO1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvb3V0cHV0L3Byb2Nlc3Nvci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDI;\nexports.getMIDIPortByID = getMIDIPortByID;\nvar midiAccess = void 0;\n\nfunction createMIDI(specs) {\n    var that,\n        store = specs.store,\n        syncListeners = [],\n        remoteListeners = [],\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.TOGGLE_PORT_SYNC:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    break;\n\n                case e.detail.actions.TOGGLE_PORT_REMOTE:\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n\n                case e.detail.actions.SET_PROJECT:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n        connect = function connect() {\n        return new Promise(function (resolve, reject) {\n            requestAccess(resolve, onAccessFailure, false);\n        });\n    },\n\n\n    /**\n     * Request system for access to MIDI ports.\n     * @param {function} successCallback\n     * @param {function} failureCallback\n     * @param {boolean} sysex True if sysex data must be included.\n     */\n    requestAccess = function requestAccess(successCallback, failureCallback, sysex) {\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess({\n                sysex: !!sysex\n            }).then(function (_midiAccess) {\n                if (!_midiAccess.inputs.size && !_midiAccess.outputs.size) {\n                    failureCallback('No MIDI devices found on this system.');\n                } else {\n                    onAccessSuccess(_midiAccess);\n                    successCallback();\n                }\n            }, function () {\n                failureCallback('RequestMIDIAccess failed.');\n            });\n        } else {\n            failureCallback('Web MIDI API not available.');\n        }\n    },\n\n\n    /**\n     * MIDI access request failed.\n     * @param {String} errorMessage\n     */\n    onAccessFailure = function onAccessFailure(errorMessage) {\n        console.log(errorMessage);\n    },\n\n\n    /**\n     * MIDI access request succeeded.\n     * @param {Object} midiAccessObj MidiAccess object.\n     */\n    onAccessSuccess = function onAccessSuccess(_midiAccess) {\n        console.log('MIDI enabled.');\n        midiAccess = _midiAccess;\n\n        var inputs = midiAccess.inputs.values();\n        var outputs = midiAccess.outputs.values();\n\n        for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n            store.dispatch(store.getActions().midiPortChange(port.value));\n            port.value.onmidimessage = onMIDIMessage;\n        }\n\n        for (var _port = outputs.next(); _port && !_port.done; _port = outputs.next()) {\n            store.dispatch(store.getActions().midiPortChange(_port.value));\n        }\n\n        midiAccess.onstatechange = onAccessStateChange;\n    },\n\n\n    /**\n     * MIDIAccess object statechange handler.\n     * If the change is the addition of a new port, create a port module.\n     * This handles MIDI devices that are connected after the app initialisation.\n     * Disconnected or reconnected ports are handled by the port modules.\n     * \n     * If this is\n     * @param {Object} e MIDIConnectionEvent object.\n     */\n    onAccessStateChange = function onAccessStateChange(e) {\n        store.dispatch(store.getActions().midiPortChange(e.port));\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDISyncListeners = function updateMIDISyncListeners(ports) {\n        syncListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.syncEnabled) {\n                syncListeners.push(port.id);\n            }\n        });\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDIRemoteListeners = function updateMIDIRemoteListeners(ports) {\n        remoteListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.remoteEnabled) {\n                remoteListeners.push(port.id);\n            }\n        });\n    },\n        onMIDIMessage = function onMIDIMessage(e) {\n        // console.log(e.data[0] & 0xf0, e.data[0] & 0x0f, e.target.id, e.data[0], e.data[1], e.data[2]);\n        switch (e.data[0] & 0xf0) {\n            case 240:\n                onSystemRealtimeMessage(e);\n                break;\n            case 176:\n                // CC\n                onControlChangeMessage(e);\n                break;\n            case 144: // note on\n            case 128:\n                // note off\n                // onNoteMessage(e);\n                break;\n        }\n    },\n\n\n    /**\n     * Eventlistener for incoming MIDI messages.\n     * data[1] and data[2] are undefined,\n     * for e.data[0] & 0xf:\n     * 8 = clock, 248 (11110000 | 00000100)\n     * 10 = start\n     * 11 = continue\n     * 12 = stop\n     * @see https://www.w3.org/TR/webmidi/#idl-def-MIDIMessageEvent\n     * @see https://www.midi.org/specifications/item/table-1-summary-of-midi-message\n     * @param  {Object} e MIDIMessageEvent event.\n     */\n    onSystemRealtimeMessage = function onSystemRealtimeMessage(e) {\n        if (syncListeners.indexOf(e.target.id) > -1) {\n            switch (e.data[0]) {\n                case 248:\n                    // clock\n                    break;\n                case 250:\n                    // start\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 251:\n                    // continue\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 252:\n                    // stop\n                    store.dispatch(store.getActions().setTransport('pause'));\n                    break;\n            }\n        }\n    },\n        onControlChangeMessage = function onControlChangeMessage(e) {\n        if (remoteListeners.indexOf(e.target.id) > -1) {\n            store.dispatch(store.getActions().receiveMIDIControlChange(e.data));\n        }\n    };\n\n    that = specs.that;\n\n    init();\n\n    that.connect = connect;\n    return that;\n}\n\nfunction getMIDIPortByID(id) {\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        if (port.value.id === id) {\n            return port.value;\n        }\n    }\n\n    for (var _port2 = outputs.next(); _port2 && !_port2.done; _port2 = outputs.next()) {\n        if (_port2.value.id === id) {\n            return _port2.value;\n        }\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = addWindowResize;\n/**\n * Window resize listener functionality.\n * Add callback functions that will be called on window resize,\n * but debounced to not be called more that every so many milliseconds.\n */\nvar debouncedFunction,\n    callbacks = [],\n    delay = 250,\n\n\n/**\n * Returns a function, that, as long as it continues to be invoked, \n * will not be triggered. The function will be called after it \n * stops being called for N milliseconds. If `immediate` is passed, \n * trigger the function on the leading edge, instead of the trailing.\n * @see https://davidwalsh.name/javascript-debounce-function\n * @param  {Function} func Function to call after delay.\n * @param  {Number} wait Milliseconds to wait before next call.\n * @param  {Boolean} immediate True to not wait.\n */\ndebounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function () {\n        var context = this,\n            args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\n\nfunction addWindowResize(specs, my) {\n    var that,\n\n\n    /**\n     * Add callback function to be called on debounced resize.\n     * @param  {Function} callback Callback function.\n     */\n    addWindowResizeCallback = function addWindowResizeCallback(callback) {\n        callbacks.push(callback);\n        if (!debouncedFunction) {\n            debouncedFunction = debounce(function () {\n                callbacks.forEach(function (callbackFunction) {\n                    callbackFunction();\n                });\n            }, delay);\n            window.addEventListener('resize', debouncedFunction);\n        }\n    };\n\n    my = my || {};\n    my.addWindowResizeCallback = addWindowResizeCallback;\n\n    that = specs.that || {};\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy93aW5kb3dyZXNpemUuanM/OTM1MiJdLCJuYW1lcyI6WyJhZGRXaW5kb3dSZXNpemUiLCJkZWJvdW5jZWRGdW5jdGlvbiIsImNhbGxiYWNrcyIsImRlbGF5IiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImxhdGVyIiwiYXBwbHkiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInNwZWNzIiwibXkiLCJ0aGF0IiwiYWRkV2luZG93UmVzaXplQ2FsbGJhY2siLCJjYWxsYmFjayIsInB1c2giLCJmb3JFYWNoIiwiY2FsbGJhY2tGdW5jdGlvbiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQW9Dd0JBLGU7QUFwQ3hCOzs7OztBQUtBLElBQUlDLGlCQUFKO0FBQUEsSUFDSUMsWUFBWSxFQURoQjtBQUFBLElBRUlDLFFBQVEsR0FGWjs7O0FBSUk7Ozs7Ozs7Ozs7QUFVQUMsV0FBVyxTQUFYQSxRQUFXLENBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFxQkMsU0FBckIsRUFBZ0M7QUFDdkMsUUFBSUMsT0FBSjtBQUNBLFdBQU8sWUFBVztBQUNkLFlBQUlDLFVBQVUsSUFBZDtBQUFBLFlBQW9CQyxPQUFPQyxTQUEzQjtBQUNBLFlBQUlDLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ25CSixzQkFBVSxJQUFWO0FBQ0EsZ0JBQUksQ0FBQ0QsU0FBTCxFQUFnQjtBQUNaRixxQkFBS1EsS0FBTCxDQUFXSixPQUFYLEVBQW9CQyxJQUFwQjtBQUNIO0FBQ0osU0FMRDtBQU1BLFlBQUlJLFVBQVVQLGFBQWEsQ0FBQ0MsT0FBNUI7QUFDQU8scUJBQWFQLE9BQWI7QUFDQUEsa0JBQVVRLFdBQVdKLEtBQVgsRUFBa0JOLElBQWxCLENBQVY7QUFDQSxZQUFJUSxPQUFKLEVBQWFULEtBQUtRLEtBQUwsQ0FBV0osT0FBWCxFQUFvQkMsSUFBcEI7QUFDaEIsS0FaRDtBQWFILENBN0JMOztBQStCZSxTQUFTVixlQUFULENBQXlCaUIsS0FBekIsRUFBZ0NDLEVBQWhDLEVBQW9DO0FBQy9DLFFBQUlDLElBQUo7OztBQUVJOzs7O0FBSUFDLDhCQUEwQixTQUExQkEsdUJBQTBCLENBQVNDLFFBQVQsRUFBbUI7QUFDekNuQixrQkFBVW9CLElBQVYsQ0FBZUQsUUFBZjtBQUNBLFlBQUksQ0FBQ3BCLGlCQUFMLEVBQXdCO0FBQ3BCQSxnQ0FBb0JHLFNBQVMsWUFBVztBQUNwQ0YsMEJBQVVxQixPQUFWLENBQWtCLFVBQVNDLGdCQUFULEVBQTJCO0FBQ3pDQTtBQUNILGlCQUZEO0FBR0gsYUFKbUIsRUFJakJyQixLQUppQixDQUFwQjtBQUtBc0IsbUJBQU9DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDekIsaUJBQWxDO0FBQ0g7QUFDSixLQWhCTDs7QUFrQkFpQixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0UsdUJBQUgsR0FBNkJBLHVCQUE3Qjs7QUFFQUQsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBLFdBQU9BLElBQVA7QUFDSCIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2luZG93IHJlc2l6ZSBsaXN0ZW5lciBmdW5jdGlvbmFsaXR5LlxuICogQWRkIGNhbGxiYWNrIGZ1bmN0aW9ucyB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uIHdpbmRvdyByZXNpemUsXG4gKiBidXQgZGVib3VuY2VkIHRvIG5vdCBiZSBjYWxsZWQgbW9yZSB0aGF0IGV2ZXJ5IHNvIG1hbnkgbWlsbGlzZWNvbmRzLlxuICovXG52YXIgZGVib3VuY2VkRnVuY3Rpb24sXG4gICAgY2FsbGJhY2tzID0gW10sXG4gICAgZGVsYXkgPSAyNTAsXG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCBcbiAgICAgKiB3aWxsIG5vdCBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBcbiAgICAgKiBzdG9wcyBiZWluZyBjYWxsZWQgZm9yIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIFxuICAgICAqIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kYXZpZHdhbHNoLm5hbWUvamF2YXNjcmlwdC1kZWJvdW5jZS1mdW5jdGlvblxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHRvIGNhbGwgYWZ0ZXIgZGVsYXkuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB3YWl0IE1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBuZXh0IGNhbGwuXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW1tZWRpYXRlIFRydWUgdG8gbm90IHdhaXQuXG4gICAgICovXG4gICAgZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICAgICAgdmFyIHRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICAgICAgaWYgKGNhbGxOb3cpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkV2luZG93UmVzaXplKHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZGVib3VuY2VkIHJlc2l6ZS5cbiAgICAgICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkV2luZG93UmVzaXplQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKCFkZWJvdW5jZWRGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGRlYm91bmNlZEZ1bmN0aW9uID0gZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrRnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZWRGdW5jdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5hZGRXaW5kb3dSZXNpemVDYWxsYmFjayA9IGFkZFdpbmRvd1Jlc2l6ZUNhbGxiYWNrO1xuICAgIFxuICAgIHRoYXQgPSBzcGVjcy50aGF0IHx8IHt9O1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvd2luZG93cmVzaXplLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\n\nvar TWEEN = TWEEN || function () {\n\n\tvar _tweens = [];\n\n\treturn {\n\n\t\tgetAll: function getAll() {\n\n\t\t\treturn _tweens;\n\t\t},\n\n\t\tremoveAll: function removeAll() {\n\n\t\t\t_tweens = [];\n\t\t},\n\n\t\tadd: function add(tween) {\n\n\t\t\t_tweens.push(tween);\n\t\t},\n\n\t\tremove: function remove(tween) {\n\n\t\t\tvar i = _tweens.indexOf(tween);\n\n\t\t\tif (i !== -1) {\n\t\t\t\t_tweens.splice(i, 1);\n\t\t\t}\n\t\t},\n\n\t\tupdate: function update(time, preserve) {\n\n\t\t\tif (_tweens.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar i = 0;\n\n\t\t\ttime = time !== undefined ? time : TWEEN.now();\n\n\t\t\twhile (i < _tweens.length) {\n\n\t\t\t\tif (_tweens[i].update(time) || preserve) {\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\t_tweens.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t};\n}();\n\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\nif (typeof window === 'undefined' && typeof process !== 'undefined') {\n\tTWEEN.now = function () {\n\t\tvar time = process.hrtime();\n\n\t\t// Convert [seconds, nanoseconds] to milliseconds.\n\t\treturn time[0] * 1000 + time[1] / 1000000;\n\t};\n}\n// In a browser, use window.performance.now if it is available.\nelse if (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {\n\t\t// This must be bound, because directly assigning this function\n\t\t// leads to an invocation exception in Chrome.\n\t\tTWEEN.now = window.performance.now.bind(window.performance);\n\t}\n\t// Use Date.now if it is available.\n\telse if (Date.now !== undefined) {\n\t\t\tTWEEN.now = Date.now;\n\t\t}\n\t\t// Otherwise, use 'new Date().getTime()'.\n\t\telse {\n\t\t\t\tTWEEN.now = function () {\n\t\t\t\t\treturn new Date().getTime();\n\t\t\t\t};\n\t\t\t}\n\nTWEEN.Tween = function (object) {\n\n\tvar _object = object;\n\tvar _valuesStart = {};\n\tvar _valuesEnd = {};\n\tvar _valuesStartRepeat = {};\n\tvar _duration = 1000;\n\tvar _repeat = 0;\n\tvar _repeatDelayTime;\n\tvar _yoyo = false;\n\tvar _isPlaying = false;\n\tvar _reversed = false;\n\tvar _delayTime = 0;\n\tvar _startTime = null;\n\tvar _easingFunction = TWEEN.Easing.Linear.None;\n\tvar _interpolationFunction = TWEEN.Interpolation.Linear;\n\tvar _chainedTweens = [];\n\tvar _onStartCallback = null;\n\tvar _onStartCallbackFired = false;\n\tvar _onUpdateCallback = null;\n\tvar _onCompleteCallback = null;\n\tvar _onStopCallback = null;\n\n\tthis.to = function (properties, duration) {\n\n\t\t_valuesEnd = properties;\n\n\t\tif (duration !== undefined) {\n\t\t\t_duration = duration;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.start = function (time) {\n\n\t\tTWEEN.add(this);\n\n\t\t_isPlaying = true;\n\n\t\t_onStartCallbackFired = false;\n\n\t\t_startTime = time !== undefined ? time : TWEEN.now();\n\t\t_startTime += _delayTime;\n\n\t\tfor (var property in _valuesEnd) {\n\n\t\t\t// Check if an Array was provided as property value\n\t\t\tif (_valuesEnd[property] instanceof Array) {\n\n\t\t\t\tif (_valuesEnd[property].length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create a local copy of the Array with the start value at the front\n\t\t\t\t_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);\n\t\t\t}\n\n\t\t\t// If `to()` specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (_object[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Save the starting value.\n\t\t\t_valuesStart[property] = _object[property];\n\n\t\t\tif (_valuesStart[property] instanceof Array === false) {\n\t\t\t\t_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n\t\t\t}\n\n\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.stop = function () {\n\n\t\tif (!_isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tTWEEN.remove(this);\n\t\t_isPlaying = false;\n\n\t\tif (_onStopCallback !== null) {\n\t\t\t_onStopCallback.call(_object, _object);\n\t\t}\n\n\t\tthis.stopChainedTweens();\n\t\treturn this;\n\t};\n\n\tthis.end = function () {\n\n\t\tthis.update(_startTime + _duration);\n\t\treturn this;\n\t};\n\n\tthis.stopChainedTweens = function () {\n\n\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t_chainedTweens[i].stop();\n\t\t}\n\t};\n\n\tthis.delay = function (amount) {\n\n\t\t_delayTime = amount;\n\t\treturn this;\n\t};\n\n\tthis.repeat = function (times) {\n\n\t\t_repeat = times;\n\t\treturn this;\n\t};\n\n\tthis.repeatDelay = function (amount) {\n\n\t\t_repeatDelayTime = amount;\n\t\treturn this;\n\t};\n\n\tthis.yoyo = function (yoyo) {\n\n\t\t_yoyo = yoyo;\n\t\treturn this;\n\t};\n\n\tthis.easing = function (easing) {\n\n\t\t_easingFunction = easing;\n\t\treturn this;\n\t};\n\n\tthis.interpolation = function (interpolation) {\n\n\t\t_interpolationFunction = interpolation;\n\t\treturn this;\n\t};\n\n\tthis.chain = function () {\n\n\t\t_chainedTweens = arguments;\n\t\treturn this;\n\t};\n\n\tthis.onStart = function (callback) {\n\n\t\t_onStartCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onUpdate = function (callback) {\n\n\t\t_onUpdateCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onComplete = function (callback) {\n\n\t\t_onCompleteCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onStop = function (callback) {\n\n\t\t_onStopCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.update = function (time) {\n\n\t\tvar property;\n\t\tvar elapsed;\n\t\tvar value;\n\n\t\tif (time < _startTime) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (_onStartCallbackFired === false) {\n\n\t\t\tif (_onStartCallback !== null) {\n\t\t\t\t_onStartCallback.call(_object, _object);\n\t\t\t}\n\n\t\t\t_onStartCallbackFired = true;\n\t\t}\n\n\t\telapsed = (time - _startTime) / _duration;\n\t\telapsed = elapsed > 1 ? 1 : elapsed;\n\n\t\tvalue = _easingFunction(elapsed);\n\n\t\tfor (property in _valuesEnd) {\n\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar start = _valuesStart[property] || 0;\n\t\t\tvar end = _valuesEnd[property];\n\n\t\t\tif (end instanceof Array) {\n\n\t\t\t\t_object[property] = _interpolationFunction(end, value);\n\t\t\t} else {\n\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tif (typeof end === 'string') {\n\n\t\t\t\t\tif (end.charAt(0) === '+' || end.charAt(0) === '-') {\n\t\t\t\t\t\tend = start + parseFloat(end);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tend = parseFloat(end);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof end === 'number') {\n\t\t\t\t\t_object[property] = start + (end - start) * value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (_onUpdateCallback !== null) {\n\t\t\t_onUpdateCallback.call(_object, value);\n\t\t}\n\n\t\tif (elapsed === 1) {\n\n\t\t\tif (_repeat > 0) {\n\n\t\t\t\tif (isFinite(_repeat)) {\n\t\t\t\t\t_repeat--;\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values, restart by making startTime = now\n\t\t\t\tfor (property in _valuesStartRepeat) {\n\n\t\t\t\t\tif (typeof _valuesEnd[property] === 'string') {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_yoyo) {\n\t\t\t\t\t\tvar tmp = _valuesStartRepeat[property];\n\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\t_valuesStart[property] = _valuesStartRepeat[property];\n\t\t\t\t}\n\n\t\t\t\tif (_yoyo) {\n\t\t\t\t\t_reversed = !_reversed;\n\t\t\t\t}\n\n\t\t\t\tif (_repeatDelayTime !== undefined) {\n\t\t\t\t\t_startTime = time + _repeatDelayTime;\n\t\t\t\t} else {\n\t\t\t\t\t_startTime = time + _delayTime;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\n\t\t\t\tif (_onCompleteCallback !== null) {\n\n\t\t\t\t\t_onCompleteCallback.call(_object, _object);\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t\t// even if the `update()` method was called way past the duration of the tween\n\t\t\t\t\t_chainedTweens[i].start(_startTime + _duration);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n};\n\nTWEEN.Easing = {\n\n\tLinear: {\n\n\t\tNone: function None(k) {\n\n\t\t\treturn k;\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn k * (2 - k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn -0.5 * (--k * (k - 2) - 1);\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn --k * k * k + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn 1 - --k * k * k * k;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn -0.5 * ((k -= 2) * k * k * k - 2);\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn Math.sqrt(1 - --k * k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn -0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function In(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tk *= 2;\n\n\t\t\tif (k < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function In(k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - TWEEN.Easing.Bounce.Out(1 - k);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tif (k < 1 / 2.75) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < 2 / 2.75) {\n\t\t\t\treturn 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n\t\t\t} else if (k < 2.5 / 2.75) {\n\t\t\t\treturn 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n\t\t\t}\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\t\t}\n\n\t}\n\n};\n\nTWEEN.Interpolation = {\n\n\tLinear: function Linear(v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.Linear;\n\n\t\tif (k < 0) {\n\t\t\treturn fn(v[0], v[1], f);\n\t\t}\n\n\t\tif (k > 1) {\n\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t}\n\n\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t},\n\n\tBezier: function Bezier(v, k) {\n\n\t\tvar b = 0;\n\t\tvar n = v.length - 1;\n\t\tvar pw = Math.pow;\n\t\tvar bn = TWEEN.Interpolation.Utils.Bernstein;\n\n\t\tfor (var i = 0; i <= n; i++) {\n\t\t\tb += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n\t\t}\n\n\t\treturn b;\n\t},\n\n\tCatmullRom: function CatmullRom(v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.CatmullRom;\n\n\t\tif (v[0] === v[m]) {\n\n\t\t\tif (k < 0) {\n\t\t\t\ti = Math.floor(f = m * (1 + k));\n\t\t\t}\n\n\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\t\t} else {\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\t\t}\n\t},\n\n\tUtils: {\n\n\t\tLinear: function Linear(p0, p1, t) {\n\n\t\t\treturn (p1 - p0) * t + p0;\n\t\t},\n\n\t\tBernstein: function Bernstein(n, i) {\n\n\t\t\tvar fc = TWEEN.Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\t\t},\n\n\t\tFactorial: function () {\n\n\t\t\tvar a = [1];\n\n\t\t\treturn function (n) {\n\n\t\t\t\tvar s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (var i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\t\t\t\treturn s;\n\t\t\t};\n\t\t}(),\n\n\t\tCatmullRom: function CatmullRom(p0, p1, p2, p3, t) {\n\n\t\t\tvar v0 = (p2 - p0) * 0.5;\n\t\t\tvar v1 = (p3 - p1) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t\t}\n\n\t}\n\n};\n\n// UMD (Universal Module Definition)\n(function (root) {\n\n\tif (true) {\n\n\t\t// AMD\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn TWEEN;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module !== 'undefined' && (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n\n\t\t// Node.js\n\t\tmodule.exports = TWEEN;\n\t} else if (root !== undefined) {\n\n\t\t// Global variable\n\t\troot.TWEEN = TWEEN;\n\t}\n})(undefined);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(42)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIBaseView;\n/**\n * MIDI input or output port processor view.\n */\nfunction createMIDIBaseView(specs, my) {\n    var that,\n        parentEl = specs.parentEl,\n        port = specs.port,\n        initialize = function initialize() {\n        // find template, add clone to midi ports list\n        var template = document.querySelector('#template-midi-port');\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        parentEl.appendChild(my.el);\n\n        // set data-connected=\"true\" to make the element visible\n        my.el.dataset.connected = true;\n\n        // show label\n        my.el.querySelector('.midi-port__label').innerHTML = specs.name;\n\n        // find checkboxes\n        my.networkEl = my.el.querySelector('.midi-port__network');\n        my.syncEl = my.el.querySelector('.midi-port__sync');\n        my.remoteEl = my.el.querySelector('.midi-port__remote');\n\n        // add DOM event listeners\n        my.networkEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().togglePortNetwork(my.id, my.isInput));\n            }\n        });\n        my.syncEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().togglePortSync(my.id, my.isInput));\n            }\n        });\n        my.remoteEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().togglePortRemote(my.id, my.isInput));\n            }\n        });\n\n        // listen to state updates\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_PROJECT:\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                case e.detail.actions.TOGGLE_PORT_SYNC:\n                case e.detail.actions.TOGGLE_PORT_REMOTE:\n                    var _port = e.detail.state.ports.byId[my.id];\n                    if (_port) {\n                        my.networkEl.querySelector('[type=checkbox]').checked = _port.networkEnabled;\n                        my.syncEl.querySelector('[type=checkbox]').checked = _port.syncEnabled;\n                        my.remoteEl.querySelector('[type=checkbox]').checked = _port.remoteEnabled;\n                    } else {\n                        console.log('MIDI port with id ' + my.id + ' not found.');\n                    }\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (my.el && parentEl) {\n            parentEl.removeChild(my.el);\n        }\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.isInput = specs.isInput;\n    my.id = specs.id;\n    my.el;\n    my.networkEl;\n    my.syncEl;\n    my.remoteEl;\n\n    that = that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _actions = __webpack_require__(17);\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nvar _reducers = __webpack_require__(24);\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nvar _store = __webpack_require__(25);\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _persist = __webpack_require__(26);\n\nvar _persist2 = _interopRequireDefault(_persist);\n\nvar _app = __webpack_require__(27);\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _canvas = __webpack_require__(38);\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nvar _library = __webpack_require__(46);\n\nvar _library2 = _interopRequireDefault(_library);\n\nvar _midi = __webpack_require__(12);\n\nvar _midi2 = _interopRequireDefault(_midi);\n\nvar _network = __webpack_require__(47);\n\nvar _network2 = _interopRequireDefault(_network);\n\nvar _preferences = __webpack_require__(49);\n\nvar _preferences2 = _interopRequireDefault(_preferences);\n\nvar _remote = __webpack_require__(52);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nvar _transport = __webpack_require__(55);\n\nvar _transport2 = _interopRequireDefault(_transport);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Application startup.\n */\n/**\n    Euclidean Pattern Generator\n    Copyright (C) 2017, 2018  Wouter Hisschemoller\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\ndocument.addEventListener('DOMContentLoaded', function (e) {\n\n    // Create all objects that will be the modules of the app.\n    var appView = {},\n        canvasView = {},\n        libraryView = {},\n        midi = {},\n        midiNetwork = {},\n        preferencesView = {},\n        remoteView = {},\n        transport = {};\n\n    var store = (0, _store2.default)({\n        actions: (0, _actions2.default)(),\n        reducers: (0, _reducers2.default)()\n    });\n\n    // Add functionality to the modules and inject dependencies.\n    (0, _app2.default)({\n        that: appView,\n        store: store\n    });\n    (0, _canvas2.default)({\n        that: canvasView,\n        store: store\n    });\n    (0, _library2.default)({\n        that: libraryView,\n        store: store\n    });\n    (0, _midi2.default)({\n        that: midi,\n        store: store\n    });\n    (0, _network2.default)({\n        that: midiNetwork,\n        store: store\n    });\n    (0, _preferences2.default)({\n        that: preferencesView,\n        store: store\n    });\n    (0, _remote2.default)({\n        that: remoteView,\n        store: store\n    });\n    (0, _transport2.default)({\n        that: transport,\n        store: store,\n        canvasView: canvasView,\n        midiNetwork: midiNetwork\n    });\n\n    // scan installed processors\n    store.dispatch(store.getActions().rescanTypes());\n\n    // initialise\n    midi.connect().then(function () {\n        (0, _persist2.default)(store);\n        transport.run();\n    });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz9jNDViIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJhcHBWaWV3IiwiY2FudmFzVmlldyIsImxpYnJhcnlWaWV3IiwibWlkaSIsIm1pZGlOZXR3b3JrIiwicHJlZmVyZW5jZXNWaWV3IiwicmVtb3RlVmlldyIsInRyYW5zcG9ydCIsInN0b3JlIiwiYWN0aW9ucyIsInJlZHVjZXJzIiwidGhhdCIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsInJlc2NhblR5cGVzIiwiY29ubmVjdCIsInRoZW4iLCJydW4iXSwibWFwcGluZ3MiOiI7O0FBa0JBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBR0E7OztBQWpDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0NBQSxTQUFTQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsVUFBU0MsQ0FBVCxFQUFZOztBQUV0RDtBQUNBLFFBQUlDLFVBQVUsRUFBZDtBQUFBLFFBQ0lDLGFBQWEsRUFEakI7QUFBQSxRQUVJQyxjQUFjLEVBRmxCO0FBQUEsUUFHSUMsT0FBTyxFQUhYO0FBQUEsUUFJSUMsY0FBYyxFQUpsQjtBQUFBLFFBS0lDLGtCQUFrQixFQUx0QjtBQUFBLFFBTUlDLGFBQWEsRUFOakI7QUFBQSxRQU9JQyxZQUFZLEVBUGhCOztBQVNBLFFBQU1DLFFBQVEscUJBQVk7QUFDdEJDLGlCQUFTLHdCQURhO0FBRXRCQyxrQkFBVTtBQUZZLEtBQVosQ0FBZDs7QUFLQTtBQUNBLHVCQUFjO0FBQ1ZDLGNBQU1YLE9BREk7QUFFVlE7QUFGVSxLQUFkO0FBSUEsMEJBQWlCO0FBQ2JHLGNBQU1WLFVBRE87QUFFYk87QUFGYSxLQUFqQjtBQUlBLDJCQUFrQjtBQUNkRyxjQUFNVCxXQURRO0FBRWRNO0FBRmMsS0FBbEI7QUFJQSx3QkFBVztBQUNQRyxjQUFNUixJQURDO0FBRVBLO0FBRk8sS0FBWDtBQUlBLDJCQUFrQjtBQUNkRyxjQUFNUCxXQURRO0FBRWRJO0FBRmMsS0FBbEI7QUFJQSwrQkFBc0I7QUFDbEJHLGNBQU1OLGVBRFk7QUFFbEJHO0FBRmtCLEtBQXRCO0FBSUEsMEJBQWlCO0FBQ2JHLGNBQU1MLFVBRE87QUFFYkU7QUFGYSxLQUFqQjtBQUlBLDZCQUFnQjtBQUNaRyxjQUFNSixTQURNO0FBRVpDLG9CQUZZO0FBR1pQLDhCQUhZO0FBSVpHO0FBSlksS0FBaEI7O0FBT0E7QUFDQUksVUFBTUksUUFBTixDQUFlSixNQUFNSyxVQUFOLEdBQW1CQyxXQUFuQixFQUFmOztBQUVBO0FBQ0FYLFNBQUtZLE9BQUwsR0FBZUMsSUFBZixDQUFvQixZQUFNO0FBQ3RCLCtCQUFRUixLQUFSO0FBQ0FELGtCQUFVVSxHQUFWO0FBQ0gsS0FIRDtBQUlILENBN0REIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gICAgRXVjbGlkZWFuIFBhdHRlcm4gR2VuZXJhdG9yXG4gICAgQ29weXJpZ2h0IChDKSAyMDE3LCAyMDE4ICBXb3V0ZXIgSGlzc2NoZW1vbGxlclxuXG4gICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbmltcG9ydCBjcmVhdGVBY3Rpb25zIGZyb20gJy4vd2gvc3RhdGUvYWN0aW9ucyc7XG5pbXBvcnQgY3JlYXRlUmVkdWNlcnMgZnJvbSAnLi93aC9zdGF0ZS9yZWR1Y2Vycyc7XG5pbXBvcnQgY3JlYXRlU3RvcmUgZnJvbSAnLi93aC9zdGF0ZS9zdG9yZSc7XG5pbXBvcnQgcGVyc2lzdCBmcm9tICcuL3doL3N0YXRlL3BlcnNpc3QnO1xuXG5pbXBvcnQgY3JlYXRlQXBwVmlldyBmcm9tICcuL3doL3ZpZXcvYXBwJztcbmltcG9ydCBjcmVhdGVDYW52YXNWaWV3IGZyb20gJy4vd2gvdmlldy9jYW52YXMnO1xuaW1wb3J0IGNyZWF0ZUxpYnJhcnlWaWV3IGZyb20gJy4vd2gvdmlldy9saWJyYXJ5JztcbmltcG9ydCBjcmVhdGVNSURJIGZyb20gJy4vd2gvbWlkaS9taWRpJztcbmltcG9ydCBjcmVhdGVNSURJTmV0d29yayBmcm9tICcuL3doL21pZGkvbmV0d29yayc7XG5pbXBvcnQgY3JlYXRlUHJlZmVyZW5jZXNWaWV3IGZyb20gJy4vd2gvdmlldy9wcmVmZXJlbmNlcyc7XG5pbXBvcnQgY3JlYXRlUmVtb3RlVmlldyBmcm9tICcuL3doL3ZpZXcvcmVtb3RlJztcbmltcG9ydCBjcmVhdGVUcmFuc3BvcnQgZnJvbSAnLi93aC9jb3JlL3RyYW5zcG9ydCc7XG5cblxuLyoqXG4gKiBBcHBsaWNhdGlvbiBzdGFydHVwLlxuICovXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oZSkge1xuXG4gICAgLy8gQ3JlYXRlIGFsbCBvYmplY3RzIHRoYXQgd2lsbCBiZSB0aGUgbW9kdWxlcyBvZiB0aGUgYXBwLlxuICAgIHZhciBhcHBWaWV3ID0ge30sXG4gICAgICAgIGNhbnZhc1ZpZXcgPSB7fSxcbiAgICAgICAgbGlicmFyeVZpZXcgPSB7fSxcbiAgICAgICAgbWlkaSA9IHt9LFxuICAgICAgICBtaWRpTmV0d29yayA9IHt9LFxuICAgICAgICBwcmVmZXJlbmNlc1ZpZXcgPSB7fSxcbiAgICAgICAgcmVtb3RlVmlldyA9IHt9LFxuICAgICAgICB0cmFuc3BvcnQgPSB7fTtcbiAgICBcbiAgICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHtcbiAgICAgICAgYWN0aW9uczogY3JlYXRlQWN0aW9ucygpLFxuICAgICAgICByZWR1Y2VyczogY3JlYXRlUmVkdWNlcnMoKVxuICAgIH0pO1xuXG4gICAgLy8gQWRkIGZ1bmN0aW9uYWxpdHkgdG8gdGhlIG1vZHVsZXMgYW5kIGluamVjdCBkZXBlbmRlbmNpZXMuXG4gICAgY3JlYXRlQXBwVmlldyh7IFxuICAgICAgICB0aGF0OiBhcHBWaWV3LCBcbiAgICAgICAgc3RvcmUgXG4gICAgfSk7XG4gICAgY3JlYXRlQ2FudmFzVmlldyh7IFxuICAgICAgICB0aGF0OiBjYW52YXNWaWV3LCBcbiAgICAgICAgc3RvcmUgXG4gICAgfSk7XG4gICAgY3JlYXRlTGlicmFyeVZpZXcoeyBcbiAgICAgICAgdGhhdDogbGlicmFyeVZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJKHsgXG4gICAgICAgIHRoYXQ6IG1pZGksIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJTmV0d29yayh7XG4gICAgICAgIHRoYXQ6IG1pZGlOZXR3b3JrLFxuICAgICAgICBzdG9yZVxuICAgIH0pO1xuICAgIGNyZWF0ZVByZWZlcmVuY2VzVmlldyh7IFxuICAgICAgICB0aGF0OiBwcmVmZXJlbmNlc1ZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVSZW1vdGVWaWV3KHtcbiAgICAgICAgdGhhdDogcmVtb3RlVmlldyxcbiAgICAgICAgc3RvcmVcbiAgICB9KTtcbiAgICBjcmVhdGVUcmFuc3BvcnQoeyBcbiAgICAgICAgdGhhdDogdHJhbnNwb3J0LCBcbiAgICAgICAgc3RvcmUsIFxuICAgICAgICBjYW52YXNWaWV3LCBcbiAgICAgICAgbWlkaU5ldHdvcmsgXG4gICAgfSk7XG5cbiAgICAvLyBzY2FuIGluc3RhbGxlZCBwcm9jZXNzb3JzXG4gICAgc3RvcmUuZGlzcGF0Y2goc3RvcmUuZ2V0QWN0aW9ucygpLnJlc2NhblR5cGVzKCkpO1xuXG4gICAgLy8gaW5pdGlhbGlzZVxuICAgIG1pZGkuY29ubmVjdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICBwZXJzaXN0KHN0b3JlKTtcbiAgICAgICAgdHJhbnNwb3J0LnJ1bigpO1xuICAgIH0pO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createActions;\n\nvar _util = __webpack_require__(5);\n\nfunction createActions() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var RESCAN_TYPES = 'RESCAN_TYPES',\n        NEW_PROJECT = 'NEW_PROJECT',\n        SET_PROJECT = 'SET_PROJECT',\n        SET_THEME = 'SET_THEME',\n        CREATE_PROCESSOR = 'CREATE_PROCESSOR',\n        ADD_PROCESSOR = 'ADD_PROCESSOR',\n        DELETE_PROCESSOR = 'DELETE_PROCESSOR',\n        SELECT_PROCESSOR = 'SELECT_PROCESSOR',\n        DRAG_SELECTED_PROCESSOR = 'DRAG_SELECTED_PROCESSOR',\n        DRAG_ALL_PROCESSORS = 'DRAG_ALL_PROCESSORS',\n        CHANGE_PARAMETER = 'CHANGE_PARAMETER',\n        RECREATE_PARAMETER = 'RECREATE_PARAMETER',\n        SET_TEMPO = 'SET_TEMPO',\n        MIDI_PORT_CHANGE = 'MIDI_PORT_CHANGE',\n        TOGGLE_PORT_NETWORK = 'TOGGLE_PORT_NETWORK',\n        TOGGLE_PORT_SYNC = 'TOGGLE_PORT_SYNC',\n        TOGGLE_PORT_REMOTE = 'TOGGLE_PORT_REMOTE',\n        TOGGLE_MIDI_PREFERENCE = 'TOGGLE_MIDI_PREFERENCE',\n        TOGGLE_MIDI_LEARN_MODE = 'TOGGLE_MIDI_LEARN_MODE',\n        TOGGLE_MIDI_LEARN_TARGET = 'TOGGLE_MIDI_LEARN_TARGET',\n        SET_TRANSPORT = 'SET_TRANSPORT',\n        RECEIVE_MIDI_CC = 'RECEIVE_MIDI_CC',\n        ASSIGN_EXTERNAL_CONTROL = 'ASSIGN_EXTERNAL_CONTROL',\n        UNASSIGN_EXTERNAL_CONTROL = 'UNASSIGN_EXTERNAL_CONTROL',\n        TOGGLE_PANEL = 'TOGGLE_PANEL',\n        TOGGLE_CONNECT_MODE = 'TOGGLE_CONNECT_MODE',\n        CONNECT_PROCESSORS = 'CONNECT_PROCESSORS',\n        DISCONNECT_PROCESSORS = 'DISCONNECT_PROCESSORS';\n\n    return {\n        importProject: function importProject(file) {\n            return function (dispatch, getState, getActions) {\n                var fileReader = new FileReader();\n                // closure to capture the file information\n                fileReader.onload = function (f) {\n                    return function (e) {\n                        var isJSON = true;\n                        try {\n                            var data = JSON.parse(e.target.result);\n                            if (data) {\n                                dispatch(getActions().setProject(data));\n                            }\n                        } catch (errorMessage) {\n                            console.log(errorMessage);\n                            isJSON = false;\n                        }\n                        if (!isJSON) {\n                            // try if it's a legacy xml file\n                            var legacyData = my.convertLegacyFile(e.target.result);\n                            if (legacyData) {\n                                dispatch(getActions().setProject(legacyData));\n                            }\n                        }\n                    };\n                }(file);\n                fileReader.readAsText(file);\n            };\n        },\n\n        exportProject: function exportProject() {\n            return function (dispatch, getState, getActions) {\n                var jsonString = JSON.stringify(getState()),\n                    blob = new Blob([jsonString], { type: 'application/json' }),\n                    a = document.createElement('a');\n                a.download = 'epg.json';\n                a.href = URL.createObjectURL(blob);\n                a.click();\n            };\n        },\n\n        NEW_PROJECT: NEW_PROJECT,\n        newProject: function newProject(data) {\n            return { type: NEW_PROJECT };\n        },\n\n        SET_PROJECT: SET_PROJECT,\n        setProject: function setProject(data) {\n            return { type: SET_PROJECT, data: data };\n        },\n\n        SET_THEME: SET_THEME,\n        setTheme: function setTheme(themeName) {\n            return { type: SET_THEME, themeName: themeName };\n        },\n\n        CREATE_PROCESSOR: CREATE_PROCESSOR,\n        createProcessor: function createProcessor(data) {\n            return function (dispatch, getState, getActions) {\n                var dataTemplate = __webpack_require__(6)(\"./\" + data.type + '/config.json');\n                var fullData = JSON.parse(JSON.stringify(dataTemplate));\n                var id = data.type + '_' + (0, _util.createUUID)();\n                fullData = Object.assign(fullData, data);\n                fullData.id = id;\n                fullData.positionX = data.positionX;\n                fullData.positionY = data.positionY;\n                fullData.params.byId.name.value = data.name || getProcessorDefaultName(getState().processors);\n                dispatch(getActions().addProcessor(fullData));\n                dispatch(getActions().selectProcessor(id));\n            };\n        },\n\n        ADD_PROCESSOR: ADD_PROCESSOR,\n        addProcessor: function addProcessor(data) {\n            return { type: ADD_PROCESSOR, data: data };\n        },\n\n        DELETE_PROCESSOR: DELETE_PROCESSOR,\n        deleteProcessor: function deleteProcessor(id) {\n            return { type: DELETE_PROCESSOR, id: id };\n        },\n\n        SELECT_PROCESSOR: SELECT_PROCESSOR,\n        selectProcessor: function selectProcessor(id) {\n            return { type: SELECT_PROCESSOR, id: id };\n        },\n\n        DRAG_SELECTED_PROCESSOR: DRAG_SELECTED_PROCESSOR,\n        dragSelectedProcessor: function dragSelectedProcessor(x, y) {\n            return { type: DRAG_SELECTED_PROCESSOR, x: x, y: y };\n        },\n\n        DRAG_ALL_PROCESSORS: DRAG_ALL_PROCESSORS,\n        dragAllProcessors: function dragAllProcessors(x, y) {\n            return { type: DRAG_ALL_PROCESSORS, x: x, y: y };\n        },\n\n        CHANGE_PARAMETER: CHANGE_PARAMETER,\n        changeParameter: function changeParameter(processorID, paramKey, paramValue) {\n            return { type: CHANGE_PARAMETER, processorID: processorID, paramKey: paramKey, paramValue: paramValue };\n        },\n\n        RECREATE_PARAMETER: RECREATE_PARAMETER,\n        recreateParameter: function recreateParameter(processorID, paramKey, paramObj) {\n            return { type: RECREATE_PARAMETER, processorID: processorID, paramKey: paramKey, paramObj: paramObj };\n        },\n\n        SET_TEMPO: SET_TEMPO,\n        setTempo: function setTempo(value) {\n            return { type: SET_TEMPO, value: value };\n        },\n\n        MIDI_PORT_CHANGE: MIDI_PORT_CHANGE,\n        midiPortChange: function midiPortChange(midiPort) {\n            return { type: MIDI_PORT_CHANGE, midiPort: midiPort };\n        },\n\n        TOGGLE_PORT_NETWORK: TOGGLE_PORT_NETWORK,\n        togglePortNetwork: function togglePortNetwork(portID, isInput) {\n            return function (dispatch, getState, getActions) {\n                dispatch(getActions().toggleMIDIPreference(portID, isInput, 'networkEnabled'));\n                var state = getState();\n                if (state.ports.byId[portID].networkEnabled) {\n                    dispatch(getActions().createProcessor({\n                        type: 'output',\n                        portID: portID,\n                        name: state.ports.byId[portID].name,\n                        positionX: window.innerWidth / 2,\n                        positionY: window.innerHeight - 100\n                    }));\n                } else {\n                    state.processors.allIds.forEach(function (id) {\n                        var processor = state.processors.byId[id];\n                        if (processor.portID && processor.portID === portID) {\n                            dispatch(getActions().deleteProcessor(processor.id));\n                        }\n                    });\n                }\n            };\n        },\n\n        TOGGLE_PORT_SYNC: TOGGLE_PORT_SYNC,\n        togglePortSync: function togglePortSync(id, isInput) {\n            return { type: TOGGLE_PORT_SYNC, id: id, isInput: isInput };\n        },\n\n        TOGGLE_PORT_REMOTE: TOGGLE_PORT_REMOTE,\n        togglePortRemote: function togglePortRemote(id, isInput) {\n            return { type: TOGGLE_PORT_REMOTE, id: id, isInput: isInput };\n        },\n\n        TOGGLE_MIDI_PREFERENCE: TOGGLE_MIDI_PREFERENCE,\n        toggleMIDIPreference: function toggleMIDIPreference(id, isInput, preferenceName) {\n            return { type: TOGGLE_MIDI_PREFERENCE, id: id, isInput: isInput, preferenceName: preferenceName };\n        },\n\n        TOGGLE_MIDI_LEARN_MODE: TOGGLE_MIDI_LEARN_MODE,\n        toggleMIDILearnMode: function toggleMIDILearnMode() {\n            return { type: TOGGLE_MIDI_LEARN_MODE };\n        },\n\n        TOGGLE_MIDI_LEARN_TARGET: TOGGLE_MIDI_LEARN_TARGET,\n        toggleMIDILearnTarget: function toggleMIDILearnTarget(processorID, parameterKey) {\n            return { type: TOGGLE_MIDI_LEARN_TARGET, processorID: processorID, parameterKey: parameterKey };\n        },\n\n        SET_TRANSPORT: SET_TRANSPORT,\n        setTransport: function setTransport(command) {\n            return { type: SET_TRANSPORT, command: command };\n        },\n\n        RECEIVE_MIDI_CC: RECEIVE_MIDI_CC,\n        receiveMIDIControlChange: function receiveMIDIControlChange(data) {\n            return function (dispatch, getState, getActions) {\n                var state = getState();\n                if (state.learnModeActive) {\n                    dispatch(getActions().assignExternalControl(data));\n                } else {\n                    // find all parameters with the channel and conctrol\n                    var remoteChannel = (data[0] & 0xf) + 1,\n                        remoteCC = data[1];\n                    state.processors.allIds.forEach(function (id) {\n                        var processor = state.processors.byId[id];\n                        processor.params.allIds.forEach(function (id) {\n                            var param = processor.params.byId[id];\n                            if (param.isMidiControllable && param.remoteChannel === remoteChannel && param.remoteCC == remoteCC) {\n                                var paramValue = midiControlToParameterValue(param, data[2]);\n                                dispatch(getActions().changeParameter(processor.id, id, paramValue));\n                            }\n                        });\n                    });\n                }\n            };\n        },\n\n        ASSIGN_EXTERNAL_CONTROL: ASSIGN_EXTERNAL_CONTROL,\n        assignExternalControl: function assignExternalControl(data) {\n            return { type: ASSIGN_EXTERNAL_CONTROL, data: data };\n        },\n\n        UNASSIGN_EXTERNAL_CONTROL: UNASSIGN_EXTERNAL_CONTROL,\n        unassignExternalControl: function unassignExternalControl(processorID, paramKey) {\n            return { type: UNASSIGN_EXTERNAL_CONTROL, processorID: processorID, paramKey: paramKey };\n        },\n\n        TOGGLE_PANEL: TOGGLE_PANEL,\n        togglePanel: function togglePanel(panelName) {\n            return { type: TOGGLE_PANEL, panelName: panelName };\n        },\n\n        TOGGLE_CONNECT_MODE: TOGGLE_CONNECT_MODE,\n        toggleConnectMode: function toggleConnectMode() {\n            return { type: TOGGLE_CONNECT_MODE };\n        },\n\n        CONNECT_PROCESSORS: CONNECT_PROCESSORS,\n        connectProcessors: function connectProcessors(payload) {\n            return { type: CONNECT_PROCESSORS, payload: payload, id: (0, _util.createUUID)() };\n        },\n\n        DISCONNECT_PROCESSORS: DISCONNECT_PROCESSORS,\n        disconnectProcessors: function disconnectProcessors(id) {\n            return { type: DISCONNECT_PROCESSORS, id: id };\n        },\n\n        RESCAN_TYPES: RESCAN_TYPES,\n        rescanTypes: function rescanTypes() {\n            var req = __webpack_require__(21);\n            var types = {};\n            req.keys().forEach(function (key) {\n                var type = key.substring(2, key.indexOf('/', 2));\n                var typeData = __webpack_require__(6)(\"./\" + type + '/config.json');\n                if (!typeData.excludedFromLibrary) {\n                    types[type] = {\n                        name: typeData.name\n                    };\n                }\n            });\n            return { type: RESCAN_TYPES, types: types };\n        }\n    };\n}\n\nfunction midiControlToParameterValue(param, controllerValue) {\n    var normalizedValue = controllerValue / 127;\n    switch (param.type) {\n        case 'integer':\n            return Math.round(param.min + (param.max - param.min) * normalizedValue);\n        case 'boolean':\n            return normalizedValue > .5;\n        case 'itemized':\n            if (normalizedValue === 1) {\n                return param.model[param.model.length - 1].value;\n            }\n            return param.model[Math.floor(normalizedValue * param.model.length)].value;\n        case 'string':\n        case 'position':\n        default:\n            return param.value;\n    }\n}\n\n/**\n * Set default processor name.\n * @param {Object} processor Processor to name.\n */\nfunction getProcessorDefaultName(processors) {\n    var name = void 0,\n        number = void 0,\n        spaceIndex = void 0,\n        highestNumber = 0,\n        staticName = 'Processor';\n    processors.allIds.forEach(function (id) {\n        name = processors.byId[id].params.byId.name.value;\n        if (name && name.indexOf(staticName) == 0) {\n            spaceIndex = name.lastIndexOf(' ');\n            if (spaceIndex != -1) {\n                number = parseInt(name.substr(spaceIndex), 10);\n                if (!isNaN(number)) {\n                    highestNumber = Math.max(highestNumber, number);\n                }\n            }\n        }\n    });\n    return staticName + ' ' + (highestNumber + 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Euclidean\",\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{},\"allIds\":[]},\"outputs\":{\"byId\":{\"out\":{\"x\":0,\"y\":50}},\"allIds\":[\"out\"]},\"params\":{\"byId\":{\"steps\":{\"label\":\"Steps\",\"type\":\"integer\",\"default\":16,\"value\":16,\"min\":1,\"max\":64,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"pulses\":{\"label\":\"Pulses\",\"type\":\"integer\",\"default\":4,\"value\":4,\"min\":0,\"max\":16,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"rotation\":{\"label\":\"Rotation\",\"type\":\"integer\",\"default\":0,\"value\":0,\"min\":0,\"max\":15,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"channel_out\":{\"label\":\"Channel\",\"type\":\"integer\",\"default\":1,\"value\":1,\"min\":1,\"max\":16,\"isMidiControllable\":false},\"pitch_out\":{\"label\":\"Pitch\",\"type\":\"integer\",\"default\":60,\"value\":60,\"min\":0,\"max\":127,\"isMidiControllable\":false},\"velocity_out\":{\"label\":\"Velocity\",\"type\":\"integer\",\"default\":100,\"value\":100,\"min\":0,\"max\":127,\"isMidiControllable\":false,\"\":\"\"},\"rate\":{\"label\":\"Rate\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}],\"isMidiControllable\":false},\"is_triplets\":{\"label\":\"Triplets\",\"type\":\"boolean\",\"default\":false,\"value\":false,\"isMidiControllable\":false},\"note_length\":{\"label\":\"Note length\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}],\"isMidiControllable\":false},\"is_mute\":{\"label\":\"Mute\",\"type\":\"boolean\",\"default\":false,\"value\":false,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\",\"isMidiControllable\":false}},\"allIds\":[\"steps\",\"pulses\",\"rotation\",\"channel_out\",\"pitch_out\",\"velocity_out\",\"rate\",\"note_length\",\"is_triplets\",\"is_mute\",\"name\"]}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvY29uZmlnLmpzb24/NmI0MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IseURBQXlELFNBQVMsYUFBYSxZQUFZLFFBQVEsT0FBTyxjQUFjLGtCQUFrQixXQUFXLFFBQVEsU0FBUyx5SUFBeUksV0FBVyx3SUFBd0ksYUFBYSwwSUFBMEksZ0JBQWdCLHFHQUFxRyxjQUFjLHNHQUFzRyxpQkFBaUIsaUhBQWlILFNBQVMsdUVBQXVFLHNCQUFzQixFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLDBCQUEwQixFQUFFLDRCQUE0QixFQUFFLDZCQUE2Qiw2QkFBNkIsZ0JBQWdCLDZGQUE2RixnQkFBZ0IsOEVBQThFLHNCQUFzQixFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLDBCQUEwQixFQUFFLDRCQUE0QixFQUFFLDZCQUE2Qiw2QkFBNkIsWUFBWSw2SEFBNkgsU0FBUyxpR0FBaUciLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcIkV1Y2xpZGVhblwiLFwicG9zaXRpb25YXCI6MCxcInBvc2l0aW9uWVwiOjAsXCJpbnB1dHNcIjp7XCJieUlkXCI6e30sXCJhbGxJZHNcIjpbXX0sXCJvdXRwdXRzXCI6e1wiYnlJZFwiOntcIm91dFwiOntcInhcIjowLFwieVwiOjUwfX0sXCJhbGxJZHNcIjpbXCJvdXRcIl19LFwicGFyYW1zXCI6e1wiYnlJZFwiOntcInN0ZXBzXCI6e1wibGFiZWxcIjpcIlN0ZXBzXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6MTYsXCJ2YWx1ZVwiOjE2LFwibWluXCI6MSxcIm1heFwiOjY0LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZSxcInJlbW90ZUNoYW5uZWxcIjpudWxsLFwicmVtb3RlQ0NcIjpudWxsfSxcInB1bHNlc1wiOntcImxhYmVsXCI6XCJQdWxzZXNcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjo0LFwidmFsdWVcIjo0LFwibWluXCI6MCxcIm1heFwiOjE2LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZSxcInJlbW90ZUNoYW5uZWxcIjpudWxsLFwicmVtb3RlQ0NcIjpudWxsfSxcInJvdGF0aW9uXCI6e1wibGFiZWxcIjpcIlJvdGF0aW9uXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6MCxcInZhbHVlXCI6MCxcIm1pblwiOjAsXCJtYXhcIjoxNSxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOnRydWUsXCJyZW1vdGVDaGFubmVsXCI6bnVsbCxcInJlbW90ZUNDXCI6bnVsbH0sXCJjaGFubmVsX291dFwiOntcImxhYmVsXCI6XCJDaGFubmVsXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6MSxcInZhbHVlXCI6MSxcIm1pblwiOjEsXCJtYXhcIjoxNixcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfSxcInBpdGNoX291dFwiOntcImxhYmVsXCI6XCJQaXRjaFwiLFwidHlwZVwiOlwiaW50ZWdlclwiLFwiZGVmYXVsdFwiOjYwLFwidmFsdWVcIjo2MCxcIm1pblwiOjAsXCJtYXhcIjoxMjcsXCJpc01pZGlDb250cm9sbGFibGVcIjpmYWxzZX0sXCJ2ZWxvY2l0eV9vdXRcIjp7XCJsYWJlbFwiOlwiVmVsb2NpdHlcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjoxMDAsXCJ2YWx1ZVwiOjEwMCxcIm1pblwiOjAsXCJtYXhcIjoxMjcsXCJpc01pZGlDb250cm9sbGFibGVcIjpmYWxzZSxcIlwiOlwiXCJ9LFwicmF0ZVwiOntcImxhYmVsXCI6XCJSYXRlXCIsXCJ0eXBlXCI6XCJpdGVtaXplZFwiLFwiZGVmYXVsdFwiOjAuMjUsXCJ2YWx1ZVwiOjAuMjUsXCJtb2RlbFwiOlt7XCJsYWJlbFwiOlwiMVwiLFwidmFsdWVcIjo0fSx7XCJsYWJlbFwiOlwiMS8yXCIsXCJ2YWx1ZVwiOjJ9LHtcImxhYmVsXCI6XCIxLzRcIixcInZhbHVlXCI6MX0se1wibGFiZWxcIjpcIjEvOFwiLFwidmFsdWVcIjowLjV9LHtcImxhYmVsXCI6XCIxLzE2XCIsXCJ2YWx1ZVwiOjAuMjV9LHtcImxhYmVsXCI6XCIxLzMyXCIsXCJ2YWx1ZVwiOjAuMTI1fV0sXCJpc01pZGlDb250cm9sbGFibGVcIjpmYWxzZX0sXCJpc190cmlwbGV0c1wiOntcImxhYmVsXCI6XCJUcmlwbGV0c1wiLFwidHlwZVwiOlwiYm9vbGVhblwiLFwiZGVmYXVsdFwiOmZhbHNlLFwidmFsdWVcIjpmYWxzZSxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfSxcIm5vdGVfbGVuZ3RoXCI6e1wibGFiZWxcIjpcIk5vdGUgbGVuZ3RoXCIsXCJ0eXBlXCI6XCJpdGVtaXplZFwiLFwiZGVmYXVsdFwiOjAuMjUsXCJ2YWx1ZVwiOjAuMjUsXCJtb2RlbFwiOlt7XCJsYWJlbFwiOlwiMVwiLFwidmFsdWVcIjo0fSx7XCJsYWJlbFwiOlwiMS8yXCIsXCJ2YWx1ZVwiOjJ9LHtcImxhYmVsXCI6XCIxLzRcIixcInZhbHVlXCI6MX0se1wibGFiZWxcIjpcIjEvOFwiLFwidmFsdWVcIjowLjV9LHtcImxhYmVsXCI6XCIxLzE2XCIsXCJ2YWx1ZVwiOjAuMjV9LHtcImxhYmVsXCI6XCIxLzMyXCIsXCJ2YWx1ZVwiOjAuMTI1fV0sXCJpc01pZGlDb250cm9sbGFibGVcIjpmYWxzZX0sXCJpc19tdXRlXCI6e1wibGFiZWxcIjpcIk11dGVcIixcInR5cGVcIjpcImJvb2xlYW5cIixcImRlZmF1bHRcIjpmYWxzZSxcInZhbHVlXCI6ZmFsc2UsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlLFwicmVtb3RlQ2hhbm5lbFwiOm51bGwsXCJyZW1vdGVDQ1wiOm51bGx9LFwibmFtZVwiOntcImxhYmVsXCI6XCJOYW1lXCIsXCJ0eXBlXCI6XCJzdHJpbmdcIixcImRlZmF1bHRcIjpcIlVubmFtZWRcIixcInZhbHVlXCI6XCJVbm5hbWVkXCIsXCJpc01pZGlDb250cm9sbGFibGVcIjpmYWxzZX19LFwiYWxsSWRzXCI6W1wic3RlcHNcIixcInB1bHNlc1wiLFwicm90YXRpb25cIixcImNoYW5uZWxfb3V0XCIsXCJwaXRjaF9vdXRcIixcInZlbG9jaXR5X291dFwiLFwicmF0ZVwiLFwibm90ZV9sZW5ndGhcIixcImlzX3RyaXBsZXRzXCIsXCJpc19tdXRlXCIsXCJuYW1lXCJdfX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL2VwZy9jb25maWcuanNvblxuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Euclid FX\",\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{\"in\":{\"x\":0,\"y\":-50}},\"allIds\":[\"in\"]},\"outputs\":{\"byId\":{\"out\":{\"x\":0,\"y\":50}},\"allIds\":[\"out\"]},\"params\":{\"byId\":{\"steps\":{\"label\":\"Steps\",\"type\":\"integer\",\"default\":16,\"value\":16,\"min\":1,\"max\":64,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"pulses\":{\"label\":\"Pulses\",\"type\":\"integer\",\"default\":4,\"value\":4,\"min\":0,\"max\":16,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"rotation\":{\"label\":\"Rotation\",\"type\":\"integer\",\"default\":0,\"value\":0,\"min\":0,\"max\":15,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"rate\":{\"label\":\"Rate\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}],\"isMidiControllable\":false},\"is_triplets\":{\"label\":\"Triplets\",\"type\":\"boolean\",\"default\":false,\"value\":false},\"target\":{\"label\":\"Target\",\"type\":\"itemized\",\"default\":\"velocity\",\"value\":\"velocity\",\"model\":[{\"label\":\"Velocity\",\"value\":\"velocity\"},{\"label\":\"Pitch\",\"value\":\"pitch\"},{\"label\":\"Channel\",\"value\":\"channel\"},{\"label\":\"Note length\",\"value\":\"length\"},{\"label\":\"Output\",\"value\":\"output\"}]},\"low\":{\"label\":\"Low value\",\"type\":\"integer\",\"default\":50,\"value\":50,\"min\":0,\"max\":127,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"high\":{\"label\":\"High value\",\"type\":\"integer\",\"default\":100,\"value\":100,\"min\":0,\"max\":127,\"isMidiControllable\":true,\"remoteChannel\":null,\"remoteCC\":null},\"relative\":{\"label\":\"Relative\",\"type\":\"boolean\",\"default\":false,\"value\":false},\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\",\"isMidiControllable\":false}},\"allIds\":[\"steps\",\"pulses\",\"rotation\",\"rate\",\"is_triplets\",\"target\",\"low\",\"high\",\"relative\",\"name\"]}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9jb25maWcuanNvbj9hZmZkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQix5REFBeUQsUUFBUSxNQUFNLGVBQWUsaUJBQWlCLFlBQVksUUFBUSxPQUFPLGNBQWMsa0JBQWtCLFdBQVcsUUFBUSxTQUFTLHlJQUF5SSxXQUFXLHdJQUF3SSxhQUFhLDBJQUEwSSxTQUFTLHVFQUF1RSxzQkFBc0IsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSw0QkFBNEIsRUFBRSw2QkFBNkIsNkJBQTZCLGdCQUFnQixrRUFBa0UsV0FBVyxxRkFBcUYsc0NBQXNDLEVBQUUsZ0NBQWdDLEVBQUUsb0NBQW9DLEVBQUUsdUNBQXVDLEVBQUUsa0NBQWtDLEVBQUUsUUFBUSw4SUFBOEksU0FBUyxpSkFBaUosYUFBYSxrRUFBa0UsU0FBUyxpR0FBaUciLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcIkV1Y2xpZCBGWFwiLFwicG9zaXRpb25YXCI6MCxcInBvc2l0aW9uWVwiOjAsXCJpbnB1dHNcIjp7XCJieUlkXCI6e1wiaW5cIjp7XCJ4XCI6MCxcInlcIjotNTB9fSxcImFsbElkc1wiOltcImluXCJdfSxcIm91dHB1dHNcIjp7XCJieUlkXCI6e1wib3V0XCI6e1wieFwiOjAsXCJ5XCI6NTB9fSxcImFsbElkc1wiOltcIm91dFwiXX0sXCJwYXJhbXNcIjp7XCJieUlkXCI6e1wic3RlcHNcIjp7XCJsYWJlbFwiOlwiU3RlcHNcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjoxNixcInZhbHVlXCI6MTYsXCJtaW5cIjoxLFwibWF4XCI6NjQsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlLFwicmVtb3RlQ2hhbm5lbFwiOm51bGwsXCJyZW1vdGVDQ1wiOm51bGx9LFwicHVsc2VzXCI6e1wibGFiZWxcIjpcIlB1bHNlc1wiLFwidHlwZVwiOlwiaW50ZWdlclwiLFwiZGVmYXVsdFwiOjQsXCJ2YWx1ZVwiOjQsXCJtaW5cIjowLFwibWF4XCI6MTYsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlLFwicmVtb3RlQ2hhbm5lbFwiOm51bGwsXCJyZW1vdGVDQ1wiOm51bGx9LFwicm90YXRpb25cIjp7XCJsYWJlbFwiOlwiUm90YXRpb25cIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjowLFwidmFsdWVcIjowLFwibWluXCI6MCxcIm1heFwiOjE1LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZSxcInJlbW90ZUNoYW5uZWxcIjpudWxsLFwicmVtb3RlQ0NcIjpudWxsfSxcInJhdGVcIjp7XCJsYWJlbFwiOlwiUmF0ZVwiLFwidHlwZVwiOlwiaXRlbWl6ZWRcIixcImRlZmF1bHRcIjowLjI1LFwidmFsdWVcIjowLjI1LFwibW9kZWxcIjpbe1wibGFiZWxcIjpcIjFcIixcInZhbHVlXCI6NH0se1wibGFiZWxcIjpcIjEvMlwiLFwidmFsdWVcIjoyfSx7XCJsYWJlbFwiOlwiMS80XCIsXCJ2YWx1ZVwiOjF9LHtcImxhYmVsXCI6XCIxLzhcIixcInZhbHVlXCI6MC41fSx7XCJsYWJlbFwiOlwiMS8xNlwiLFwidmFsdWVcIjowLjI1fSx7XCJsYWJlbFwiOlwiMS8zMlwiLFwidmFsdWVcIjowLjEyNX1dLFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6ZmFsc2V9LFwiaXNfdHJpcGxldHNcIjp7XCJsYWJlbFwiOlwiVHJpcGxldHNcIixcInR5cGVcIjpcImJvb2xlYW5cIixcImRlZmF1bHRcIjpmYWxzZSxcInZhbHVlXCI6ZmFsc2V9LFwidGFyZ2V0XCI6e1wibGFiZWxcIjpcIlRhcmdldFwiLFwidHlwZVwiOlwiaXRlbWl6ZWRcIixcImRlZmF1bHRcIjpcInZlbG9jaXR5XCIsXCJ2YWx1ZVwiOlwidmVsb2NpdHlcIixcIm1vZGVsXCI6W3tcImxhYmVsXCI6XCJWZWxvY2l0eVwiLFwidmFsdWVcIjpcInZlbG9jaXR5XCJ9LHtcImxhYmVsXCI6XCJQaXRjaFwiLFwidmFsdWVcIjpcInBpdGNoXCJ9LHtcImxhYmVsXCI6XCJDaGFubmVsXCIsXCJ2YWx1ZVwiOlwiY2hhbm5lbFwifSx7XCJsYWJlbFwiOlwiTm90ZSBsZW5ndGhcIixcInZhbHVlXCI6XCJsZW5ndGhcIn0se1wibGFiZWxcIjpcIk91dHB1dFwiLFwidmFsdWVcIjpcIm91dHB1dFwifV19LFwibG93XCI6e1wibGFiZWxcIjpcIkxvdyB2YWx1ZVwiLFwidHlwZVwiOlwiaW50ZWdlclwiLFwiZGVmYXVsdFwiOjUwLFwidmFsdWVcIjo1MCxcIm1pblwiOjAsXCJtYXhcIjoxMjcsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlLFwicmVtb3RlQ2hhbm5lbFwiOm51bGwsXCJyZW1vdGVDQ1wiOm51bGx9LFwiaGlnaFwiOntcImxhYmVsXCI6XCJIaWdoIHZhbHVlXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6MTAwLFwidmFsdWVcIjoxMDAsXCJtaW5cIjowLFwibWF4XCI6MTI3LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZSxcInJlbW90ZUNoYW5uZWxcIjpudWxsLFwicmVtb3RlQ0NcIjpudWxsfSxcInJlbGF0aXZlXCI6e1wibGFiZWxcIjpcIlJlbGF0aXZlXCIsXCJ0eXBlXCI6XCJib29sZWFuXCIsXCJkZWZhdWx0XCI6ZmFsc2UsXCJ2YWx1ZVwiOmZhbHNlfSxcIm5hbWVcIjp7XCJsYWJlbFwiOlwiTmFtZVwiLFwidHlwZVwiOlwic3RyaW5nXCIsXCJkZWZhdWx0XCI6XCJVbm5hbWVkXCIsXCJ2YWx1ZVwiOlwiVW5uYW1lZFwiLFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6ZmFsc2V9fSxcImFsbElkc1wiOltcInN0ZXBzXCIsXCJwdWxzZXNcIixcInJvdGF0aW9uXCIsXCJyYXRlXCIsXCJpc190cmlwbGV0c1wiLFwidGFyZ2V0XCIsXCJsb3dcIixcImhpZ2hcIixcInJlbGF0aXZlXCIsXCJuYW1lXCJdfX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL2V1Y2xpZGZ4L2NvbmZpZy5qc29uXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Output\",\"excludedFromLibrary\":true,\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{\"in\":{\"x\":0,\"y\":-50}},\"allIds\":[\"in\"]},\"outputs\":{\"byId\":{},\"allIds\":[]},\"params\":{\"byId\":{\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\",\"isMidiControllable\":false}},\"allIds\":[\"name\"]}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvY29uZmlnLmpzb24/N2FjNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsaUZBQWlGLFFBQVEsTUFBTSxlQUFlLGlCQUFpQixZQUFZLFNBQVMsYUFBYSxXQUFXLFFBQVEsUUFBUSxpR0FBaUciLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcIk91dHB1dFwiLFwiZXhjbHVkZWRGcm9tTGlicmFyeVwiOnRydWUsXCJwb3NpdGlvblhcIjowLFwicG9zaXRpb25ZXCI6MCxcImlucHV0c1wiOntcImJ5SWRcIjp7XCJpblwiOntcInhcIjowLFwieVwiOi01MH19LFwiYWxsSWRzXCI6W1wiaW5cIl19LFwib3V0cHV0c1wiOntcImJ5SWRcIjp7fSxcImFsbElkc1wiOltdfSxcInBhcmFtc1wiOntcImJ5SWRcIjp7XCJuYW1lXCI6e1wibGFiZWxcIjpcIk5hbWVcIixcInR5cGVcIjpcInN0cmluZ1wiLFwiZGVmYXVsdFwiOlwiVW5uYW1lZFwiLFwidmFsdWVcIjpcIlVubmFtZWRcIixcImlzTWlkaUNvbnRyb2xsYWJsZVwiOmZhbHNlfX0sXCJhbGxJZHNcIjpbXCJuYW1lXCJdfX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL291dHB1dC9jb25maWcuanNvblxuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/processor.js\": 7,\n\t\"./euclidfx/processor.js\": 9,\n\t\"./output/processor.js\": 11\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 21;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBcXHByb2Nlc3Nvci5qcyQ/MDY4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2VwZy9wcm9jZXNzb3IuanNcIjogNyxcblx0XCIuL2V1Y2xpZGZ4L3Byb2Nlc3Nvci5qc1wiOiA5LFxuXHRcIi4vb3V0cHV0L3Byb2Nlc3Nvci5qc1wiOiAxMVxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDIxO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMgXFxwcm9jZXNzb3IuanMkXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIConnectorIn;\n/**\n * MIDI network processor in connector.\n */\nfunction createMIDIConnectorIn(specs, my) {\n    var that,\n        sources = [],\n        numSources = 0,\n\n\n    /**\n     * Collects data from all processors this input is connected to.\n     * @return {Array} MIDI event data from all connected processors.\n     */\n    getInputData = function getInputData() {\n        var outputData = [],\n            data = [];\n        for (var i = 0; i < numSources; i++) {\n            data = sources[i].getOutputData();\n            outputData = outputData.concat(data);\n            data.length = 0;\n        }\n        return outputData;\n    },\n\n\n    /**\n     * Connect a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    addConnection = function addConnection(processor) {\n        sources.push(processor);\n        numSources = sources.length;\n        console.log('Connect ' + processor.getType() + ' (id ' + processor.getID() + ') to ' + that.getType() + ' (id ' + that.getID() + ')');\n    },\n\n\n    /**\n     * Remove a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    removeConnection = function removeConnection(processor) {\n        var n = sources.length;\n        while (--n >= 0) {\n            if (processor === sources[n]) {\n                sources.splice(n, 1);\n                numSources = sources.length;\n                console.log('Disconnect ' + processor.getType() + ' (id ' + processor.getID() + ') from ' + that.getType() + ' (id ' + that.getID() + ')');\n                break;\n            }\n        }\n    },\n\n\n    /**\n     * Get number of connections.\n     * Used by the output port module to determine if \n     * @return {Number} Number of connections to this output processor.\n     */\n    hasInputConnections = function hasInputConnections() {\n        return numSources > 0;\n    };\n\n    my = my || {};\n    my.getInputData = getInputData;\n\n    that = specs.that || {};\n    that.addConnection = addConnection;\n    that.removeConnection = removeConnection;\n    that.hasInputConnections = hasInputConnections;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3Jpbi5qcz9mZDIwIl0sIm5hbWVzIjpbImNyZWF0ZU1JRElDb25uZWN0b3JJbiIsInNwZWNzIiwibXkiLCJ0aGF0Iiwic291cmNlcyIsIm51bVNvdXJjZXMiLCJnZXRJbnB1dERhdGEiLCJvdXRwdXREYXRhIiwiZGF0YSIsImkiLCJnZXRPdXRwdXREYXRhIiwiY29uY2F0IiwibGVuZ3RoIiwiYWRkQ29ubmVjdGlvbiIsInByb2Nlc3NvciIsInB1c2giLCJjb25zb2xlIiwibG9nIiwiZ2V0VHlwZSIsImdldElEIiwicmVtb3ZlQ29ubmVjdGlvbiIsIm4iLCJzcGxpY2UiLCJoYXNJbnB1dENvbm5lY3Rpb25zIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFHd0JBLHFCO0FBSHhCOzs7QUFHZSxTQUFTQSxxQkFBVCxDQUErQkMsS0FBL0IsRUFBc0NDLEVBQXRDLEVBQTBDO0FBQ3JELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxVQUFVLEVBRGQ7QUFBQSxRQUVJQyxhQUFhLENBRmpCOzs7QUFJSTs7OztBQUlBQyxtQkFBZSxTQUFmQSxZQUFlLEdBQVc7QUFDdEIsWUFBSUMsYUFBYSxFQUFqQjtBQUFBLFlBQ0lDLE9BQU8sRUFEWDtBQUVBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSixVQUFwQixFQUFnQ0ksR0FBaEMsRUFBcUM7QUFDakNELG1CQUFPSixRQUFRSyxDQUFSLEVBQVdDLGFBQVgsRUFBUDtBQUNBSCx5QkFBYUEsV0FBV0ksTUFBWCxDQUFrQkgsSUFBbEIsQ0FBYjtBQUNBQSxpQkFBS0ksTUFBTCxHQUFjLENBQWQ7QUFDSDtBQUNELGVBQU9MLFVBQVA7QUFDSCxLQWpCTDs7O0FBbUJJOzs7O0FBSUFNLG9CQUFnQixTQUFoQkEsYUFBZ0IsQ0FBU0MsU0FBVCxFQUFvQjtBQUNoQ1YsZ0JBQVFXLElBQVIsQ0FBYUQsU0FBYjtBQUNBVCxxQkFBYUQsUUFBUVEsTUFBckI7QUFDQUksZ0JBQVFDLEdBQVIsQ0FBWSxhQUFhSCxVQUFVSSxPQUFWLEVBQWIsR0FBbUMsT0FBbkMsR0FBNkNKLFVBQVVLLEtBQVYsRUFBN0MsR0FBaUUsT0FBakUsR0FBMkVoQixLQUFLZSxPQUFMLEVBQTNFLEdBQTRGLE9BQTVGLEdBQXNHZixLQUFLZ0IsS0FBTCxFQUF0RyxHQUFxSCxHQUFqSTtBQUNILEtBM0JMOzs7QUE2Qkk7Ozs7QUFJQUMsdUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBU04sU0FBVCxFQUFvQjtBQUNuQyxZQUFJTyxJQUFJakIsUUFBUVEsTUFBaEI7QUFDQSxlQUFPLEVBQUVTLENBQUYsSUFBTyxDQUFkLEVBQWlCO0FBQ2IsZ0JBQUlQLGNBQWNWLFFBQVFpQixDQUFSLENBQWxCLEVBQThCO0FBQzFCakIsd0JBQVFrQixNQUFSLENBQWVELENBQWYsRUFBa0IsQ0FBbEI7QUFDQWhCLDZCQUFhRCxRQUFRUSxNQUFyQjtBQUNBSSx3QkFBUUMsR0FBUixDQUFZLGdCQUFnQkgsVUFBVUksT0FBVixFQUFoQixHQUFzQyxPQUF0QyxHQUFnREosVUFBVUssS0FBVixFQUFoRCxHQUFvRSxTQUFwRSxHQUFnRmhCLEtBQUtlLE9BQUwsRUFBaEYsR0FBaUcsT0FBakcsR0FBMkdmLEtBQUtnQixLQUFMLEVBQTNHLEdBQTBILEdBQXRJO0FBQ0E7QUFDSDtBQUNKO0FBQ0osS0EzQ0w7OztBQTZDSTs7Ozs7QUFLQUksMEJBQXNCLFNBQXRCQSxtQkFBc0IsR0FBVztBQUM3QixlQUFPbEIsYUFBYSxDQUFwQjtBQUNILEtBcERMOztBQXNEQUgsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdJLFlBQUgsR0FBa0JBLFlBQWxCOztBQUVBSCxXQUFPRixNQUFNRSxJQUFOLElBQWMsRUFBckI7QUFDQUEsU0FBS1UsYUFBTCxHQUFxQkEsYUFBckI7QUFDQVYsU0FBS2lCLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFDQWpCLFNBQUtvQixtQkFBTCxHQUEyQkEsbUJBQTNCO0FBQ0EsV0FBT3BCLElBQVA7QUFDSCIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTUlESSBuZXR3b3JrIHByb2Nlc3NvciBpbiBjb25uZWN0b3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1JRElDb25uZWN0b3JJbihzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc291cmNlcyA9IFtdLFxuICAgICAgICBudW1Tb3VyY2VzID0gMCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsZWN0cyBkYXRhIGZyb20gYWxsIHByb2Nlc3NvcnMgdGhpcyBpbnB1dCBpcyBjb25uZWN0ZWQgdG8uXG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBNSURJIGV2ZW50IGRhdGEgZnJvbSBhbGwgY29ubmVjdGVkIHByb2Nlc3NvcnMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRJbnB1dERhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXREYXRhID0gW10sIFxuICAgICAgICAgICAgICAgIGRhdGEgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU291cmNlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IHNvdXJjZXNbaV0uZ2V0T3V0cHV0RGF0YSgpO1xuICAgICAgICAgICAgICAgIG91dHB1dERhdGEgPSBvdXRwdXREYXRhLmNvbmNhdChkYXRhKTtcbiAgICAgICAgICAgICAgICBkYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0RGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25uZWN0IGEgcHJvY2Vzc29yIGFzIHNvdXJjZSBmb3IgdGhpcyBwcm9jZXNzb3IuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIE5ldHdvcmsgTUlESSBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRDb25uZWN0aW9uID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2gocHJvY2Vzc29yKTtcbiAgICAgICAgICAgIG51bVNvdXJjZXMgPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ICcgKyBwcm9jZXNzb3IuZ2V0VHlwZSgpICsgJyAoaWQgJyArIHByb2Nlc3Nvci5nZXRJRCgpICsgJykgdG8gJyArIHRoYXQuZ2V0VHlwZSgpICsgJyAoaWQgJyArIHRoYXQuZ2V0SUQoKSArICcpJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGEgcHJvY2Vzc29yIGFzIHNvdXJjZSBmb3IgdGhpcyBwcm9jZXNzb3IuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIE5ldHdvcmsgTUlESSBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVDb25uZWN0aW9uID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgbiA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NvciA9PT0gc291cmNlc1tuXSkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzLnNwbGljZShuLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgbnVtU291cmNlcyA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGlzY29ubmVjdCAnICsgcHJvY2Vzc29yLmdldFR5cGUoKSArICcgKGlkICcgKyBwcm9jZXNzb3IuZ2V0SUQoKSArICcpIGZyb20gJyArIHRoYXQuZ2V0VHlwZSgpICsgJyAoaWQgJyArIHRoYXQuZ2V0SUQoKSArICcpJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgbnVtYmVyIG9mIGNvbm5lY3Rpb25zLlxuICAgICAgICAgKiBVc2VkIGJ5IHRoZSBvdXRwdXQgcG9ydCBtb2R1bGUgdG8gZGV0ZXJtaW5lIGlmIFxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE51bWJlciBvZiBjb25uZWN0aW9ucyB0byB0aGlzIG91dHB1dCBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICBoYXNJbnB1dENvbm5lY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtU291cmNlcyA+IDA7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5nZXRJbnB1dERhdGEgPSBnZXRJbnB1dERhdGE7XG5cbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICB0aGF0LmFkZENvbm5lY3Rpb24gPSBhZGRDb25uZWN0aW9uO1xuICAgIHRoYXQucmVtb3ZlQ29ubmVjdGlvbiA9IHJlbW92ZUNvbm5lY3Rpb247XG4gICAgdGhhdC5oYXNJbnB1dENvbm5lY3Rpb25zID0gaGFzSW5wdXRDb25uZWN0aW9ucztcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9taWRpL2Nvbm5lY3RvcmluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIConnectorOut;\n/**\n * MIDI network processor out connector.\n */\nfunction createMIDIConnectorOut(specs, my) {\n    var that,\n        outputData = [],\n        destinations = [],\n\n\n    /**\n     * Set output data that is the result of this processor's processing.\n     * It will be collected by the processors attached to this output.\n     * @param {Object} eventData MIDI event data.\n     */\n    setOutputData = function setOutputData(eventData) {\n        outputData.push(eventData);\n    },\n\n\n    /**\n     * Public function for processors connected to this output to\n     * collect the data this processor's process function has produced.\n     * @return {Object} MIDI event data.\n     */\n    getOutputData = function getOutputData() {\n        return outputData;\n    },\n\n\n    /**\n     * Connect this processor's output to another processor's input.\n     * @param  {Object} processor Processor to connect to.\n     */\n    connect = function connect(processor) {\n        var isConnected = false,\n            n = destinations.length;\n        for (var i = 0; i < n; i++) {\n            if (processor === destinations[i]) {\n                isConnected = true;\n                break;\n            }\n        }\n        if (!isConnected) {\n            processor.addConnection(that);\n            destinations.push(processor);\n        }\n    },\n\n\n    /**\n     * Disconnect this processor's output from another processor's input.\n     * @param  {Object} processor Processor to disconnect from, or undefined to remove all.\n     */\n    disconnect = function disconnect(processor) {\n        var n = destinations.length;\n        while (--n >= 0) {\n            if (!processor || processor && processor === destinations[n]) {\n                destinations[n].removeConnection(that);\n                destinations.splice(n, 1);\n            }\n        }\n    },\n\n\n    /**\n     * Get destination processors.\n     * Used to draw the connection cables on canvas.\n     * @return {Array} Processors this output connects to.\n     */\n    getDestinations = function getDestinations() {\n        return destinations;\n    },\n\n\n    /**\n     * The destinations are the processors this output is connected to.\n     * This function collects the ID's of these processors and adds them\n     * to a data object that can be stored.\n     * So this project and its processor connections can be restored.\n     * @param  {Object} data Project data object.\n     */\n    getDestinationsData = function getDestinationsData(data) {\n        data.destinations = [];\n        var n = destinations.length;\n        for (var i = 0; i < n; i++) {\n            data.destinations.push(destinations[i].getID());\n        }\n    };\n\n    my = my || {};\n    my.setOutputData = setOutputData;\n    my.getDestinationsData = getDestinationsData;\n\n    that = specs.that || {};\n\n    that.getDestinations = getDestinations;\n    that.getOutputData = getOutputData;\n    that.connect = connect;\n    that.disconnect = disconnect;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3JvdXQuanM/ZTZlMiJdLCJuYW1lcyI6WyJjcmVhdGVNSURJQ29ubmVjdG9yT3V0Iiwic3BlY3MiLCJteSIsInRoYXQiLCJvdXRwdXREYXRhIiwiZGVzdGluYXRpb25zIiwic2V0T3V0cHV0RGF0YSIsImV2ZW50RGF0YSIsInB1c2giLCJnZXRPdXRwdXREYXRhIiwiY29ubmVjdCIsInByb2Nlc3NvciIsImlzQ29ubmVjdGVkIiwibiIsImxlbmd0aCIsImkiLCJhZGRDb25uZWN0aW9uIiwiZGlzY29ubmVjdCIsInJlbW92ZUNvbm5lY3Rpb24iLCJzcGxpY2UiLCJnZXREZXN0aW5hdGlvbnMiLCJnZXREZXN0aW5hdGlvbnNEYXRhIiwiZGF0YSIsImdldElEIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFHd0JBLHNCO0FBSHhCOzs7QUFHZSxTQUFTQSxzQkFBVCxDQUFnQ0MsS0FBaEMsRUFBdUNDLEVBQXZDLEVBQTJDO0FBQ3RELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxhQUFhLEVBRGpCO0FBQUEsUUFFSUMsZUFBZSxFQUZuQjs7O0FBSUk7Ozs7O0FBS0FDLG9CQUFnQixTQUFoQkEsYUFBZ0IsQ0FBU0MsU0FBVCxFQUFvQjtBQUNoQ0gsbUJBQVdJLElBQVgsQ0FBZ0JELFNBQWhCO0FBQ0gsS0FYTDs7O0FBYUk7Ozs7O0FBS0FFLG9CQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPTCxVQUFQO0FBQ0gsS0FwQkw7OztBQXNCSTs7OztBQUlBTSxjQUFVLFNBQVZBLE9BQVUsQ0FBU0MsU0FBVCxFQUFvQjtBQUMxQixZQUFJQyxjQUFjLEtBQWxCO0FBQUEsWUFDSUMsSUFBSVIsYUFBYVMsTUFEckI7QUFFQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsQ0FBcEIsRUFBdUJFLEdBQXZCLEVBQTRCO0FBQ3hCLGdCQUFJSixjQUFjTixhQUFhVSxDQUFiLENBQWxCLEVBQW1DO0FBQy9CSCw4QkFBYyxJQUFkO0FBQ0E7QUFDSDtBQUNKO0FBQ0QsWUFBSSxDQUFDQSxXQUFMLEVBQWtCO0FBQ2RELHNCQUFVSyxhQUFWLENBQXdCYixJQUF4QjtBQUNBRSx5QkFBYUcsSUFBYixDQUFrQkcsU0FBbEI7QUFDSDtBQUNKLEtBdkNMOzs7QUF5Q0k7Ozs7QUFJQU0saUJBQWEsU0FBYkEsVUFBYSxDQUFTTixTQUFULEVBQW9CO0FBQzdCLFlBQUlFLElBQUlSLGFBQWFTLE1BQXJCO0FBQ0EsZUFBTyxFQUFFRCxDQUFGLElBQU8sQ0FBZCxFQUFpQjtBQUNiLGdCQUFJLENBQUNGLFNBQUQsSUFBZUEsYUFBYUEsY0FBY04sYUFBYVEsQ0FBYixDQUE5QyxFQUFnRTtBQUM1RFIsNkJBQWFRLENBQWIsRUFBZ0JLLGdCQUFoQixDQUFpQ2YsSUFBakM7QUFDQUUsNkJBQWFjLE1BQWIsQ0FBb0JOLENBQXBCLEVBQXVCLENBQXZCO0FBQ0g7QUFDSjtBQUNKLEtBckRMOzs7QUF1REk7Ozs7O0FBS0FPLHNCQUFrQixTQUFsQkEsZUFBa0IsR0FBVztBQUN6QixlQUFPZixZQUFQO0FBQ0gsS0E5REw7OztBQWdFSTs7Ozs7OztBQU9BZ0IsMEJBQXNCLFNBQXRCQSxtQkFBc0IsQ0FBU0MsSUFBVCxFQUFlO0FBQ2pDQSxhQUFLakIsWUFBTCxHQUFvQixFQUFwQjtBQUNBLFlBQUlRLElBQUlSLGFBQWFTLE1BQXJCO0FBQ0EsYUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlGLENBQXBCLEVBQXVCRSxHQUF2QixFQUE0QjtBQUN4Qk8saUJBQUtqQixZQUFMLENBQWtCRyxJQUFsQixDQUF1QkgsYUFBYVUsQ0FBYixFQUFnQlEsS0FBaEIsRUFBdkI7QUFDSDtBQUNKLEtBN0VMOztBQStFQXJCLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHSSxhQUFILEdBQW1CQSxhQUFuQjtBQUNBSixPQUFHbUIsbUJBQUgsR0FBeUJBLG1CQUF6Qjs7QUFFQWxCLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQUEsU0FBS2lCLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0FqQixTQUFLTSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBTixTQUFLTyxPQUFMLEdBQWVBLE9BQWY7QUFDQVAsU0FBS2MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxXQUFPZCxJQUFQO0FBQ0giLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1JREkgbmV0d29yayBwcm9jZXNzb3Igb3V0IGNvbm5lY3Rvci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUNvbm5lY3Rvck91dChzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgb3V0cHV0RGF0YSA9IFtdLFxuICAgICAgICBkZXN0aW5hdGlvbnMgPSBbXSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgb3V0cHV0IGRhdGEgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIHRoaXMgcHJvY2Vzc29yJ3MgcHJvY2Vzc2luZy5cbiAgICAgICAgICogSXQgd2lsbCBiZSBjb2xsZWN0ZWQgYnkgdGhlIHByb2Nlc3NvcnMgYXR0YWNoZWQgdG8gdGhpcyBvdXRwdXQuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudERhdGEgTUlESSBldmVudCBkYXRhLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0T3V0cHV0RGF0YSA9IGZ1bmN0aW9uKGV2ZW50RGF0YSkge1xuICAgICAgICAgICAgb3V0cHV0RGF0YS5wdXNoKGV2ZW50RGF0YSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUHVibGljIGZ1bmN0aW9uIGZvciBwcm9jZXNzb3JzIGNvbm5lY3RlZCB0byB0aGlzIG91dHB1dCB0b1xuICAgICAgICAgKiBjb2xsZWN0IHRoZSBkYXRhIHRoaXMgcHJvY2Vzc29yJ3MgcHJvY2VzcyBmdW5jdGlvbiBoYXMgcHJvZHVjZWQuXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gTUlESSBldmVudCBkYXRhLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0T3V0cHV0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dERhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ29ubmVjdCB0aGlzIHByb2Nlc3NvcidzIG91dHB1dCB0byBhbm90aGVyIHByb2Nlc3NvcidzIGlucHV0LlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHByb2Nlc3NvciBQcm9jZXNzb3IgdG8gY29ubmVjdCB0by5cbiAgICAgICAgICovXG4gICAgICAgIGNvbm5lY3QgPSBmdW5jdGlvbihwcm9jZXNzb3IpIHtcbiAgICAgICAgICAgIHZhciBpc0Nvbm5lY3RlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIG4gPSBkZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc29yID09PSBkZXN0aW5hdGlvbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc29yLmFkZENvbm5lY3Rpb24odGhhdCk7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25zLnB1c2gocHJvY2Vzc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNjb25uZWN0IHRoaXMgcHJvY2Vzc29yJ3Mgb3V0cHV0IGZyb20gYW5vdGhlciBwcm9jZXNzb3IncyBpbnB1dC5cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBwcm9jZXNzb3IgUHJvY2Vzc29yIHRvIGRpc2Nvbm5lY3QgZnJvbSwgb3IgdW5kZWZpbmVkIHRvIHJlbW92ZSBhbGwuXG4gICAgICAgICAqL1xuICAgICAgICBkaXNjb25uZWN0ID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgbiA9IGRlc3RpbmF0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoIXByb2Nlc3NvciB8fCAocHJvY2Vzc29yICYmIHByb2Nlc3NvciA9PT0gZGVzdGluYXRpb25zW25dKSkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbnNbbl0ucmVtb3ZlQ29ubmVjdGlvbih0aGF0KTtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25zLnNwbGljZShuLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGRlc3RpbmF0aW9uIHByb2Nlc3NvcnMuXG4gICAgICAgICAqIFVzZWQgdG8gZHJhdyB0aGUgY29ubmVjdGlvbiBjYWJsZXMgb24gY2FudmFzLlxuICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gUHJvY2Vzc29ycyB0aGlzIG91dHB1dCBjb25uZWN0cyB0by5cbiAgICAgICAgICovXG4gICAgICAgIGdldERlc3RpbmF0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9ucztcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVzdGluYXRpb25zIGFyZSB0aGUgcHJvY2Vzc29ycyB0aGlzIG91dHB1dCBpcyBjb25uZWN0ZWQgdG8uXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gY29sbGVjdHMgdGhlIElEJ3Mgb2YgdGhlc2UgcHJvY2Vzc29ycyBhbmQgYWRkcyB0aGVtXG4gICAgICAgICAqIHRvIGEgZGF0YSBvYmplY3QgdGhhdCBjYW4gYmUgc3RvcmVkLlxuICAgICAgICAgKiBTbyB0aGlzIHByb2plY3QgYW5kIGl0cyBwcm9jZXNzb3IgY29ubmVjdGlvbnMgY2FuIGJlIHJlc3RvcmVkLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGRhdGEgUHJvamVjdCBkYXRhIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldERlc3RpbmF0aW9uc0RhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBkYXRhLmRlc3RpbmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgdmFyIG4gPSBkZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBkYXRhLmRlc3RpbmF0aW9ucy5wdXNoKGRlc3RpbmF0aW9uc1tpXS5nZXRJRCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnNldE91dHB1dERhdGEgPSBzZXRPdXRwdXREYXRhO1xuICAgIG15LmdldERlc3RpbmF0aW9uc0RhdGEgPSBnZXREZXN0aW5hdGlvbnNEYXRhO1xuXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgdGhhdC5nZXREZXN0aW5hdGlvbnMgPSBnZXREZXN0aW5hdGlvbnM7XG4gICAgdGhhdC5nZXRPdXRwdXREYXRhID0gZ2V0T3V0cHV0RGF0YTtcbiAgICB0aGF0LmNvbm5lY3QgPSBjb25uZWN0O1xuICAgIHRoYXQuZGlzY29ubmVjdCA9IGRpc2Nvbm5lY3Q7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3JvdXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createReducers;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction createReducers() {\n\n    var initialState = {\n        processors: {\n            byId: {},\n            allIds: []\n        },\n        connections: {\n            byId: {},\n            allIds: []\n        },\n        ports: {\n            byId: {},\n            allIds: []\n        },\n        types: {\n            byId: {},\n            allIds: []\n        },\n        bpm: 120,\n        selectedID: null,\n        theme: 'dev', // 'light|dark' \n        transport: 'stop', // 'play|pause|stop'\n        connectModeActive: false,\n        learnModeActive: false,\n        learnTargetProcessorID: null,\n        learnTargetParameterKey: null,\n        showHelpPanel: false,\n        showPreferencesPanel: false,\n        showSettingsPanel: false\n    },\n        reduce = function reduce() {\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var newState = void 0;\n        switch (action.type) {\n\n            case actions.NEW_PROJECT:\n                return _extends({}, initialState, {\n                    ports: state.ports\n                });\n\n            case actions.SET_PROJECT:\n                console.log(_extends({}, state, action.data));\n                return _extends({}, state, action.data);\n\n            case actions.SET_THEME:\n                return _extends({}, state, { theme: state.theme === 'light' ? 'dark' : 'light' });\n\n            case actions.ADD_PROCESSOR:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId, _defineProperty({}, action.data.id, action.data)),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // array index depends on processor type\n                var numInputProcessors = newState.processors.allIds.filter(function (id) {\n                    newState.processors.byId[id].type === 'input';\n                }).length;\n                switch (action.data.type) {\n                    case 'input':\n                        newState.processors.allIds.unshift(action.data.id);\n                        numInputProcessors++;\n                        break;\n                    case 'output':\n                        newState.processors.allIds.push(action.data.id);\n                        break;\n                    default:\n                        newState.processors.allIds.splice(numInputProcessors, 0, action.data.id);\n                        newState.showSettingsPanel = true;\n\n                }\n                return newState;\n\n            case actions.DELETE_PROCESSOR:\n                var index = state.processors.allIds.indexOf(action.id);\n\n                // delete the processor\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: state.processors.allIds.filter(function (id) {\n                            return id !== action.id;\n                        })\n                    } });\n                delete newState.processors.byId[action.id];\n\n                // delete all connections to and from the deleted processor\n                newState.connections = {\n                    byId: _extends({}, state.connections.byId),\n                    allIds: [].concat(_toConsumableArray(state.connections.allIds))\n                };\n                for (var i = newState.connections.allIds.length - 1, n = 0; i >= n; i--) {\n                    var connectionID = newState.connections.allIds[i];\n                    var connection = newState.connections.byId[connectionID];\n                    if (connection.sourceProcessorID === action.id || connection.destinationProcessorID === action.id) {\n                        newState.connections.allIds.splice(i, 1);\n                        delete newState.connections.byId[connectionID];\n                    }\n                }\n\n                // select the next processor, if any, or a previous one\n                var newIndex = void 0;\n                if (newState.selectedID === action.id && newState.processors.allIds.length) {\n                    if (newState.processors.allIds[index]) {\n                        newIndex = index;\n                    } else if (index > 0) {\n                        newIndex = index - 1;\n                    } else {\n                        newIndex = 0;\n                    }\n                    newState.selectedID = newState.processors.allIds[newIndex];\n                }\n                return newState;\n\n            case actions.SELECT_PROCESSOR:\n                return Object.assign({}, state, {\n                    selectedID: action.id\n                });\n\n            case actions.DRAG_SELECTED_PROCESSOR:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                newState.processors.byId[newState.selectedID].positionX = action.x;\n                newState.processors.byId[newState.selectedID].positionY = action.y;\n                return newState;\n\n            case actions.DRAG_ALL_PROCESSORS:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                newState.processors.allIds.forEach(function (id) {\n                    newState.processors.byId[id].positionX += action.x;\n                    newState.processors.byId[id].positionY += action.y;\n                });\n                return newState;\n\n            case actions.CHANGE_PARAMETER:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                var param = newState.processors.byId[action.processorID].params.byId[action.paramKey];\n                switch (param.type) {\n                    case 'integer':\n                        param.value = Math.max(param.min, Math.min(action.paramValue, param.max));\n                        break;\n                    case 'boolean':\n                        param.value = !!action.paramValue;\n                        break;\n                    case 'itemized':\n                        param.value = action.paramValue;\n                        break;\n                    case 'string':\n                        param.value = action.paramValue;\n                        break;\n                }\n                return newState;\n\n            case actions.RECREATE_PARAMETER:\n                // clone state\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // clone parameter, overwrite with new settings.\n                newState.processors.byId[action.processorID].params.byId[action.paramKey] = _extends({}, newState.processors.byId[action.processorID].params.byId[action.paramKey], action.paramObj);\n\n                return newState;\n\n            case actions.SET_TEMPO:\n                return Object.assign({}, state, { bpm: action.value });\n\n            case actions.MIDI_PORT_CHANGE:\n                newState = _extends({}, state, {\n                    ports: {\n                        byId: _extends({}, state.ports.byId),\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds))\n                    } });\n\n                if (state.ports.byId[action.midiPort.id]) {\n                    // update existing port\n                    newState.ports.byId[action.midiPort.id] = _extends({}, state.ports.byId[action.midiPort.id], {\n                        connection: action.midiPort.connection,\n                        state: action.midiPort.state\n                    });\n                } else {\n                    // add new port\n                    newState.ports.byId[action.midiPort.id] = {\n                        id: action.midiPort.id,\n                        type: action.midiPort.type,\n                        name: action.midiPort.name,\n                        connection: action.midiPort.connection,\n                        state: action.midiPort.state,\n                        networkEnabled: false,\n                        syncEnabled: false,\n                        remoteEnabled: false\n                    };\n                    newState.ports.allIds.push(action.midiPort.id);\n                    newState.ports.allIds.sort(function (a, b) {\n                        if (a.name < b.name) {\n                            return -1;\n                        }\n                        if (a.name > b.name) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n                }\n                return newState;\n\n            case actions.TOGGLE_PORT_SYNC:\n                return toggleMIDIPreference(state, action.id, 'syncEnabled');\n\n            case actions.TOGGLE_PORT_REMOTE:\n                return toggleMIDIPreference(state, action.id, 'remoteEnabled');\n\n            case actions.TOGGLE_MIDI_PREFERENCE:\n                return toggleMIDIPreference(state, action.id, action.preferenceName);\n\n            case actions.TOGGLE_MIDI_LEARN_MODE:\n                return Object.assign({}, state, {\n                    learnModeActive: !state.learnModeActive });\n\n            case actions.TOGGLE_MIDI_LEARN_TARGET:\n                return Object.assign({}, state, {\n                    learnTargetProcessorID: action.processorID,\n                    learnTargetParameterKey: action.parameterKey\n                });\n\n            case actions.SET_TRANSPORT:\n                var value = action.command;\n                if (action.command === 'toggle') {\n                    value = state.transport === 'play' ? 'pause' : 'play';\n                }\n                return Object.assign({}, state, {\n                    transport: value\n                });\n\n            case actions.ASSIGN_EXTERNAL_CONTROL:\n                if (state.learnModeActive && state.learnTargetProcessorID && state.learnTargetParameterKey) {\n                    newState = _extends({}, state, {\n                        processors: {\n                            allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                            byId: _extends({}, state.processors.byId)\n                        } });\n                    newState.processors.byId[state.learnTargetProcessorID].params.byId = assignParameter(newState.processors.byId[state.learnTargetProcessorID].params.byId, action, state);\n                    return newState;\n                }\n                return state;\n\n            case actions.UNASSIGN_EXTERNAL_CONTROL:\n                if (state.learnModeActive && state.learnTargetProcessorID && state.learnTargetParameterKey) {\n                    newState = _extends({}, state, {\n                        processors: {\n                            allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                            byId: _extends({}, state.processors.byId)\n                        } });\n                    newState.processors.byId[state.learnTargetProcessorID].params.byId = unassignParameter(newState.processors.byId[state.learnTargetProcessorID].params.byId, action, state);\n                    return newState;\n                }\n                return state;\n\n            case actions.TOGGLE_PANEL:\n                return _extends({}, state, {\n                    showHelpPanel: action.panelName === 'help' ? !state.showHelpPanel : state.showHelpPanel,\n                    showPreferencesPanel: action.panelName === 'preferences' ? !state.showPreferencesPanel : state.showPreferencesPanel,\n                    showSettingsPanel: action.panelName === 'settings' ? !state.showSettingsPanel : state.showSettingsPanel\n                });\n                return state;\n\n            case actions.TOGGLE_CONNECT_MODE:\n                return _extends({}, state, {\n                    connectModeActive: !state.connectModeActive\n                });\n\n            case actions.CONNECT_PROCESSORS:\n                // abort if the connection already exists\n                for (var _i = 0, _n = state.connections.allIds.length; _i < _n; _i++) {\n                    var _connection = state.connections.byId[state.connections.allIds[_i]];\n                    if (_connection.sourceProcessorID === action.payload.sourceProcessorID && _connection.sourceConnectorID === action.payload.sourceConnectorID && _connection.destinationProcessorID === action.payload.destinationProcessorID && _connection.destinationConnectorID === action.payload.destinationConnectorID) {\n                        return state;\n                    }\n                }\n                // add new connection\n                newState = _extends({}, state, {\n                    connections: {\n                        byId: _extends({}, state.connections.byId, _defineProperty({}, action.id, action.payload)),\n                        allIds: [].concat(_toConsumableArray(state.connections.allIds), [action.id])\n                    },\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    }\n                });\n                // reorder the processors\n                orderProcessors(newState);\n                return newState;\n\n            case actions.DISCONNECT_PROCESSORS:\n                newState = _extends({}, state, {\n                    connections: deleteFromNormalizedTable(state.connections, action.id),\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    }\n                });\n                // reorder the processors\n                orderProcessors(newState);\n                return newState;\n\n            case actions.RESCAN_TYPES:\n                return _extends({}, state, {\n                    types: {\n                        allIds: Object.keys(action.types),\n                        byId: action.types\n                    }\n                });\n\n            default:\n                return state;\n        }\n    };\n\n    return {\n        reduce: reduce\n    };\n}\n\n// function addToNormalizedTable(stateObj, newItemID, newItem) {\n//     const clone = {\n//         byId: { ...stateObj.byId, [newItemID]: newItem },\n//         allIds: [ ...stateObj.allIds, newItemID ]\n//     };\n//     return clone;\n// }\n\nfunction deleteFromNormalizedTable(table, id) {\n    var clone = {\n        byId: _extends({}, table.byId),\n        allIds: table.allIds.filter(function (iid) {\n            return iid !== id;\n        })\n    };\n    delete clone.byId[id];\n    return clone;\n}\n\nfunction assignParameter(parameters, action, state) {\n    var params = _extends({}, parameters);\n    params[state.learnTargetParameterKey].remoteChannel = (action.data[0] & 0xf) + 1;\n    params[state.learnTargetParameterKey].remoteCC = action.data[1];\n    return params;\n}\n\nfunction unassignParameter(parameters, action, state) {\n    var params = _extends({}, parameters);\n    params[action.paramKey].remoteChannel = null;\n    params[action.paramKey].remoteCC = null;\n    return params;\n}\n\nfunction toggleMIDIPreference(state, id, preferenceName) {\n    var newState = _extends({}, state, {\n        ports: {\n            allIds: [].concat(_toConsumableArray(state.ports.allIds)),\n            byId: _extends({}, state.ports.byId)\n        }\n    });\n    newState.ports.byId[id] = _extends({}, newState.ports.byId[id], _defineProperty({}, preferenceName, !state.ports.byId[id][preferenceName]));\n    return newState;\n}\n\n/**\n * Order thee processors according to their connections\n * to optimise the flow from inputs to outputs.\n * \n * Rule: when connected, the source goes before the destination\n * \n * @param {Object} state The whole state object.\n */\nfunction orderProcessors(state) {\n    state.processors.allIds.sort(function (a, b) {\n        var compareResult = 0;\n        // look for connections\n        state.connections.allIds.forEach(function (id) {\n            var connection = state.connections.byId[id];\n            if (connection.sourceProcessorID === a && connection.destinationProcessorID === b) {\n                // source A connects to destination B\n                compareResult = -1;\n            } else if (connection.sourceProcessorID === b && connection.destinationProcessorID === a) {\n                // source B connects to destination A\n                compareResult = 1;\n            }\n        });\n        return compareResult;\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStore;\n\nvar _selectors = __webpack_require__(3);\n\nfunction createStore() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var STATE_CHANGE = 'STATE_CHANGE';\n\n    var that = {},\n        actions = specs.actions,\n        reducers = specs.reducers,\n        currentState = void 0,\n        init = function init() {\n        currentState = reducers.reduce();\n    },\n        dispatch = function dispatch(action) {\n        // thunk or not\n        if (typeof action === 'function') {\n            action(dispatch, getState, getActions);\n        } else {\n            currentState = reducers.reduce(currentState, action, actions);\n            (0, _selectors.memoize)(currentState, action, actions);\n            document.dispatchEvent(new CustomEvent(STATE_CHANGE, { detail: {\n                    state: currentState,\n                    action: action,\n                    actions: actions\n                } }));\n        }\n    },\n        getActions = function getActions() {\n        return actions;\n    },\n        getState = function getState() {\n        return currentState;\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    that.STATE_CHANGE = STATE_CHANGE;\n    that.dispatch = dispatch;\n    that.getActions = getActions;\n    that.getState = getState;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanM/ZDhjZSJdLCJuYW1lcyI6WyJjcmVhdGVTdG9yZSIsInNwZWNzIiwibXkiLCJTVEFURV9DSEFOR0UiLCJ0aGF0IiwiYWN0aW9ucyIsInJlZHVjZXJzIiwiY3VycmVudFN0YXRlIiwiaW5pdCIsInJlZHVjZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwiZ2V0U3RhdGUiLCJnZXRBY3Rpb25zIiwiZG9jdW1lbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJzdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBRXdCQSxXOztBQUZ4Qjs7QUFFZSxTQUFTQSxXQUFULEdBQTBDO0FBQUEsUUFBckJDLEtBQXFCLHVFQUFiLEVBQWE7QUFBQSxRQUFUQyxFQUFTLHVFQUFKLEVBQUk7O0FBQ3JELFFBQU1DLGVBQWUsY0FBckI7O0FBRUEsUUFBSUMsT0FBTyxFQUFYO0FBQUEsUUFDSUMsVUFBVUosTUFBTUksT0FEcEI7QUFBQSxRQUVJQyxXQUFXTCxNQUFNSyxRQUZyQjtBQUFBLFFBR0lDLHFCQUhKO0FBQUEsUUFLSUMsT0FBTyxTQUFQQSxJQUFPLEdBQU07QUFDVEQsdUJBQWVELFNBQVNHLE1BQVQsRUFBZjtBQUNILEtBUEw7QUFBQSxRQVNJQyxXQUFXLFNBQVhBLFFBQVcsQ0FBQ0MsTUFBRCxFQUFZO0FBQ25CO0FBQ0EsWUFBSSxPQUFPQSxNQUFQLEtBQWtCLFVBQXRCLEVBQWtDO0FBQzlCQSxtQkFBT0QsUUFBUCxFQUFpQkUsUUFBakIsRUFBMkJDLFVBQTNCO0FBQ0gsU0FGRCxNQUVPO0FBQ0hOLDJCQUFlRCxTQUFTRyxNQUFULENBQWdCRixZQUFoQixFQUE4QkksTUFBOUIsRUFBc0NOLE9BQXRDLENBQWY7QUFDQSxvQ0FBUUUsWUFBUixFQUFzQkksTUFBdEIsRUFBOEJOLE9BQTlCO0FBQ0FTLHFCQUFTQyxhQUFULENBQXVCLElBQUlDLFdBQUosQ0FBZ0JiLFlBQWhCLEVBQThCLEVBQUVjLFFBQVE7QUFDM0RDLDJCQUFPWCxZQURvRDtBQUUzREksNEJBQVFBLE1BRm1EO0FBRzNETiw2QkFBU0E7QUFIa0QsaUJBQVYsRUFBOUIsQ0FBdkI7QUFLSDtBQUNKLEtBdEJMO0FBQUEsUUF3QklRLGFBQWEsU0FBYkEsVUFBYSxHQUFNO0FBQ2YsZUFBT1IsT0FBUDtBQUNILEtBMUJMO0FBQUEsUUE0QklPLFdBQVcsU0FBWEEsUUFBVyxHQUFNO0FBQ2IsZUFBT0wsWUFBUDtBQUNILEtBOUJMOztBQWdDQUgsV0FBT0gsTUFBTUcsSUFBTixJQUFjLEVBQXJCOztBQUVBSTs7QUFFQUosU0FBS0QsWUFBTCxHQUFvQkEsWUFBcEI7QUFDQUMsU0FBS00sUUFBTCxHQUFnQkEsUUFBaEI7QUFDQU4sU0FBS1MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQVQsU0FBS1EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxXQUFPUixJQUFQO0FBQ0giLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZW1vaXplIH0gZnJvbSAnLi9zZWxlY3RvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdG9yZShzcGVjcyA9IHt9LCBteSA9IHt9KSB7XG4gICAgY29uc3QgU1RBVEVfQ0hBTkdFID0gJ1NUQVRFX0NIQU5HRSc7XG5cbiAgICBsZXQgdGhhdCA9IHt9LFxuICAgICAgICBhY3Rpb25zID0gc3BlY3MuYWN0aW9ucyxcbiAgICAgICAgcmVkdWNlcnMgPSBzcGVjcy5yZWR1Y2VycyxcbiAgICAgICAgY3VycmVudFN0YXRlLFxuXG4gICAgICAgIGluaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50U3RhdGUgPSByZWR1Y2Vycy5yZWR1Y2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGRpc3BhdGNoID0gKGFjdGlvbikgPT4ge1xuICAgICAgICAgICAgLy8gdGh1bmsgb3Igbm90XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGdldEFjdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGUgPSByZWR1Y2Vycy5yZWR1Y2UoY3VycmVudFN0YXRlLCBhY3Rpb24sIGFjdGlvbnMpO1xuICAgICAgICAgICAgICAgIG1lbW9pemUoY3VycmVudFN0YXRlLCBhY3Rpb24sIGFjdGlvbnMpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFNUQVRFX0NIQU5HRSwgeyBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGN1cnJlbnRTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IGFjdGlvbnNcbiAgICAgICAgICAgICAgICB9fSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBcbiAgICAgICAgXG4gICAgICAgIGdldEFjdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9ucztcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGdldFN0YXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgdGhhdC5TVEFURV9DSEFOR0UgPSBTVEFURV9DSEFOR0U7XG4gICAgdGhhdC5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICAgIHRoYXQuZ2V0QWN0aW9ucyA9IGdldEFjdGlvbnM7XG4gICAgdGhhdC5nZXRTdGF0ZSA9IGdldFN0YXRlO1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3N0YXRlL3N0b3JlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = persist;\n/**\n * Persist splits the state in a project part and a configuration part.\n * Both are stored when the app quits and loaded when it starts up.\n * \n * The project part is saved to localstorage.\n * \n * Configuration is saved in localStorage in the browser,\n * or in a file system's appication data directory in the Electron app.\n * @see https://codeburst.io/how-to-store-user-data-in-electron-3ba6bf66bc1e\n * \n * @param {Object} store Store functionality object.\n */\nfunction persist(store) {\n    var projectName = 'project',\n        configName = 'config';\n\n    window.addEventListener('beforeunload', function (e) {\n        var state = store.getState();\n\n        var projectState = _extends({}, state);\n        delete projectState.ports;\n        delete projectState.theme;\n        localStorage.setItem(projectName, JSON.stringify(projectState));\n\n        var configState = {\n            ports: state.ports,\n            theme: state.theme\n        };\n        localStorage.setItem(configName, JSON.stringify(configState));\n    });\n\n    var projectData = localStorage.getItem(projectName);\n    var configData = localStorage.getItem(configName);\n\n    var projectState = projectData ? JSON.parse(projectData) : {};\n    var configState = configData ? JSON.parse(configData) : {};\n\n    var data = _extends({}, projectState, configState);\n\n    if (data) {\n        store.dispatch(store.getActions().setProject(data));\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvcGVyc2lzdC5qcz9kZjExIl0sIm5hbWVzIjpbInBlcnNpc3QiLCJzdG9yZSIsInByb2plY3ROYW1lIiwiY29uZmlnTmFtZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGF0ZSIsImdldFN0YXRlIiwicHJvamVjdFN0YXRlIiwicG9ydHMiLCJ0aGVtZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlnU3RhdGUiLCJwcm9qZWN0RGF0YSIsImdldEl0ZW0iLCJjb25maWdEYXRhIiwicGFyc2UiLCJkYXRhIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwic2V0UHJvamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBWXdCQSxPO0FBWnhCOzs7Ozs7Ozs7Ozs7QUFZZSxTQUFTQSxPQUFULENBQWlCQyxLQUFqQixFQUF3QjtBQUNuQyxRQUFNQyxjQUFjLFNBQXBCO0FBQUEsUUFDSUMsYUFBYSxRQURqQjs7QUFHQUMsV0FBT0MsZ0JBQVAsQ0FBd0IsY0FBeEIsRUFBd0MsYUFBSztBQUN6QyxZQUFNQyxRQUFRTCxNQUFNTSxRQUFOLEVBQWQ7O0FBRUEsWUFBTUMsNEJBQW9CRixLQUFwQixDQUFOO0FBQ0EsZUFBT0UsYUFBYUMsS0FBcEI7QUFDQSxlQUFPRCxhQUFhRSxLQUFwQjtBQUNBQyxxQkFBYUMsT0FBYixDQUFxQlYsV0FBckIsRUFBa0NXLEtBQUtDLFNBQUwsQ0FBZU4sWUFBZixDQUFsQzs7QUFFQSxZQUFNTyxjQUFjO0FBQ2hCTixtQkFBT0gsTUFBTUcsS0FERztBQUVoQkMsbUJBQU9KLE1BQU1JO0FBRkcsU0FBcEI7QUFJQUMscUJBQWFDLE9BQWIsQ0FBcUJULFVBQXJCLEVBQWlDVSxLQUFLQyxTQUFMLENBQWVDLFdBQWYsQ0FBakM7QUFDSCxLQWJEOztBQWdCQSxRQUFNQyxjQUFjTCxhQUFhTSxPQUFiLENBQXFCZixXQUFyQixDQUFwQjtBQUNBLFFBQU1nQixhQUFhUCxhQUFhTSxPQUFiLENBQXFCZCxVQUFyQixDQUFuQjs7QUFFQSxRQUFNSyxlQUFlUSxjQUFjSCxLQUFLTSxLQUFMLENBQVdILFdBQVgsQ0FBZCxHQUF3QyxFQUE3RDtBQUNBLFFBQU1ELGNBQWNHLGFBQWFMLEtBQUtNLEtBQUwsQ0FBV0QsVUFBWCxDQUFiLEdBQXNDLEVBQTFEOztBQUVBLFFBQU1FLG9CQUFZWixZQUFaLEVBQTZCTyxXQUE3QixDQUFOOztBQUVBLFFBQUlLLElBQUosRUFBVTtBQUNObkIsY0FBTW9CLFFBQU4sQ0FBZXBCLE1BQU1xQixVQUFOLEdBQW1CQyxVQUFuQixDQUE4QkgsSUFBOUIsQ0FBZjtBQUNIO0FBQ0oiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBlcnNpc3Qgc3BsaXRzIHRoZSBzdGF0ZSBpbiBhIHByb2plY3QgcGFydCBhbmQgYSBjb25maWd1cmF0aW9uIHBhcnQuXG4gKiBCb3RoIGFyZSBzdG9yZWQgd2hlbiB0aGUgYXBwIHF1aXRzIGFuZCBsb2FkZWQgd2hlbiBpdCBzdGFydHMgdXAuXG4gKiBcbiAqIFRoZSBwcm9qZWN0IHBhcnQgaXMgc2F2ZWQgdG8gbG9jYWxzdG9yYWdlLlxuICogXG4gKiBDb25maWd1cmF0aW9uIGlzIHNhdmVkIGluIGxvY2FsU3RvcmFnZSBpbiB0aGUgYnJvd3NlcixcbiAqIG9yIGluIGEgZmlsZSBzeXN0ZW0ncyBhcHBpY2F0aW9uIGRhdGEgZGlyZWN0b3J5IGluIHRoZSBFbGVjdHJvbiBhcHAuXG4gKiBAc2VlIGh0dHBzOi8vY29kZWJ1cnN0LmlvL2hvdy10by1zdG9yZS11c2VyLWRhdGEtaW4tZWxlY3Ryb24tM2JhNmJmNjZiYzFlXG4gKiBcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdG9yZSBTdG9yZSBmdW5jdGlvbmFsaXR5IG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGVyc2lzdChzdG9yZSkge1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gJ3Byb2plY3QnLFxuICAgICAgICBjb25maWdOYW1lID0gJ2NvbmZpZyc7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0U3RhdGUgPSB7IC4uLnN0YXRlIH07XG4gICAgICAgIGRlbGV0ZSBwcm9qZWN0U3RhdGUucG9ydHM7XG4gICAgICAgIGRlbGV0ZSBwcm9qZWN0U3RhdGUudGhlbWU7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb2plY3ROYW1lLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0U3RhdGUpKTtcblxuICAgICAgICBjb25zdCBjb25maWdTdGF0ZSA9IHtcbiAgICAgICAgICAgIHBvcnRzOiBzdGF0ZS5wb3J0cyxcbiAgICAgICAgICAgIHRoZW1lOiBzdGF0ZS50aGVtZVxuICAgICAgICB9O1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShjb25maWdOYW1lLCBKU09OLnN0cmluZ2lmeShjb25maWdTdGF0ZSkpO1xuICAgIH0pO1xuXG4gICAgXG4gICAgY29uc3QgcHJvamVjdERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9qZWN0TmFtZSk7XG4gICAgY29uc3QgY29uZmlnRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGNvbmZpZ05hbWUpO1xuICAgIFxuICAgIGNvbnN0IHByb2plY3RTdGF0ZSA9IHByb2plY3REYXRhID8gSlNPTi5wYXJzZShwcm9qZWN0RGF0YSkgOiB7fTtcbiAgICBjb25zdCBjb25maWdTdGF0ZSA9IGNvbmZpZ0RhdGEgPyBKU09OLnBhcnNlKGNvbmZpZ0RhdGEpIDoge307XG4gICAgXG4gICAgY29uc3QgZGF0YSA9IHsgLi4ucHJvamVjdFN0YXRlLCAuLi5jb25maWdTdGF0ZSB9O1xuICAgIFxuICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3JlLmdldEFjdGlvbnMoKS5zZXRQcm9qZWN0KGRhdGEpKTtcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3N0YXRlL3BlcnNpc3QuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createAppView;\n\nvar _settings = __webpack_require__(28);\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _windowresize = __webpack_require__(13);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Main application view.\n */\nfunction createAppView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl = document.querySelector('#app'),\n        panelsEl = document.querySelector('.panels'),\n        helpEl = document.querySelector('.help'),\n        prefsEl = document.querySelector('.prefs'),\n        editEl = document.querySelector('.edit'),\n        editContentEl = document.querySelector('.edit .panel__content'),\n        remoteEl = document.querySelector('.remote'),\n        settingsViews = [],\n        panelHeaderHeight,\n        controls = {\n        new: {\n            type: 'checkbox',\n            input: document.querySelector('#file-new')\n        },\n        import: {\n            type: 'checkbox',\n            input: document.querySelector('#file-import')\n        },\n        export: {\n            type: 'checkbox',\n            input: document.querySelector('#file-export')\n        },\n        play: {\n            type: 'checkbox',\n            input: document.getElementById('play-check')\n        },\n        bpm: {\n            type: 'number',\n            input: document.getElementById('bpm-number')\n        },\n        remote: {\n            type: 'checkbox',\n            input: document.getElementById('learn-check')\n        },\n        prefs: {\n            type: 'checkbox',\n            input: document.getElementById('prefs-check')\n        },\n        edit: {\n            type: 'checkbox',\n            input: document.getElementById('edit-check')\n        },\n        connections: {\n            type: 'checkbox',\n            input: document.getElementById('connections-check')\n        },\n        help: {\n            type: 'checkbox',\n            input: document.getElementById('help-check')\n        }\n    },\n        init = function init() {\n        controls.new.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().newProject());\n        });\n        controls.import.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().importProject(e.target.files[0]));\n        });\n        controls.export.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().exportProject());\n        });\n        controls.play.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTransport('toggle'));\n        });\n        controls.bpm.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTempo(controls.bpm.input.value));\n        });\n        controls.remote.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleMIDILearnMode());\n        });\n        controls.prefs.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('preferences'));\n        });\n        controls.edit.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('settings'));\n        });\n        controls.connections.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleConnectMode());\n        });\n        controls.help.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('help'));\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 32:\n                    // don't toggle play while typing space key in a text field.\n                    if (!(e.target.tagName.toLowerCase() == 'input' && e.target.getAttribute('type') == 'text')) {\n                        store.dispatch(store.getActions().setTransport('toggle'));\n                    }\n                    break;\n            }\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_PROJECT:\n                case e.detail.actions.NEW_PROJECT:\n                    setProject(e.detail.state);\n                    showPanels(e.detail.state);\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createSettingsViews(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteSettingsView(e.detail.action.id);\n                    showPanels(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.SET_TRANSPORT:\n                    controls.play.input.checked = e.detail.state.transport === 'play';\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n                case e.detail.actions.TOGGLE_PANEL:\n                    showPanels(e.detail.state);\n                    break;\n            }\n        });\n\n        // get panel header height from CSS.\n        var style = getComputedStyle(document.body);\n        panelHeaderHeight = parseInt(style.getPropertyValue('--header-height'), 10);\n\n        my.addWindowResizeCallback(renderLayout);\n        renderLayout();\n    },\n\n\n    /**\n     * Create settings controls view for a processor.\n     * @param  {Object} processor MIDI processor to control with the settings.\n     */\n    createSettingsViews = function createSettingsViews(state) {\n        state.processors.allIds.forEach(function (id, i) {\n            var processorData = state.processors.byId[id];\n            if (!settingsViews[i] || id !== settingsViews[i].getID()) {\n                var template = __webpack_require__(34)(\"./\" + processorData.type + '/settings.html');\n                settingsViews.splice(i, 0, (0, _settings2.default)({\n                    data: processorData,\n                    store: store,\n                    parentEl: editContentEl,\n                    template: template,\n                    isSelected: state.selectedID === processorData.id\n                }));\n            }\n        });\n    },\n\n\n    /**\n     * Delete settings controls view for a processor.\n     * @param  {String} id MIDI processor ID.\n     */\n    deleteSettingsView = function deleteSettingsView(id) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            if (settingsViews[n].getID() === id) {\n                settingsViews[n].terminate();\n                settingsViews.splice(n, 1);\n                return false;\n            }\n        }\n    },\n        setProject = function setProject(state) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            deleteSettingsView(settingsViews[n].getID());\n        }\n        createSettingsViews(state);\n    },\n        renderLayout = function renderLayout() {\n        var leftColumn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var rightColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (leftColumn) {\n            renderColumnLayout(prefsEl, remoteEl, false);\n        }\n        if (rightColumn) {\n            renderColumnLayout(helpEl, editEl, true);\n        }\n    },\n        renderColumnLayout = function renderColumnLayout(topEl, btmEl, isRightColumn) {\n        var totalHeight = panelsEl.clientHeight,\n            columnWidth = document.querySelector('.panels__right').clientWidth,\n            topWidth = topEl.clientWidth,\n            btmWidth = btmEl.clientWidth,\n            isTopVisible = topEl.dataset.show == 'true',\n            isBtmVisible = btmEl.dataset.show == 'true',\n            topViewportEl = topEl.querySelector('.panel__viewport'),\n            btmViewportEl = btmEl.querySelector('.panel__viewport');\n\n        var topHeight = void 0,\n            btmHeight = void 0,\n            topContentHeight = void 0,\n            btmContentHeight = void 0;\n\n        // reset heights before measuring them\n        topViewportEl.style.height = 'auto';\n        btmViewportEl.style.height = 'auto';\n\n        topHeight = topEl.clientHeight, btmHeight = btmEl.clientHeight, topContentHeight = topEl.querySelector('.panel__content').clientHeight, btmContentHeight = btmEl.querySelector('.panel__content').clientHeight;\n\n        if (isRightColumn && topWidth + btmWidth < columnWidth) {\n            if (topContentHeight + panelHeaderHeight > totalHeight) {\n                topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                topViewportEl.style.height = 'auto';\n            }\n            if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                btmViewportEl.style.height = 'auto';\n            }\n        } else {\n            if (isTopVisible && isBtmVisible) {\n                var combinedHeight = topContentHeight + btmContentHeight + panelHeaderHeight * 2;\n                if (combinedHeight > totalHeight) {\n                    if (topContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = prefsEl.topContentHeight + 'px';\n                        btmViewportEl.style.height = totalHeight - topContentHeight - panelHeaderHeight * 2 + 'px';\n                    } else if (btmContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = totalHeight - btmContentHeight - panelHeaderHeight * 2 + 'px';\n                        btmViewportEl.style.height = remoteEl.topContentHeight + 'px';\n                    } else {\n                        topViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                        btmViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                    }\n                } else {\n                    topViewportEl.style.height = 'auto';\n                    btmViewportEl.style.height = 'auto';\n                }\n            } else if (isTopVisible) {\n                if (topContentHeight + panelHeaderHeight > totalHeight) {\n                    topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    topViewportEl.style.height = 'auto';\n                }\n            } else if (isBtmVisible) {\n                if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                    btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    btmViewportEl.style.height = 'auto';\n                }\n            }\n        }\n    },\n        showPanels = function showPanels(state) {\n        helpEl.dataset.show = state.showHelpPanel;\n        controls.help.input.checked = state.showHelpPanel;\n\n        prefsEl.dataset.show = state.showPreferencesPanel;\n        controls.prefs.input.checked = state.showPreferencesPanel;\n\n        remoteEl.dataset.show = state.learnModeActive;\n        controls.remote.input.checked = state.learnModeActive;\n\n        editEl.dataset.show = state.showSettingsPanel;\n        controls.edit.input.checked = state.showSettingsPanel;\n\n        controls.connections.input.checked = state.connectModeActive;\n\n        renderLayout();\n    };\n\n    my = my || {};\n\n    that = (0, _windowresize2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createSettingsPanel;\n\nvar _boolean = __webpack_require__(29);\n\nvar _boolean2 = _interopRequireDefault(_boolean);\n\nvar _integer = __webpack_require__(31);\n\nvar _integer2 = _interopRequireDefault(_integer);\n\nvar _itemized = __webpack_require__(32);\n\nvar _itemized2 = _interopRequireDefault(_itemized);\n\nvar _string = __webpack_require__(33);\n\nvar _string2 = _interopRequireDefault(_string);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor settings view.\n */\nfunction createSettingsPanel(specs, my) {\n    var that,\n        store = specs.store,\n        data = specs.data,\n        parentEl = specs.parentEl,\n        settingViews = [],\n        el,\n        initialize = function initialize() {\n        // const htmlString = require(`html-loader!../processors/${data.type}/settings.html`);\n        el = document.createElement('div');\n        el.innerHTML = specs.template;\n\n        // loop through all processor parameters and add setting view if required\n        data.params.allIds.forEach(function (id) {\n            // only create setting if there's a container el for it in the settings panel\n            var settingContainerEl = el.querySelector('.' + id);\n            if (settingContainerEl) {\n                var paramData = data.params.byId[id],\n                    settingView = void 0,\n                    settingViewSpecs = {\n                    store: store,\n                    key: id,\n                    data: paramData,\n                    parentEl: settingContainerEl,\n                    processorID: data.id\n                };\n\n                // create the setting view based on the parameter type\n                switch (paramData.type) {\n                    case 'integer':\n                        settingView = (0, _integer2.default)(settingViewSpecs);\n                        break;\n                    case 'boolean':\n                        settingView = (0, _boolean2.default)(settingViewSpecs);\n                        break;\n                    case 'itemized':\n                        settingView = (0, _itemized2.default)(settingViewSpecs);\n                        break;\n                    case 'string':\n                        settingView = (0, _string2.default)(settingViewSpecs);\n                        break;\n                }\n            }\n        });\n\n        // default delete button of the settings panel\n        if (el && el.querySelector('.settings__delete')) {\n            el.querySelector('.settings__delete').addEventListener('click', function (e) {\n                e.preventDefault();\n                store.dispatch(store.getActions().deleteProcessor(data.id));\n            });\n        }\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SELECT_PROCESSOR:\n                case e.detail.actions.DELETE_PROCESSOR:\n                    show(e.detail.state.selectedID === data.id);\n                    break;\n            }\n        });\n\n        show(specs.isSelected);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (el && parentEl) {\n            show(false);\n        }\n    },\n\n\n    /**\n     * Show settings if the processor is selected, else remove.\n     * @param {Boolean} isSelected True if selected.\n     */\n    show = function show(isSelected) {\n        if (isSelected) {\n            parentEl.appendChild(el);\n        } else if (el.parentNode === parentEl) {\n            parentEl.removeChild(el);\n        }\n    },\n        getID = function getID() {\n        return data.id;\n    };\n\n    that = data.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBooleanSettingView;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\nfunction createBooleanSettingView(specs, my) {\n    var that,\n        checkEl,\n        init = function init() {\n        var id = getTemporaryInputAndLabelId();\n\n        checkEl = my.el.querySelector('.setting__check');\n        checkEl.value = my.data.default;\n        checkEl.setAttribute('id', id);\n        checkEl.addEventListener('change', onChange);\n\n        var labelEl = my.el.querySelector('.toggle__label');\n        labelEl.setAttribute('for', id);\n    },\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.checked));\n    },\n        setValue = function setValue(value) {\n        checkEl.checked = value;\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jvb2xlYW4uanM/ZTAyMiJdLCJuYW1lcyI6WyJjcmVhdGVCb29sZWFuU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImNoZWNrRWwiLCJpbml0IiwiaWQiLCJnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQiLCJlbCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZSIsImRhdGEiLCJkZWZhdWx0Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwibGFiZWxFbCIsIk1hdGgiLCJyYW5kb20iLCJwZXJmb3JtYW5jZSIsIm5vdyIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwia2V5IiwidGFyZ2V0IiwiY2hlY2tlZCIsInNldFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHdCOztBQU54Qjs7Ozs7O0FBRUE7Ozs7QUFJZSxTQUFTQSx3QkFBVCxDQUFrQ0MsS0FBbEMsRUFBeUNDLEVBQXpDLEVBQTZDO0FBQ3hELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxPQURKO0FBQUEsUUFHSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZCxZQUFJQyxLQUFLQyw2QkFBVDs7QUFFQUgsa0JBQVVGLEdBQUdNLEVBQUgsQ0FBTUMsYUFBTixDQUFvQixpQkFBcEIsQ0FBVjtBQUNBTCxnQkFBUU0sS0FBUixHQUFnQlIsR0FBR1MsSUFBSCxDQUFRQyxPQUF4QjtBQUNBUixnQkFBUVMsWUFBUixDQUFxQixJQUFyQixFQUEyQlAsRUFBM0I7QUFDQUYsZ0JBQVFVLGdCQUFSLENBQXlCLFFBQXpCLEVBQW1DQyxRQUFuQzs7QUFFQSxZQUFJQyxVQUFVZCxHQUFHTSxFQUFILENBQU1DLGFBQU4sQ0FBb0IsZ0JBQXBCLENBQWQ7QUFDQU8sZ0JBQVFILFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJQLEVBQTVCO0FBQ0gsS0FiTDs7O0FBZUk7Ozs7QUFJQUMsa0NBQThCLFNBQTlCQSwyQkFBOEIsR0FBVztBQUNyQyxlQUFPLE9BQU9VLEtBQUtDLE1BQUwsRUFBUCxHQUF1QkMsWUFBWUMsR0FBWixFQUE5QjtBQUNILEtBckJMO0FBQUEsUUF1QklMLFdBQVcsU0FBWEEsUUFBVyxDQUFTTSxDQUFULEVBQVk7QUFDbkJuQixXQUFHb0IsS0FBSCxDQUFTQyxRQUFULENBQWtCckIsR0FBR29CLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZHZCLEdBQUd3QixXQURXLEVBRWR4QixHQUFHeUIsR0FGVyxFQUdkTixFQUFFTyxNQUFGLENBQVNDLE9BSEssQ0FBbEI7QUFJSCxLQTVCTDtBQUFBLFFBOEJJQyxXQUFXLFNBQVhBLFFBQVcsQ0FBU3BCLEtBQVQsRUFBZ0I7QUFDdkJOLGdCQUFReUIsT0FBUixHQUFrQm5CLEtBQWxCO0FBQ0gsS0FoQ0w7O0FBa0NBUixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBRzRCLFFBQUgsR0FBY0EsUUFBZDs7QUFFQTNCLFdBQU8sb0JBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDs7QUFFQUc7O0FBRUEsV0FBT0YsSUFBUDtBQUNIIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyBmcm9tICcuL2Jhc2UnO1xuXG4vKipcbiAqIFByb2Nlc3NvciBzZXR0aW5nIHZpZXcgZm9yIGEgQm9vbGVhbiB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIGNoZWNrYm94IGlucHV0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCb29sZWFuU2V0dGluZ1ZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIGNoZWNrRWwsXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2hlY2tFbCA9IG15LmVsLnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5nX19jaGVjaycpO1xuICAgICAgICAgICAgY2hlY2tFbC52YWx1ZSA9IG15LmRhdGEuZGVmYXVsdDtcbiAgICAgICAgICAgIGNoZWNrRWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICAgIGNoZWNrRWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgbGFiZWxFbCA9IG15LmVsLnF1ZXJ5U2VsZWN0b3IoJy50b2dnbGVfX2xhYmVsJyk7XG4gICAgICAgICAgICBsYWJlbEVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaWQpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcXVpY2sgSUQgdG8gdGllIGxhYmVsIHRvIGlucHV0IGVsZW1lbnRzLlxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFVuaXF1ZSBJRC5cbiAgICAgICAgICovXG4gICAgICAgIGdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdpZCcgKyBNYXRoLnJhbmRvbSgpICsgcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBvbkNoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIG15LnN0b3JlLmRpc3BhdGNoKG15LnN0b3JlLmdldEFjdGlvbnMoKS5jaGFuZ2VQYXJhbWV0ZXIoXG4gICAgICAgICAgICAgICAgbXkucHJvY2Vzc29ySUQsIFxuICAgICAgICAgICAgICAgIG15LmtleSwgXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2hlY2tlZCkpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgY2hlY2tFbC5jaGVja2VkID0gdmFsdWU7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jvb2xlYW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteSettingView;\n/**\n * Processor setting overlay for assinging MIDI control to the parameter.\n */\nfunction createRemoteSettingView(specs, my) {\n    var that,\n        learnClickLayer,\n        init = function init() {\n        if (my.data.isMidiControllable) {\n            var template = document.querySelector('#template-setting-learnmode');\n            var clone = template.content.cloneNode(true);\n            learnClickLayer = clone.firstElementChild;\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     */\n    changeRemoteState = function changeRemoteState(state) {\n        if (my.data.isMidiControllable) {\n            if (state.learnModeActive) {\n                showRemoteState('enter');\n                if (my.data.remoteChannel != null && my.data.remoteCC != null) {\n                    showRemoteState('assigned');\n                } else {\n                    showRemoteState('unassigned');\n                }\n                if (state.learnTargetProcessorID === my.processorID && state.learnTargetParameterKey === my.key) {\n                    showRemoteState('selected');\n                } else {\n                    showRemoteState('deselected');\n                }\n            } else {\n                showRemoteState('exit');\n            }\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} status New state of the parameter.\n     */\n    showRemoteState = function showRemoteState(status) {\n        switch (status) {\n            case 'enter':\n                my.el.appendChild(learnClickLayer);\n                learnClickLayer.addEventListener('click', onLearnLayerClick);\n                break;\n            case 'exit':\n                if (my.el.contains(learnClickLayer)) {\n                    my.el.removeChild(learnClickLayer);\n                    learnClickLayer.removeEventListener('click', onLearnLayerClick);\n                }\n                break;\n            case 'selected':\n                learnClickLayer.dataset.selected = true;\n                break;\n            case 'deselected':\n                learnClickLayer.dataset.selected = false;\n                break;\n            case 'assigned':\n                learnClickLayer.dataset.assigned = true;\n                break;\n            case 'unassigned':\n                learnClickLayer.dataset.assigned = false;\n                break;\n            default:\n                console.log('Unknown remote state: ', state);\n                break;\n        }\n    },\n        onLearnLayerClick = function onLearnLayerClick(e) {\n        my.store.dispatch(my.store.getActions().toggleMIDILearnTarget(my.processorID, my.key));\n    };\n\n    my = my || {};\n    my.changeRemoteState = changeRemoteState;\n\n    that = that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3JlbW90ZS5qcz83MTA3Il0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZVNldHRpbmdWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJsZWFybkNsaWNrTGF5ZXIiLCJpbml0IiwiZGF0YSIsImlzTWlkaUNvbnRyb2xsYWJsZSIsInRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xvbmUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjaGFuZ2VSZW1vdGVTdGF0ZSIsInN0YXRlIiwibGVhcm5Nb2RlQWN0aXZlIiwic2hvd1JlbW90ZVN0YXRlIiwicmVtb3RlQ2hhbm5lbCIsInJlbW90ZUNDIiwibGVhcm5UYXJnZXRQcm9jZXNzb3JJRCIsInByb2Nlc3NvcklEIiwibGVhcm5UYXJnZXRQYXJhbWV0ZXJLZXkiLCJrZXkiLCJzdGF0dXMiLCJlbCIsImFwcGVuZENoaWxkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uTGVhcm5MYXllckNsaWNrIiwiY29udGFpbnMiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkYXRhc2V0Iiwic2VsZWN0ZWQiLCJhc3NpZ25lZCIsImNvbnNvbGUiLCJsb2ciLCJlIiwic3RvcmUiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJ0b2dnbGVNSURJTGVhcm5UYXJnZXQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUd3QkEsdUI7QUFIeEI7OztBQUdlLFNBQVNBLHVCQUFULENBQWlDQyxLQUFqQyxFQUF3Q0MsRUFBeEMsRUFBNEM7QUFDdkQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLGVBREo7QUFBQSxRQUdJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkLFlBQUlILEdBQUdJLElBQUgsQ0FBUUMsa0JBQVosRUFBZ0M7QUFDNUIsZ0JBQUlDLFdBQVdDLFNBQVNDLGFBQVQsQ0FBdUIsNkJBQXZCLENBQWY7QUFDQSxnQkFBSUMsUUFBUUgsU0FBU0ksT0FBVCxDQUFpQkMsU0FBakIsQ0FBMkIsSUFBM0IsQ0FBWjtBQUNBVCw4QkFBa0JPLE1BQU1HLGlCQUF4QjtBQUNIO0FBQ0osS0FUTDs7O0FBV0k7Ozs7O0FBS0FDLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNDLEtBQVQsRUFBZ0I7QUFDaEMsWUFBSWQsR0FBR0ksSUFBSCxDQUFRQyxrQkFBWixFQUFnQztBQUM1QixnQkFBSVMsTUFBTUMsZUFBVixFQUEyQjtBQUN2QkMsZ0NBQWdCLE9BQWhCO0FBQ0Esb0JBQUloQixHQUFHSSxJQUFILENBQVFhLGFBQVIsSUFBeUIsSUFBekIsSUFBaUNqQixHQUFHSSxJQUFILENBQVFjLFFBQVIsSUFBb0IsSUFBekQsRUFBK0Q7QUFDM0RGLG9DQUFnQixVQUFoQjtBQUNILGlCQUZELE1BRU87QUFDSEEsb0NBQWdCLFlBQWhCO0FBQ0g7QUFDRCxvQkFBSUYsTUFBTUssc0JBQU4sS0FBaUNuQixHQUFHb0IsV0FBcEMsSUFBbUROLE1BQU1PLHVCQUFOLEtBQWtDckIsR0FBR3NCLEdBQTVGLEVBQWlHO0FBQzdGTixvQ0FBZ0IsVUFBaEI7QUFDSCxpQkFGRCxNQUVPO0FBQ0hBLG9DQUFnQixZQUFoQjtBQUNIO0FBQ0osYUFaRCxNQVlPO0FBQ0hBLGdDQUFnQixNQUFoQjtBQUNIO0FBQ0o7QUFDSixLQWxDTDs7O0FBb0NJOzs7OztBQUtBQSxzQkFBa0IsU0FBbEJBLGVBQWtCLENBQVNPLE1BQVQsRUFBaUI7QUFDL0IsZ0JBQVFBLE1BQVI7QUFDSSxpQkFBSyxPQUFMO0FBQ0l2QixtQkFBR3dCLEVBQUgsQ0FBTUMsV0FBTixDQUFrQnZCLGVBQWxCO0FBQ0FBLGdDQUFnQndCLGdCQUFoQixDQUFpQyxPQUFqQyxFQUEwQ0MsaUJBQTFDO0FBQ0E7QUFDSixpQkFBSyxNQUFMO0FBQ0ksb0JBQUkzQixHQUFHd0IsRUFBSCxDQUFNSSxRQUFOLENBQWUxQixlQUFmLENBQUosRUFBcUM7QUFDakNGLHVCQUFHd0IsRUFBSCxDQUFNSyxXQUFOLENBQWtCM0IsZUFBbEI7QUFDQUEsb0NBQWdCNEIsbUJBQWhCLENBQW9DLE9BQXBDLEVBQTZDSCxpQkFBN0M7QUFDSDtBQUNEO0FBQ0osaUJBQUssVUFBTDtBQUNJekIsZ0NBQWdCNkIsT0FBaEIsQ0FBd0JDLFFBQXhCLEdBQW1DLElBQW5DO0FBQ0E7QUFDSixpQkFBSyxZQUFMO0FBQ0k5QixnQ0FBZ0I2QixPQUFoQixDQUF3QkMsUUFBeEIsR0FBbUMsS0FBbkM7QUFDQTtBQUNKLGlCQUFLLFVBQUw7QUFDSTlCLGdDQUFnQjZCLE9BQWhCLENBQXdCRSxRQUF4QixHQUFtQyxJQUFuQztBQUNBO0FBQ0osaUJBQUssWUFBTDtBQUNJL0IsZ0NBQWdCNkIsT0FBaEIsQ0FBd0JFLFFBQXhCLEdBQW1DLEtBQW5DO0FBQ0E7QUFDSjtBQUNJQyx3QkFBUUMsR0FBUixDQUFZLHdCQUFaLEVBQXNDckIsS0FBdEM7QUFDQTtBQXpCUjtBQTJCSCxLQXJFTDtBQUFBLFFBdUVJYSxvQkFBb0IsU0FBcEJBLGlCQUFvQixDQUFTUyxDQUFULEVBQVk7QUFDNUJwQyxXQUFHcUMsS0FBSCxDQUFTQyxRQUFULENBQWtCdEMsR0FBR3FDLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMscUJBQXRCLENBQTRDeEMsR0FBR29CLFdBQS9DLEVBQTREcEIsR0FBR3NCLEdBQS9ELENBQWxCO0FBQ0gsS0F6RUw7O0FBMkVBdEIsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdhLGlCQUFILEdBQXVCQSxpQkFBdkI7O0FBRUFaLFdBQU9BLFFBQVEsRUFBZjs7QUFFQUU7O0FBRUEsV0FBT0YsSUFBUDtBQUNIIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyBvdmVybGF5IGZvciBhc3NpbmdpbmcgTUlESSBjb250cm9sIHRvIHRoZSBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVJlbW90ZVNldHRpbmdWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBsZWFybkNsaWNrTGF5ZXIsXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobXkuZGF0YS5pc01pZGlDb250cm9sbGFibGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtc2V0dGluZy1sZWFybm1vZGUnKTtcbiAgICAgICAgICAgICAgICBsZXQgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBsZWFybkNsaWNrTGF5ZXIgPSBjbG9uZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdGF0ZSBvZiB0aGUgcGFyYW1ldGVyIGluIHRoZSBhc3NpZ25tZW50IHByb2Nlc3MgY2hhbmdlZCxcbiAgICAgICAgICogdGhlIGVsZW1lbnQgd2lsbCBzaG93IHRoaXMgdmlzdWFsbHkuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSBOZXcgc3RhdGUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICAgICAgICovXG4gICAgICAgIGNoYW5nZVJlbW90ZVN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChteS5kYXRhLmlzTWlkaUNvbnRyb2xsYWJsZSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5sZWFybk1vZGVBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd1JlbW90ZVN0YXRlKCdlbnRlcicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobXkuZGF0YS5yZW1vdGVDaGFubmVsICE9IG51bGwgJiYgbXkuZGF0YS5yZW1vdGVDQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UmVtb3RlU3RhdGUoJ2Fzc2lnbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UmVtb3RlU3RhdGUoJ3VuYXNzaWduZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGVhcm5UYXJnZXRQcm9jZXNzb3JJRCA9PT0gbXkucHJvY2Vzc29ySUQgJiYgc3RhdGUubGVhcm5UYXJnZXRQYXJhbWV0ZXJLZXkgPT09IG15LmtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1JlbW90ZVN0YXRlKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1JlbW90ZVN0YXRlKCdkZXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaG93UmVtb3RlU3RhdGUoJ2V4aXQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RhdGUgb2YgdGhlIHBhcmFtZXRlciBpbiB0aGUgYXNzaWdubWVudCBwcm9jZXNzIGNoYW5nZWQsXG4gICAgICAgICAqIHRoZSBlbGVtZW50IHdpbGwgc2hvdyB0aGlzIHZpc3VhbGx5LlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhdHVzIE5ldyBzdGF0ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1JlbW90ZVN0YXRlID0gZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgbXkuZWwuYXBwZW5kQ2hpbGQobGVhcm5DbGlja0xheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgbGVhcm5DbGlja0xheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25MZWFybkxheWVyQ2xpY2spO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdleGl0JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG15LmVsLmNvbnRhaW5zKGxlYXJuQ2xpY2tMYXllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15LmVsLnJlbW92ZUNoaWxkKGxlYXJuQ2xpY2tMYXllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFybkNsaWNrTGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkxlYXJuTGF5ZXJDbGljayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBsZWFybkNsaWNrTGF5ZXIuZGF0YXNldC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Rlc2VsZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBsZWFybkNsaWNrTGF5ZXIuZGF0YXNldC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhc3NpZ25lZCc6XG4gICAgICAgICAgICAgICAgICAgIGxlYXJuQ2xpY2tMYXllci5kYXRhc2V0LmFzc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndW5hc3NpZ25lZCc6XG4gICAgICAgICAgICAgICAgICAgIGxlYXJuQ2xpY2tMYXllci5kYXRhc2V0LmFzc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmtub3duIHJlbW90ZSBzdGF0ZTogJywgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uTGVhcm5MYXllckNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgbXkuc3RvcmUuZGlzcGF0Y2gobXkuc3RvcmUuZ2V0QWN0aW9ucygpLnRvZ2dsZU1JRElMZWFyblRhcmdldChteS5wcm9jZXNzb3JJRCwgbXkua2V5KSk7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5jaGFuZ2VSZW1vdGVTdGF0ZSA9IGNoYW5nZVJlbW90ZVN0YXRlO1xuICAgIFxuICAgIHRoYXQgPSB0aGF0IHx8IHt9O1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3NldHRpbmcvcmVtb3RlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIntegerSettingView;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createIntegerSettingView(specs, my) {\n    var that,\n        rangeEl,\n        numberEl,\n        init = function init() {\n        rangeEl = my.el.getElementsByClassName('setting__range')[0];\n        rangeEl.addEventListener('input', onChange);\n        rangeEl.addEventListener('change', onChange);\n\n        numberEl = my.el.getElementsByClassName('setting__number')[0];\n        numberEl.addEventListener('change', onChange);\n\n        initData();\n    },\n        initData = function initData() {\n        rangeEl.setAttribute('min', my.data.min);\n        rangeEl.setAttribute('max', my.data.max);\n        rangeEl.value = my.data.value;\n\n        numberEl.setAttribute('min', my.data.min);\n        numberEl.setAttribute('max', my.data.max);\n        numberEl.value = my.data.value;\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, parseInt(e.target.value, 10)));\n    },\n        setValue = function setValue(value) {\n        rangeEl.value = value;\n        numberEl.value = value;\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanM/NTk2MCJdLCJuYW1lcyI6WyJjcmVhdGVJbnRlZ2VyU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInJhbmdlRWwiLCJudW1iZXJFbCIsImluaXQiLCJlbCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwib25DaGFuZ2UiLCJpbml0RGF0YSIsInNldEF0dHJpYnV0ZSIsImRhdGEiLCJtaW4iLCJtYXgiLCJ2YWx1ZSIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwia2V5IiwicGFyc2VJbnQiLCJ0YXJnZXQiLCJzZXRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBTXdCQSx3Qjs7QUFOeEI7Ozs7OztBQUVBOzs7O0FBSWUsU0FBU0Esd0JBQVQsQ0FBa0NDLEtBQWxDLEVBQXlDQyxFQUF6QyxFQUE2QztBQUN4RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsT0FESjtBQUFBLFFBRUlDLFFBRko7QUFBQSxRQUlJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixrQkFBVUYsR0FBR0ssRUFBSCxDQUFNQyxzQkFBTixDQUE2QixnQkFBN0IsRUFBK0MsQ0FBL0MsQ0FBVjtBQUNBSixnQkFBUUssZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0NDLFFBQWxDO0FBQ0FOLGdCQUFRSyxnQkFBUixDQUF5QixRQUF6QixFQUFtQ0MsUUFBbkM7O0FBRUFMLG1CQUFXSCxHQUFHSyxFQUFILENBQU1DLHNCQUFOLENBQTZCLGlCQUE3QixFQUFnRCxDQUFoRCxDQUFYO0FBQ0FILGlCQUFTSSxnQkFBVCxDQUEwQixRQUExQixFQUFvQ0MsUUFBcEM7O0FBRUFDO0FBQ0gsS0FiTDtBQUFBLFFBZUlBLFdBQVcsU0FBWEEsUUFBVyxHQUFXO0FBQ2xCUCxnQkFBUVEsWUFBUixDQUFxQixLQUFyQixFQUE0QlYsR0FBR1csSUFBSCxDQUFRQyxHQUFwQztBQUNBVixnQkFBUVEsWUFBUixDQUFxQixLQUFyQixFQUE0QlYsR0FBR1csSUFBSCxDQUFRRSxHQUFwQztBQUNBWCxnQkFBUVksS0FBUixHQUFnQmQsR0FBR1csSUFBSCxDQUFRRyxLQUF4Qjs7QUFFQVgsaUJBQVNPLFlBQVQsQ0FBc0IsS0FBdEIsRUFBNkJWLEdBQUdXLElBQUgsQ0FBUUMsR0FBckM7QUFDQVQsaUJBQVNPLFlBQVQsQ0FBc0IsS0FBdEIsRUFBNkJWLEdBQUdXLElBQUgsQ0FBUUUsR0FBckM7QUFDQVYsaUJBQVNXLEtBQVQsR0FBaUJkLEdBQUdXLElBQUgsQ0FBUUcsS0FBekI7QUFDSCxLQXZCTDtBQUFBLFFBeUJJTixXQUFXLFNBQVhBLFFBQVcsQ0FBU08sQ0FBVCxFQUFZO0FBQ25CZixXQUFHZ0IsS0FBSCxDQUFTQyxRQUFULENBQWtCakIsR0FBR2dCLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZG5CLEdBQUdvQixXQURXLEVBRWRwQixHQUFHcUIsR0FGVyxFQUdkQyxTQUFTUCxFQUFFUSxNQUFGLENBQVNULEtBQWxCLEVBQXlCLEVBQXpCLENBSGMsQ0FBbEI7QUFJSCxLQTlCTDtBQUFBLFFBZ0NJVSxXQUFXLFNBQVhBLFFBQVcsQ0FBU1YsS0FBVCxFQUFnQjtBQUN2QlosZ0JBQVFZLEtBQVIsR0FBZ0JBLEtBQWhCO0FBQ0FYLGlCQUFTVyxLQUFULEdBQWlCQSxLQUFqQjtBQUNILEtBbkNMOztBQXFDQWQsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdTLFFBQUgsR0FBY0EsUUFBZDtBQUNBVCxPQUFHd0IsUUFBSCxHQUFjQSxRQUFkOztBQUVBdkIsV0FBTyxvQkFBc0JGLEtBQXRCLEVBQTZCQyxFQUE3QixDQUFQOztBQUVBSTs7QUFFQSxXQUFPSCxJQUFQO0FBQ0giLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVNldHRpbmdWaWV3IGZyb20gJy4vYmFzZSc7XG5cbi8qKlxuICogUHJvY2Vzc29yIHNldHRpbmcgdmlldyBmb3IgYSBsaW5lYXIgaW50ZWdlciB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIHNsaWRlciBhbmQgYSBudW1iZXIgZmllbGQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUludGVnZXJTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgcmFuZ2VFbCxcbiAgICAgICAgbnVtYmVyRWwsXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fcmFuZ2UnKVswXTtcbiAgICAgICAgICAgIHJhbmdlRWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkNoYW5nZSk7XG4gICAgICAgICAgICByYW5nZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbnVtYmVyRWwgPSBteS5lbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzZXR0aW5nX19udW1iZXInKVswXTtcbiAgICAgICAgICAgIG51bWJlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcblxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoJ21pbicsIG15LmRhdGEubWluKTtcbiAgICAgICAgICAgIHJhbmdlRWwuc2V0QXR0cmlidXRlKCdtYXgnLCBteS5kYXRhLm1heCk7XG4gICAgICAgICAgICByYW5nZUVsLnZhbHVlID0gbXkuZGF0YS52YWx1ZTtcblxuICAgICAgICAgICAgbnVtYmVyRWwuc2V0QXR0cmlidXRlKCdtaW4nLCBteS5kYXRhLm1pbik7XG4gICAgICAgICAgICBudW1iZXJFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcbiAgICAgICAgICAgIG51bWJlckVsLnZhbHVlID0gbXkuZGF0YS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgbXkuc3RvcmUuZGlzcGF0Y2gobXkuc3RvcmUuZ2V0QWN0aW9ucygpLmNoYW5nZVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgICBteS5wcm9jZXNzb3JJRCwgXG4gICAgICAgICAgICAgICAgbXkua2V5LCBcbiAgICAgICAgICAgICAgICBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByYW5nZUVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBudW1iZXJFbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuaW5pdERhdGEgPSBpbml0RGF0YTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createItemizedSettingView;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a itemized type parameter,\n * which has a radio buttons for item selection.\n */\nfunction createItemizedSettingView(specs, my) {\n    var that,\n        radioInputs = [],\n        numInputs,\n        init = function init() {\n        var parentEl = my.el.parentNode,\n            valueEl = my.el.querySelector('.setting__value');\n\n        // add the radio buttons\n        var radioTemplate = document.querySelector('#template-setting-itemized-item'),\n            model = my.data.model;\n        numInputs = model.length;\n        for (var i = 0; i < numInputs; i++) {\n            var id = getTemporaryInputAndLabelId();\n\n            // add a new cloned radio element\n            var radioInputEl = radioTemplate.content.children[0].cloneNode(true);\n            valueEl.appendChild(radioInputEl);\n            radioInputEl.setAttribute('name', specs.key);\n            radioInputEl.setAttribute('id', id);\n            radioInputEl.value = model[i].value;\n            radioInputEl.checked = model[i].value == my.data.default;\n            radioInputEl.addEventListener('change', onChange);\n            radioInputs.push(radioInputEl);\n\n            // add a new cloned label element\n            var radioLabelEl = radioTemplate.content.children[1].cloneNode(true);\n            valueEl.appendChild(radioLabelEl);\n            radioLabelEl.setAttribute('for', id);\n            radioLabelEl.innerHTML = model[i].label;\n        }\n    },\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        for (var i = 0; i < numInputs; i++) {\n            radioInputs[i].checked = radioInputs[i].value == value;\n        }\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2l0ZW1pemVkLmpzPzdhMjAiXSwibmFtZXMiOlsiY3JlYXRlSXRlbWl6ZWRTZXR0aW5nVmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwicmFkaW9JbnB1dHMiLCJudW1JbnB1dHMiLCJpbml0IiwicGFyZW50RWwiLCJlbCIsInBhcmVudE5vZGUiLCJ2YWx1ZUVsIiwicXVlcnlTZWxlY3RvciIsInJhZGlvVGVtcGxhdGUiLCJkb2N1bWVudCIsIm1vZGVsIiwiZGF0YSIsImxlbmd0aCIsImkiLCJpZCIsImdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCIsInJhZGlvSW5wdXRFbCIsImNvbnRlbnQiLCJjaGlsZHJlbiIsImNsb25lTm9kZSIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlIiwia2V5IiwidmFsdWUiLCJjaGVja2VkIiwiZGVmYXVsdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkNoYW5nZSIsInB1c2giLCJyYWRpb0xhYmVsRWwiLCJpbm5lckhUTUwiLCJsYWJlbCIsIk1hdGgiLCJyYW5kb20iLCJwZXJmb3JtYW5jZSIsIm5vdyIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwidGFyZ2V0Iiwic2V0VmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU13QkEseUI7O0FBTnhCOzs7Ozs7QUFFQTs7OztBQUllLFNBQVNBLHlCQUFULENBQW1DQyxLQUFuQyxFQUEwQ0MsRUFBMUMsRUFBOEM7QUFDekQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLGNBQWMsRUFEbEI7QUFBQSxRQUVJQyxTQUZKO0FBQUEsUUFJSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZCxZQUFJQyxXQUFXTCxHQUFHTSxFQUFILENBQU1DLFVBQXJCO0FBQUEsWUFDSUMsVUFBVVIsR0FBR00sRUFBSCxDQUFNRyxhQUFOLENBQW9CLGlCQUFwQixDQURkOztBQUdBO0FBQ0EsWUFBSUMsZ0JBQWdCQyxTQUFTRixhQUFULENBQXVCLGlDQUF2QixDQUFwQjtBQUFBLFlBQ0lHLFFBQVFaLEdBQUdhLElBQUgsQ0FBUUQsS0FEcEI7QUFFQVQsb0JBQVlTLE1BQU1FLE1BQWxCO0FBQ0EsYUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlaLFNBQXBCLEVBQStCWSxHQUEvQixFQUFvQztBQUNoQyxnQkFBSUMsS0FBS0MsNkJBQVQ7O0FBRUE7QUFDQSxnQkFBSUMsZUFBZVIsY0FBY1MsT0FBZCxDQUFzQkMsUUFBdEIsQ0FBK0IsQ0FBL0IsRUFBa0NDLFNBQWxDLENBQTRDLElBQTVDLENBQW5CO0FBQ0FiLG9CQUFRYyxXQUFSLENBQW9CSixZQUFwQjtBQUNBQSx5QkFBYUssWUFBYixDQUEwQixNQUExQixFQUFrQ3hCLE1BQU15QixHQUF4QztBQUNBTix5QkFBYUssWUFBYixDQUEwQixJQUExQixFQUFnQ1AsRUFBaEM7QUFDQUUseUJBQWFPLEtBQWIsR0FBcUJiLE1BQU1HLENBQU4sRUFBU1UsS0FBOUI7QUFDQVAseUJBQWFRLE9BQWIsR0FBdUJkLE1BQU1HLENBQU4sRUFBU1UsS0FBVCxJQUFrQnpCLEdBQUdhLElBQUgsQ0FBUWMsT0FBakQ7QUFDQVQseUJBQWFVLGdCQUFiLENBQThCLFFBQTlCLEVBQXdDQyxRQUF4QztBQUNBM0Isd0JBQVk0QixJQUFaLENBQWlCWixZQUFqQjs7QUFFQTtBQUNBLGdCQUFJYSxlQUFlckIsY0FBY1MsT0FBZCxDQUFzQkMsUUFBdEIsQ0FBK0IsQ0FBL0IsRUFBa0NDLFNBQWxDLENBQTRDLElBQTVDLENBQW5CO0FBQ0FiLG9CQUFRYyxXQUFSLENBQW9CUyxZQUFwQjtBQUNBQSx5QkFBYVIsWUFBYixDQUEwQixLQUExQixFQUFpQ1AsRUFBakM7QUFDQWUseUJBQWFDLFNBQWIsR0FBeUJwQixNQUFNRyxDQUFOLEVBQVNrQixLQUFsQztBQUNIO0FBQ0osS0EvQkw7OztBQWlDSTs7OztBQUlBaEIsa0NBQThCLFNBQTlCQSwyQkFBOEIsR0FBVztBQUNyQyxlQUFPLE9BQU9pQixLQUFLQyxNQUFMLEVBQVAsR0FBdUJDLFlBQVlDLEdBQVosRUFBOUI7QUFDSCxLQXZDTDtBQUFBLFFBeUNJUixXQUFXLFNBQVhBLFFBQVcsQ0FBU1MsQ0FBVCxFQUFZO0FBQ25CdEMsV0FBR3VDLEtBQUgsQ0FBU0MsUUFBVCxDQUFrQnhDLEdBQUd1QyxLQUFILENBQVNFLFVBQVQsR0FBc0JDLGVBQXRCLENBQ2QxQyxHQUFHMkMsV0FEVyxFQUVkM0MsR0FBR3dCLEdBRlcsRUFHZGMsRUFBRU0sTUFBRixDQUFTbkIsS0FISyxDQUFsQjtBQUlILEtBOUNMO0FBQUEsUUFnRElvQixXQUFXLFNBQVhBLFFBQVcsQ0FBU3BCLEtBQVQsRUFBZ0I7QUFDdkIsYUFBSyxJQUFJVixJQUFJLENBQWIsRUFBZ0JBLElBQUlaLFNBQXBCLEVBQStCWSxHQUEvQixFQUFvQztBQUNoQ2Isd0JBQVlhLENBQVosRUFBZVcsT0FBZixHQUEwQnhCLFlBQVlhLENBQVosRUFBZVUsS0FBZixJQUF3QkEsS0FBbEQ7QUFDSDtBQUNKLEtBcERMOztBQXNEQXpCLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHNkMsUUFBSCxHQUFjQSxRQUFkOztBQUVBNUMsV0FBTyxvQkFBc0JGLEtBQXRCLEVBQTZCQyxFQUE3QixDQUFQOztBQUVBSTs7QUFFQSxXQUFPSCxJQUFQO0FBQ0giLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVNldHRpbmdWaWV3IGZyb20gJy4vYmFzZSc7XG5cbi8qKlxuICogUHJvY2Vzc29yIHNldHRpbmcgdmlldyBmb3IgYSBpdGVtaXplZCB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIHJhZGlvIGJ1dHRvbnMgZm9yIGl0ZW0gc2VsZWN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVJdGVtaXplZFNldHRpbmdWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICByYWRpb0lucHV0cyA9IFtdLFxuICAgICAgICBudW1JbnB1dHMsXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50RWwgPSBteS5lbC5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgIHZhbHVlRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fdmFsdWUnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYWRkIHRoZSByYWRpbyBidXR0b25zXG4gICAgICAgICAgICBsZXQgcmFkaW9UZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1zZXR0aW5nLWl0ZW1pemVkLWl0ZW0nKSxcbiAgICAgICAgICAgICAgICBtb2RlbCA9IG15LmRhdGEubW9kZWw7XG4gICAgICAgICAgICBudW1JbnB1dHMgPSBtb2RlbC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUlucHV0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gZ2V0VGVtcG9yYXJ5SW5wdXRBbmRMYWJlbElkKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gYWRkIGEgbmV3IGNsb25lZCByYWRpbyBlbGVtZW50XG4gICAgICAgICAgICAgICAgbGV0IHJhZGlvSW5wdXRFbCA9IHJhZGlvVGVtcGxhdGUuY29udGVudC5jaGlsZHJlblswXS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdmFsdWVFbC5hcHBlbmRDaGlsZChyYWRpb0lucHV0RWwpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBzcGVjcy5rZXkpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC52YWx1ZSA9IG1vZGVsW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5jaGVja2VkID0gbW9kZWxbaV0udmFsdWUgPT0gbXkuZGF0YS5kZWZhdWx0O1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkNoYW5nZSk7XG4gICAgICAgICAgICAgICAgcmFkaW9JbnB1dHMucHVzaChyYWRpb0lucHV0RWwpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCBhIG5ldyBjbG9uZWQgbGFiZWwgZWxlbWVudFxuICAgICAgICAgICAgICAgIGxldCByYWRpb0xhYmVsRWwgPSByYWRpb1RlbXBsYXRlLmNvbnRlbnQuY2hpbGRyZW5bMV0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIHZhbHVlRWwuYXBwZW5kQ2hpbGQocmFkaW9MYWJlbEVsKTtcbiAgICAgICAgICAgICAgICByYWRpb0xhYmVsRWwuc2V0QXR0cmlidXRlKCdmb3InLCBpZCk7XG4gICAgICAgICAgICAgICAgcmFkaW9MYWJlbEVsLmlubmVySFRNTCA9IG1vZGVsW2ldLmxhYmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcXVpY2sgSUQgdG8gdGllIGxhYmVsIHRvIGlucHV0IGVsZW1lbnRzLlxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFVuaXF1ZSBJRC5cbiAgICAgICAgICovXG4gICAgICAgIGdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdpZCcgKyBNYXRoLnJhbmRvbSgpICsgcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBvbkNoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIG15LnN0b3JlLmRpc3BhdGNoKG15LnN0b3JlLmdldEFjdGlvbnMoKS5jaGFuZ2VQYXJhbWV0ZXIoXG4gICAgICAgICAgICAgICAgbXkucHJvY2Vzc29ySUQsIFxuICAgICAgICAgICAgICAgIG15LmtleSwgXG4gICAgICAgICAgICAgICAgZS50YXJnZXQudmFsdWUpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUlucHV0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmFkaW9JbnB1dHNbaV0uY2hlY2tlZCA9IChyYWRpb0lucHV0c1tpXS52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuc2V0VmFsdWUgPSBzZXRWYWx1ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVNldHRpbmdWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvc2V0dGluZy9pdGVtaXplZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStringSettingView;\n\nvar _base = __webpack_require__(1);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\n\nfunction createStringSettingView(specs, my) {\n    var that,\n        textEl,\n        init = function init() {\n        textEl = my.el.getElementsByClassName('setting__text')[0];\n        textEl.value = my.data.value;\n        textEl.addEventListener('input', onChange);\n    },\n        onChange = function onChange(e) {\n        e.preventDefault();\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        // only update if the text input doesn't have focus,\n        // else value gets refreshed and cursor jumps to end\n        if (textEl != document.activeElement) {\n            textEl.value = value;\n        }\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3N0cmluZy5qcz83MjVmIl0sIm5hbWVzIjpbImNyZWF0ZVN0cmluZ1NldHRpbmdWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJ0ZXh0RWwiLCJpbml0IiwiZWwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidmFsdWUiLCJkYXRhIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcmUiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjaGFuZ2VQYXJhbWV0ZXIiLCJwcm9jZXNzb3JJRCIsImtleSIsInRhcmdldCIsInNldFZhbHVlIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFPd0JBLHVCOztBQVB4Qjs7Ozs7O0FBRUE7Ozs7O0FBS2UsU0FBU0EsdUJBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDQyxFQUF4QyxFQUE0QztBQUN2RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsTUFESjtBQUFBLFFBR0lDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RELGlCQUFTRixHQUFHSSxFQUFILENBQU1DLHNCQUFOLENBQTZCLGVBQTdCLEVBQThDLENBQTlDLENBQVQ7QUFDQUgsZUFBT0ksS0FBUCxHQUFlTixHQUFHTyxJQUFILENBQVFELEtBQXZCO0FBQ0FKLGVBQU9NLGdCQUFQLENBQXdCLE9BQXhCLEVBQWlDQyxRQUFqQztBQUNILEtBUEw7QUFBQSxRQVNJQSxXQUFXLFNBQVhBLFFBQVcsQ0FBU0MsQ0FBVCxFQUFZO0FBQ25CQSxVQUFFQyxjQUFGO0FBQ0FYLFdBQUdZLEtBQUgsQ0FBU0MsUUFBVCxDQUFrQmIsR0FBR1ksS0FBSCxDQUFTRSxVQUFULEdBQXNCQyxlQUF0QixDQUNkZixHQUFHZ0IsV0FEVyxFQUVkaEIsR0FBR2lCLEdBRlcsRUFHZFAsRUFBRVEsTUFBRixDQUFTWixLQUhLLENBQWxCO0FBSUgsS0FmTDtBQUFBLFFBaUJJYSxXQUFXLFNBQVhBLFFBQVcsQ0FBU2IsS0FBVCxFQUFnQjtBQUN2QjtBQUNBO0FBQ0EsWUFBSUosVUFBVWtCLFNBQVNDLGFBQXZCLEVBQXNDO0FBQ2xDbkIsbUJBQU9JLEtBQVAsR0FBZUEsS0FBZjtBQUNIO0FBQ0osS0F2Qkw7O0FBeUJBTixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR21CLFFBQUgsR0FBY0EsUUFBZDs7QUFFQWxCLFdBQU8sb0JBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDs7QUFFQUc7O0FBRUEsV0FBT0YsSUFBUDtBQUNIIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyBmcm9tICcuL2Jhc2UnO1xuXG4vKipcbiAqIFByb2Nlc3NvciBzZXR0aW5nIHZpZXcgZm9yIGEgQm9vbGVhbiB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIGNoZWNrYm94IGlucHV0LlxuICovXG4gXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHJpbmdTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgdGV4dEVsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGV4dEVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fdGV4dCcpWzBdO1xuICAgICAgICAgICAgdGV4dEVsLnZhbHVlID0gbXkuZGF0YS52YWx1ZTtcbiAgICAgICAgICAgIHRleHRFbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG9uQ2hhbmdlKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbXkuc3RvcmUuZGlzcGF0Y2gobXkuc3RvcmUuZ2V0QWN0aW9ucygpLmNoYW5nZVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgICBteS5wcm9jZXNzb3JJRCwgXG4gICAgICAgICAgICAgICAgbXkua2V5LCBcbiAgICAgICAgICAgICAgICBlLnRhcmdldC52YWx1ZSkpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgLy8gb25seSB1cGRhdGUgaWYgdGhlIHRleHQgaW5wdXQgZG9lc24ndCBoYXZlIGZvY3VzLFxuICAgICAgICAgICAgLy8gZWxzZSB2YWx1ZSBnZXRzIHJlZnJlc2hlZCBhbmQgY3Vyc29yIGp1bXBzIHRvIGVuZFxuICAgICAgICAgICAgaWYgKHRleHRFbCAhPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGV4dEVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3N0cmluZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/settings.html\": 35,\n\t\"./euclidfx/settings.html\": 36,\n\t\"./output/settings.html\": 37\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 34;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciBeXFwuXFwvLipcXC9zZXR0aW5nc1xcLmh0bWwkP2EyNDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvc2V0dGluZ3MuaHRtbFwiOiAzNSxcblx0XCIuL2V1Y2xpZGZ4L3NldHRpbmdzLmh0bWxcIjogMzYsXG5cdFwiLi9vdXRwdXQvc2V0dGluZ3MuaHRtbFwiOiAzN1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDM0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMgLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIgXlxcLlxcLy4qXFwvc2V0dGluZ3NcXC5odG1sJFxuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"settings settings--epg\\\">\\n    <form>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Euclidean Rhythm</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row steps\\\"></div>\\n            <div class=\\\"settings__row pulses\\\"></div>\\n            <div class=\\\"settings__row rotation\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Playback</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row rate\\\"></div>\\n            <div class=\\\"settings__row note_length\\\"></div>\\n            <div class=\\\"settings__row is_triplets\\\"></div>\\n            <div class=\\\"settings__row is_mute\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">MIDI Out</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row channel_out\\\"></div>\\n            <div class=\\\"settings__row pitch_out\\\"></div>\\n            <div class=\\\"settings__row velocity_out\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Other</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row name\\\"></div>\\n            <div class=\\\"settings__row\\\">\\n                <div class=\\\"setting\\\">\\n                    <span class=\\\"setting__label\\\"></span>\\n                    <div class=\\\"setting__value\\\">\\n                        <button type=\\\"button\\\" class=\\\"settings__delete btn\\\">Delete</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </fieldset>\\n    </form>\\n</div>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvc2V0dGluZ3MuaHRtbD85ZjY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNldHRpbmdzIHNldHRpbmdzLS1lcGdcXFwiPlxcbiAgICA8Zm9ybT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+RXVjbGlkZWFuIFJoeXRobTwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJzZXR0aW5nc19fZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgc3RlcHNcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgcHVsc2VzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHJvdGF0aW9uXFxcIj48L2Rpdj5cXG4gICAgICAgIDwvZmllbGRzZXQ+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbF9faGVhZGVyIHBhbmVsX19oZWFkZXItLXN1YlxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlYWRlcl9fbGFiZWxcXFwiPlBsYXliYWNrPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcInNldHRpbmdzX19maWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyByYXRlXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IG5vdGVfbGVuZ3RoXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGlzX3RyaXBsZXRzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGlzX211dGVcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+TUlESSBPdXQ8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGNoYW5uZWxfb3V0XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHBpdGNoX291dFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyB2ZWxvY2l0eV9vdXRcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+T3RoZXI8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IG5hbWVcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3dcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZXR0aW5nX19sYWJlbFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ19fdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwic2V0dGluZ3NfX2RlbGV0ZSBidG5cXFwiPkRlbGV0ZTwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgPC9mb3JtPlxcbjwvZGl2PlxcblwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXBnL3NldHRpbmdzLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"settings\\\">\\n    <form>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Euclidean Pattern</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row steps\\\"></div>\\n            <div class=\\\"settings__row pulses\\\"></div>\\n            <div class=\\\"settings__row rotation\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Playback</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row rate\\\"></div>\\n            <div class=\\\"settings__row is_triplets\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Effect</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row target\\\"></div>\\n            <div class=\\\"settings__row low\\\"></div>\\n            <div class=\\\"settings__row high\\\"></div>\\n            <div class=\\\"settings__row relative\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Other</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row name\\\"></div>\\n            <div class=\\\"settings__row\\\">\\n                <div class=\\\"setting\\\">\\n                    <span class=\\\"setting__label\\\"></span>\\n                    <div class=\\\"setting__value\\\">\\n                        <button type=\\\"button\\\" class=\\\"settings__delete btn\\\">Delete</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </fieldset>\\n    </form>\\n</div>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9zZXR0aW5ncy5odG1sPzkwZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NcXFwiPlxcbiAgICA8Zm9ybT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+RXVjbGlkZWFuIFBhdHRlcm48L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHN0ZXBzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHB1bHNlc1xcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyByb3RhdGlvblxcXCI+PC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFuZWxfX2hlYWRlciBwYW5lbF9faGVhZGVyLS1zdWJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJfX2xhYmVsXFxcIj5QbGF5YmFjazwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJzZXR0aW5nc19fZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgcmF0ZVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyBpc190cmlwbGV0c1xcXCI+PC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFuZWxfX2hlYWRlciBwYW5lbF9faGVhZGVyLS1zdWJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJfX2xhYmVsXFxcIj5FZmZlY3Q8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHRhcmdldFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyBsb3dcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgaGlnaFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyByZWxhdGl2ZVxcXCI+PC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFuZWxfX2hlYWRlciBwYW5lbF9faGVhZGVyLS1zdWJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJfX2xhYmVsXFxcIj5PdGhlcjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJzZXR0aW5nc19fZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgbmFtZVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3Jvd1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInNldHRpbmdfX2xhYmVsXFxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nX192YWx1ZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJzZXR0aW5nc19fZGVsZXRlIGJ0blxcXCI+RGVsZXRlPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICA8L2Zvcm0+XFxuPC9kaXY+XFxuXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIhLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9zZXR0aW5ncy5odG1sXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"settings\\\">\\n    <form>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">MIDI Output</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <p class=\\\"settings__paragraph\\\">This is an output processor. It sends incoming events to a MIDI output port.<br>\\n                <br>\\n                There are no settings for this processor.\\n            </p>\\n        </fieldset>\\n</div>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvc2V0dGluZ3MuaHRtbD9lZGM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNldHRpbmdzXFxcIj5cXG4gICAgPGZvcm0+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbF9faGVhZGVyIHBhbmVsX19oZWFkZXItLXN1YlxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlYWRlcl9fbGFiZWxcXFwiPk1JREkgT3V0cHV0PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcInNldHRpbmdzX19maWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcInNldHRpbmdzX19wYXJhZ3JhcGhcXFwiPlRoaXMgaXMgYW4gb3V0cHV0IHByb2Nlc3Nvci4gSXQgc2VuZHMgaW5jb21pbmcgZXZlbnRzIHRvIGEgTUlESSBvdXRwdXQgcG9ydC48YnI+XFxuICAgICAgICAgICAgICAgIDxicj5cXG4gICAgICAgICAgICAgICAgVGhlcmUgYXJlIG5vIHNldHRpbmdzIGZvciB0aGlzIHByb2Nlc3Nvci5cXG4gICAgICAgICAgICA8L3A+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbjwvZGl2PlwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvb3V0cHV0L3NldHRpbmdzLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasView;\n\nvar _util = __webpack_require__(5);\n\nvar _windowresize = __webpack_require__(13);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nvar _canvasprocessors = __webpack_require__(39);\n\nvar _canvasprocessors2 = _interopRequireDefault(_canvasprocessors);\n\nvar _canvasconnections = __webpack_require__(45);\n\nvar _canvasconnections2 = _interopRequireDefault(_canvasconnections);\n\nvar _tween = __webpack_require__(14);\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Graphic 2D view of the processor network.\n *\n * CanvasView draws the graphics for all processors.\n * DynamicCanvas shows all elements that update each requestAnimationFrame.\n * StaticCanvas shows all elements that update only infrequently.\n * \n * Each processor has its own view.\n * When a change happens to a processor that \n * requires the static canvas to be redrawn:\n * - The processor's view receives a callback from a changed parameter.\n * - The view redraws its static graphics on an off-screen canvas.\n * - The view sets a dirty flag on the canvasView (this).\n * - The canvasView receives the next draw request.\n * - It clears the staticCanvas.\n * - It draws each view's off-screen canvas on the staticCanvas.\n * - It clears the dirty flag.\n */\nfunction createCanvasView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl,\n        staticCanvas,\n        dynamicCanvas,\n        staticCtx,\n        dynamicCtx,\n        isDirty = false,\n        doubleClickCounter = 0,\n        doubleClickDelay = 300,\n        doubleClickTimer,\n        dragObjectType,\n        // 'background|processor|connection'\n\n    init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        staticCanvas = document.querySelector('.canvas-static');\n        dynamicCanvas = document.querySelector('.canvas-dynamic');\n        staticCtx = staticCanvas.getContext('2d');\n        dynamicCtx = dynamicCanvas.getContext('2d');\n\n        rootEl.addEventListener(_util.util.eventType.click, onClick);\n        rootEl.addEventListener(_util.util.eventType.start, onTouchStart);\n        rootEl.addEventListener(_util.util.eventType.move, dragMove);\n        rootEl.addEventListener(_util.util.eventType.end, dragEnd);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.NEW_PROJECT:\n                case e.detail.actions.SET_PROJECT:\n                    my.setProcessorViews(e.detail.state.processors);\n                    my.selectProcessorView(e.detail.state.selectedID);\n                    my.markDirty();\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    my.createProcessorViews(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    my.deleteProcessorView(e.detail.action.id);\n                    my.selectProcessorView(e.detail.state.selectedID);\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                    my.selectProcessorView(e.detail.state.selectedID);\n                    break;\n\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                    my.markDirty();\n                    break;\n            }\n        });\n\n        my.addWindowResizeCallback(onWindowResize);\n        onWindowResize();\n    },\n\n\n    /**\n     * Window resize event handler.\n     */\n    onWindowResize = function onWindowResize() {\n        staticCanvas.width = rootEl.clientWidth;\n        staticCanvas.height = rootEl.clientHeight;\n        dynamicCanvas.width = rootEl.clientWidth;\n        dynamicCanvas.height = rootEl.clientHeight;\n        my.canvasRect = dynamicCanvas.getBoundingClientRect();\n        my.resizeConnections();\n        markDirty();\n    },\n\n\n    /**\n     * Separate click and doubleclick.\n     * @see http://stackoverflow.com/questions/6330431/jquery-bind-double-click-and-single-click-separately\n     */\n    onClick = function onClick(e) {\n        // separate click from doubleclick\n        doubleClickCounter++;\n        if (doubleClickCounter == 1) {\n            doubleClickTimer = setTimeout(function () {\n                doubleClickCounter = 0;\n                // implement single click behaviour here\n            }, doubleClickDelay);\n        } else {\n            clearTimeout(doubleClickTimer);\n            doubleClickCounter = 0;\n            // implement double click behaviour here\n        }\n    },\n\n\n    /**\n     * Select the object under the mouse.\n     * Start dragging the object.\n     */\n    onTouchStart = function onTouchStart(e) {\n        var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n            canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n        if (my.isConnectMode && my.intersectsCableHandle(canvasX, canvasY)) {\n            dragObjectType = 'cablehandle';\n        } else if (my.isConnectMode && my.intersectsConnector(canvasX, canvasY, false)) {\n            dragObjectType = 'connection';\n        } else if (my.intersectsProcessor(canvasX, canvasY)) {\n            dragObjectType = 'processor';\n        } else {\n            dragObjectType = 'background';\n        }\n    },\n\n\n    /**\n     * Drag a view.\n     * @param  {Object} e Event.\n     */\n    dragMove = function dragMove(e) {\n        e.preventDefault();\n        if (dragObjectType) {\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n            switch (dragObjectType) {\n                case 'connection':\n                    my.dragMoveConnection(canvasX, canvasY);\n                    break;\n                case 'processor':\n                    my.dragSelectedProcessor(canvasX, canvasY);\n                    break;\n                case 'background':\n                    my.dragAllProcessors(canvasX, canvasY);\n                    break;\n            }\n        }\n    },\n\n\n    /**\n     * Dragging 3D object ended.\n     * @param  {Object} e Event.\n     */\n    dragEnd = function dragEnd(e) {\n        e.preventDefault();\n\n        if (dragObjectType) {\n            dragMove(e);\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n            switch (dragObjectType) {\n                case 'connection':\n                    my.intersectsConnector(canvasX, canvasY, true);\n                    my.dragEndConnection();\n                    break;\n                case 'processor':\n                    break;\n                case 'background':\n                    break;\n                case 'cablehandle':\n                    var connectionID = my.intersectsCableHandle(canvasX, canvasY);\n                    if (connectionID) {\n                        store.dispatch(store.getActions().disconnectProcessors(connectionID));\n                    }\n                    break;\n            }\n            dragObjectType = null;\n        }\n    },\n\n\n    /**\n     * Set a flag to indicate the static canvas should be redrawn.\n     */\n    markDirty = function markDirty() {\n        isDirty = true;\n    },\n\n\n    /**\n     * Update any tween animations that are going on and\n     * redraw the canvases if needed.\n     * @param {Number} position Transport playback position in ticks.\n     * @param {Array} processorEvents Array to processor generated events to displayin the view.\n     */\n    draw = function draw(position, processorEvents) {\n        _tween2.default.update();\n        var i = void 0,\n            views = my.getProcessorViews(),\n            n = views.length;\n        for (i = 0; i < n; i++) {\n            views[i].draw(position, processorEvents);\n        }\n        if (isDirty) {\n            isDirty = false;\n            staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            dynamicCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            my.addConnectionsToCanvas(staticCtx);\n            for (i = 0; i < n; i++) {\n                views[i].addToStaticView(staticCtx);\n            }\n        }\n\n        for (i = 0; i < n; i++) {\n            views[i].clearFromDynamicView(dynamicCtx);\n        }\n        for (i = 0; i < n; i++) {\n            views[i].addToDynamicView(dynamicCtx);\n        }\n    };\n\n    my = my || {};\n    my.theme;\n    my.canvasRect, my.markDirty = markDirty;\n\n    that = (0, _windowresize2.default)(specs, my);\n    that = (0, _canvasprocessors2.default)(specs, my);\n    that = (0, _canvasconnections2.default)(specs, my);\n\n    init();\n\n    that.draw = draw;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorViews;\n\nvar _selectors = __webpack_require__(3);\n\n/**\n * Manages the canvas views of the processors in the network.\n * - Processor view lifecycle.\n * - Processor view user interaction, itersection with (mouse) point.\n * - Processor view dragging.\n * - Processor view theme changes.\n */\nfunction createCanvasProcessorViews(specs, my) {\n    var that,\n        store = specs.store,\n        views = [],\n        dragOffsetX,\n        dragOffsetY,\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_THEME:\n                    setTheme(e.detail.state);\n                    break;\n            }\n        });\n    },\n        setTheme = function setTheme(state) {\n        var themeColors = (0, _selectors.getThemeColors)();\n        views.forEach(function (view) {\n            if (view.setTheme instanceof Function) {\n                view.setTheme(themeColors, state.processors.byId[view.getID()].params.byId);\n            }\n        });\n    },\n        setProcessorViews = function setProcessorViews(newProcessors) {\n        clearProcessorViews();\n        createProcessorViews(newProcessors);\n    },\n        clearProcessorViews = function clearProcessorViews() {\n        var n = views.length;\n        while (--n >= 0) {\n            deleteProcessorView(views[n].getID());\n        }\n    },\n\n\n    /**\n     * Create canvas 2D object if it exists for the type.\n     * @param  {Array} data Array of current processors' state.\n     */\n    createProcessorViews = function createProcessorViews(processors) {\n        processors.allIds.forEach(function (id, i) {\n            var processorData = processors.byId[id];\n            if (!views[i] || id !== views[i].getID()) {\n                var module = __webpack_require__(40)(\"./\" + processorData.type + '/graphic');\n                var view = module.createGraphic({\n                    data: processorData,\n                    store: store,\n                    canvasDirtyCallback: my.markDirty,\n                    theme: (0, _selectors.getThemeColors)()\n                });\n                views.splice(i, 0, view);\n            }\n        });\n    },\n        selectProcessorView = function selectProcessorView(id) {\n        views.forEach(function (view) {\n            if (typeof view.setSelected === 'function') {\n                view.setSelected(view.getID() === id);\n            }\n        });\n    },\n\n\n    /**\n     * Delete canvas 2D object when the processor is deleted.\n     * @param  {Object} processor MIDI processor for which the 3D object will be a view.\n     */\n    deleteProcessorView = function deleteProcessorView(id) {\n        var i = views.length;\n        while (--i >= 0) {\n            if (views[i].getID() === id) {\n                views[i].terminate();\n                views[i].terminateBase();\n                views.splice(i, 1);\n                my.markDirty();\n                return;\n            }\n        }\n    },\n\n\n    /**\n     * Check and handle intersection of point with view.\n     * @param  {Number} x Canvas X coordinate.\n     * @param  {Number} y Canvas Y coordinate.\n     * @return {Boolean} True if intersects.\n     */\n    intersectsProcessor = function intersectsProcessor(x, y) {\n        var isIntersect = false;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        for (var i = views.length - 1; i >= 0; i--) {\n            if (views[i].intersectsWithPoint(x, y)) {\n                isIntersect = true;\n                store.dispatch(store.getActions().selectProcessor(views[i].getID()));\n                // start dragging the view's graphic\n                var pos2d = views[i].getPosition2d();\n                dragOffsetX = x - pos2d.x;\n                dragOffsetY = y - pos2d.y;\n                break;\n            }\n        }\n        return isIntersect;\n    },\n        dragSelectedProcessor = function dragSelectedProcessor(x, y) {\n        store.dispatch(store.getActions().dragSelectedProcessor(x - dragOffsetX, y - dragOffsetY));\n    },\n        dragAllProcessors = function dragAllProcessors(x, y) {\n        var newX = x - dragOffsetX,\n            newY = y - dragOffsetY;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        store.dispatch(store.getActions().dragAllProcessors(newX, newY));\n    },\n        getProcessorViews = function getProcessorViews() {\n        return views;\n    };\n\n    my = my || {};\n    my.setProcessorViews = setProcessorViews;\n    my.createProcessorViews = createProcessorViews;\n    my.selectProcessorView = selectProcessorView;\n    my.deleteProcessorView = deleteProcessorView;\n    my.intersectsProcessor = intersectsProcessor;\n    my.dragSelectedProcessor = dragSelectedProcessor;\n    my.dragAllProcessors = dragAllProcessors;\n    my.getProcessorViews = getProcessorViews;\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/graphic\": 41,\n\t\"./euclidfx/graphic\": 43,\n\t\"./output/graphic\": 44\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 40;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9ncmFwaGljJD9kOTQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vZXBnL2dyYXBoaWNcIjogNDEsXG5cdFwiLi9ldWNsaWRmeC9ncmFwaGljXCI6IDQzLFxuXHRcIi4vb3V0cHV0L2dyYXBoaWNcIjogNDRcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA0MDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy93aC9wcm9jZXNzb3JzIF5cXC5cXC8uKlxcL2dyYXBoaWMkXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(4);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _euclid = __webpack_require__(8);\n\nvar _tween = __webpack_require__(14);\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nvar _config = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Euclidean pattern animated necklace wheel drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        necklaceCanvas = void 0,\n        necklaceCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        pointerCanvas = void 0,\n        pointerCtx = void 0,\n        pointerRotation = void 0,\n        pointerRotationPrevious = 0,\n        pointerMutedRadius = 30,\n        pointerCanvasCenter = void 0,\n        radius = 110,\n        necklaceMinRadius = 50,\n        necklaceRadius = void 0,\n        centerDotFullRadius = 10,\n        centerDotRadius = void 0,\n        centerDotSize = void 0,\n        centerDotX = void 0,\n        centerDotY = void 0,\n        centerDotStartTween = void 0,\n        centerDotEndTween = void 0,\n        centerRadius = 20,\n        outConnectorY = 35,\n        selectRadius = 15,\n        dotRadius = void 0,\n        dotMaxRadius = 10,\n        dotActiveRadius = void 0,\n        zeroMarkerRadius = 3,\n        lineWidth = 2,\n        isSelected = false,\n        doublePI = Math.PI * 2,\n        dotAnimations = {},\n        isNoteActive = false,\n        necklace = [],\n        duration = 0,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = specs.canvasDirtyCallback;\n\n        initGraphics();\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        redrawStaticCanvas();\n        updateDuration();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                        case 'pulses':\n                            updateDuration();\n                        // fall through\n                        case 'rotation':\n                            updateNecklace();\n                            break;\n                        case 'is_mute':\n                            updatePointer();\n                            break;\n                        case 'name':\n                            updateName();\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                        case 'note_length':\n                            updateDuration();\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                var processor = e.detail.state.processors.byId[my.id];\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = radius * 2;\n        staticCanvas.width = radius * 2;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for dots ring and polygon\n        necklaceCanvas = document.createElement('canvas');\n        necklaceCanvas.height = radius * 2;\n        necklaceCanvas.width = radius * 2;\n        necklaceCtx = necklaceCanvas.getContext('2d');\n        necklaceCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the pointer\n        pointerCanvas = document.createElement('canvas');\n        pointerCanvas.height = radius;\n        pointerCanvas.width = centerRadius * 2;\n        pointerCtx = pointerCanvas.getContext('2d');\n        pointerCtx.lineWidth = lineWidth;\n        pointerCanvasCenter = pointerCanvas.width / 2;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = radius * 2;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n\n        // width and height to clear center dot \n        centerDotSize = (centerDotFullRadius + 1) * 2;\n    },\n\n\n    /**\n     * Show circle if the my.processor is selected, else hide.\n     * @param {Boolean} isSelectedView True if selected.\n     */\n    setSelected = function setSelected(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw(position, processorEvents) {\n        showPlaybackPosition(position);\n\n        if (processorEvents[my.id] && processorEvents[my.id].length) {\n            for (var i = 0, n = processorEvents[my.id].length; i < n; i++) {\n                var event = processorEvents[my.id][i];\n                showNote(event.stepIndex, event.delayFromNowToNoteStart, event.delayFromNowToNoteEnd);\n            }\n        }\n    },\n\n\n    /**\n     * Show the playback position within the pattern.\n     * Indicated by the pointer's rotation.\n     * @param  {Number} position Position within pattern in ticks.\n     */\n    showPlaybackPosition = function showPlaybackPosition(position) {\n        pointerRotationPrevious = pointerRotation;\n        pointerRotation = doublePI * (position % duration / duration);\n    },\n\n\n    /**\n     * Show animation of the pattern dot that is about to play. \n     * @param {Number} stepIndex Index of the step to play.\n     * @param {Number} noteStartDelay Delay from now until note start in ms.\n     * @param {Number} noteStopDelay Delay from now until note end in ms.\n     */\n    showNote = function showNote(stepIndex, noteStartDelay, noteStopDelay) {\n        // get the coordinates of the dot for this step\n        var steps = my.params.steps.value;\n\n        // retain necklace dot state in object\n        dotAnimations[stepIndex] = {\n            positionX: necklace[stepIndex].center.x,\n            positionY: necklace[stepIndex].center.y,\n            boundingBox: necklace[stepIndex].rect,\n            dotRadius: 0\n        };\n\n        var tweeningDot = dotAnimations[stepIndex];\n\n        // animate the necklace dot\n        new _tween2.default.Tween({ currentRadius: dotActiveRadius }).to({ currentRadius: dotRadius }, 300).onUpdate(function () {\n            // store new dot size\n            tweeningDot.dotRadius = this.currentRadius;\n        }).onComplete(function () {\n            // delete dot state object\n            delete dotAnimations[stepIndex];\n        }).delay(noteStartDelay).start();\n    },\n\n\n    /**\n     * Calculate the pattern's duration in milliseconds.\n     */\n    updateDuration = function updateDuration() {\n        var rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        duration = my.params.steps.value * stepDuration;\n    },\n\n\n    /**\n     * Update the pattern dots.\n     * If the steps, pulses or rotation properties have changed.\n     * If steps change it might invalidate the pointer.\n     */\n    updateNecklace = function updateNecklace() {\n        var steps = my.params.steps.value,\n            pulses = my.params.pulses.value,\n            rotation = my.params.rotation.value,\n            euclid = void 0,\n            rad = void 0,\n            x = void 0,\n            y = void 0;\n\n        euclid = (0, _euclid.getEuclidPattern)(steps, pulses);\n        euclid = (0, _euclid.rotateEuclidPattern)(euclid, rotation);\n\n        necklace = [];\n\n        // calculate the dot positions\n        necklaceRadius = necklaceMinRadius + Math.max(0, steps - 16) * 0.8;\n        for (var i = 0; i < steps; i++) {\n            rad = doublePI * (i / steps);\n            x = Math.sin(rad) * necklaceRadius;\n            y = Math.cos(rad) * necklaceRadius;\n            necklace.push({\n                center: {\n                    x: x,\n                    y: y\n                },\n                rect: {\n                    x: x - dotMaxRadius * 2,\n                    y: y + dotMaxRadius * 2,\n                    xAbs: 0,\n                    yAbs: 0,\n                    height: dotMaxRadius * 4,\n                    width: dotMaxRadius * 4\n                }\n            });\n        }\n\n        necklaceCtx.clearRect(0, 0, necklaceCanvas.width, necklaceCanvas.height);\n\n        updateNecklaceAbsolute();\n        updatePolygon(steps, pulses, euclid, necklace);\n        updateDots(steps, euclid, necklace);\n        updatePointer();\n        updateZeroMarker(steps, rotation);\n        updateRotatedMarker(steps, rotation);\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update the coordinates of the necklace nodes relative to the main canvas.\n     */\n    updateNecklaceAbsolute = function updateNecklaceAbsolute() {\n        var rect = void 0;\n        for (var i = 0, n = necklace.length; i < n; i++) {\n            rect = necklace[i].rect;\n            rect.xAbs = my.positionX + rect.x;\n            rect.yAbs = my.positionY - rect.y;\n        }\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        centerDotX = my.positionX - centerDotFullRadius - 1;\n        centerDotY = my.positionY - centerDotFullRadius - 1;\n        updateNecklaceAbsolute();\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Draw polygon.\n     */\n    updatePolygon = function updatePolygon(steps, pulses, euclid, necklace) {\n        if (pulses > 1) {\n            necklaceCtx.fillStyle = my.colorLow;\n            necklaceCtx.strokeStyle = my.colorLow;\n            necklaceCtx.beginPath();\n            var isFirstPoint = true,\n                firstPoint = void 0,\n                dotCenter = void 0;\n            for (var i = 0; i < steps; i++) {\n                if (euclid[i]) {\n                    dotCenter = necklace[i].center;\n                    if (isFirstPoint) {\n                        isFirstPoint = false;\n                        firstPoint = dotCenter;\n                        necklaceCtx.moveTo(radius + firstPoint.x, radius - firstPoint.y);\n                    } else {\n                        necklaceCtx.lineTo(radius + dotCenter.x, radius - dotCenter.y);\n                    }\n                }\n            }\n            necklaceCtx.lineTo(radius + firstPoint.x, radius - firstPoint.y);\n            necklaceCtx.stroke();\n            necklaceCtx.globalAlpha = 0.6;\n            necklaceCtx.fill();\n            necklaceCtx.globalAlpha = 1.0;\n        }\n    },\n\n\n    /**\n     * Draw the necklace dots in their inactive state.\n     */\n    updateDots = function updateDots(steps, euclid, necklace) {\n        dotRadius = dotMaxRadius - 3 - Math.max(0, steps - 16) * 0.09;\n        dotActiveRadius = dotRadius * 2;\n\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        var point = void 0;\n        for (var i = 0; i < steps; i++) {\n            point = necklace[i].center;\n            if (euclid[i]) {\n                // active dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.fill();\n                necklaceCtx.stroke();\n            } else {\n                // passive dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.stroke();\n            }\n        }\n    },\n\n\n    /**\n     * Update the pointer that connects the dots.\n     */\n    updatePointer = function updatePointer() {\n        var isMute = my.params.is_mute.value,\n            pointerRadius = isMute ? pointerMutedRadius : necklaceRadius,\n            pointerX = isMute ? 15 : 19,\n            pointerY = isMute ? 15 : 6;\n\n        pointerCtx.clearRect(0, 0, pointerCanvas.width, pointerCanvas.height);\n        pointerCtx.beginPath();\n        pointerCtx.moveTo(pointerCanvasCenter - pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.lineTo(pointerCanvasCenter, pointerCanvas.height - pointerRadius);\n        pointerCtx.lineTo(pointerCanvasCenter + pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.stroke();\n    },\n\n\n    /**\n     * Update the zero marker.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateZeroMarker = function updateZeroMarker(steps, rotation) {\n        var rad = doublePI * (-rotation / steps),\n            markerRadius = necklaceRadius + 15,\n            x = radius + Math.sin(rad) * markerRadius,\n            y = radius - Math.cos(rad) * markerRadius;\n\n        necklaceCtx.beginPath();\n        necklaceCtx.moveTo(x, y + zeroMarkerRadius);\n        necklaceCtx.arc(x, y, zeroMarkerRadius, 0, doublePI, true);\n        necklaceCtx.stroke();\n    },\n\n\n    /**\n     * Update the marker that indicates if the pattern is rotated.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateRotatedMarker = function updateRotatedMarker(steps, rotation) {\n        if (rotation !== 0) {\n            var x = radius,\n                y = radius - necklaceRadius - 10;\n\n            necklaceCtx.beginPath();\n            necklaceCtx.moveTo(x, y);\n            necklaceCtx.lineTo(x, y - 10);\n            necklaceCtx.lineTo(x + 6, y - 7);\n            necklaceCtx.lineTo(x, y - 4);\n            necklaceCtx.stroke();\n        }\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName() {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCanvas.width, nameCanvas.height);\n        nameCtx.fillText(my.params.name.value, nameCanvas.width / 2, nameCanvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Redraw the pattern's static shapes canvas.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n        staticCtx.beginPath();\n\n        // necklace\n        staticCtx.drawImage(necklaceCanvas, 0, 0);\n\n        // center ring\n        staticCtx.moveTo(radius + centerRadius, radius);\n        staticCtx.arc(radius, radius, centerRadius, 0, doublePI, true);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(radius + selectRadius, radius);\n            staticCtx.arc(radius, radius, selectRadius, 0, doublePI, true);\n        }\n        staticCtx.stroke();\n    },\n\n\n    /**\n     * Add the pattern's static canvas to the main static canvas.\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - radius, my.positionY - radius);\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - radius, my.positionY + necklaceRadius + 4);\n    },\n\n\n    /**\n     * Draw the pattern's dynamic shapes on the main dymamic canvas\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToDynamicView = function addToDynamicView(mainDynamicCtx) {\n        // draw rotating pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotation);\n        mainDynamicCtx.drawImage(pointerCanvas, -pointerCanvasCenter, -pointerCanvas.height);\n        mainDynamicCtx.restore();\n\n        mainDynamicCtx.fillStyle = my.colorHigh;\n        mainDynamicCtx.strokeStyle = my.colorHigh;\n        mainDynamicCtx.beginPath();\n\n        // necklace dots\n        isNoteActive = false;\n        var n = dotAnimations.length,\n            largestDot = dotRadius,\n            hasDotAnimations = false,\n            dotState = void 0,\n            x = void 0,\n            y = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                dotState = dotAnimations[key];\n                x = my.positionX + dotState.positionX;\n                y = my.positionY - dotState.positionY;\n                mainDynamicCtx.moveTo(x + dotState.dotRadius, y);\n                mainDynamicCtx.arc(x, y, dotState.dotRadius, 0, doublePI, true);\n                largestDot = Math.max(largestDot, dotState.dotRadius);\n                isNoteActive = true;\n            }\n        }\n\n        // center dot\n        if (isNoteActive) {\n            var largestDotNormalised = (largestDot - dotRadius) / (dotActiveRadius - dotRadius);\n            centerDotRadius = largestDotNormalised * centerDotFullRadius;\n            mainDynamicCtx.moveTo(my.positionX + centerDotRadius, my.positionY);\n            mainDynamicCtx.arc(my.positionX, my.positionY, centerDotRadius, 0, doublePI, true);\n        }\n\n        mainDynamicCtx.fill();\n        mainDynamicCtx.stroke();\n    },\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {\n        // center dot\n        if (isNoteActive) {\n            mainDynamicCtx.clearRect(centerDotX, centerDotY, centerDotSize, centerDotSize);\n        }\n\n        // necklace dots\n        var rect = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                rect = dotAnimations[key].boundingBox;\n                mainDynamicCtx.clearRect(rect.xAbs, rect.yAbs, rect.height, rect.width);\n            }\n        }\n\n        // pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotationPrevious);\n        mainDynamicCtx.clearRect(-pointerCanvasCenter, -pointerCanvas.height, pointerCanvas.width, pointerCanvas.height);\n        mainDynamicCtx.restore();\n    },\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= necklaceRadius + dotRadius;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        staticCtx.strokeStyle = my.colorHigh;\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        pointerCtx.strokeStyle = my.colorHigh;\n        updateName();\n        updateNecklace();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while (len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n    return [];\n};\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n    return '/';\n};\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () {\n    return 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(4);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _euclid = __webpack_require__(10);\n\nvar _config = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Euclidean pattern animated necklace wheel drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = void 0,\n        staticCtx = void 0,\n        rotateCtx = void 0,\n        pointerCtx = void 0,\n        nameCtx = void 0,\n        duration = 0,\n        euclid = void 0,\n        status = true,\n        isSelected = false,\n        isNoteActive = false,\n        pointerRotation = void 0,\n        pointerRotationPrevious = 0,\n        centerDotCounter = 0,\n        centerDotNextStartTime = 0,\n        centerDotFullRadius = 10,\n        lineWidth = 2,\n        radius = 70,\n        centerRadius = 20,\n        selectRadius = 15,\n        innerRadius = 30,\n        outerRadius = 46,\n        dotRadius = 10,\n        locatorLength = 38,\n        zeroMarkerRadius = 2,\n        zeroMarkerY = radius - centerRadius - zeroMarkerRadius - 3,\n        pointerCanvasCenter = centerRadius,\n        locatorTop = radius - pointerCanvasCenter - locatorLength,\n        doublePI = Math.PI * 2,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = specs.canvasDirtyCallback;\n        initGraphics();\n        updateEuclid(specs.data.params.byId);\n        setTheme(specs.theme, specs.data.params.byId);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        updateDuration(specs.data.params.byId);\n        redrawStaticCanvas();\n        redrawPointerCanvas();\n        redrawRotatingCanvas();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updateDuration(e.detail.state.processors.byId[my.id].params.byId);\n                        // fall through\n                        case 'pulses':\n                            updateEuclid(e.detail.state.processors.byId[my.id].params.byId);\n                            redrawRotatingCanvas();\n                            break;\n                        case 'rotation':\n                            canvasDirtyCallback();\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                            updateDuration(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                        case 'name':\n                            updateName(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                var processor = e.detail.state.processors.byId[my.id];\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        var canvas = document.createElement('canvas');\n        canvas.height = radius * 2;\n        canvas.width = radius * 2;\n        staticCtx = canvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for dots ring and polygon\n        canvas = document.createElement('canvas');\n        canvas.height = radius * 2;\n        canvas.width = radius * 2;\n        rotateCtx = canvas.getContext('2d');\n        rotateCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the pointer\n        canvas = document.createElement('canvas');\n        canvas.height = radius;\n        canvas.width = centerRadius * 2;\n        pointerCtx = canvas.getContext('2d');\n        pointerCtx.lineWidth = lineWidth;\n        pointerCtx.lineJoin = 'bevel';\n\n        // offscreen canvas for the name\n        canvas = document.createElement('canvas');\n        canvas.height = 40;\n        canvas.width = radius * 2;\n        nameCtx = canvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Calculate the pattern's duration in milliseconds.\n     */\n    updateDuration = function updateDuration(params) {\n        var rate = params.is_triplets.value ? params.rate.value * (2 / 3) : params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        duration = params.steps.value * stepDuration;\n    },\n        updateEuclid = function updateEuclid(params) {\n        euclid = (0, _euclid.getEuclidPattern)(params.steps.value, params.pulses.value);\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName(params) {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCtx.canvas.width, nameCtx.canvas.height);\n        nameCtx.fillText(params.name.value, nameCtx.canvas.width / 2, nameCtx.canvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Show the playback position within the pattern.\n     * Indicated by the pointer's rotation.\n     * @param  {Number} position Position within pattern in ticks.\n     */\n    updatePlaybackPosition = function updatePlaybackPosition(position) {\n        pointerRotationPrevious = pointerRotation;\n        pointerRotation = -doublePI * (position % duration / duration);\n    },\n\n\n    /**\n     * Redraw the pattern's static shapes canvas.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.clearRect(0, 0, staticCtx.canvas.width, staticCtx.canvas.height);\n        staticCtx.beginPath();\n\n        // center ring\n        staticCtx.moveTo(radius + centerRadius, radius);\n        staticCtx.arc(radius, radius, centerRadius, 0, doublePI);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(radius + selectRadius, radius);\n            staticCtx.arc(radius, radius, selectRadius, 0, doublePI);\n        }\n\n        staticCtx.stroke();\n    },\n\n\n    /**\n     * Redraw the location pointer and the status dot.\n     */\n    redrawPointerCanvas = function redrawPointerCanvas() {\n        var necklacePos = radius - (status ? outerRadius : innerRadius),\n            halfWayPos = necklacePos + (locatorTop - necklacePos) / 2,\n            statusWidth = status ? 15 : 6,\n            sides = status ? locatorTop : halfWayPos;\n\n        pointerCtx.clearRect(0, 0, pointerCtx.canvas.width, pointerCtx.canvas.height);\n        pointerCtx.beginPath();\n\n        // position locator\n        pointerCtx.moveTo(pointerCanvasCenter, radius - pointerCanvasCenter);\n        pointerCtx.lineTo(pointerCanvasCenter, locatorTop);\n\n        // status indicator\n        pointerCtx.lineTo(pointerCanvasCenter - statusWidth, sides);\n        pointerCtx.lineTo(pointerCanvasCenter, necklacePos);\n        pointerCtx.lineTo(pointerCanvasCenter + statusWidth, sides);\n        pointerCtx.lineTo(pointerCanvasCenter, locatorTop);\n\n        pointerCtx.stroke();\n    },\n\n\n    /**\n     * The rotating canvas shows the necklace shape.\n     */\n    redrawRotatingCanvas = function redrawRotatingCanvas() {\n        var arc = void 0,\n            x = void 0,\n            y = void 0;\n\n        rotateCtx.clearRect(0, 0, rotateCtx.canvas.width, rotateCtx.canvas.height);\n        rotateCtx.fillStyle = my.colorHigh;\n        rotateCtx.strokeStyle = my.colorHigh;\n        rotateCtx.beginPath();\n\n        for (var i = 0, n = euclid.length; i < n; i++) {\n            var stepRadius = euclid[i] ? outerRadius : innerRadius;\n            rotateCtx.arc(radius, radius, stepRadius, i / n * doublePI - Math.PI / 2, (i + 1) / n * doublePI - Math.PI / 2, false);\n        }\n        // for (let i = 0, n = euclid.length; i < n; i++) {\n        //     const stepRadius = euclid[i] ? outerRadius : innerRadius;\n        //     rotateCtx.arc(radius, radius, stepRadius, ((n - i) / n) * doublePI, ((n - i - 1) / n) * doublePI, true);\n        // }\n\n        rotateCtx.closePath();\n        rotateCtx.stroke();\n\n        // zero marker\n        rotateCtx.beginPath();\n        rotateCtx.moveTo(radius + zeroMarkerRadius, zeroMarkerY);\n        rotateCtx.arc(radius, zeroMarkerY, zeroMarkerRadius, 0, doublePI, true);\n        rotateCtx.fill();\n    },\n\n\n    /**\n     * Show circle if the my.processor is selected, else hide.\n     * @param {Boolean} isSelectedView True if selected.\n     */\n    setSelected = function setSelected(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw(position, processorEvents) {\n        updatePlaybackPosition(position);\n\n        // calculate status and redraw locator if needed\n        var currentStep = Math.floor(position % duration / duration * my.params.steps.value);\n        currentStep = (currentStep + my.params.rotation.value) % my.params.steps.value;\n        var currentStatus = euclid[currentStep];\n        if (currentStatus !== status) {\n            status = currentStatus;\n            redrawPointerCanvas();\n            canvasDirtyCallback();\n        }\n\n        // Show notes to happen as center dot animation.\n        if (processorEvents[my.id] && processorEvents[my.id].length) {\n            for (var i = 0, n = processorEvents[my.id].length; i < n; i++) {\n                var event = processorEvents[my.id][i];\n                centerDotNextStartTime = performance.now() + event.delayFromNowToNoteStart;\n                centerDotCounter = 1;\n            }\n        }\n    },\n\n\n    /**\n     * Add the pattern's static canvas to the main static canvas.\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToStaticView = function addToStaticView(mainStaticCtx) {\n        // draw static canvas\n        mainStaticCtx.drawImage(staticCtx.canvas, my.positionX - radius, my.positionY - radius);\n\n        // draw name canvas\n        mainStaticCtx.drawImage(nameCtx.canvas, my.positionX - radius, my.positionY + outerRadius + 4);\n\n        // draw pointer canvas\n        var patternRotation = my.params.rotation.value / my.params.steps.value * doublePI;\n        mainStaticCtx.save();\n        mainStaticCtx.translate(my.positionX, my.positionY);\n        mainStaticCtx.rotate(patternRotation);\n        mainStaticCtx.drawImage(pointerCtx.canvas, -pointerCanvasCenter, -pointerCtx.canvas.height);\n        mainStaticCtx.restore();\n    },\n\n\n    /**\n     * Draw the pattern's dynamic shapes on the main dymamic canvas\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToDynamicView = function addToDynamicView(mainDynamicCtx) {\n        // draw rotating canvas\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotation);\n        mainDynamicCtx.drawImage(rotateCtx.canvas, -radius, -radius);\n        mainDynamicCtx.restore();\n\n        // center dot\n        if (centerDotCounter >= 0 && centerDotNextStartTime < performance.now()) {\n            var centerDotRadius = centerDotFullRadius * centerDotCounter;\n            mainDynamicCtx.moveTo(my.positionX + centerDotRadius, my.positionY);\n            mainDynamicCtx.arc(my.positionX, my.positionY, centerDotRadius, 0, doublePI, true);\n            mainDynamicCtx.fill();\n            centerDotCounter -= .1;\n        }\n    },\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotationPrevious);\n        mainDynamicCtx.clearRect(-radius, -radius, rotateCtx.canvas.width, rotateCtx.canvas.height);\n        mainDynamicCtx.restore();\n    },\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y, canvasRect) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= centerRadius;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme, params) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        staticCtx.strokeStyle = my.colorHigh;\n        staticCtx.fillStyle = my.colorHigh;\n        rotateCtx.strokeStyle = my.colorHigh;\n        pointerCtx.strokeStyle = my.colorHigh;\n        pointerCtx.fillStyle = my.colorHigh;\n\n        updateName(params);\n        redrawRotatingCanvas(params);\n        redrawPointerCanvas(params);\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(4);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output object drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        isSelected = false,\n        lineWidth = 2,\n        width = 100,\n        height = 50,\n        radius = 10,\n        boxWidth = 80,\n        selectRadius = 15,\n        doublePI = Math.PI * 2,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        initGraphics();\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        redrawStaticCanvas();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                var processor = e.detail.state.processors.byId[my.id];\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = height;\n        staticCanvas.width = width;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = 200;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n    },\n        setSelected = function setSelected(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw() {},\n\n\n    /**\n     * Redraw the graphic after a change.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.strokeStyle = my.colorHigh;\n\n        staticCtx.clearRect(0, 0, width, height);\n        staticCtx.save();\n        staticCtx.translate(width / 2, height / 2 - 8);\n        staticCtx.beginPath();\n\n        // box\n        staticCtx.rect(-boxWidth / 2, -radius, boxWidth, radius * 2);\n        // arrow\n        staticCtx.moveTo(-boxWidth / 2, radius);\n        staticCtx.lineTo(0, radius + 20);\n        staticCtx.lineTo(boxWidth / 2, radius);\n\n        // circle\n        staticCtx.moveTo(radius, 0);\n        staticCtx.arc(0, 0, radius, 0, Math.PI * 2, true);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(selectRadius, 0);\n            staticCtx.arc(0, 0, selectRadius, 0, doublePI);\n        }\n\n        staticCtx.stroke();\n        staticCtx.restore();\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName() {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCanvas.width, nameCanvas.height);\n        nameCtx.fillText(my.params.name.value, nameCanvas.width / 2, nameCanvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        canvasDirtyCallback();\n    },\n        addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - 50, my.positionY - 15);\n\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - nameCanvas.width / 2, my.positionY + 30);\n    },\n        addToDynamicView = function addToDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= 10;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        redrawStaticCanvas();\n        updateName();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasConnectionsView;\n\nvar _selectors = __webpack_require__(3);\n\n/**\n * Canvas processor connector input and output points,\n * cables between the processor connectors,\n * Delete circles halfway the cables.\n * \n * OFFLINE CANVAS\n * All connection lines are drawn on the offline canvas,\n * This happens when processors are created, deleted or moved,\n * or when Connect Mode is entered or exited.\n * \n * The offline context is drawn on the static canvas.\n * It's the first thing that's drawn on the static canvas,\n * so that the connection lines appear behind the processors.\n * \n * CONNECT CANVAS\n * All input and output connector circles are drawn on the connect canvas.\n * The currently dragged cable is also drawn on the canvas.\n * \n * The connect canvas appears in front of the processors.\n */\nfunction createCanvasConnectionsView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl,\n        connectorsCanvas,\n        connectorsCtx,\n        cablesCanvas,\n        cablesCtx,\n        activeCableCanvas,\n        activeCableCtx,\n        connectorCanvas,\n        connectorCtx,\n        cableData = {\n        byId: {},\n        allIds: []\n    },\n        cableHandleRadius = 10,\n        connectorRadius = 12,\n        sourceProcessorID,\n        sourceConnectorID,\n        dragData = {\n        isDragging: false,\n        startPoint: { x: 0, y: 0 },\n        endPoint: { x: 0, y: 0 },\n        lineWidth: 1,\n        lineWidthActive: 2\n    },\n        init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        connectorsCanvas = document.querySelector('.canvas-connect');\n        connectorsCtx = connectorsCanvas.getContext('2d');\n        cablesCanvas = document.createElement('canvas');\n        cablesCtx = cablesCanvas.getContext('2d');\n        activeCableCanvas = document.createElement('canvas');\n        activeCableCtx = activeCableCanvas.getContext('2d');\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.TOGGLE_CONNECT_MODE:\n                    toggleConnectMode(e.detail.state.connectModeActive);\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                case e.detail.actions.DELETE_PROCESSOR:\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                case e.detail.actions.CONNECT_PROCESSORS:\n                case e.detail.actions.DISCONNECT_PROCESSORS:\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n\n                case e.detail.actions.SET_PROJECT:\n                case e.detail.actions.NEW_PROJECT:\n                case e.detail.actions.SET_THEME:\n                    createConnectorGraphic();\n                    toggleConnectMode(e.detail.state.connectModeActive);\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n            }\n        });\n    },\n        resizeConnections = function resizeConnections() {\n        connectorsCanvas.width = rootEl.clientWidth;\n        connectorsCanvas.height = rootEl.clientHeight;\n        cablesCanvas.width = rootEl.clientWidth;\n        cablesCanvas.height = rootEl.clientHeight;\n        activeCableCanvas.width = rootEl.clientWidth;\n        activeCableCanvas.height = rootEl.clientHeight;\n\n        var state = store.getState();\n        drawConnectCanvas(state);\n        drawCablesCanvas(state);\n    },\n\n\n    /**\n     * Create the connector canvas once and use it for all \n     * processor input and output connectors.\n     */\n    createConnectorGraphic = function createConnectorGraphic() {\n        var lineWidth = 2,\n            size = (connectorRadius + lineWidth) * 2,\n            themeColors = (0, _selectors.getThemeColors)();\n\n        connectorCanvas = document.createElement('canvas');\n        connectorCanvas.width = size;\n        connectorCanvas.height = size;\n\n        connectorCtx = connectorCanvas.getContext('2d');\n        connectorCtx.lineWidth = lineWidth;\n        connectorCtx.strokeStyle = themeColors.colorHigh;\n        connectorCtx.setLineDash([4, 4]);\n\n        connectorCtx.save();\n        connectorCtx.translate(size / 2, size / 2);\n        connectorCtx.arc(0, 0, size / 2, 0, Math.PI * 2, true);\n        connectorCtx.stroke();\n        connectorCtx.restore();\n    },\n\n\n    /**\n     * Enter or leave application connect mode.\n     * @param {Boolean} isEnabled True to enable connect mode.\n     */\n    toggleConnectMode = function toggleConnectMode(isEnabled) {\n        my.isConnectMode = isEnabled;\n\n        // show the canvas\n        connectorsCanvas.dataset.show = isEnabled;\n        my.markDirty();\n    },\n        dragStartConnection = function dragStartConnection(startX, startY, x, y) {\n        dragData.isDragging = true;\n        dragData.startPoint = { x: startX, y: startY };\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragMoveConnection = function dragMoveConnection(x, y) {\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragEndConnection = function dragEndConnection() {\n        dragData.isDragging = false;\n        drawActiveCableCanvas();\n    },\n        intersectsConnector = function intersectsConnector(x, y, isInput) {\n        var isIntersect = false,\n            isFound = false;\n        store.getState().processors.allIds.forEach(function (id) {\n            var processor = store.getState().processors.byId[id];\n            var connectorData = processor[isInput ? 'inputs' : 'outputs'];\n            connectorData.allIds.forEach(function (id) {\n                if (!isFound) {\n                    var connectorX = processor.positionX + connectorData.byId[id].x,\n                        connectorY = processor.positionY + connectorData.byId[id].y,\n                        distance = Math.sqrt(Math.pow(x - connectorX, 2) + Math.pow(y - connectorY, 2));\n                    isIntersect = distance <= connectorRadius;\n                    if (isIntersect) {\n                        isFound = true;\n                        if (isInput) {\n                            store.dispatch(store.getActions().connectProcessors({\n                                sourceProcessorID: sourceProcessorID,\n                                sourceConnectorID: sourceConnectorID,\n                                destinationProcessorID: processor.id,\n                                destinationConnectorID: id\n                            }));\n                            sourceProcessorID = null;\n                        } else {\n                            sourceProcessorID = processor.id;\n                            sourceConnectorID = id;\n                            dragStartConnection(connectorX, connectorY, x, y);\n                        }\n                    }\n                }\n            });\n        });\n        return isIntersect;\n    },\n        intersectsCableHandle = function intersectsCableHandle(x, y) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = cableData.allIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var id = _step.value;\n\n                var data = cableData.byId[id],\n                    distance = Math.sqrt(Math.pow(x - data.handleX, 2) + Math.pow(y - data.handleY, 2));\n                if (distance <= cableHandleRadius) {\n                    return id;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        ;\n        return null;\n    },\n\n\n    /**\n     * All connection lines are drawn on the offline canvas,\n     * This happens when processors are created, deleted or moved,\n     * or when Connect Mode is entered or exited.\n     */\n    drawCablesCanvas = function drawCablesCanvas(state) {\n        var themeColors = (0, _selectors.getThemeColors)();\n\n        cableData.byId = {};\n        cableData.allIds = [];\n        cablesCtx.clearRect(0, 0, cablesCanvas.width, cablesCanvas.height);\n        cablesCtx.strokeStyle = themeColors.colorMid;\n        cablesCtx.beginPath();\n\n        state.connections.allIds.forEach(function (connectionID) {\n            var connection = state.connections.byId[connectionID];\n            var sourceProcessor = state.processors.byId[connection.sourceProcessorID],\n                destinationProcessor = state.processors.byId[connection.destinationProcessorID];\n\n            if (sourceProcessor && destinationProcessor) {\n                var sourceConnector = sourceProcessor.outputs.byId[connection.sourceConnectorID],\n                    destinationConnector = destinationProcessor.inputs.byId[connection.destinationConnectorID];\n                var handlePosition = drawCable(cablesCtx, {\n                    x: sourceProcessor.positionX + sourceConnector.x,\n                    y: sourceProcessor.positionY + sourceConnector.y\n                }, {\n                    x: destinationProcessor.positionX + destinationConnector.x,\n                    y: destinationProcessor.positionY + destinationConnector.y\n                });\n\n                cableData.byId[connectionID] = {\n                    handleX: handlePosition.x,\n                    handleY: handlePosition.y\n                };\n                cableData.allIds.push(connectionID);\n            }\n        });\n\n        cablesCtx.stroke();\n    },\n\n\n    /**\n     * Draw connector circles and currently dragged line on connectorsCanvas.\n     */\n    drawConnectCanvas = function drawConnectCanvas(state) {\n        connectorsCtx.clearRect(0, 0, connectorsCanvas.width, connectorsCanvas.height);\n\n        if (state.connectModeActive) {\n            state.processors.allIds.forEach(function (id) {\n                var processor = state.processors.byId[id];\n                processor.inputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.inputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.inputs.byId[id].y - connectorCanvas.height / 2);\n                });\n                processor.outputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.outputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.outputs.byId[id].y - connectorCanvas.height / 2);\n                });\n            });\n            my.markDirty();\n        }\n    },\n        drawActiveCableCanvas = function drawActiveCableCanvas() {\n        activeCableCtx.clearRect(0, 0, activeCableCanvas.width, activeCableCanvas.height);\n        if (dragData.isDragging) {\n            activeCableCtx.lineWidth = 2;\n            activeCableCtx.strokeStyle = (0, _selectors.getThemeColors)().colorHigh;\n            activeCableCtx.beginPath();\n            drawCable(activeCableCtx, dragData.startPoint, dragData.endPoint);\n            activeCableCtx.stroke();\n        }\n        my.markDirty();\n    },\n\n\n    /**\n     * Draw a processor connection cable.\n     * @param  {Object} startPoint {x, y} start coordinate.\n     * @param  {Object} endPoint   {x, y} end coordinate.\n     */\n    drawCable = function drawCable(context, startPoint, endPoint) {\n        // line\n        var distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2)),\n            tension = distance / 2,\n            cp1x = startPoint.x,\n            cp1y = startPoint.y + tension,\n            cp2x = endPoint.x,\n            cp2y = endPoint.y + tension;\n        context.moveTo(startPoint.x, startPoint.y);\n        context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y);\n\n        // endpoint\n        var radius = 5;\n        context.moveTo(endPoint.x + radius, endPoint.y);\n        context.arc(endPoint.x, endPoint.y, radius, 0, Math.PI * 2, true);\n\n        return drawCableHandle(context, startPoint.x, startPoint.y, cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y);\n    },\n\n\n    /**\n     * Draw select button halfway the bezier curved cable.\n     * @see https://stackoverflow.com/questions/15397596/find-all-the-points-of-a-cubic-bezier-curve-in-javascript\n     * @param  {Object} context The canvas context to draw on.\n     * @param  {[type]} ax [description]\n     * @param  {[type]} ay [description]\n     * @param  {[type]} bx [description]\n     * @param  {[type]} by [description]\n     * @param  {[type]} cx [description]\n     * @param  {[type]} cy [description]\n     * @param  {[type]} dx [description]\n     * @param  {[type]} dy [description]\n     * @return {Object}    Canvas x, y coordinate.\n     */\n    drawCableHandle = function drawCableHandle(context, ax, ay, bx, by, cx, cy, dx, dy) {\n        var t = 0.5,\n            // halfway the cable\n        b0t = Math.pow(1 - t, 3),\n            b1t = 3 * t * Math.pow(1 - t, 2),\n            b2t = 3 * Math.pow(t, 2) * (1 - t),\n            b3t = Math.pow(t, 3),\n            pxt = b0t * ax + b1t * bx + b2t * cx + b3t * dx,\n            pyt = b0t * ay + b1t * by + b2t * cy + b3t * dy;\n\n        if (my.isConnectMode) {\n            context.moveTo(pxt + cableHandleRadius, pyt);\n            context.arc(pxt, pyt, cableHandleRadius, 0, Math.PI * 2, true);\n        }\n\n        return { x: pxt, y: pyt };\n    },\n        addConnectionsToCanvas = function addConnectionsToCanvas(ctx) {\n        ctx.drawImage(cablesCanvas, 0, 0);\n        if (my.isConnectMode) {\n            ctx.drawImage(connectorsCanvas, 0, 0);\n            ctx.drawImage(activeCableCanvas, 0, 0);\n        }\n    };\n\n    my = my || {};\n    my.isConnectMode = false, my.resizeConnections = resizeConnections;\n    my.dragMoveConnection = dragMoveConnection;\n    my.dragEndConnection = dragEndConnection;\n    my.intersectsConnector = intersectsConnector;\n    my.intersectsCableHandle = intersectsCableHandle;\n    my.addConnectionsToCanvas = addConnectionsToCanvas;\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createLibraryView;\n/**\n * Library for all processor types.\n */\nfunction createLibraryView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.library__list'),\n        draggedType,\n        init = function init() {\n        document.addEventListener('drop', onDrop);\n        document.addEventListener('dragenter', onDragEnter);\n        document.addEventListener('dragover', onDragOver);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.RESCAN_TYPES:\n                    populateLibrary(e.detail.state.types);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Populate the library with all available processor types.\n     * Processor types are not shown in the libray \n     * if they have the flag excludedFromLibrary = true\n     * in their config.json file.\n     */\n    populateLibrary = function populateLibrary(typesTable) {\n        var template = document.querySelector('#template-library-item');\n\n        typesTable.allIds.forEach(function (id) {\n            var type = typesTable.byId[id];\n            var clone = template.content.cloneNode(true);\n            var el = clone.firstElementChild;\n            listEl.appendChild(el);\n\n            el.querySelector('.library__item-label').innerHTML = type.name;\n            el.dataset.type = id;\n            el.addEventListener('dragstart', onDragStart);\n        });\n    },\n\n\n    /**\n     * Store type of processor when drag starts.\n     */\n    onDragStart = function onDragStart(e) {\n        draggedType = e.target.dataset.type;\n    },\n\n\n    /**\n     * Create a new processor when the type is dropped on the canvas.\n     */\n    onDrop = function onDrop(e) {\n        e.preventDefault();\n\n        var canvas = document.querySelector('.canvas-dynamic');\n\n        if (e.target === canvas) {\n            var canvasRect = canvas.getBoundingClientRect();\n\n            // create a new processor\n            store.dispatch(store.getActions().createProcessor({\n                type: draggedType,\n                positionX: e.clientX - canvasRect.left + window.scrollX,\n                positionY: e.clientY - canvasRect.top + window.scrollY\n            }));\n        }\n\n        draggedType = null;\n    },\n        onDragEnter = function onDragEnter(e) {\n        e.preventDefault();\n    },\n        onDragOver = function onDragOver(e) {\n        e.preventDefault();\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9saWJyYXJ5LmpzP2M1YjEiXSwibmFtZXMiOlsiY3JlYXRlTGlicmFyeVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInN0b3JlIiwibGlzdEVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZHJhZ2dlZFR5cGUiLCJpbml0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uRHJvcCIsIm9uRHJhZ0VudGVyIiwib25EcmFnT3ZlciIsIlNUQVRFX0NIQU5HRSIsImUiLCJkZXRhaWwiLCJhY3Rpb24iLCJ0eXBlIiwiYWN0aW9ucyIsIlJFU0NBTl9UWVBFUyIsInBvcHVsYXRlTGlicmFyeSIsInN0YXRlIiwidHlwZXMiLCJ0eXBlc1RhYmxlIiwidGVtcGxhdGUiLCJhbGxJZHMiLCJmb3JFYWNoIiwiYnlJZCIsImlkIiwiY2xvbmUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZWwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwibmFtZSIsImRhdGFzZXQiLCJvbkRyYWdTdGFydCIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiY2FudmFzIiwiY2FudmFzUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNyZWF0ZVByb2Nlc3NvciIsInBvc2l0aW9uWCIsImNsaWVudFgiLCJsZWZ0Iiwid2luZG93Iiwic2Nyb2xsWCIsInBvc2l0aW9uWSIsImNsaWVudFkiLCJ0b3AiLCJzY3JvbGxZIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFHd0JBLGlCO0FBSHhCOzs7QUFHZSxTQUFTQSxpQkFBVCxDQUEyQkMsS0FBM0IsRUFBa0NDLEVBQWxDLEVBQXNDO0FBQ2pELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxRQUFRSCxNQUFNRyxLQURsQjtBQUFBLFFBRUlDLFNBQVNDLFNBQVNDLGFBQVQsQ0FBdUIsZ0JBQXZCLENBRmI7QUFBQSxRQUdJQyxXQUhKO0FBQUEsUUFLSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEgsaUJBQVNJLGdCQUFULENBQTBCLE1BQTFCLEVBQWtDQyxNQUFsQztBQUNBTCxpQkFBU0ksZ0JBQVQsQ0FBMEIsV0FBMUIsRUFBdUNFLFdBQXZDO0FBQ0FOLGlCQUFTSSxnQkFBVCxDQUEwQixVQUExQixFQUFzQ0csVUFBdEM7O0FBRUFQLGlCQUFTSSxnQkFBVCxDQUEwQk4sTUFBTVUsWUFBaEMsRUFBOEMsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2pELG9CQUFRQSxFQUFFQyxNQUFGLENBQVNDLE1BQVQsQ0FBZ0JDLElBQXhCO0FBQ0kscUJBQUtILEVBQUVDLE1BQUYsQ0FBU0csT0FBVCxDQUFpQkMsWUFBdEI7QUFDSUMsb0NBQWdCTixFQUFFQyxNQUFGLENBQVNNLEtBQVQsQ0FBZUMsS0FBL0I7QUFDQTtBQUhSO0FBS0gsU0FORDtBQU9ILEtBakJMOzs7QUFtQkk7Ozs7OztBQU1BRixzQkFBa0IsU0FBbEJBLGVBQWtCLENBQVNHLFVBQVQsRUFBcUI7QUFDbkMsWUFBTUMsV0FBV25CLFNBQVNDLGFBQVQsQ0FBdUIsd0JBQXZCLENBQWpCOztBQUVBaUIsbUJBQVdFLE1BQVgsQ0FBa0JDLE9BQWxCLENBQTBCLGNBQU07QUFDNUIsZ0JBQU1ULE9BQU9NLFdBQVdJLElBQVgsQ0FBZ0JDLEVBQWhCLENBQWI7QUFDQSxnQkFBTUMsUUFBUUwsU0FBU00sT0FBVCxDQUFpQkMsU0FBakIsQ0FBMkIsSUFBM0IsQ0FBZDtBQUNBLGdCQUFNQyxLQUFLSCxNQUFNSSxpQkFBakI7QUFDQTdCLG1CQUFPOEIsV0FBUCxDQUFtQkYsRUFBbkI7O0FBRUFBLGVBQUcxQixhQUFILENBQWlCLHNCQUFqQixFQUF5QzZCLFNBQXpDLEdBQXFEbEIsS0FBS21CLElBQTFEO0FBQ0FKLGVBQUdLLE9BQUgsQ0FBV3BCLElBQVgsR0FBa0JXLEVBQWxCO0FBQ0FJLGVBQUd2QixnQkFBSCxDQUFvQixXQUFwQixFQUFpQzZCLFdBQWpDO0FBQ0gsU0FURDtBQVVILEtBdENMOzs7QUF3Q0k7OztBQUdBQSxrQkFBYyxTQUFkQSxXQUFjLENBQVN4QixDQUFULEVBQVk7QUFDdEJQLHNCQUFjTyxFQUFFeUIsTUFBRixDQUFTRixPQUFULENBQWlCcEIsSUFBL0I7QUFDSCxLQTdDTDs7O0FBK0NJOzs7QUFHQVAsYUFBUyxTQUFUQSxNQUFTLENBQVNJLENBQVQsRUFBWTtBQUNqQkEsVUFBRTBCLGNBQUY7O0FBRUEsWUFBTUMsU0FBU3BDLFNBQVNDLGFBQVQsQ0FBdUIsaUJBQXZCLENBQWY7O0FBRUEsWUFBSVEsRUFBRXlCLE1BQUYsS0FBYUUsTUFBakIsRUFBeUI7QUFDckIsZ0JBQU1DLGFBQWFELE9BQU9FLHFCQUFQLEVBQW5COztBQUVBO0FBQ0F4QyxrQkFBTXlDLFFBQU4sQ0FBZXpDLE1BQU0wQyxVQUFOLEdBQW1CQyxlQUFuQixDQUFtQztBQUM5QzdCLHNCQUFNVixXQUR3QztBQUU5Q3dDLDJCQUFXakMsRUFBRWtDLE9BQUYsR0FBWU4sV0FBV08sSUFBdkIsR0FBOEJDLE9BQU9DLE9BRkY7QUFHOUNDLDJCQUFXdEMsRUFBRXVDLE9BQUYsR0FBWVgsV0FBV1ksR0FBdkIsR0FBNkJKLE9BQU9LO0FBSEQsYUFBbkMsQ0FBZjtBQUtIOztBQUVEaEQsc0JBQWMsSUFBZDtBQUNILEtBbkVMO0FBQUEsUUFxRUlJLGNBQWMsU0FBZEEsV0FBYyxDQUFTRyxDQUFULEVBQVk7QUFDdEJBLFVBQUUwQixjQUFGO0FBQ0gsS0F2RUw7QUFBQSxRQXlFSTVCLGFBQWEsU0FBYkEsVUFBYSxDQUFTRSxDQUFULEVBQVk7QUFDckJBLFVBQUUwQixjQUFGO0FBQ0gsS0EzRUw7O0FBNkVBdEMsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBTTs7QUFFQSxXQUFPTixJQUFQO0FBQ0giLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpYnJhcnkgZm9yIGFsbCBwcm9jZXNzb3IgdHlwZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUxpYnJhcnlWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBzdG9yZSA9IHNwZWNzLnN0b3JlLFxuICAgICAgICBsaXN0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlicmFyeV9fbGlzdCcpLFxuICAgICAgICBkcmFnZ2VkVHlwZSxcblxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgb25Ecm9wKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIG9uRHJhZ0VudGVyKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgb25EcmFnT3Zlcik7XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoc3RvcmUuU1RBVEVfQ0hBTkdFLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5kZXRhaWwuYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLlJFU0NBTl9UWVBFUzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlTGlicmFyeShlLmRldGFpbC5zdGF0ZS50eXBlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb3B1bGF0ZSB0aGUgbGlicmFyeSB3aXRoIGFsbCBhdmFpbGFibGUgcHJvY2Vzc29yIHR5cGVzLlxuICAgICAgICAgKiBQcm9jZXNzb3IgdHlwZXMgYXJlIG5vdCBzaG93biBpbiB0aGUgbGlicmF5IFxuICAgICAgICAgKiBpZiB0aGV5IGhhdmUgdGhlIGZsYWcgZXhjbHVkZWRGcm9tTGlicmFyeSA9IHRydWVcbiAgICAgICAgICogaW4gdGhlaXIgY29uZmlnLmpzb24gZmlsZS5cbiAgICAgICAgICovXG4gICAgICAgIHBvcHVsYXRlTGlicmFyeSA9IGZ1bmN0aW9uKHR5cGVzVGFibGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLWxpYnJhcnktaXRlbScpO1xuXG4gICAgICAgICAgICB0eXBlc1RhYmxlLmFsbElkcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZXNUYWJsZS5ieUlkW2lkXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gY2xvbmUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICAgICAgbGlzdEVsLmFwcGVuZENoaWxkKGVsKTtcblxuICAgICAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5saWJyYXJ5X19pdGVtLWxhYmVsJykuaW5uZXJIVE1MID0gdHlwZS5uYW1lO1xuICAgICAgICAgICAgICAgIGVsLmRhdGFzZXQudHlwZSA9IGlkO1xuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIG9uRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0b3JlIHR5cGUgb2YgcHJvY2Vzc29yIHdoZW4gZHJhZyBzdGFydHMuXG4gICAgICAgICAqL1xuICAgICAgICBvbkRyYWdTdGFydCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGRyYWdnZWRUeXBlID0gZS50YXJnZXQuZGF0YXNldC50eXBlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZSBhIG5ldyBwcm9jZXNzb3Igd2hlbiB0aGUgdHlwZSBpcyBkcm9wcGVkIG9uIHRoZSBjYW52YXMuXG4gICAgICAgICAqL1xuICAgICAgICBvbkRyb3AgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYW52YXMtZHluYW1pYycpO1xuXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IGNhbnZhcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHByb2Nlc3NvclxuICAgICAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3JlLmdldEFjdGlvbnMoKS5jcmVhdGVQcm9jZXNzb3Ioe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBkcmFnZ2VkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25YOiBlLmNsaWVudFggLSBjYW52YXNSZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25ZOiBlLmNsaWVudFkgLSBjYW52YXNSZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBkcmFnZ2VkVHlwZSA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBvbkRyYWdFbnRlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uRHJhZ092ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9saWJyYXJ5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDINetwork;\n/**\n * Manages the graph of midi processors.\n */\nfunction createMIDINetwork(specs, my) {\n    var that,\n        store = specs.store,\n        processors = [],\n        numProcessors = 0,\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.NEW_PROJECT:\n                case e.detail.actions.SET_PROJECT:\n                    disconnectProcessors(e.detail.state.connections);\n                    deleteProcessors(e.detail.state.processors);\n                    createProcessors(e.detail.state.processors);\n                    connectProcessors(e.detail.state.connections);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    disconnectProcessors(e.detail.state.connections);\n                    deleteProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.CONNECT_PROCESSORS:\n                    connectProcessors(e.detail.state.connections);\n                    break;\n\n                case e.detail.actions.DISCONNECT_PROCESSORS:\n                    disconnectProcessors(e.detail.state.connections);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Create a new processor in the network.\n     * @param {Object} state State processors table.\n     */\n    createProcessors = function createProcessors(procsState) {\n        procsState.allIds.forEach(function (id, i) {\n            var processorData = procsState.byId[id];\n            var exists = false;\n            processors.forEach(function (processor) {\n                if (processor.getID() === id) {\n                    exists = true;\n                }\n            });\n            if (!exists) {\n                var module = __webpack_require__(48)(\"./\" + processorData.type + \"/processor\");\n                var processor = module.createProcessor({\n                    that: {},\n                    data: processorData,\n                    store: store\n                });\n                processors.splice(i, 0, processor);\n            }\n        });\n        numProcessors = processors.length;\n    },\n\n\n    /**\n     * Delete a processor.\n     * @param {Object} state State processors table.\n     */\n    deleteProcessors = function deleteProcessors(procsState) {\n        var _loop = function _loop(i, n) {\n            // search for the processor in the state\n            var exists = false;\n            procsState.allIds.forEach(function (processorID) {\n                if (processorID === processors[i].getID()) {\n                    exists = true;\n                }\n            });\n\n            // remove processor if it doesn't exist in the state\n            if (!exists) {\n                var processor = processors[i];\n                if (processor.terminate instanceof Function) {\n                    processor.terminate();\n                }\n                processors.splice(i, 1);\n            }\n        };\n\n        for (var i = processors.length - 1, n = 0; i >= n; i--) {\n            _loop(i, n);\n        }\n        numProcessors = processors.length;\n    },\n\n\n    /**\n     * Go through all connection data and create the connections \n     * that don't yet exist.\n     */\n    connectProcessors = function connectProcessors(connections) {\n        connections.allIds.forEach(function (connectionID) {\n            var connection = connections.byId[connectionID];\n            processors.forEach(function (sourceProcessor) {\n                if (sourceProcessor.getID() === connection.sourceProcessorID) {\n                    var _exists = false;\n                    sourceProcessor.getDestinations().forEach(function (destinationProcessor) {\n                        if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                            _exists = true;\n                        }\n                    });\n                    if (!_exists) {\n                        processors.forEach(function (destinationProcessor) {\n                            if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                                sourceProcessor.connect(destinationProcessor);\n                            }\n                        });\n                    }\n                }\n            });\n        });\n    },\n\n\n    /**\n     * Go through all processor outputs and check if \n     * they still exist in the state. If not, disconnect them.\n     * \n     * TODO: allow for processors with multiple inputs or outputs.\n     */\n    disconnectProcessors = function disconnectProcessors(connections) {\n        processors.forEach(function (sourceProcessor) {\n            if (sourceProcessor.getDestinations instanceof Function) {\n                var destinationProcessors = sourceProcessor.getDestinations();\n                destinationProcessors.forEach(function (destinationProcessor) {\n                    var exists = false;\n                    connections.allIds.forEach(function (connectionID) {\n                        var connection = connections.byId[connectionID];\n                        if (connection.sourceProcessorID === sourceProcessor.getID() && connection.destinationProcessorID === destinationProcessor.getID()) {\n                            exists = true;\n                        }\n                    });\n                    if (!exists) {\n                        sourceProcessor.disconnect(destinationProcessor);\n                    }\n                });\n            }\n        });\n    },\n\n\n    /**\n     * Let all processors process their data.\n     * @param {Number} start Start time in ticks of timespan to process.\n     * @param {Number} end End time in ticks of timespan to process.\n     * @param {Number} nowToScanStart Duration from now until start time in ticks.\n     * @param {Number} ticksToMsMultiplier Ticks to ms. conversion multiplier.\n     * @param {Number} offset Position of transport playhead in ticks.\n     * @param {Object} processorEvents Object to collect processor generated events to displayin the view.\n     */\n    process = function process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n        for (var i = 0; i < numProcessors; i++) {\n            processors[i].process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents);\n        }\n    };\n\n    my = my || {};\n\n    that = specs.that;\n\n    init();\n\n    that.process = process;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/processor\": 7,\n\t\"./euclidfx/processor\": 9,\n\t\"./output/processor\": 11\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 48;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9wcm9jZXNzb3IkPzcyN2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvcHJvY2Vzc29yXCI6IDcsXG5cdFwiLi9ldWNsaWRmeC9wcm9jZXNzb3JcIjogOSxcblx0XCIuL291dHB1dC9wcm9jZXNzb3JcIjogMTFcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA0ODtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy93aC9wcm9jZXNzb3JzIF5cXC5cXC8uKlxcL3Byb2Nlc3NvciRcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createPreferencesView;\n\nvar _midi_input = __webpack_require__(50);\n\nvar _midi_input2 = _interopRequireDefault(_midi_input);\n\nvar _midi_output = __webpack_require__(51);\n\nvar _midi_output2 = _interopRequireDefault(_midi_output);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Preferences settings view.\n */\nfunction createPreferencesView(specs) {\n    var that,\n        store = specs.store,\n        preferencesEl = document.querySelector('.prefs'),\n        midiInputsEl = document.querySelector('.prefs__inputs'),\n        midiOutputsEl = document.querySelector('.prefs__outputs'),\n        midiPortViews = [],\n        controls = {\n        darkTheme: {\n            type: 'checkbox',\n            input: document.querySelector('.prefs__dark-theme')\n        }\n    },\n        init = function init() {\n        controls.darkTheme.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTheme(e.target.checked));\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_THEME:\n                    updateControl('dark-theme', e.detail.state.theme === 'dark');\n                    break;\n\n                case e.detail.actions.MIDI_PORT_CHANGE:\n                    updateMIDIPortViews(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Callback function to update one of the controls after if the\n     * preference's state changed.\n     * @param {String} key Key that indicates the control.\n     * @param {Boolean} value Value of the control.\n     */\n    updateControl = function updateControl(key, value) {\n        switch (key) {\n            case 'dark-theme':\n                controls.darkTheme.input.checked = value;\n                break;\n        }\n    },\n\n\n    /**\n     * Update lists of ports after a change.\n     * @param {Array} ports MIDI port objects.\n     */\n    updateMIDIPortViews = function updateMIDIPortViews(ports) {\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            var view = midiPortViews.find(function (view) {\n                return port.id === view.getID();\n            });\n            if (view && port.state === 'disconnected') {\n                view.terminate();\n                midiPortViews.splice(midiPortViews.findIndex(function (view) {\n                    return port.id === view.getID();\n                }), 1);\n            }\n            if (!view && port.state === 'connected') {\n                var createFunction = void 0,\n                    parentEl = void 0;\n                if (port.type === 'input') {\n                    createFunction = _midi_input2.default;\n                    parentEl = midiInputsEl;\n                } else {\n                    createFunction = _midi_output2.default;\n                    parentEl = midiOutputsEl;\n                }\n                midiPortViews.push(createFunction({\n                    store: store,\n                    id: port.id,\n                    name: port.name,\n                    parentEl: parentEl,\n                    isInput: port.type === 'input'\n                }));\n            }\n        });\n    };\n\n    that = specs.that;\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIInputView;\n\nvar _midi_base = __webpack_require__(15);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Input processor view.\n */\nfunction createMIDIInputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.networkEl.dataset.disabled = 'true';\n        my.networkEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX2lucHV0LmpzPzdjZTUiXSwibmFtZXMiOlsiY3JlYXRlTUlESUlucHV0VmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwiaW5pdCIsIm5ldHdvcmtFbCIsImRhdGFzZXQiLCJkaXNhYmxlZCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUt3QkEsbUI7O0FBTHhCOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxFQUFwQyxFQUF3QztBQUNuRCxRQUFJQyxJQUFKOzs7QUFFSTs7OztBQUlBQyxXQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixXQUFHRyxTQUFILENBQWFDLE9BQWIsQ0FBcUJDLFFBQXJCLEdBQWdDLE1BQWhDO0FBQ0FMLFdBQUdHLFNBQUgsQ0FBYUcsYUFBYixDQUEyQixPQUEzQixFQUFvQ0MsWUFBcEMsQ0FBaUQsVUFBakQsRUFBNkQsVUFBN0Q7QUFDSCxLQVRMOztBQVdBUCxTQUFLQSxNQUFNLEVBQVg7O0FBRUFDLFdBQU8seUJBQW1CRixLQUFuQixFQUEwQkMsRUFBMUIsQ0FBUDs7QUFFQUU7O0FBRUEsV0FBT0QsSUFBUDtBQUNIIiwiZmlsZSI6IjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU1JRElCYXNlVmlldyBmcm9tICcuL21pZGlfYmFzZSc7XG5cbi8qKlxuICogTUlESSBJbnB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUlucHV0VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGluaXQgZnVuY3Rpb24gaXMgY2FsbGVkIGFmdGVyIHRoZSBiYXNlIHZpZXcncyBpbml0aWFsaXNlIGZ1bmN0aW9uLFxuICAgICAgICAgKiBzbyBwcm9wZXJ0aWVzIG9mIG9uICdteScgYXJlIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG15Lm5ldHdvcmtFbC5kYXRhc2V0LmRpc2FibGVkID0gJ3RydWUnO1xuICAgICAgICAgICAgbXkubmV0d29ya0VsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jykuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVNSURJQmFzZVZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG5cbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L21pZGlfaW5wdXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIOutputView;\n\nvar _midi_base = __webpack_require__(15);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Output processor view.\n */\nfunction createMIDIOutputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.syncEl.dataset.disabled = 'true';\n        my.syncEl.querySelector('input').setAttribute('disabled', 'disabled');\n        my.remoteEl.dataset.disabled = 'true';\n        my.remoteEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcz83Nzk4Il0sIm5hbWVzIjpbImNyZWF0ZU1JRElPdXRwdXRWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJpbml0Iiwic3luY0VsIiwiZGF0YXNldCIsImRpc2FibGVkIiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsInJlbW90ZUVsIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLG9COztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLG9CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsRUFBckMsRUFBeUM7QUFDcEQsUUFBSUMsSUFBSjs7O0FBRUk7Ozs7QUFJQUMsV0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEYsV0FBR0csTUFBSCxDQUFVQyxPQUFWLENBQWtCQyxRQUFsQixHQUE2QixNQUE3QjtBQUNBTCxXQUFHRyxNQUFILENBQVVHLGFBQVYsQ0FBd0IsT0FBeEIsRUFBaUNDLFlBQWpDLENBQThDLFVBQTlDLEVBQTBELFVBQTFEO0FBQ0FQLFdBQUdRLFFBQUgsQ0FBWUosT0FBWixDQUFvQkMsUUFBcEIsR0FBK0IsTUFBL0I7QUFDQUwsV0FBR1EsUUFBSCxDQUFZRixhQUFaLENBQTBCLE9BQTFCLEVBQW1DQyxZQUFuQyxDQUFnRCxVQUFoRCxFQUE0RCxVQUE1RDtBQUNILEtBWEw7O0FBYUFQLFNBQUtBLE1BQU0sRUFBWDs7QUFFQUMsV0FBTyx5QkFBbUJGLEtBQW5CLEVBQTBCQyxFQUExQixDQUFQOztBQUVBRTs7QUFFQSxXQUFPRCxJQUFQO0FBQ0giLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTUlESUJhc2VWaWV3IGZyb20gJy4vbWlkaV9iYXNlJztcblxuLyoqXG4gKiBNSURJIE91dHB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESU91dHB1dFZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpbml0IGZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciB0aGUgYmFzZSB2aWV3J3MgaW5pdGlhbGlzZSBmdW5jdGlvbixcbiAgICAgICAgICogc28gcHJvcGVydGllcyBvZiBvbiAnbXknIGFyZSBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBteS5zeW5jRWwuZGF0YXNldC5kaXNhYmxlZCA9ICd0cnVlJztcbiAgICAgICAgICAgIG15LnN5bmNFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIG15LnJlbW90ZUVsLmRhdGFzZXQuZGlzYWJsZWQgPSAndHJ1ZSc7XG4gICAgICAgICAgICBteS5yZW1vdGVFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlTUlESUJhc2VWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteView;\n\nvar _remote_group = __webpack_require__(53);\n\nvar _remote_group2 = _interopRequireDefault(_remote_group);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Overview list of all assigned MIDI controller assignments.\n */\nfunction createRemoteView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.remote__list'),\n        groupViews = {\n        byId: {},\n        allIds: []\n    },\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_PROJECT:\n                    createRemoteGroups(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createRemoteGroup(e.detail.state.processors.byId[e.detail.action.data.id]);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteRemoteGroups(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n                    if (e.detail.state.learnTargetProcessorID) {\n                        var _groupView = groupViews.byId[e.detail.state.learnTargetProcessorID],\n                            _processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                        if (!_groupView) {\n                            createRemoteGroups(e.detail.state.processors);\n                        } else {\n                            _groupView.updateViews(_processor);\n                        }\n                    }\n                    break;\n\n                case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                    var groupView = groupViews.byId[e.detail.action.processorID],\n                        processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                    groupView.updateViews(processor);\n                    break;\n            }\n        });\n    },\n        createRemoteGroups = function createRemoteGroups(processors) {\n        processors.allIds.forEach(function (id) {\n            if (!groupViews.byId[id]) {\n                var processor = processors.byId[id];\n                var hasAssignment = false;\n                processor.params.allIds.forEach(function (id) {\n                    var param = processor.params.byId[id];\n                    if (param.isMidiControllable && param.remoteChannel && param.remoteCC != null) {\n                        hasAssignment = true;\n                    }\n                });\n                if (hasAssignment) {\n                    createRemoteGroup(processor);\n                }\n            }\n        });\n    },\n\n\n    /**\n     * Create a container view to hold assigned parameter views.\n     * @param {Array} processors Processor list.\n     */\n    createRemoteGroup = function createRemoteGroup(processor) {\n        if (!groupViews.byId[processor.id]) {\n            groupViews.allIds.push(processor.id);\n            groupViews.byId[processor.id] = (0, _remote_group2.default)({\n                store: store,\n                processor: processor,\n                parentEl: listEl\n            });\n        }\n    },\n\n\n    /**\n     * Delete a container view to hold assigned parameter views.\n     * @param {Object} processor Processor with assignable parameters.\n     */\n    deleteRemoteGroups = function deleteRemoteGroups(processors) {\n        var n = groupViews.allIds.length;\n        for (var i = groupViews.allIds.length - 1; i >= 0; i--) {\n            var id = groupViews.allIds[i];\n            if (!processors.byId[id]) {\n                groupViews.allIds.splice(i, 1);\n                groupViews.byId[id].terminate();\n                delete groupViews.byId[id];\n            }\n        }\n    },\n        that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteGroupView;\n\nvar _remote_item = __webpack_require__(54);\n\nvar _remote_item2 = _interopRequireDefault(_remote_item);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Group within overview list of all assigned MIDI controller assignments.\n * The items are grouped by processor.\n */\nfunction createRemoteGroupView(specs, my) {\n    var that,\n        store = specs.store,\n        processorID = specs.processor.id,\n        parentEl = specs.parentEl,\n        el,\n        listEl,\n        nameParam,\n        views = {\n        byId: {},\n        allIds: []\n    },\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-group');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        parentEl.appendChild(el);\n\n        listEl = el.querySelector('.remote__group-list');\n\n        setName(specs.processor.params.byId.name.value);\n        updateViews(specs.processor);\n\n        document.addEventListener(store.STATE_CHANGE, handleStateChange);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChange);\n\n        views.allIds.forEach(function (id) {\n            views.byId[id].terminate();\n        });\n\n        parentEl.removeChild(el);\n        views = null;\n        parentEl = null;\n    },\n        handleStateChange = function handleStateChange(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === processorID && e.detail.action.paramKey === 'name') {\n                    setName(e.detail.state.processors.byId[processorID].params.byId.name.value);\n                }\n                break;\n        }\n    },\n        updateViews = function updateViews(processor) {\n        processor.params.allIds.forEach(function (id) {\n            var param = processor.params.byId[id],\n                isAssigned = param.isMidiControllable && param.remoteChannel && param.remoteCC,\n                viewExists = views.byId[id];\n            if (isAssigned && !viewExists) {\n                addView(id, param);\n            } else if (!isAssigned && viewExists) {\n                removeView(id);\n            }\n        });\n        el.dataset.hasAssignments = views.allIds.length > 0;\n    },\n        addView = function addView(key, param) {\n        views.byId[key] = (0, _remote_item2.default)({\n            store: store,\n            paramKey: key,\n            param: param,\n            processorID: processorID,\n            parentEl: listEl\n        });\n        views.allIds.push(key);\n    },\n        removeView = function removeView(key) {\n        views.byId[key].terminate();\n        delete views.byId[key];\n        views.allIds.splice(views.allIds.indexOf(key), 1);\n    },\n\n\n    /**\n     * If a group has no assignments its header is hidden.\n     */\n    updateGroupVisibility = function updateGroupVisibility() {\n        el.dataset.hasAssignments = itemViews.length > 0;\n    },\n\n\n    /**\n     * Set the group's header to the processor's name.\n     * @param {String} name Processor's name.\n     */\n    setName = function setName(name) {\n        el.querySelector('.remote__group-header-label').innerHTML = name;\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.updateViews = updateViews;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteItemView;\n/**\n * View for a parameter that's linked to a remote MIDI controller.\n * The items are grouped by processor.\n */\nfunction createRemoteItemView(specs, my) {\n    var that,\n        store = specs.store,\n        paramKey = specs.paramKey,\n        param = specs.param,\n        processorID = specs.processorID,\n        parentEl = specs.parentEl,\n        el,\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-item');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        el.querySelector('.remote__item-label').innerHTML = param.label;\n        el.querySelector('.remote__item-channel').innerHTML = param.remoteChannel;\n        el.querySelector('.remote__item-control').innerHTML = param.remoteCC;\n        parentEl.appendChild(el);\n\n        // add DOM event listeners\n        el.querySelector('.remote__item-delete').addEventListener('click', onUnregisterClick);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        el.querySelector('.remote__item-delete').removeEventListener('click', onUnregisterClick);\n        parentEl.removeChild(el);\n        param = null;\n        parentEl = null;\n    },\n\n\n    /**\n     * Unassign button click handler.\n     * @param  {Object} e Click event object.\n     */\n    onUnregisterClick = function onUnregisterClick(e) {\n        store.dispatch(store.getActions().unassignExternalControl(processorID, paramKey));\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     * @param {Function} callback Not used here.\n     */\n    changeRemoteState = function changeRemoteState(state, callback) {\n        switch (state) {\n            case 'assigned':\n                // TODO: normale tekst\n                break;\n            case 'inactive':\n                // TODO: tekst grijs of zoiets\n                break;\n        }\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcz82ZWZmIl0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZUl0ZW1WaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJzdG9yZSIsInBhcmFtS2V5IiwicGFyYW0iLCJwcm9jZXNzb3JJRCIsInBhcmVudEVsIiwiZWwiLCJpbml0aWFsaXplIiwidGVtcGxhdGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbG9uZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImlubmVySFRNTCIsImxhYmVsIiwicmVtb3RlQ2hhbm5lbCIsInJlbW90ZUNDIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwib25VbnJlZ2lzdGVyQ2xpY2siLCJ0ZXJtaW5hdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwidW5hc3NpZ25FeHRlcm5hbENvbnRyb2wiLCJjaGFuZ2VSZW1vdGVTdGF0ZSIsInN0YXRlIiwiY2FsbGJhY2siXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUl3QkEsb0I7QUFKeEI7Ozs7QUFJZSxTQUFTQSxvQkFBVCxDQUE4QkMsS0FBOUIsRUFBcUNDLEVBQXJDLEVBQXlDO0FBQ3BELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxRQUFRSCxNQUFNRyxLQURsQjtBQUFBLFFBRUlDLFdBQVdKLE1BQU1JLFFBRnJCO0FBQUEsUUFHSUMsUUFBUUwsTUFBTUssS0FIbEI7QUFBQSxRQUlJQyxjQUFjTixNQUFNTSxXQUp4QjtBQUFBLFFBS0lDLFdBQVdQLE1BQU1PLFFBTHJCO0FBQUEsUUFNSUMsRUFOSjtBQUFBLFFBUUlDLGFBQWEsU0FBYkEsVUFBYSxHQUFXO0FBQ3BCO0FBQ0EsWUFBSUMsV0FBV0MsU0FBU0MsYUFBVCxDQUF1Qix1QkFBdkIsQ0FBZjtBQUNBLFlBQUlDLFFBQVFILFNBQVNJLE9BQVQsQ0FBaUJDLFNBQWpCLENBQTJCLElBQTNCLENBQVo7QUFDQVAsYUFBS0ssTUFBTUcsaUJBQVg7QUFDQVIsV0FBR0ksYUFBSCxDQUFpQixxQkFBakIsRUFBd0NLLFNBQXhDLEdBQW9EWixNQUFNYSxLQUExRDtBQUNBVixXQUFHSSxhQUFILENBQWlCLHVCQUFqQixFQUEwQ0ssU0FBMUMsR0FBc0RaLE1BQU1jLGFBQTVEO0FBQ0FYLFdBQUdJLGFBQUgsQ0FBaUIsdUJBQWpCLEVBQTBDSyxTQUExQyxHQUFzRFosTUFBTWUsUUFBNUQ7QUFDQWIsaUJBQVNjLFdBQVQsQ0FBcUJiLEVBQXJCOztBQUVBO0FBQ0FBLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDVSxnQkFBekMsQ0FBMEQsT0FBMUQsRUFBbUVDLGlCQUFuRTtBQUNILEtBcEJMOzs7QUFzQkk7OztBQUdBQyxnQkFBWSxTQUFaQSxTQUFZLEdBQVc7QUFDbkJoQixXQUFHSSxhQUFILENBQWlCLHNCQUFqQixFQUF5Q2EsbUJBQXpDLENBQTZELE9BQTdELEVBQXNFRixpQkFBdEU7QUFDQWhCLGlCQUFTbUIsV0FBVCxDQUFxQmxCLEVBQXJCO0FBQ0FILGdCQUFRLElBQVI7QUFDQUUsbUJBQVcsSUFBWDtBQUNILEtBOUJMOzs7QUFnQ0k7Ozs7QUFJQWdCLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNJLENBQVQsRUFBWTtBQUM1QnhCLGNBQU15QixRQUFOLENBQWV6QixNQUFNMEIsVUFBTixHQUFtQkMsdUJBQW5CLENBQTJDeEIsV0FBM0MsRUFBd0RGLFFBQXhELENBQWY7QUFDSCxLQXRDTDs7O0FBd0NJOzs7Ozs7QUFNQTJCLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNDLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQTBCO0FBQzFDLGdCQUFRRCxLQUFSO0FBQ0ksaUJBQUssVUFBTDtBQUNJO0FBQ0E7QUFDSixpQkFBSyxVQUFMO0FBQ0k7QUFDQTtBQU5SO0FBUUgsS0F2REw7O0FBeURBOUIsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBTzs7QUFFQVAsU0FBS3NCLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsV0FBT3RCLElBQVA7QUFDSCIsImZpbGUiOiI1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmlldyBmb3IgYSBwYXJhbWV0ZXIgdGhhdCdzIGxpbmtlZCB0byBhIHJlbW90ZSBNSURJIGNvbnRyb2xsZXIuXG4gKiBUaGUgaXRlbXMgYXJlIGdyb3VwZWQgYnkgcHJvY2Vzc29yLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZW1vdGVJdGVtVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgcGFyYW1LZXkgPSBzcGVjcy5wYXJhbUtleSxcbiAgICAgICAgcGFyYW0gPSBzcGVjcy5wYXJhbSxcbiAgICAgICAgcHJvY2Vzc29ySUQgPSBzcGVjcy5wcm9jZXNzb3JJRCxcbiAgICAgICAgcGFyZW50RWwgPSBzcGVjcy5wYXJlbnRFbCxcbiAgICAgICAgZWwsXG4gICAgICAgIFxuICAgICAgICBpbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgdGhlIERPTSBlbGVtZW50LlxuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLXJlbW90ZS1pdGVtJyk7XG4gICAgICAgICAgICBsZXQgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgIGVsID0gY2xvbmUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWxhYmVsJykuaW5uZXJIVE1MID0gcGFyYW0ubGFiZWw7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWNoYW5uZWwnKS5pbm5lckhUTUwgPSBwYXJhbS5yZW1vdGVDaGFubmVsO1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1jb250cm9sJykuaW5uZXJIVE1MID0gcGFyYW0ucmVtb3RlQ0M7XG4gICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCBET00gZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWRlbGV0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25VbnJlZ2lzdGVyQ2xpY2spO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCBiZWZvcmUgdGhpcyB2aWV3IGlzIGRlbGV0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0ZXJtaW5hdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2l0ZW0tZGVsZXRlJykucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvblVucmVnaXN0ZXJDbGljayk7XG4gICAgICAgICAgICBwYXJlbnRFbC5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgICAgICBwYXJhbSA9IG51bGw7XG4gICAgICAgICAgICBwYXJlbnRFbCA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVW5hc3NpZ24gYnV0dG9uIGNsaWNrIGhhbmRsZXIuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZSBDbGljayBldmVudCBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBvblVucmVnaXN0ZXJDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3JlLmdldEFjdGlvbnMoKS51bmFzc2lnbkV4dGVybmFsQ29udHJvbChwcm9jZXNzb3JJRCwgcGFyYW1LZXkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdGF0ZSBvZiB0aGUgcGFyYW1ldGVyIGluIHRoZSBhc3NpZ25tZW50IHByb2Nlc3MgY2hhbmdlZCxcbiAgICAgICAgICogdGhlIGVsZW1lbnQgd2lsbCBzaG93IHRoaXMgdmlzdWFsbHkuXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0ZSBOZXcgc3RhdGUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgTm90IHVzZWQgaGVyZS5cbiAgICAgICAgICovXG4gICAgICAgIGNoYW5nZVJlbW90ZVN0YXRlID0gZnVuY3Rpb24oc3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXNzaWduZWQnOlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBub3JtYWxlIHRla3N0XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2luYWN0aXZlJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogdGVrc3QgZ3JpanMgb2Ygem9pZXRzXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICBcbiAgICBpbml0aWFsaXplKCk7XG5cbiAgICB0aGF0LnRlcm1pbmF0ZSA9IHRlcm1pbmF0ZTtcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3JlbW90ZV9pdGVtLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createSequencer = createSequencer;\nexports.default = createTransport;\n/**\n * Timing, transport and sequencing functionality.\n * Divided in two sets of functionality, Transport and Sequencer.\n * \n * Unix epoch,                page    AudioContext   Transport        now,\n * 01-01-1970 00:00:00 UTC    load    created        start            the present\n *  |                          |       |              |                | \n *  |--------------------------|-------|-------//-----|--------//------|\n *  \n *  |------------------------------------------------------------------> Date.now()\n *                             |---------------------------------------> performance.now()\n *                                     |-------------------------------> AudioContext.currentTime\n */\n\n/**\n * @description Creates sequencer functionality.\n * Takes time from transport to get music events from arrangement and\n * drives components that process music events.\n * @param {Object} specs External specifications.\n * @param {Object} my Internally shared properties.\n */\nfunction createSequencer(specs, my) {\n    var that,\n        canvasView = specs.canvasView,\n        midiNetwork = specs.midiNetwork,\n        ppqn = 480,\n        bpm = 120,\n        lastBpm = bpm,\n        tickInMilliseconds,\n        audioContextOffset = 0,\n        timelineOffset = 0,\n        playbackQueue = [],\n        renderThrottleCounter = 0,\n        processorEvents = {},\n\n\n    /**\n     * Scan the arrangement for events and send them to concerned components.\n     * @param {Number} scanStart Start in ms of timespan to scan.\n     * @param {Number} scanEnd End in ms of timespan to scan.\n     * @param {Number} nowToScanStart Duration from now until start time in ms.\n     * @param {Number} offset Position of transport playhead in ms.\n     */\n    scanEvents = function scanEvents(scanStart, scanEnd, nowToScanStart, offset) {\n        midiNetwork.process(msec2tick(scanStart), msec2tick(scanEnd), msec2tick(nowToScanStart), tickInMilliseconds, msec2tick(offset), processorEvents);\n    },\n\n\n    /**\n     * Use Timing's requestAnimationFrame as clock for view updates.\n     * @param {Number} position Timing position, equal to performance.now(). \n     */\n    updateView = function updateView(position) {\n        if (renderThrottleCounter % 2 === 0) {\n            canvasView.draw(msec2tick(position), processorEvents);\n            Object.keys(processorEvents).forEach(function (v) {\n                return processorEvents[v] = [];\n            });\n        }\n        renderThrottleCounter++;\n    },\n\n\n    /**\n     * Convert milliseconds to ticks.\n     */\n    msec2tick = function msec2tick(sec) {\n        return sec / tickInMilliseconds;\n    },\n\n\n    /**\n     * Convert ticks to milliseconds.\n     */\n    tick2msec = function tick2msec(tick) {\n        return tick * tickInMilliseconds;\n    },\n\n\n    /**\n     * Set Beats Per Minute.\n     * @param {Number} newBpm New value for BPM.\n     */\n    setBPM = function setBPM() {\n        var newBpm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 120;\n\n        bpm = newBpm;\n        var beatInMilliseconds = 60000.0 / bpm;\n        tickInMilliseconds = beatInMilliseconds / ppqn;\n        // calculate change factor\n        var factor = lastBpm / bpm;\n        my.setLoopByFactor(factor);\n    },\n\n\n    /**\n     * Get Beats Per Minute of the project.\n     * @return [Number] Beats Per Minute.\n     */\n    getBPM = function getBPM() {\n        return bpm;\n    },\n\n\n    /**\n     * Set difference between AudioContext.currentTime and performance.now.\n     * Used to convert timing for AudioContext playback.\n     * @param {Number} acCurrentTime Timestamp in seconds.\n     */\n    setAudioContextOffset = function setAudioContextOffset(acCurrentTime) {\n        audioContextOffset = performance.now() - acCurrentTime * 1000;\n    };\n\n    my = my || {};\n    my.setBPM = setBPM;\n    my.store = specs.store;\n    my.scanEvents = scanEvents;\n    my.updateView = updateView;\n\n    that = specs.that || {};\n\n    that.setBPM = setBPM;\n    that.getBPM = getBPM;\n    that.setAudioContextOffset = setAudioContextOffset;\n    return that;\n}\n\n/**\n * Functionality to add synchronisation to external MIDI clock.\n * MIDI clock sends clock events at 24 ppqn.\n * @see https://en.wikipedia.org/wiki/MIDI_beat_clock\n * \n * The MIDI 'start' and 'stop' events just start and stop the transport.\n * The MIDI 'clock' event adjusts the BPM tempo.\n * \n * BPM is calculated with the time difference between clock event timestamps.\n */\nfunction createExternalClock(specs, my) {\n    var that,\n        isEnabled = false,\n        midiInput,\n        prevBPM = 0,\n        prevTimestamp = 0,\n        updateTimeout,\n\n\n    /**\n     * Enable synchronisation to external MIDI clock.\n     * @param {Boolean} isEnabled True to synchronise to external MIDI clock.\n     * @param {Object} midiInputPort MIDI input port.\n     */\n    setExternalClockEnabled = function setExternalClockEnabled(isEnabled, midiInputPort) {\n        if (isEnabled) {\n            midiInput = midiInputPort;\n            midiInput.addListener('start', 1, onStart);\n            midiInput.addListener('stop', 1, onStop);\n            midiInput.addListener('clock', 1, onClock);\n        } else {\n            if (midiInput) {\n                midiInput.removeListener('start', onStart);\n                midiInput.removeListener('stop', onStop);\n                midiInput.removeListener('clock', onClock);\n            }\n            midiInput = null;\n        }\n    },\n\n\n    /**\n     * Start transport.\n     */\n    onStart = function onStart() {\n        that.start();\n    },\n\n\n    /**\n     * Stop transport.\n     */\n    onStop = function onStop() {\n        that.pause();\n        that.rewind();\n    },\n\n\n    /**\n     * Convert events at 24 ppqn to BPM, suppress jitter from unstable clocks.\n     * @param {Object} e Event from WebMIDI.js.\n     */\n    onClock = function onClock(e) {\n        if (prevTimestamp > 0) {\n            var newBPM = 60000 / ((e.timestamp - prevTimestamp) * 24);\n            var bpm = prevBPM ? (prevBPM * 23 + newBPM) / 24 : newBPM;\n            prevBPM = bpm;\n            bpm = bpm.toFixed(1);\n            if (bpm != that.getBPM()) {\n                updateTempo(bpm);\n            }\n        }\n        prevTimestamp = e.timestamp;\n    },\n\n\n    /**\n     * Update tempo no more than once every 500ms.\n     * @param {Number} bpm The new changed BPM.\n     */\n    updateTempo = function updateTempo(bpm) {\n        if (!updateTimeout) {\n            that.setBPM(bpm);\n            updateTimeout = setTimeout(function () {\n                updateTimeout = 0;\n            }, 500);\n        }\n    };\n\n    that = specs.that || {};\n\n    that.setExternalClockEnabled = setExternalClockEnabled;\n    return that;\n}\n\n/**\n * @description Creates transport timing functionality.\n * Time is always measured in milliseconds since document load.\n * The timer can be started, stopped, rewound to zero and looped.\n * It defines a scan range that is just ahead of the play position\n * and that is meant to be used to scan for events to play.\n * @param {Object} specs Options.\n * @param {Object} my Properties shared between the functionalities of the object.\n */\nfunction createTransport(specs, my) {\n    var that,\n        position = 0,\n        origin = 0,\n        scanStart = 0,\n        scanEnd = 0,\n        lookAhead = 200,\n        loopStart = 0,\n        loopEnd = 0,\n        isRunning = false,\n        isLooping = false,\n        needsScan = false,\n        init = function init() {\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_TRANSPORT:\n                    switch (e.detail.state.transport) {\n                        case 'pause':\n                            pause();\n                            break;\n                        case 'play':\n                            rewind();\n                            start();\n                            break;\n                        case 'stop':\n                            pause();\n                            rewind();\n                            break;\n                    }\n                    break;\n\n                case e.detail.actions.SET_PROJECT:\n                case e.detail.actions.NEW_PROJECT:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n            }\n        });\n\n        my.setBPM();\n    },\n\n\n    /**\n     * Set the scan range.\n     * @param {Number} start Start timestamp of scan range.\n     */\n    setScanRange = function setScanRange(start) {\n        scanStart = start;\n        scanEnd = scanStart + lookAhead;\n        needsScan = true;\n    },\n\n\n    /**\n     * Updated the playhead position by adjusting the timeline origin.\n     * @param {Number} newOrigin Timeline origin timestamp.\n     */\n    setOrigin = function setOrigin(newOrigin) {\n        loopStart = loopStart - origin + newOrigin;\n        loopEnd = loopEnd - origin + newOrigin;\n        origin = newOrigin;\n    },\n\n\n    /**\n     * Timer using requestAnimationFrame that updates the transport timing.\n     */\n    run = function run() {\n        if (isRunning) {\n            position = performance.now();\n            if (isLooping && position < loopEnd && scanStart < loopEnd && scanEnd > loopEnd) {\n                setOrigin(origin + (loopEnd - loopStart));\n            }\n            if (scanEnd - position < 16.7) {\n                setScanRange(scanEnd);\n            }\n            if (needsScan) {\n                needsScan = false;\n                my.scanEvents(scanStart - origin, scanEnd - origin, scanStart - position, position - origin);\n            }\n        }\n        my.updateView(position - origin);\n        requestAnimationFrame(run);\n    },\n\n\n    /**\n     * Start the timer.\n     */\n    start = function start() {\n        var offset = position - origin;\n        position = performance.now();\n        setOrigin(position - offset);\n        setScanRange(position);\n        isRunning = true;\n    },\n\n\n    /**\n     * Pause the timer.\n     */\n    pause = function pause() {\n        isRunning = false;\n    },\n\n\n    /**\n     * Rewind the timer to timeline start.\n     */\n    rewind = function rewind() {\n        position = performance.now();\n        setOrigin(position);\n        setScanRange(position);\n    },\n\n\n    /**\n     * Toggle between stop and play.\n     */\n    toggleStartStop = function toggleStartStop() {\n        if (isRunning) {\n            pause();\n        } else {\n            rewind();\n            start();\n        }\n    },\n\n\n    /**\n     * Set loop startpoint.\n     * @param {Number} position Loop start timestamp.\n     */\n    setLoopStart = function setLoopStart(position) {\n        loopStart = origin + position;\n    },\n\n\n    /**\n     * Set loop endpoint.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoopEnd = function setLoopEnd(position) {\n        loopEnd = origin + position;\n    },\n\n\n    /**\n     * Set loop mode.\n     * @param {Boolean} isEnabled True to enable looping.\n     * @param {Number} position Loop start timestamp.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoop = function setLoop(isEnabled, startPosition, endPosition) {\n        isLooping = isEnabled;\n    },\n\n\n    /**\n     * Change loop points by a factor if the tempo changes.\n     * @param {number} factor Time points multiplier.\n     */\n    setLoopByFactor = function setLoopByFactor(factor) {\n        setLoopStart(loopStart * factor);\n        setLoopEnd(loopEnd * factor);\n    };\n\n    my = my || {};\n    my.setLoopByFactor = setLoopByFactor;\n\n    that = createSequencer(specs, my);\n    that = createExternalClock(specs, my);\n\n    init();\n\n    that.run = run;\n\n    return that;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n");

/***/ })
/******/ ]);