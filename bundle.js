/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		3: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + ".bundle.js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBaseSettingView;\n\nvar _remote = __webpack_require__(18);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createBaseSettingView(specs, my) {\n    var that,\n        initialise = function initialise() {\n        // find template, add clone to settings panel\n        var template = document.querySelector('#template-setting-' + my.data.type);\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        specs.parentEl.appendChild(my.el);\n\n        // show label\n        my.el.querySelector('.setting__label').innerHTML = my.data.label;\n\n        if (my.data.isMidiControllable) {\n            my.changeRemoteState(specs.store.getState());\n        }\n\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.setValue(e.detail.state.processors.byId[my.processorID].params.byId[my.key].value);\n                }\n                break;\n\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.data = e.detail.state.processors.byId[my.processorID].params.byId[my.key];\n                    my.initData();\n                    my.setValue(e.detail.state.processors.byId[my.processorID].params.byId[my.key].value);\n                }\n                break;\n\n            case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n            case e.detail.actions.TOGGLE_MIDI_LEARN_TARGET:\n            case e.detail.actions.SELECT_PROCESSOR:\n            case e.detail.actions.DELETE_PROCESSOR:\n            case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n            case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                if (my.data.isMidiControllable) {\n                    my.changeRemoteState(e.detail.state);\n                }\n                break;\n        }\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.key = specs.key;\n    my.data = specs.data;\n    my.processorID = specs.processorID;\n    my.el;\n\n    that = that || {};\n    if (my.data.isMidiControllable) {\n        that = (0, _remote2.default)(specs, my);\n    }\n\n    initialise();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.memoize = memoize;\nexports.getThemeColors = getThemeColors;\nvar themeColors = {};\n\nfunction memoize(state) {\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var actions = arguments[2];\n\n  switch (action.type) {\n\n    case actions.CREATE_PROJECT:\n    case actions.SET_THEME:\n      document.querySelector('#app').dataset.theme = state.theme;\n      var themeStyles = window.getComputedStyle(document.querySelector('[data-theme]'));\n      themeColors.colorBackground = themeStyles.getPropertyValue('--bg-color').trim();\n      themeColors.colorHigh = themeStyles.getPropertyValue('--text-color').trim();\n      themeColors.colorMid = themeStyles.getPropertyValue('--border-color').trim();\n      themeColors.colorLow = themeStyles.getPropertyValue('--panel-bg-color').trim();\n      break;\n  }\n}\n\n/**\n * Memoised selector to access processors by id as object key.\n * Recreates the memoised data each time a processor is created or deleted.\n */\nfunction getThemeColors() {\n  return themeColors;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc2VsZWN0b3JzLmpzPzFmY2MiXSwibmFtZXMiOlsibWVtb2l6ZSIsImdldFRoZW1lQ29sb3JzIiwidGhlbWVDb2xvcnMiLCJzdGF0ZSIsImFjdGlvbiIsImFjdGlvbnMiLCJ0eXBlIiwiQ1JFQVRFX1BST0pFQ1QiLCJTRVRfVEhFTUUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhc2V0IiwidGhlbWUiLCJ0aGVtZVN0eWxlcyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJjb2xvckJhY2tncm91bmQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwidHJpbSIsImNvbG9ySGlnaCIsImNvbG9yTWlkIiwiY29sb3JMb3ciXSwibWFwcGluZ3MiOiI7Ozs7O1FBRWdCQSxPLEdBQUFBLE87UUFtQkFDLGMsR0FBQUEsYztBQXJCaEIsSUFBTUMsY0FBYyxFQUFwQjs7QUFFTyxTQUFTRixPQUFULENBQWlCRyxLQUFqQixFQUE4QztBQUFBLE1BQXRCQyxNQUFzQix1RUFBYixFQUFhO0FBQUEsTUFBVEMsT0FBUzs7QUFDbkQsVUFBUUQsT0FBT0UsSUFBZjs7QUFFRSxTQUFLRCxRQUFRRSxjQUFiO0FBQ0EsU0FBS0YsUUFBUUcsU0FBYjtBQUNFQyxlQUFTQyxhQUFULENBQXVCLE1BQXZCLEVBQStCQyxPQUEvQixDQUF1Q0MsS0FBdkMsR0FBK0NULE1BQU1TLEtBQXJEO0FBQ0EsVUFBTUMsY0FBY0MsT0FBT0MsZ0JBQVAsQ0FBd0JOLFNBQVNDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBeEIsQ0FBcEI7QUFDQVIsa0JBQVljLGVBQVosR0FBOEJILFlBQVlJLGdCQUFaLENBQTZCLFlBQTdCLEVBQTJDQyxJQUEzQyxFQUE5QjtBQUNBaEIsa0JBQVlpQixTQUFaLEdBQXdCTixZQUFZSSxnQkFBWixDQUE2QixjQUE3QixFQUE2Q0MsSUFBN0MsRUFBeEI7QUFDQWhCLGtCQUFZa0IsUUFBWixHQUF1QlAsWUFBWUksZ0JBQVosQ0FBNkIsZ0JBQTdCLEVBQStDQyxJQUEvQyxFQUF2QjtBQUNBaEIsa0JBQVltQixRQUFaLEdBQXVCUixZQUFZSSxnQkFBWixDQUE2QixrQkFBN0IsRUFBaURDLElBQWpELEVBQXZCO0FBQ0E7QUFWSjtBQVlEOztBQUVEOzs7O0FBSU8sU0FBU2pCLGNBQVQsR0FBMEI7QUFDL0IsU0FBT0MsV0FBUDtBQUNEIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0aGVtZUNvbG9ycyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVtb2l6ZShzdGF0ZSwgYWN0aW9uID0ge30sIGFjdGlvbnMpIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuXG4gICAgY2FzZSBhY3Rpb25zLkNSRUFURV9QUk9KRUNUOlxuICAgIGNhc2UgYWN0aW9ucy5TRVRfVEhFTUU6XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJykuZGF0YXNldC50aGVtZSA9IHN0YXRlLnRoZW1lO1xuICAgICAgY29uc3QgdGhlbWVTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10aGVtZV0nKSk7XG4gICAgICB0aGVtZUNvbG9ycy5jb2xvckJhY2tncm91bmQgPSB0aGVtZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLWJnLWNvbG9yJykudHJpbSgpO1xuICAgICAgdGhlbWVDb2xvcnMuY29sb3JIaWdoID0gdGhlbWVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnLS10ZXh0LWNvbG9yJykudHJpbSgpO1xuICAgICAgdGhlbWVDb2xvcnMuY29sb3JNaWQgPSB0aGVtZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLWJvcmRlci1jb2xvcicpLnRyaW0oKTtcbiAgICAgIHRoZW1lQ29sb3JzLmNvbG9yTG93ID0gdGhlbWVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnLS1wYW5lbC1iZy1jb2xvcicpLnRyaW0oKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbi8qKlxuICogTWVtb2lzZWQgc2VsZWN0b3IgdG8gYWNjZXNzIHByb2Nlc3NvcnMgYnkgaWQgYXMgb2JqZWN0IGtleS5cbiAqIFJlY3JlYXRlcyB0aGUgbWVtb2lzZWQgZGF0YSBlYWNoIHRpbWUgYSBwcm9jZXNzb3IgaXMgY3JlYXRlZCBvciBkZWxldGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhlbWVDb2xvcnMoKSB7XG4gIHJldHVybiB0aGVtZUNvbG9ycztcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9zdGF0ZS9zZWxlY3RvcnMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDI;\nexports.getMIDIPortByID = getMIDIPortByID;\nexports.getAllMIDIPorts = getAllMIDIPorts;\nvar midiAccess = void 0;\n\nfunction createMIDI(specs) {\n    var that,\n        store = specs.store,\n        syncListeners = [],\n        remoteListeners = [],\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n\n                case e.detail.actions.CREATE_MIDI_PORT:\n                case e.detail.actions.UPDATE_MIDI_PORT:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n        connect = function connect() {\n        return new Promise(function (resolve, reject) {\n            requestAccess(resolve, reject, false);\n        });\n    },\n\n\n    /**\n     * Request system for access to MIDI ports.\n     * @param {function} successCallback\n     * @param {function} failureCallback\n     * @param {boolean} sysex True if sysex data must be included.\n     */\n    requestAccess = function requestAccess(successCallback, failureCallback, sysex) {\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess({\n                sysex: !!sysex\n            }).then(function (_midiAccess) {\n                if (!_midiAccess.inputs.size && !_midiAccess.outputs.size) {\n                    onAccessFailure('No MIDI devices found on this system.');\n                } else {\n                    onAccessSuccess(_midiAccess);\n                    successCallback();\n                }\n            }, function () {\n                failureCallback('Request for MIDI access failed.');\n            });\n        } else {\n            failureCallback('Web MIDI API not available.');\n        }\n    },\n\n\n    /**\n     * MIDI access request failed.\n     * @param {String} errorMessage\n     */\n    onAccessFailure = function onAccessFailure(errorMessage) {\n        console.log(errorMessage);\n    },\n\n\n    /**\n     * MIDI access request succeeded.\n     * @param {Object} midiAccessObj MidiAccess object.\n     */\n    onAccessSuccess = function onAccessSuccess(_midiAccess) {\n        console.log('MIDI enabled.');\n        midiAccess = _midiAccess;\n\n        var inputs = midiAccess.inputs.values();\n        var outputs = midiAccess.outputs.values();\n\n        for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n            port.value.onmidimessage = onMIDIMessage;\n        }\n\n        midiAccess.onstatechange = onAccessStateChange;\n    },\n\n\n    /**\n     * MIDIAccess object statechange handler.\n     * If the change is the addition of a new port, create a port module.\n     * This handles MIDI devices that are connected after the app initialisation.\n     * Disconnected or reconnected ports are handled by the port modules.\n     * \n     * If this is\n     * @param {Object} e MIDIConnectionEvent object.\n     */\n    onAccessStateChange = function onAccessStateChange(e) {\n        store.dispatch(store.getActions().midiAccessChange(e.port));\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDISyncListeners = function updateMIDISyncListeners(ports) {\n        syncListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.syncEnabled) {\n                syncListeners.push(port.id);\n            }\n        });\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDIRemoteListeners = function updateMIDIRemoteListeners(ports) {\n        remoteListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.remoteEnabled) {\n                remoteListeners.push(port.id);\n            }\n        });\n    },\n        onMIDIMessage = function onMIDIMessage(e) {\n        // console.log(e.data[0] & 0xf0, e.data[0] & 0x0f, e.target.id, e.data[0], e.data[1], e.data[2]);\n        switch (e.data[0] & 0xf0) {\n            case 240:\n                onSystemRealtimeMessage(e);\n                break;\n            case 176:\n                // CC\n                onControlChangeMessage(e);\n                break;\n            case 144: // note on\n            case 128:\n                // note off\n                // onNoteMessage(e);\n                break;\n        }\n    },\n\n\n    /**\n     * Eventlistener for incoming MIDI messages.\n     * data[1] and data[2] are undefined,\n     * for e.data[0] & 0xf:\n     * 8 = clock, 248 (11110000 | 00000100)\n     * 10 = start\n     * 11 = continue\n     * 12 = stop\n     * @see https://www.w3.org/TR/webmidi/#idl-def-MIDIMessageEvent\n     * @see https://www.midi.org/specifications/item/table-1-summary-of-midi-message\n     * @param  {Object} e MIDIMessageEvent event.\n     */\n    onSystemRealtimeMessage = function onSystemRealtimeMessage(e) {\n        if (syncListeners.indexOf(e.target.id) > -1) {\n            switch (e.data[0]) {\n                case 248:\n                    // clock\n                    break;\n                case 250:\n                    // start\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 251:\n                    // continue\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 252:\n                    // stop\n                    store.dispatch(store.getActions().setTransport('pause'));\n                    break;\n            }\n        }\n    },\n        onControlChangeMessage = function onControlChangeMessage(e) {\n        if (remoteListeners.indexOf(e.target.id) > -1) {\n            store.dispatch(store.getActions().receiveMIDIControlChange(e.data));\n        }\n    };\n\n    that = specs.that;\n\n    init();\n\n    that.connect = connect;\n    return that;\n}\n\nfunction getMIDIPortByID(id) {\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        if (port.value.id === id) {\n            return port.value;\n        }\n    }\n\n    for (var _port = outputs.next(); _port && !_port.done; _port = outputs.next()) {\n        if (_port.value.id === id) {\n            return _port.value;\n        }\n    }\n}\n\n/**\n * Get all MIDI input and output ports.\n * @returns {Array} Array of all ports.\n */\nfunction getAllMIDIPorts() {\n    var allPorts = [];\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        allPorts.push(port.value);\n    }\n\n    for (var _port2 = outputs.next(); _port2 && !_port2.done; _port2 = outputs.next()) {\n        allPorts.push(_port2.value);\n    }\n\n    return allPorts;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createUUID = createUUID;\n/**\n * Utilities\n * Mouse or touch event detection.\n */\nvar util = exports.util = function () {\n    var isTouchDevice = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch;\n\n    /**\n     * Type of events to use, touch or mouse\n     * @type {String}\n     */\n    var eventType = {\n        start: isTouchDevice ? 'touchstart' : 'mousedown',\n        end: isTouchDevice ? 'touchend' : 'mouseup',\n        click: isTouchDevice ? 'touchend' : 'click',\n        move: isTouchDevice ? 'touchmove' : 'mousemove'\n    };\n\n    return {\n        isTouchDevice: isTouchDevice,\n        eventType: eventType\n    };\n}();\n\n/**\n * Create a fairly unique ID.\n * @see https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\nfunction createUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS91dGlsLmpzPzg5OWEiXSwibmFtZXMiOlsiY3JlYXRlVVVJRCIsInV0aWwiLCJpc1RvdWNoRGV2aWNlIiwid2luZG93IiwiRG9jdW1lbnRUb3VjaCIsImRvY3VtZW50IiwiZXZlbnRUeXBlIiwic3RhcnQiLCJlbmQiLCJjbGljayIsIm1vdmUiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwidiIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7OztRQTRCZ0JBLFUsR0FBQUEsVTtBQTVCaEI7Ozs7QUFJTyxJQUFNQyxzQkFBUyxZQUFXO0FBQzdCLFFBQU1DLGdCQUFnQixrQkFBa0JDLE1BQWxCLElBQTRCQSxPQUFPQyxhQUFQLElBQXdCQyxvQkFBb0JELGFBQTlGOztBQUVBOzs7O0FBSUEsUUFBTUUsWUFBWTtBQUNkQyxlQUFPTCxnQkFBZ0IsWUFBaEIsR0FBK0IsV0FEeEI7QUFFZE0sYUFBS04sZ0JBQWdCLFVBQWhCLEdBQTZCLFNBRnBCO0FBR2RPLGVBQU9QLGdCQUFnQixVQUFoQixHQUE2QixPQUh0QjtBQUlkUSxjQUFNUixnQkFBZ0IsV0FBaEIsR0FBOEI7QUFKdEIsS0FBbEI7O0FBT0EsV0FBTztBQUNIQSx1QkFBZUEsYUFEWjtBQUVISSxtQkFBV0E7QUFGUixLQUFQO0FBSUgsQ0FsQm1CLEVBQWI7O0FBb0JQOzs7O0FBSU8sU0FBU04sVUFBVCxHQUFzQjtBQUN6QixXQUFPLHVDQUF1Q1csT0FBdkMsQ0FBK0MsT0FBL0MsRUFBd0QsVUFBU0MsQ0FBVCxFQUFZO0FBQ3ZFLFlBQUlDLElBQUlDLEtBQUtDLE1BQUwsS0FBZ0IsRUFBaEIsR0FBcUIsQ0FBN0I7QUFBQSxZQUFnQ0MsSUFBSUosS0FBSyxHQUFMLEdBQVdDLENBQVgsR0FBZ0JBLElBQUksR0FBSixHQUFVLEdBQTlEO0FBQ0EsZUFBT0csRUFBRUMsUUFBRixDQUFXLEVBQVgsQ0FBUDtBQUNILEtBSE0sQ0FBUDtBQUlIIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllc1xuICogTW91c2Ugb3IgdG91Y2ggZXZlbnQgZGV0ZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgdXRpbCA9ICggZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaXNUb3VjaERldmljZSA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g7XG4gICAgXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBldmVudHMgdG8gdXNlLCB0b3VjaCBvciBtb3VzZVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgY29uc3QgZXZlbnRUeXBlID0ge1xuICAgICAgICBzdGFydDogaXNUb3VjaERldmljZSA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLFxuICAgICAgICBlbmQ6IGlzVG91Y2hEZXZpY2UgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnLFxuICAgICAgICBjbGljazogaXNUb3VjaERldmljZSA/ICd0b3VjaGVuZCcgOiAnY2xpY2snLFxuICAgICAgICBtb3ZlOiBpc1RvdWNoRGV2aWNlID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJyxcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIGlzVG91Y2hEZXZpY2U6IGlzVG91Y2hEZXZpY2UsXG4gICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlXG4gICAgfVxufSkoKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmYWlybHkgdW5pcXVlIElELlxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvY3JlYXRlLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvY29yZS91dGlsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createDialog;\nexports.showDialog = showDialog;\n\n/**\n * Dialog overlay.\n */\n\nvar dialogEl = void 0,\n    headerEl = void 0,\n    bodyEl = void 0,\n    resolveBtnEl = void 0,\n    rejectBtnEl = void 0,\n    resolveBtnCallback = void 0,\n    rejectBtnCallback = void 0;\n\nfunction createDialog(specs, my) {\n    var that = void 0,\n        init = function init() {\n        dialogEl = document.querySelector('.dialog');\n        headerEl = dialogEl.querySelector('.dialog__header .header__label');\n        bodyEl = dialogEl.querySelector('.dialog__body');\n        resolveBtnEl = dialogEl.querySelector('.dialog__resolve');\n        rejectBtnEl = dialogEl.querySelector('.dialog__reject');\n        resolveBtnEl.addEventListener('click', function (e) {\n            dialogEl.dataset.show = false;\n            resolveBtnCallback && resolveBtnCallback();\n        });\n        rejectBtnEl.addEventListener('click', function (e) {\n            dialogEl.dataset.show = false;\n            rejectBtnCallback && rejectBtnCallback();\n        });\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}\n\nfunction showDialog() {\n    var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var resolve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var reject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var resolveCb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var rejectCb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    dialogEl.dataset.show = true;\n    headerEl.innerHTML = header;\n    bodyEl.innerHTML = body;\n    resolveBtnEl.innerHTML = resolve;\n    rejectBtnEl.innerHTML = reject;\n    resolveBtnCallback = resolveCb;\n    rejectBtnCallback = rejectCb;\n    resolveBtnEl.style.display = resolve != null ? 'block' : 'none';\n    rejectBtnEl.style.display = reject != null ? 'block' : 'none';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9kaWFsb2cuanM/OGY2YiJdLCJuYW1lcyI6WyJjcmVhdGVEaWFsb2ciLCJzaG93RGlhbG9nIiwiZGlhbG9nRWwiLCJoZWFkZXJFbCIsImJvZHlFbCIsInJlc29sdmVCdG5FbCIsInJlamVjdEJ0bkVsIiwicmVzb2x2ZUJ0bkNhbGxiYWNrIiwicmVqZWN0QnRuQ2FsbGJhY2siLCJzcGVjcyIsIm15IiwidGhhdCIsImluaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZGF0YXNldCIsInNob3ciLCJoZWFkZXIiLCJib2R5IiwicmVzb2x2ZSIsInJlamVjdCIsInJlc29sdmVDYiIsInJlamVjdENiIiwiaW5uZXJIVE1MIiwic3R5bGUiLCJkaXNwbGF5Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFhd0JBLFk7UUEwQlJDLFUsR0FBQUEsVTs7QUF0Q2hCOzs7O0FBSUEsSUFBSUMsaUJBQUo7QUFBQSxJQUNJQyxpQkFESjtBQUFBLElBRUlDLGVBRko7QUFBQSxJQUdJQyxxQkFISjtBQUFBLElBSUlDLG9CQUpKO0FBQUEsSUFLSUMsMkJBTEo7QUFBQSxJQU1JQywwQkFOSjs7QUFRZSxTQUFTUixZQUFULENBQXNCUyxLQUF0QixFQUE2QkMsRUFBN0IsRUFBaUM7QUFDNUMsUUFBSUMsYUFBSjtBQUFBLFFBRUlDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RWLG1CQUFXVyxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQVg7QUFDQVgsbUJBQVdELFNBQVNZLGFBQVQsQ0FBdUIsZ0NBQXZCLENBQVg7QUFDQVYsaUJBQVNGLFNBQVNZLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBVDtBQUNBVCx1QkFBZUgsU0FBU1ksYUFBVCxDQUF1QixrQkFBdkIsQ0FBZjtBQUNBUixzQkFBY0osU0FBU1ksYUFBVCxDQUF1QixpQkFBdkIsQ0FBZDtBQUNBVCxxQkFBYVUsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsYUFBSztBQUN4Q2IscUJBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLEtBQXhCO0FBQ0FWLGtDQUFzQkEsb0JBQXRCO0FBQ0gsU0FIRDtBQUlBRCxvQkFBWVMsZ0JBQVosQ0FBNkIsT0FBN0IsRUFBc0MsYUFBSztBQUN2Q2IscUJBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLEtBQXhCO0FBQ0FULGlDQUFxQkEsbUJBQXJCO0FBQ0gsU0FIRDtBQUlILEtBaEJMOztBQWtCQUcsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBQzs7QUFFQSxXQUFPRCxJQUFQO0FBQ0g7O0FBRU0sU0FBU1YsVUFBVCxHQUE4RztBQUFBLFFBQTFGaUIsTUFBMEYsdUVBQWpGLEVBQWlGO0FBQUEsUUFBN0VDLElBQTZFLHVFQUF0RSxFQUFzRTtBQUFBLFFBQWxFQyxPQUFrRSx1RUFBeEQsSUFBd0Q7QUFBQSxRQUFsREMsTUFBa0QsdUVBQXpDLElBQXlDO0FBQUEsUUFBbkNDLFNBQW1DLHVFQUF2QixJQUF1QjtBQUFBLFFBQWpCQyxRQUFpQix1RUFBTixJQUFNOztBQUNqSHJCLGFBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLElBQXhCO0FBQ0FkLGFBQVNxQixTQUFULEdBQXFCTixNQUFyQjtBQUNBZCxXQUFPb0IsU0FBUCxHQUFtQkwsSUFBbkI7QUFDQWQsaUJBQWFtQixTQUFiLEdBQXlCSixPQUF6QjtBQUNBZCxnQkFBWWtCLFNBQVosR0FBd0JILE1BQXhCO0FBQ0FkLHlCQUFxQmUsU0FBckI7QUFDQWQsd0JBQW9CZSxRQUFwQjtBQUNBbEIsaUJBQWFvQixLQUFiLENBQW1CQyxPQUFuQixHQUE2Qk4sV0FBVyxJQUFYLEdBQWtCLE9BQWxCLEdBQTRCLE1BQXpEO0FBQ0FkLGdCQUFZbUIsS0FBWixDQUFrQkMsT0FBbEIsR0FBNEJMLFVBQVUsSUFBVixHQUFpQixPQUFqQixHQUEyQixNQUF2RDtBQUNIIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogRGlhbG9nIG92ZXJsYXkuXG4gKi9cblxubGV0IGRpYWxvZ0VsLFxuICAgIGhlYWRlckVsLFxuICAgIGJvZHlFbCxcbiAgICByZXNvbHZlQnRuRWwsXG4gICAgcmVqZWN0QnRuRWwsXG4gICAgcmVzb2x2ZUJ0bkNhbGxiYWNrLFxuICAgIHJlamVjdEJ0bkNhbGxiYWNrO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEaWFsb2coc3BlY3MsIG15KSB7XG4gICAgbGV0IHRoYXQsXG5cbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGlhbG9nRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nJyk7XG4gICAgICAgICAgICBoZWFkZXJFbCA9IGRpYWxvZ0VsLnF1ZXJ5U2VsZWN0b3IoJy5kaWFsb2dfX2hlYWRlciAuaGVhZGVyX19sYWJlbCcpO1xuICAgICAgICAgICAgYm9keUVsID0gZGlhbG9nRWwucXVlcnlTZWxlY3RvcignLmRpYWxvZ19fYm9keScpO1xuICAgICAgICAgICAgcmVzb2x2ZUJ0bkVsID0gZGlhbG9nRWwucXVlcnlTZWxlY3RvcignLmRpYWxvZ19fcmVzb2x2ZScpO1xuICAgICAgICAgICAgcmVqZWN0QnRuRWwgPSBkaWFsb2dFbC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nX19yZWplY3QnKTtcbiAgICAgICAgICAgIHJlc29sdmVCdG5FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGRpYWxvZ0VsLmRhdGFzZXQuc2hvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlc29sdmVCdG5DYWxsYmFjayAmJiByZXNvbHZlQnRuQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVqZWN0QnRuRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBkaWFsb2dFbC5kYXRhc2V0LnNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZWplY3RCdG5DYWxsYmFjayAmJiByZWplY3RCdG5DYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RGlhbG9nKGhlYWRlciA9ICcnLCBib2R5ID0gJycsIHJlc29sdmUgPSBudWxsLCByZWplY3QgPSBudWxsLCByZXNvbHZlQ2IgPSBudWxsLCByZWplY3RDYiA9IG51bGwpIHtcbiAgICBkaWFsb2dFbC5kYXRhc2V0LnNob3cgPSB0cnVlO1xuICAgIGhlYWRlckVsLmlubmVySFRNTCA9IGhlYWRlcjtcbiAgICBib2R5RWwuaW5uZXJIVE1MID0gYm9keTtcbiAgICByZXNvbHZlQnRuRWwuaW5uZXJIVE1MID0gcmVzb2x2ZTtcbiAgICByZWplY3RCdG5FbC5pbm5lckhUTUwgPSByZWplY3Q7XG4gICAgcmVzb2x2ZUJ0bkNhbGxiYWNrID0gcmVzb2x2ZUNiO1xuICAgIHJlamVjdEJ0bkNhbGxiYWNrID0gcmVqZWN0Q2I7XG4gICAgcmVzb2x2ZUJ0bkVsLnN0eWxlLmRpc3BsYXkgPSByZXNvbHZlICE9IG51bGwgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgIHJlamVjdEJ0bkVsLnN0eWxlLmRpc3BsYXkgPSByZWplY3QgIT0gbnVsbCA/ICdibG9jaycgOiAnbm9uZSc7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvZGlhbG9nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = addWindowResize;\n/**\n * Window resize listener functionality.\n * Add callback functions that will be called on window resize,\n * but debounced to not be called more that every so many milliseconds.\n */\nvar debouncedFunction,\n    callbacks = [],\n    delay = 250,\n\n\n/**\n * Returns a function, that, as long as it continues to be invoked, \n * will not be triggered. The function will be called after it \n * stops being called for N milliseconds. If `immediate` is passed, \n * trigger the function on the leading edge, instead of the trailing.\n * @see https://davidwalsh.name/javascript-debounce-function\n * @param  {Function} func Function to call after delay.\n * @param  {Number} wait Milliseconds to wait before next call.\n * @param  {Boolean} immediate True to not wait.\n */\ndebounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function () {\n        var context = this,\n            args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\n\nfunction addWindowResize(specs, my) {\n    var that,\n\n\n    /**\n     * Add callback function to be called on debounced resize.\n     * @param  {Function} callback Callback function.\n     */\n    addWindowResizeCallback = function addWindowResizeCallback(callback) {\n        callbacks.push(callback);\n        if (!debouncedFunction) {\n            debouncedFunction = debounce(function () {\n                callbacks.forEach(function (callbackFunction) {\n                    callbackFunction();\n                });\n            }, delay);\n            window.addEventListener('resize', debouncedFunction);\n        }\n    };\n\n    my = my || {};\n    my.addWindowResizeCallback = addWindowResizeCallback;\n\n    that = specs.that || {};\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy93aW5kb3dyZXNpemUuanM/OTM1MiJdLCJuYW1lcyI6WyJhZGRXaW5kb3dSZXNpemUiLCJkZWJvdW5jZWRGdW5jdGlvbiIsImNhbGxiYWNrcyIsImRlbGF5IiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImxhdGVyIiwiYXBwbHkiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInNwZWNzIiwibXkiLCJ0aGF0IiwiYWRkV2luZG93UmVzaXplQ2FsbGJhY2siLCJjYWxsYmFjayIsInB1c2giLCJmb3JFYWNoIiwiY2FsbGJhY2tGdW5jdGlvbiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQW9Dd0JBLGU7QUFwQ3hCOzs7OztBQUtBLElBQUlDLGlCQUFKO0FBQUEsSUFDSUMsWUFBWSxFQURoQjtBQUFBLElBRUlDLFFBQVEsR0FGWjs7O0FBSUk7Ozs7Ozs7Ozs7QUFVQUMsV0FBVyxTQUFYQSxRQUFXLENBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFxQkMsU0FBckIsRUFBZ0M7QUFDdkMsUUFBSUMsT0FBSjtBQUNBLFdBQU8sWUFBVztBQUNkLFlBQUlDLFVBQVUsSUFBZDtBQUFBLFlBQW9CQyxPQUFPQyxTQUEzQjtBQUNBLFlBQUlDLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ25CSixzQkFBVSxJQUFWO0FBQ0EsZ0JBQUksQ0FBQ0QsU0FBTCxFQUFnQjtBQUNaRixxQkFBS1EsS0FBTCxDQUFXSixPQUFYLEVBQW9CQyxJQUFwQjtBQUNIO0FBQ0osU0FMRDtBQU1BLFlBQUlJLFVBQVVQLGFBQWEsQ0FBQ0MsT0FBNUI7QUFDQU8scUJBQWFQLE9BQWI7QUFDQUEsa0JBQVVRLFdBQVdKLEtBQVgsRUFBa0JOLElBQWxCLENBQVY7QUFDQSxZQUFJUSxPQUFKLEVBQWFULEtBQUtRLEtBQUwsQ0FBV0osT0FBWCxFQUFvQkMsSUFBcEI7QUFDaEIsS0FaRDtBQWFILENBN0JMOztBQStCZSxTQUFTVixlQUFULENBQXlCaUIsS0FBekIsRUFBZ0NDLEVBQWhDLEVBQW9DO0FBQy9DLFFBQUlDLElBQUo7OztBQUVJOzs7O0FBSUFDLDhCQUEwQixTQUExQkEsdUJBQTBCLENBQVNDLFFBQVQsRUFBbUI7QUFDekNuQixrQkFBVW9CLElBQVYsQ0FBZUQsUUFBZjtBQUNBLFlBQUksQ0FBQ3BCLGlCQUFMLEVBQXdCO0FBQ3BCQSxnQ0FBb0JHLFNBQVMsWUFBVztBQUNwQ0YsMEJBQVVxQixPQUFWLENBQWtCLFVBQVNDLGdCQUFULEVBQTJCO0FBQ3pDQTtBQUNILGlCQUZEO0FBR0gsYUFKbUIsRUFJakJyQixLQUppQixDQUFwQjtBQUtBc0IsbUJBQU9DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDekIsaUJBQWxDO0FBQ0g7QUFDSixLQWhCTDs7QUFrQkFpQixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0UsdUJBQUgsR0FBNkJBLHVCQUE3Qjs7QUFFQUQsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBLFdBQU9BLElBQVA7QUFDSCIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXaW5kb3cgcmVzaXplIGxpc3RlbmVyIGZ1bmN0aW9uYWxpdHkuXG4gKiBBZGQgY2FsbGJhY2sgZnVuY3Rpb25zIHRoYXQgd2lsbCBiZSBjYWxsZWQgb24gd2luZG93IHJlc2l6ZSxcbiAqIGJ1dCBkZWJvdW5jZWQgdG8gbm90IGJlIGNhbGxlZCBtb3JlIHRoYXQgZXZlcnkgc28gbWFueSBtaWxsaXNlY29uZHMuXG4gKi9cbnZhciBkZWJvdW5jZWRGdW5jdGlvbixcbiAgICBjYWxsYmFja3MgPSBbXSxcbiAgICBkZWxheSA9IDI1MCxcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIFxuICAgICAqIHdpbGwgbm90IGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IFxuICAgICAqIHN0b3BzIGJlaW5nIGNhbGxlZCBmb3IgTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgXG4gICAgICogdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gICAgICogQHNlZSBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9qYXZhc2NyaXB0LWRlYm91bmNlLWZ1bmN0aW9uXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZ1bmMgRnVuY3Rpb24gdG8gY2FsbCBhZnRlciBkZWxheS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHdhaXQgTWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIG5leHQgY2FsbC5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpbW1lZGlhdGUgVHJ1ZSB0byBub3Qgd2FpdC5cbiAgICAgKi9cbiAgICBkZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgdGltZW91dDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRXaW5kb3dSZXNpemUoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBkZWJvdW5jZWQgcmVzaXplLlxuICAgICAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRXaW5kb3dSZXNpemVDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoIWRlYm91bmNlZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgZGVib3VuY2VkRnVuY3Rpb24gPSBkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2tGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tGdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlZEZ1bmN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LmFkZFdpbmRvd1Jlc2l6ZUNhbGxiYWNrID0gYWRkV2luZG93UmVzaXplQ2FsbGJhY2s7XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy93aW5kb3dyZXNpemUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIBaseView;\n/**\n * MIDI input or output port processor view.\n */\nfunction createMIDIBaseView(specs, my) {\n    var that,\n        parentEl = specs.parentEl,\n        port = specs.port,\n        initialize = function initialize() {\n        // find template, add clone to midi ports list\n        var template = document.querySelector('#template-midi-port');\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        parentEl.appendChild(my.el);\n\n        // set data-connected=\"true\" to make the element visible\n        my.el.dataset.connected = true;\n\n        // show label\n        my.el.querySelector('.midi-port__label').innerHTML = specs.name;\n\n        // find checkboxes\n        my.networkEl = my.el.querySelector('.midi-port__network');\n        my.syncEl = my.el.querySelector('.midi-port__sync');\n        my.remoteEl = my.el.querySelector('.midi-port__remote');\n\n        // set checkboxes\n        my.networkEl.querySelector('[type=checkbox]').checked = specs.networkEnabled;\n        my.syncEl.querySelector('[type=checkbox]').checked = specs.syncEnabled;\n        my.remoteEl.querySelector('[type=checkbox]').checked = specs.remoteEnabled;\n\n        // add DOM event listeners\n        my.networkEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'networkEnabled'));\n            }\n        });\n        my.syncEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'syncEnabled'));\n            }\n        });\n        my.remoteEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'remoteEnabled'));\n            }\n        });\n\n        // listen to state updates\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                case e.detail.actions.CREATE_PROJECT:\n                    var _port = e.detail.state.ports.byId[my.id];\n                    if (_port) {\n                        my.networkEl.querySelector('[type=checkbox]').checked = _port.networkEnabled;\n                        my.syncEl.querySelector('[type=checkbox]').checked = _port.syncEnabled;\n                        my.remoteEl.querySelector('[type=checkbox]').checked = _port.remoteEnabled;\n                    } else {\n                        console.log('MIDI port with id ' + my.id + ' not found.');\n                    }\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (my.el && parentEl) {\n            parentEl.removeChild(my.el);\n        }\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.isInput = specs.isInput;\n    my.id = specs.id;\n    my.el;\n    my.networkEl;\n    my.syncEl;\n    my.remoteEl;\n\n    that = that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createShape = createShape;\nexports.createText = createText;\nexports.redrawShape = redrawShape;\nexports.createCircleOutline = createCircleOutline;\nexports.createCircleFilled = createCircleFilled;\nexports.createCircleOutlineFilled = createCircleOutlineFilled;\nexports.drawConnectors = drawConnectors;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar _THREE = THREE,\n    CircleGeometry = _THREE.CircleGeometry,\n    Color = _THREE.Color,\n    Group = _THREE.Group,\n    Line2 = _THREE.Line2,\n    LineGeometry = _THREE.LineGeometry,\n    LineMaterial = _THREE.LineMaterial,\n    Mesh = _THREE.Mesh,\n    MeshBasicMaterial = _THREE.MeshBasicMaterial,\n    VertexColors = _THREE.VertexColors;\n\n\nvar defaultSegments = 64;\nvar defaultLineWidth = 0.0012;\nvar defaultLineColor = 0xdddddd;\n\nvar lineMaterial = new LineMaterial({\n  color: new Color(defaultLineColor),\n  linewidth: defaultLineWidth,\n  vertexColors: VertexColors,\n  dashed: false\n});\n\nvar textLineMaterial = lineMaterial.clone();\ntextLineMaterial.linewidth = 0.0008;\n\n/** \n * Cache of circle outlines, so they can be cloned once created.\n * They are identified by a string made out of the radius and color.\n */\nvar circleCache = {};\n\n/** \n * Create a line along a path of coordinates.\n * @param {Array} points An array of point objects.\n * @param {Number} points.x\n * @param {Number} points.y\n * @param {Number} color Color of the line.\n * @returns {Object} Line2 three.js object.\n */\nfunction createShape() {\n  var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultLineColor;\n\n  var geometry = new LineGeometry();\n  var line2 = new Line2(geometry, lineMaterial);\n  redrawShape(line2, points, color);\n  return line2;\n}\n\n/**\n *Create text with a thinner line.\n * @param {Array} points An array of point objects.\n * @param {Number} points.x\n * @param {Number} points.y\n * @param {Number} color Color of the line.\n * @returns {Object} Line2 three.js object.\n */\nfunction createText(points) {\n  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultLineColor;\n\n  var geometry = new LineGeometry();\n  var line2 = new Line2(geometry, textLineMaterial);\n  redrawShape(line2, points, color);\n  return line2;\n}\n\n/** \n * Draw a line along a path of coordinates on an existing Line2.\n * @param {Object} line2 Line2 mesh line.\n * @param {Array} points An array of point objects.\n * @param {Number} points.x\n * @param {Number} points.y\n * @param {Number} color Color of the line.\n * @returns {Object} Line2 three.js object.\n */\nfunction redrawShape(line2) {\n  var points = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultLineColor;\n\n  if (points.length) {\n    var col = new Color(color);\n    var positions = points.reduce(function (acc, p) {\n      return [].concat(_toConsumableArray(acc), [p.x, p.y, 0]);\n    }, []);\n    var colors = points.reduce(function (acc, p) {\n      return [].concat(_toConsumableArray(acc), [col.r, col.g, col.b]);\n    }, []);\n    line2.geometry = new LineGeometry();\n    line2.geometry.setPositions(positions);\n    line2.geometry.setColors(colors);\n    line2.computeLineDistances();\n  }\n\n  return line2;\n}\n\n/** \n * Draw a circle outline.\n * @param {Number} radius Circle radius.\n * @param {Number} color Circle color.\n * @return {Object} Line2 3D object.\n */\nfunction createCircleOutline(radius) {\n  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultLineColor;\n\n\n  // check if the circle already exists in cache\n  var cacheId = 'c' + radius + '_' + color;\n  if (circleCache[cacheId]) {\n    return circleCache[cacheId].clone();\n  }\n\n  var col = new Color(color);\n\n  // create a circle, just for it's vertice points\n  var circle = new CircleGeometry(radius, defaultSegments);\n  var vertices = circle.vertices;\n\n  // remove first point which is the center of the circle\n  vertices.shift();\n\n  // copy the first to the end so the cirle is closed\n  vertices.push(vertices[0].clone());\n\n  // create the geometry and line\n  var positions = vertices.reduce(function (acc, v) {\n    return [].concat(_toConsumableArray(acc), [v.x, v.y, v.z]);\n  }, []);\n  var colors = vertices.reduce(function (acc, v) {\n    return [].concat(_toConsumableArray(acc), [col.r, col.g, col.b]);\n  }, []);\n  var geometry = new LineGeometry();\n  geometry.setPositions(positions);\n  geometry.setColors(colors);\n  var line = new Line2(geometry, lineMaterial);\n  line.computeLineDistances();\n\n  // add the circle to the cache\n  circleCache[cacheId] = line;\n\n  return line;\n}\n\nfunction drawLine(points, color) {}\n\n/** \n * Draw a circle fill.\n * @param {Number} radius Circle radius.\n * @param {Number} color Circle color.\n * @return {Object} Mesh 3D object.\n */\nfunction createCircleFilled(radius, color) {\n  var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var numSegments = 8;\n  var material = new MeshBasicMaterial({ color: color, transparent: true });\n  var geometry = new CircleGeometry(radius, numSegments);\n  material.opacity = alpha;\n  return new Mesh(geometry, material);\n}\n\n/**\n * Create circle with outline and fill.\n * @param {Number} radius Circle radius.\n * @param {Number} color Circle color.\n * @return {object} Group 3D object.\n */\nfunction createCircleOutlineFilled(radius, color) {\n  var circle = new Group();\n  circle.add(createCircleFilled(radius, color));\n  circle.add(createCircleOutline(radius, color));\n  return circle;\n}\n\n/**\n * Add input and/or output connectors to a processor.\n * @param {Object} rootObj Outer object3D.\n * @param {Array} inputs Inputs to draw a connector for.\n * @param {Array} outputs Outputs to draw a connector for.\n */\nfunction drawConnectors(rootObj, inputs, outputs, color) {\n\n  // inputs\n  inputs.allIds.forEach(function (id) {\n    drawConnector(inputs.byId[id], id, 'input', rootObj, color);\n  });\n\n  // outputs\n  outputs.allIds.forEach(function (id) {\n    drawConnector(outputs.byId[id], id, 'output', rootObj, color);\n  });\n}\n\n/**\n * Add input and/or output connector to a processor.\n * @param {Object} data Input or output data.\n * @param {String} id Connector ID.\n * @param {String} name Connector name.\n * @param {Object} rootObj Outer object3D.\n */\nfunction drawConnector(data, id, name, rootObj, color) {\n  var connector = createCircleOutline(0.6, color);\n  connector.name = name;\n  connector.userData.id = id;\n  connector.translateX(data.x);\n  connector.translateY(data.y);\n  rootObj.add(connector);\n\n  var active = createCircleOutline(1.2, color);\n  active.name = 'active';\n  active.visible = false;\n  connector.add(active);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getConfig = getConfig;\nexports.setConfig = setConfig;\n/**\n * Unchangeable application configuration settings.\n * \n * Config saves the ports settings off all ports \n * that have ever been connected.\n */\nvar PPQN = exports.PPQN = 480;\n\n/**\n * The processors available in the processors directory.\n */\nvar processorTypes = exports.processorTypes = {\n    epg: { name: 'Euclidean' },\n    euclidfx: { name: 'Euclid FX' },\n    output: { name: 'Output' }\n};\n\nvar name = 'config';\n\nfunction getConfig() {\n    var data = localStorage.getItem(name);\n    return data ? JSON.parse(data) : {};\n}\n\nfunction setConfig(state) {\n\n    var config = getConfig();\n    var data = {\n        theme: state.theme\n    };\n\n    if (config && config.ports) {\n\n        // update the existing config with new data from the current state\n        var ports = config.ports;\n        state.ports.allIds.forEach(function (statePortID) {\n            var portExistsInConfig = false;\n            config.ports.allIds.forEach(function (configPortID) {\n                if (configPortID === statePortID) {\n                    portExistsInConfig = true;\n\n                    // update port if it exists\n                    var configPort = config.ports.byId[configPortID];\n                    var statePort = state.ports.byId[statePortID];\n                    configPort.syncEnabled = statePort.syncEnabled;\n                    configPort.remoteEnabled = statePort.remoteEnabled;\n                    configPort.networkEnabled = statePort.networkEnabled;\n                }\n            });\n\n            // add port if it doesn't exist yet\n            if (!portExistsInConfig) {\n                config.ports.allIds.push(statePortID);\n                config.ports.byId[statePortID] = state.ports.byId[statePortID];\n            }\n        });\n        data.ports = config.ports;\n    } else {\n        data.ports = state.ports;\n    }\n\n    localStorage.setItem(name, JSON.stringify(data));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS9jb25maWcuanM/ZDg1NiJdLCJuYW1lcyI6WyJnZXRDb25maWciLCJzZXRDb25maWciLCJQUFFOIiwicHJvY2Vzc29yVHlwZXMiLCJlcGciLCJuYW1lIiwiZXVjbGlkZngiLCJvdXRwdXQiLCJkYXRhIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInN0YXRlIiwiY29uZmlnIiwidGhlbWUiLCJwb3J0cyIsImFsbElkcyIsImZvckVhY2giLCJwb3J0RXhpc3RzSW5Db25maWciLCJjb25maWdQb3J0SUQiLCJzdGF0ZVBvcnRJRCIsImNvbmZpZ1BvcnQiLCJieUlkIiwic3RhdGVQb3J0Iiwic3luY0VuYWJsZWQiLCJyZW1vdGVFbmFibGVkIiwibmV0d29ya0VuYWJsZWQiLCJwdXNoIiwic2V0SXRlbSIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFtQmdCQSxTLEdBQUFBLFM7UUFLQUMsUyxHQUFBQSxTO0FBeEJoQjs7Ozs7O0FBTU8sSUFBTUMsc0JBQU8sR0FBYjs7QUFFUDs7O0FBR08sSUFBTUMsMENBQWlCO0FBQzFCQyxTQUFLLEVBQUVDLE1BQU0sV0FBUixFQURxQjtBQUUxQkMsY0FBVSxFQUFFRCxNQUFNLFdBQVIsRUFGZ0I7QUFHMUJFLFlBQVEsRUFBRUYsTUFBTSxRQUFSO0FBSGtCLENBQXZCOztBQU1QLElBQU1BLE9BQU8sUUFBYjs7QUFFTyxTQUFTTCxTQUFULEdBQXFCO0FBQ3hCLFFBQU1RLE9BQU9DLGFBQWFDLE9BQWIsQ0FBcUJMLElBQXJCLENBQWI7QUFDQSxXQUFPRyxPQUFPRyxLQUFLQyxLQUFMLENBQVdKLElBQVgsQ0FBUCxHQUEwQixFQUFqQztBQUNIOztBQUVNLFNBQVNQLFNBQVQsQ0FBbUJZLEtBQW5CLEVBQTBCOztBQUU3QixRQUFNQyxTQUFTZCxXQUFmO0FBQ0EsUUFBSVEsT0FBTztBQUNQTyxlQUFPRixNQUFNRTtBQUROLEtBQVg7O0FBSUEsUUFBSUQsVUFBVUEsT0FBT0UsS0FBckIsRUFBNEI7O0FBRXhCO0FBQ0EsWUFBTUEsUUFBUUYsT0FBT0UsS0FBckI7QUFDQUgsY0FBTUcsS0FBTixDQUFZQyxNQUFaLENBQW1CQyxPQUFuQixDQUEyQix1QkFBZTtBQUN0QyxnQkFBSUMscUJBQXFCLEtBQXpCO0FBQ0FMLG1CQUFPRSxLQUFQLENBQWFDLE1BQWIsQ0FBb0JDLE9BQXBCLENBQTRCLHdCQUFnQjtBQUN4QyxvQkFBSUUsaUJBQWlCQyxXQUFyQixFQUFrQztBQUM5QkYseUNBQXFCLElBQXJCOztBQUVBO0FBQ0Esd0JBQU1HLGFBQWFSLE9BQU9FLEtBQVAsQ0FBYU8sSUFBYixDQUFrQkgsWUFBbEIsQ0FBbkI7QUFDQSx3QkFBTUksWUFBWVgsTUFBTUcsS0FBTixDQUFZTyxJQUFaLENBQWlCRixXQUFqQixDQUFsQjtBQUNBQywrQkFBV0csV0FBWCxHQUF5QkQsVUFBVUMsV0FBbkM7QUFDQUgsK0JBQVdJLGFBQVgsR0FBMkJGLFVBQVVFLGFBQXJDO0FBQ0FKLCtCQUFXSyxjQUFYLEdBQTRCSCxVQUFVRyxjQUF0QztBQUNIO0FBQ0osYUFYRDs7QUFhQTtBQUNBLGdCQUFJLENBQUNSLGtCQUFMLEVBQXlCO0FBQ3JCTCx1QkFBT0UsS0FBUCxDQUFhQyxNQUFiLENBQW9CVyxJQUFwQixDQUF5QlAsV0FBekI7QUFDQVAsdUJBQU9FLEtBQVAsQ0FBYU8sSUFBYixDQUFrQkYsV0FBbEIsSUFBaUNSLE1BQU1HLEtBQU4sQ0FBWU8sSUFBWixDQUFpQkYsV0FBakIsQ0FBakM7QUFDSDtBQUNKLFNBcEJEO0FBcUJBYixhQUFLUSxLQUFMLEdBQWFGLE9BQU9FLEtBQXBCO0FBQ0gsS0ExQkQsTUEwQk87QUFDSFIsYUFBS1EsS0FBTCxHQUFhSCxNQUFNRyxLQUFuQjtBQUNIOztBQUVEUCxpQkFBYW9CLE9BQWIsQ0FBcUJ4QixJQUFyQixFQUEyQk0sS0FBS21CLFNBQUwsQ0FBZXRCLElBQWYsQ0FBM0I7QUFDSCIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVbmNoYW5nZWFibGUgYXBwbGljYXRpb24gY29uZmlndXJhdGlvbiBzZXR0aW5ncy5cbiAqIFxuICogQ29uZmlnIHNhdmVzIHRoZSBwb3J0cyBzZXR0aW5ncyBvZmYgYWxsIHBvcnRzIFxuICogdGhhdCBoYXZlIGV2ZXIgYmVlbiBjb25uZWN0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQUFFOID0gNDgwO1xuXG4vKipcbiAqIFRoZSBwcm9jZXNzb3JzIGF2YWlsYWJsZSBpbiB0aGUgcHJvY2Vzc29ycyBkaXJlY3RvcnkuXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9jZXNzb3JUeXBlcyA9IHtcbiAgICBlcGc6IHsgbmFtZTogJ0V1Y2xpZGVhbid9LFxuICAgIGV1Y2xpZGZ4OiB7IG5hbWU6ICdFdWNsaWQgRlgnfSxcbiAgICBvdXRwdXQ6IHsgbmFtZTogJ091dHB1dCd9LFxufTtcblxuY29uc3QgbmFtZSA9ICdjb25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlnKCkge1xuICAgIGNvbnN0IGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKVxuICAgIHJldHVybiBkYXRhID8gSlNPTi5wYXJzZShkYXRhKSA6IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29uZmlnKHN0YXRlKSB7XG4gICAgXG4gICAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIHRoZW1lOiBzdGF0ZS50aGVtZVxuICAgIH07XG5cbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5wb3J0cykge1xuICAgICAgICBcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBleGlzdGluZyBjb25maWcgd2l0aCBuZXcgZGF0YSBmcm9tIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICAgIGNvbnN0IHBvcnRzID0gY29uZmlnLnBvcnRzO1xuICAgICAgICBzdGF0ZS5wb3J0cy5hbGxJZHMuZm9yRWFjaChzdGF0ZVBvcnRJRCA9PiB7XG4gICAgICAgICAgICBsZXQgcG9ydEV4aXN0c0luQ29uZmlnID0gZmFsc2U7XG4gICAgICAgICAgICBjb25maWcucG9ydHMuYWxsSWRzLmZvckVhY2goY29uZmlnUG9ydElEID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnUG9ydElEID09PSBzdGF0ZVBvcnRJRCkge1xuICAgICAgICAgICAgICAgICAgICBwb3J0RXhpc3RzSW5Db25maWcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBwb3J0IGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWdQb3J0ID0gY29uZmlnLnBvcnRzLmJ5SWRbY29uZmlnUG9ydElEXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVQb3J0ID0gc3RhdGUucG9ydHMuYnlJZFtzdGF0ZVBvcnRJRF07XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1BvcnQuc3luY0VuYWJsZWQgPSBzdGF0ZVBvcnQuc3luY0VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1BvcnQucmVtb3RlRW5hYmxlZCA9IHN0YXRlUG9ydC5yZW1vdGVFbmFibGVkO1xuICAgICAgICAgICAgICAgICAgICBjb25maWdQb3J0Lm5ldHdvcmtFbmFibGVkID0gc3RhdGVQb3J0Lm5ldHdvcmtFbmFibGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhZGQgcG9ydCBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgICAgaWYgKCFwb3J0RXhpc3RzSW5Db25maWcpIHtcbiAgICAgICAgICAgICAgICBjb25maWcucG9ydHMuYWxsSWRzLnB1c2goc3RhdGVQb3J0SUQpO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5wb3J0cy5ieUlkW3N0YXRlUG9ydElEXSA9IHN0YXRlLnBvcnRzLmJ5SWRbc3RhdGVQb3J0SURdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkYXRhLnBvcnRzID0gY29uZmlnLnBvcnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEucG9ydHMgPSBzdGF0ZS5wb3J0cztcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG59IFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9jb3JlL2NvbmZpZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _actions = __webpack_require__(10);\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nvar _reducers = __webpack_require__(12);\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nvar _store = __webpack_require__(14);\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _app = __webpack_require__(15);\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _canvas3d = __webpack_require__(22);\n\nvar _canvas3d2 = _interopRequireDefault(_canvas3d);\n\nvar _dialog = __webpack_require__(4);\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nvar _library = __webpack_require__(24);\n\nvar _library2 = _interopRequireDefault(_library);\n\nvar _midi = __webpack_require__(2);\n\nvar _midi2 = _interopRequireDefault(_midi);\n\nvar _network = __webpack_require__(25);\n\nvar _network2 = _interopRequireDefault(_network);\n\nvar _preferences = __webpack_require__(26);\n\nvar _preferences2 = _interopRequireDefault(_preferences);\n\nvar _remote = __webpack_require__(29);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nvar _transport = __webpack_require__(32);\n\nvar _transport2 = _interopRequireDefault(_transport);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Application startup.\n */\nfunction init() {\n    // Create all objects that will be the modules of the app.\n    var appView = {},\n        canvasView = {},\n        dialog = {},\n        libraryView = {},\n        midi = {},\n        midiNetwork = {},\n        preferencesView = {},\n        remoteView = {},\n        transport = {};\n\n    var store = (0, _store2.default)({\n        actions: (0, _actions2.default)(),\n        reducers: (0, _reducers2.default)()\n    });\n\n    // Add functionality to the modules and inject dependencies.\n    (0, _app2.default)({\n        that: appView,\n        store: store\n    });\n    (0, _canvas3d2.default)({\n        that: canvasView,\n        store: store\n    });\n    (0, _dialog2.default)({\n        that: dialog\n    });\n    (0, _library2.default)({\n        that: libraryView,\n        store: store\n    });\n    (0, _midi2.default)({\n        that: midi,\n        store: store\n    });\n    (0, _network2.default)({\n        that: midiNetwork,\n        store: store\n    });\n    (0, _preferences2.default)({\n        that: preferencesView,\n        store: store\n    });\n    (0, _remote2.default)({\n        that: remoteView,\n        store: store\n    });\n    (0, _transport2.default)({\n        that: transport,\n        store: store,\n        canvasView: canvasView,\n        midiNetwork: midiNetwork\n    });\n\n    // scan installed processors\n    store.dispatch(store.getActions().rescanTypes());\n\n    // initialise\n    midi.connect().then(function () {\n        store.persist();\n        transport.run();\n    }).catch(function (errorMsg) {\n        (0, _dialog.showDialog)('MIDI access failure', 'The app can\\'t initialise because it failed to access the computer\\'s MIDI ports. If you view the app in a browser, please check if it supports the Web MIDI API.<br>Error message: ' + errorMsg);\n    });\n}\n// import createCanvasView from './wh/view/canvas.js';\n/**\n    Euclidean Pattern Generator\n    Copyright (C) 2017, 2018  Wouter Hisschemoller\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    console.log('DOMContentLoaded');\n    init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz9jNDViIl0sIm5hbWVzIjpbImluaXQiLCJhcHBWaWV3IiwiY2FudmFzVmlldyIsImRpYWxvZyIsImxpYnJhcnlWaWV3IiwibWlkaSIsIm1pZGlOZXR3b3JrIiwicHJlZmVyZW5jZXNWaWV3IiwicmVtb3RlVmlldyIsInRyYW5zcG9ydCIsInN0b3JlIiwiYWN0aW9ucyIsInJlZHVjZXJzIiwidGhhdCIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsInJlc2NhblR5cGVzIiwiY29ubmVjdCIsInRoZW4iLCJwZXJzaXN0IiwicnVuIiwiY2F0Y2giLCJlcnJvck1zZyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBa0JBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSUE7OztBQUdBLFNBQVNBLElBQVQsR0FBZ0I7QUFDWjtBQUNBLFFBQUlDLFVBQVUsRUFBZDtBQUFBLFFBQ0lDLGFBQWEsRUFEakI7QUFBQSxRQUVJQyxTQUFTLEVBRmI7QUFBQSxRQUdJQyxjQUFjLEVBSGxCO0FBQUEsUUFJSUMsT0FBTyxFQUpYO0FBQUEsUUFLSUMsY0FBYyxFQUxsQjtBQUFBLFFBTUlDLGtCQUFrQixFQU50QjtBQUFBLFFBT0lDLGFBQWEsRUFQakI7QUFBQSxRQVFJQyxZQUFZLEVBUmhCOztBQVVBLFFBQU1DLFFBQVEscUJBQVk7QUFDdEJDLGlCQUFTLHdCQURhO0FBRXRCQyxrQkFBVTtBQUZZLEtBQVosQ0FBZDs7QUFLQTtBQUNBLHVCQUFjO0FBQ1ZDLGNBQU1aLE9BREk7QUFFVlM7QUFGVSxLQUFkO0FBSUEsNEJBQWU7QUFDWEcsY0FBTVgsVUFESztBQUVYUTtBQUZXLEtBQWY7QUFJQSwwQkFBYTtBQUNURyxjQUFNVjtBQURHLEtBQWI7QUFHQSwyQkFBa0I7QUFDZFUsY0FBTVQsV0FEUTtBQUVkTTtBQUZjLEtBQWxCO0FBSUEsd0JBQVc7QUFDUEcsY0FBTVIsSUFEQztBQUVQSztBQUZPLEtBQVg7QUFJQSwyQkFBa0I7QUFDZEcsY0FBTVAsV0FEUTtBQUVkSTtBQUZjLEtBQWxCO0FBSUEsK0JBQXNCO0FBQ2xCRyxjQUFNTixlQURZO0FBRWxCRztBQUZrQixLQUF0QjtBQUlBLDBCQUFpQjtBQUNiRyxjQUFNTCxVQURPO0FBRWJFO0FBRmEsS0FBakI7QUFJQSw2QkFBZ0I7QUFDWkcsY0FBTUosU0FETTtBQUVaQyxvQkFGWTtBQUdaUiw4QkFIWTtBQUlaSTtBQUpZLEtBQWhCOztBQU9BO0FBQ0FJLFVBQU1JLFFBQU4sQ0FBZUosTUFBTUssVUFBTixHQUFtQkMsV0FBbkIsRUFBZjs7QUFFQTtBQUNBWCxTQUFLWSxPQUFMLEdBQ0tDLElBREwsQ0FDVSxZQUFNO0FBQ1JSLGNBQU1TLE9BQU47QUFDQVYsa0JBQVVXLEdBQVY7QUFDSCxLQUpMLEVBS0tDLEtBTEwsQ0FLVyxvQkFBWTtBQUNmLGdDQUFXLHFCQUFYLDJMQUF1TkMsUUFBdk47QUFDSCxLQVBMO0FBUUg7QUFuRkQ7QUF2QkE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRHQUMsU0FBU0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQVc7QUFDckRDLFlBQVFDLEdBQVIsQ0FBWSxrQkFBWjtBQUNBMUI7QUFDSCxDQUhEIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgICBFdWNsaWRlYW4gUGF0dGVybiBHZW5lcmF0b3JcbiAgICBDb3B5cmlnaHQgKEMpIDIwMTcsIDIwMTggIFdvdXRlciBIaXNzY2hlbW9sbGVyXG5cbiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUFjdGlvbnMgZnJvbSAnLi93aC9zdGF0ZS9hY3Rpb25zLmpzJztcbmltcG9ydCBjcmVhdGVSZWR1Y2VycyBmcm9tICcuL3doL3N0YXRlL3JlZHVjZXJzLmpzJztcbmltcG9ydCBjcmVhdGVTdG9yZSBmcm9tICcuL3doL3N0YXRlL3N0b3JlLmpzJztcblxuaW1wb3J0IGNyZWF0ZUFwcFZpZXcgZnJvbSAnLi93aC92aWV3L2FwcC5qcyc7XG4vLyBpbXBvcnQgY3JlYXRlQ2FudmFzVmlldyBmcm9tICcuL3doL3ZpZXcvY2FudmFzLmpzJztcbmltcG9ydCBjcmVhdGVDYW52YXMzZCBmcm9tICcuL3doL3dlYmdsL2NhbnZhczNkLmpzJztcbmltcG9ydCBjcmVhdGVEaWFsb2cgZnJvbSAnLi93aC92aWV3L2RpYWxvZy5qcyc7XG5pbXBvcnQgY3JlYXRlTGlicmFyeVZpZXcgZnJvbSAnLi93aC92aWV3L2xpYnJhcnkuanMnO1xuaW1wb3J0IGNyZWF0ZU1JREkgZnJvbSAnLi93aC9taWRpL21pZGkuanMnO1xuaW1wb3J0IGNyZWF0ZU1JRElOZXR3b3JrIGZyb20gJy4vd2gvbWlkaS9uZXR3b3JrLmpzJztcbmltcG9ydCBjcmVhdGVQcmVmZXJlbmNlc1ZpZXcgZnJvbSAnLi93aC92aWV3L3ByZWZlcmVuY2VzLmpzJztcbmltcG9ydCBjcmVhdGVSZW1vdGVWaWV3IGZyb20gJy4vd2gvdmlldy9yZW1vdGUuanMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zcG9ydCBmcm9tICcuL3doL2NvcmUvdHJhbnNwb3J0LmpzJztcblxuaW1wb3J0IHsgc2hvd0RpYWxvZyB9IGZyb20gJy4vd2gvdmlldy9kaWFsb2cuanMnO1xuXG4vKipcbiAqIEFwcGxpY2F0aW9uIHN0YXJ0dXAuXG4gKi9cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy8gQ3JlYXRlIGFsbCBvYmplY3RzIHRoYXQgd2lsbCBiZSB0aGUgbW9kdWxlcyBvZiB0aGUgYXBwLlxuICAgIHZhciBhcHBWaWV3ID0ge30sXG4gICAgICAgIGNhbnZhc1ZpZXcgPSB7fSxcbiAgICAgICAgZGlhbG9nID0ge30sXG4gICAgICAgIGxpYnJhcnlWaWV3ID0ge30sXG4gICAgICAgIG1pZGkgPSB7fSxcbiAgICAgICAgbWlkaU5ldHdvcmsgPSB7fSxcbiAgICAgICAgcHJlZmVyZW5jZXNWaWV3ID0ge30sXG4gICAgICAgIHJlbW90ZVZpZXcgPSB7fSxcbiAgICAgICAgdHJhbnNwb3J0ID0ge307XG4gICAgXG4gICAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZSh7XG4gICAgICAgIGFjdGlvbnM6IGNyZWF0ZUFjdGlvbnMoKSxcbiAgICAgICAgcmVkdWNlcnM6IGNyZWF0ZVJlZHVjZXJzKClcbiAgICB9KTtcblxuICAgIC8vIEFkZCBmdW5jdGlvbmFsaXR5IHRvIHRoZSBtb2R1bGVzIGFuZCBpbmplY3QgZGVwZW5kZW5jaWVzLlxuICAgIGNyZWF0ZUFwcFZpZXcoeyBcbiAgICAgICAgdGhhdDogYXBwVmlldywgXG4gICAgICAgIHN0b3JlIFxuICAgIH0pO1xuICAgIGNyZWF0ZUNhbnZhczNkKHsgXG4gICAgICAgIHRoYXQ6IGNhbnZhc1ZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVEaWFsb2coe1xuICAgICAgICB0aGF0OiBkaWFsb2csXG4gICAgfSk7XG4gICAgY3JlYXRlTGlicmFyeVZpZXcoeyBcbiAgICAgICAgdGhhdDogbGlicmFyeVZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJKHsgXG4gICAgICAgIHRoYXQ6IG1pZGksIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJTmV0d29yayh7XG4gICAgICAgIHRoYXQ6IG1pZGlOZXR3b3JrLFxuICAgICAgICBzdG9yZVxuICAgIH0pO1xuICAgIGNyZWF0ZVByZWZlcmVuY2VzVmlldyh7IFxuICAgICAgICB0aGF0OiBwcmVmZXJlbmNlc1ZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVSZW1vdGVWaWV3KHtcbiAgICAgICAgdGhhdDogcmVtb3RlVmlldyxcbiAgICAgICAgc3RvcmVcbiAgICB9KTtcbiAgICBjcmVhdGVUcmFuc3BvcnQoeyBcbiAgICAgICAgdGhhdDogdHJhbnNwb3J0LCBcbiAgICAgICAgc3RvcmUsIFxuICAgICAgICBjYW52YXNWaWV3LCBcbiAgICAgICAgbWlkaU5ldHdvcmsgXG4gICAgfSk7XG5cbiAgICAvLyBzY2FuIGluc3RhbGxlZCBwcm9jZXNzb3JzXG4gICAgc3RvcmUuZGlzcGF0Y2goc3RvcmUuZ2V0QWN0aW9ucygpLnJlc2NhblR5cGVzKCkpO1xuXG4gICAgLy8gaW5pdGlhbGlzZVxuICAgIG1pZGkuY29ubmVjdCgpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHN0b3JlLnBlcnNpc3QoKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5ydW4oKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yTXNnID0+IHtcbiAgICAgICAgICAgIHNob3dEaWFsb2coJ01JREkgYWNjZXNzIGZhaWx1cmUnLCBgVGhlIGFwcCBjYW4ndCBpbml0aWFsaXNlIGJlY2F1c2UgaXQgZmFpbGVkIHRvIGFjY2VzcyB0aGUgY29tcHV0ZXIncyBNSURJIHBvcnRzLiBJZiB5b3UgdmlldyB0aGUgYXBwIGluIGEgYnJvd3NlciwgcGxlYXNlIGNoZWNrIGlmIGl0IHN1cHBvcnRzIHRoZSBXZWIgTUlESSBBUEkuPGJyPkVycm9yIG1lc3NhZ2U6ICR7ZXJyb3JNc2d9YCk7XG4gICAgICAgIH0pO1xufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coJ0RPTUNvbnRlbnRMb2FkZWQnKTtcbiAgICBpbml0KCk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createActions;\n\nvar _convert_xml = __webpack_require__(11);\n\nvar _convert_xml2 = _interopRequireDefault(_convert_xml);\n\nvar _util = __webpack_require__(3);\n\nvar _config = __webpack_require__(8);\n\nvar _midi = __webpack_require__(2);\n\nvar _dialog = __webpack_require__(4);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createActions() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var RESCAN_TYPES = 'RESCAN_TYPES',\n        CREATE_PROJECT = 'CREATE_PROJECT',\n        SET_THEME = 'SET_THEME',\n        CREATE_PROCESSOR = 'CREATE_PROCESSOR',\n        ADD_PROCESSOR = 'ADD_PROCESSOR',\n        DELETE_PROCESSOR = 'DELETE_PROCESSOR',\n        SELECT_PROCESSOR = 'SELECT_PROCESSOR',\n        DRAG_SELECTED_PROCESSOR = 'DRAG_SELECTED_PROCESSOR',\n        DRAG_ALL_PROCESSORS = 'DRAG_ALL_PROCESSORS',\n        CHANGE_PARAMETER = 'CHANGE_PARAMETER',\n        RECREATE_PARAMETER = 'RECREATE_PARAMETER',\n        SET_TEMPO = 'SET_TEMPO',\n        CREATE_MIDI_PORT = 'CREATE_MIDI_PORT',\n        UPDATE_MIDI_PORT = 'UPDATE_MIDI_PORT',\n        TOGGLE_MIDI_PREFERENCE = 'TOGGLE_MIDI_PREFERENCE',\n        TOGGLE_MIDI_LEARN_MODE = 'TOGGLE_MIDI_LEARN_MODE',\n        TOGGLE_MIDI_LEARN_TARGET = 'TOGGLE_MIDI_LEARN_TARGET',\n        SET_TRANSPORT = 'SET_TRANSPORT',\n        RECEIVE_MIDI_CC = 'RECEIVE_MIDI_CC',\n        ASSIGN_EXTERNAL_CONTROL = 'ASSIGN_EXTERNAL_CONTROL',\n        UNASSIGN_EXTERNAL_CONTROL = 'UNASSIGN_EXTERNAL_CONTROL',\n        TOGGLE_PANEL = 'TOGGLE_PANEL',\n        TOGGLE_CONNECT_MODE = 'TOGGLE_CONNECT_MODE',\n        CONNECT_PROCESSORS = 'CONNECT_PROCESSORS',\n        DISCONNECT_PROCESSORS = 'DISCONNECT_PROCESSORS',\n        SET_CAMERA_POSITION = 'SET_CAMERA_POSITION';\n\n    return {\n\n        importProject: function importProject(file) {\n            return function (dispatch, getState, getActions) {\n                var fileReader = new FileReader();\n\n                // closure to capture the file information\n                fileReader.onload = function (f) {\n                    return function (e) {\n                        var isJSON = true,\n                            isXML = false;\n                        try {\n                            var data = JSON.parse(e.target.result);\n                            if (data) {\n                                dispatch(getActions().setProject(data));\n                            }\n                        } catch (errorMessage) {\n                            isJSON = false;\n                        }\n                        if (!isJSON) {\n\n                            // try if it's a legacy xml file\n                            var legacyData = (0, _convert_xml2.default)(e.target.result);\n                            if (legacyData) {\n                                dispatch(getActions().setProject(legacyData));\n                                isXML = true;\n                            }\n                        }\n                        if (!isJSON && !isXML) {\n                            (0, _dialog.showDialog)('Import failed', 'The file to import wasn\\'t recognised as a valid type for this application.', 'Ok');\n                        }\n                    };\n                }(file);\n                fileReader.readAsText(file);\n            };\n        },\n\n        exportProject: function exportProject() {\n            return function (dispatch, getState, getActions) {\n                var jsonString = JSON.stringify(getState()),\n                    blob = new Blob([jsonString], { type: 'application/json' }),\n                    a = document.createElement('a');\n                a.download = 'mpg.json';\n                a.href = URL.createObjectURL(blob);\n                a.click();\n            };\n        },\n\n        newProject: function newProject() {\n            return function (dispatch, getState, getActions) {\n\n                // create an empty initial state\n                dispatch(getActions().createProject());\n\n                // add the existing MIDI ports\n                var existingMIDIPorts = (0, _midi.getAllMIDIPorts)();\n                existingMIDIPorts.forEach(function (port) {\n                    dispatch(getActions().midiAccessChange(port));\n                });\n\n                // recreate the state with the existing ports\n                dispatch(getActions().createProject(getState()));\n            };\n        },\n\n        setProject: function setProject(data) {\n            return function (dispatch, getState, getActions) {\n\n                // create an empty initial state\n                dispatch(getActions().createProject());\n\n                // add the existing MIDI ports\n                var existingMIDIPorts = (0, _midi.getAllMIDIPorts)();\n                existingMIDIPorts.forEach(function (port) {\n                    dispatch(getActions().midiAccessChange(port));\n                });\n\n                // copy the port settings of existing ports\n                var existingPorts = _extends({}, getState().ports);\n\n                // copy the port settings defined in the project\n                var projectPorts = _extends({}, data.ports);\n\n                // clear the project's port settings\n                data.ports.allIds = [];\n                data.ports.byId = {};\n\n                // add all existing ports to the project data\n                existingPorts.allIds.forEach(function (existingPortID) {\n                    data.ports.allIds.push(existingPortID);\n                    data.ports.byId[existingPortID] = existingPorts.byId[existingPortID];\n                });\n\n                // set the existing ports to the project's settings,\n                // and create ports that do not exist\n                projectPorts.allIds.forEach(function (projectPortID) {\n                    var projectPort = projectPorts.byId[projectPortID];\n                    var portExists = false;\n                    existingPorts.allIds.forEach(function (existingPortID) {\n                        if (existingPortID === projectPortID) {\n\n                            portExists = true;\n\n                            // project port's settings exists, update the settings\n                            var existingPort = existingPorts.byId[existingPortID];\n                            existingPort.syncEnabled = projectPort.syncEnabled;\n                            existingPort.remoteEnabled = projectPort.remoteEnabled;\n                            existingPort.networkEnabled = projectPort.networkEnabled;\n                        }\n                    });\n\n                    // port settings object doesn't exist, so create it, but disabled\n                    if (!portExists) {\n                        data.ports.allIds.push(projectPortID);\n                        data.ports.byId[projectPortID] = {\n                            id: projectPortID,\n                            type: projectPort.type,\n                            name: projectPort.name,\n                            connection: 'closed', // closed | open | pending\n                            state: 'disconnected', // disconnected | connected\n                            syncEnabled: projectPort.syncEnabled,\n                            remoteEnabled: projectPort.remoteEnabled,\n                            networkEnabled: projectPort.networkEnabled\n                        };\n                    }\n                });\n\n                console.log('Processor order:');\n                data.processors.allIds.forEach(function (id) {\n                    console.log(':', data.processors.byId[id].params.byId['name'].value);\n                });\n\n                // create the project with the merged ports\n                dispatch(getActions().createProject(data));\n            };\n        },\n\n        CREATE_PROJECT: CREATE_PROJECT,\n        createProject: function createProject(data) {\n            return { type: CREATE_PROJECT, data: data };\n        },\n\n        SET_THEME: SET_THEME,\n        setTheme: function setTheme(themeName) {\n            return { type: SET_THEME, themeName: themeName };\n        },\n\n        CREATE_PROCESSOR: CREATE_PROCESSOR,\n        createProcessor: function createProcessor(data) {\n            return function (dispatch, getState, getActions) {\n                fetch('js/wh/processors/' + data.type + '/config.json').then(function (response) {\n                    return response.json();\n                }, function (error) {\n                    return console.log('An error occurred.', error);\n                }).then(function (json) {\n                    var id = data.id || data.type + '_' + (0, _util.createUUID)();\n                    var fullData = _extends({}, json, data);\n                    fullData.id = id;\n                    fullData.positionX = data.positionX;\n                    fullData.positionY = data.positionY;\n                    fullData.params.byId.name.value = data.name || getProcessorDefaultName(getState().processors);\n                    dispatch(getActions().addProcessor(fullData));\n                    dispatch(getActions().selectProcessor(id));\n                });\n            };\n        },\n\n        ADD_PROCESSOR: ADD_PROCESSOR,\n        addProcessor: function addProcessor(data) {\n            return { type: ADD_PROCESSOR, data: data };\n        },\n\n        DELETE_PROCESSOR: DELETE_PROCESSOR,\n        deleteProcessor: function deleteProcessor(id) {\n            return { type: DELETE_PROCESSOR, id: id };\n        },\n\n        SELECT_PROCESSOR: SELECT_PROCESSOR,\n        selectProcessor: function selectProcessor(id) {\n            return { type: SELECT_PROCESSOR, id: id };\n        },\n\n        DRAG_SELECTED_PROCESSOR: DRAG_SELECTED_PROCESSOR,\n        dragSelectedProcessor: function dragSelectedProcessor(x, y, z) {\n            return { type: DRAG_SELECTED_PROCESSOR, x: x, y: y, z: z };\n        },\n\n        DRAG_ALL_PROCESSORS: DRAG_ALL_PROCESSORS,\n        dragAllProcessors: function dragAllProcessors(x, y) {\n            return { type: DRAG_ALL_PROCESSORS, x: x, y: y };\n        },\n\n        CHANGE_PARAMETER: CHANGE_PARAMETER,\n        changeParameter: function changeParameter(processorID, paramKey, paramValue) {\n            return { type: CHANGE_PARAMETER, processorID: processorID, paramKey: paramKey, paramValue: paramValue };\n        },\n\n        RECREATE_PARAMETER: RECREATE_PARAMETER,\n        recreateParameter: function recreateParameter(processorID, paramKey, paramObj) {\n            return { type: RECREATE_PARAMETER, processorID: processorID, paramKey: paramKey, paramObj: paramObj };\n        },\n\n        SET_TEMPO: SET_TEMPO,\n        setTempo: function setTempo(value) {\n            return { type: SET_TEMPO, value: value };\n        },\n\n        CREATE_MIDI_PORT: CREATE_MIDI_PORT,\n        createMIDIPort: function createMIDIPort(portID, data) {\n            return { type: CREATE_MIDI_PORT, portID: portID, data: data };\n        },\n\n        UPDATE_MIDI_PORT: UPDATE_MIDI_PORT,\n        updateMIDIPort: function updateMIDIPort(portID, data) {\n            return { type: UPDATE_MIDI_PORT, portID: portID, data: data };\n        },\n\n        midiAccessChange: function midiAccessChange(midiPort) {\n            return function (dispatch, getState, getActions) {\n\n                // check if the port already exists\n                var state = getState();\n                var portExists = state.ports.allIds.indexOf(midiPort.id) > -1;\n\n                // create port or update existing\n                if (portExists) {\n\n                    // update existing port\n                    dispatch(getActions().updateMIDIPort(midiPort.id, {\n                        connection: midiPort.connection,\n                        state: midiPort.state\n                    }));\n                } else {\n\n                    // restore settings from config\n                    var config = (0, _config.getConfig)();\n                    var configPort = config.ports && config.ports.byId ? config.ports.byId[midiPort.id] : null;\n\n                    if (!configPort && config.ports && config.ports.allIds) {\n                        for (var i = config.ports.allIds.length - 1; i >= 0; i--) {\n                            var port = config.ports.byId[config.ports.allIds[i]];\n                            if (port.name === midiPort.name && port.type === midiPort.type) {\n                                configPort = port;\n                                break;\n                            }\n                        }\n                    }\n\n                    // create port\n                    dispatch(getActions().createMIDIPort(midiPort.id, {\n                        id: midiPort.id,\n                        type: midiPort.type,\n                        name: midiPort.name,\n                        connection: midiPort.connection,\n                        state: midiPort.state,\n                        networkEnabled: configPort ? configPort.networkEnabled : false,\n                        syncEnabled: configPort ? configPort.syncEnabled : false,\n                        remoteEnabled: configPort ? configPort.remoteEnabled : false\n                    }));\n                }\n\n                // store the changes in configuration\n                (0, _config.setConfig)(getState());\n            };\n        },\n\n        TOGGLE_MIDI_PREFERENCE: TOGGLE_MIDI_PREFERENCE,\n        toggleMIDIPreference: function toggleMIDIPreference(id, preferenceName, isEnabled) {\n            return { type: TOGGLE_MIDI_PREFERENCE, id: id, preferenceName: preferenceName, isEnabled: isEnabled };\n        },\n\n        TOGGLE_MIDI_LEARN_MODE: TOGGLE_MIDI_LEARN_MODE,\n        toggleMIDILearnMode: function toggleMIDILearnMode() {\n            return { type: TOGGLE_MIDI_LEARN_MODE };\n        },\n\n        TOGGLE_MIDI_LEARN_TARGET: TOGGLE_MIDI_LEARN_TARGET,\n        toggleMIDILearnTarget: function toggleMIDILearnTarget(processorID, parameterKey) {\n            return { type: TOGGLE_MIDI_LEARN_TARGET, processorID: processorID, parameterKey: parameterKey };\n        },\n\n        SET_TRANSPORT: SET_TRANSPORT,\n        setTransport: function setTransport(command) {\n            return { type: SET_TRANSPORT, command: command };\n        },\n\n        RECEIVE_MIDI_CC: RECEIVE_MIDI_CC,\n        receiveMIDIControlChange: function receiveMIDIControlChange(data) {\n            return function (dispatch, getState, getActions) {\n                var state = getState();\n                var remoteChannel = (data[0] & 0xf) + 1;\n                var remoteCC = data[1];\n\n                if (state.learnModeActive) {\n                    dispatch(getActions().unassignExternalControl(state.learnTargetProcessorID, state.learnTargetParameterKey));\n                    dispatch(getActions().assignExternalControl('assign_' + (0, _util.createUUID)(), state.learnTargetProcessorID, state.learnTargetParameterKey, remoteChannel, remoteCC));\n                } else {\n                    state.assignments.allIds.forEach(function (assignID) {\n                        var assignment = state.assignments.byId[assignID];\n                        if (assignment.remoteChannel === remoteChannel && assignment.remoteCC === remoteCC) {\n                            var param = state.processors.byId[assignment.processorID].params.byId[assignment.paramKey];\n                            var paramValue = midiControlToParameterValue(param, data[2]);\n                            dispatch(getActions().changeParameter(assignment.processorID, assignment.paramKey, paramValue));\n                        }\n                    });\n                }\n            };\n        },\n\n        ASSIGN_EXTERNAL_CONTROL: ASSIGN_EXTERNAL_CONTROL,\n        assignExternalControl: function assignExternalControl(assignID, processorID, paramKey, remoteChannel, remoteCC) {\n            return { type: ASSIGN_EXTERNAL_CONTROL, assignID: assignID, processorID: processorID, paramKey: paramKey, remoteChannel: remoteChannel, remoteCC: remoteCC };\n        },\n\n        UNASSIGN_EXTERNAL_CONTROL: UNASSIGN_EXTERNAL_CONTROL,\n        unassignExternalControl: function unassignExternalControl(processorID, paramKey) {\n            return { type: UNASSIGN_EXTERNAL_CONTROL, processorID: processorID, paramKey: paramKey };\n        },\n\n        TOGGLE_PANEL: TOGGLE_PANEL,\n        togglePanel: function togglePanel(panelName) {\n            return { type: TOGGLE_PANEL, panelName: panelName };\n        },\n\n        TOGGLE_CONNECT_MODE: TOGGLE_CONNECT_MODE,\n        toggleConnectMode: function toggleConnectMode() {\n            return { type: TOGGLE_CONNECT_MODE };\n        },\n\n        CONNECT_PROCESSORS: CONNECT_PROCESSORS,\n        connectProcessors: function connectProcessors(payload) {\n            return { type: CONNECT_PROCESSORS, payload: payload, id: 'conn_' + (0, _util.createUUID)() };\n        },\n\n        DISCONNECT_PROCESSORS: DISCONNECT_PROCESSORS,\n        disconnectProcessors2: function disconnectProcessors2(id) {\n            return { type: DISCONNECT_PROCESSORS, id: id };\n        },\n\n        disconnectProcessors: function disconnectProcessors(id) {\n            return function (dispatch, getState, getActions) {\n                var state = getState();\n                var connection = state.connections.byId[id];\n                var sourceProcessor = state.processors.byId[connection.sourceProcessorID];\n                var destinationProcessor = state.processors.byId[connection.destinationProcessorID];\n\n                // disconnect the processors\n                dispatch(getActions().disconnectProcessors2(id));\n            };\n        },\n\n        RESCAN_TYPES: RESCAN_TYPES,\n        rescanTypes: function rescanTypes() {\n            return { type: RESCAN_TYPES, types: _config.processorTypes };\n        },\n\n        SET_CAMERA_POSITION: SET_CAMERA_POSITION,\n        setCameraPosition: function setCameraPosition(x, y, z) {\n            var isRelative = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n            return { type: SET_CAMERA_POSITION, x: x, y: y, z: z, isRelative: isRelative };\n        }\n    };\n}\n\n/**\n * Convert a MIDI control value to a parameter value, depending on the parameter type.\n * @param {Object} param Processor parameter.\n * @param {Number} controllerValue MIDI controller value in the range 0 to 127.\n */\nfunction midiControlToParameterValue(param, controllerValue) {\n    var normalizedValue = controllerValue / 127;\n    switch (param.type) {\n        case 'integer':\n            return Math.round(param.min + (param.max - param.min) * normalizedValue);\n        case 'boolean':\n            return normalizedValue > .5;\n        case 'itemized':\n            if (normalizedValue === 1) {\n                return param.model[param.model.length - 1].value;\n            }\n            return param.model[Math.floor(normalizedValue * param.model.length)].value;\n        case 'string':\n        case 'position':\n        default:\n            return param.value;\n    }\n}\n\n/**\n * Provide a default processor name.\n * @param {Object} processor Processor to name.\n * @return {String} Name for a newly created processor.\n */\nfunction getProcessorDefaultName(processors) {\n    var name = void 0,\n        number = void 0,\n        spaceIndex = void 0,\n        highestNumber = 0,\n        staticName = 'Processor';\n    processors.allIds.forEach(function (id) {\n        name = processors.byId[id].params.byId.name.value;\n        if (name && name.indexOf(staticName) == 0) {\n            spaceIndex = name.lastIndexOf(' ');\n            if (spaceIndex != -1) {\n                number = parseInt(name.substr(spaceIndex), 10);\n                if (!isNaN(number)) {\n                    highestNumber = Math.max(highestNumber, number);\n                }\n            }\n        }\n    });\n    return staticName + ' ' + (highestNumber + 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = convertLegacyFile;\n/**\n * \n */\nfunction convertLegacyFile(xmlString) {\n    try {\n        var xmlData = parseXML(xmlString);\n        var data = convertData(xmlData);\n        return data;\n    } catch (errorMessage) {\n        // console.log('NO XML', errorMessage);\n    }\n}\n\n/**\n * \n */\nfunction convertData(src) {\n    var dest = {\n        bpm: src.project.tempo,\n        midi: {\n            inputs: [],\n            outputs: []\n        },\n        network: {\n            processors: []\n        },\n        remote: []\n    };\n    for (var i = 0, n = src.project.patterns.pattern.length; i < n; i++) {\n        var pattern = src.project.patterns.pattern[i];\n        var processor = {\n            type: 'epg',\n            id: pattern.id,\n            steps: {\n                props: {\n                    value: parseInt(pattern.events.steps, 10),\n                    min: 0,\n                    max: 64\n                }\n            },\n            pulses: {\n                props: {\n                    value: parseInt(pattern.events.notes, 10),\n                    min: 0,\n                    max: parseInt(pattern.events.steps, 10)\n                }\n            },\n            rotation: {\n                props: {\n                    value: parseInt(pattern.events.rotation, 10),\n                    min: 0,\n                    max: parseInt(pattern.events.steps, 10) - 1\n                }\n            },\n            channel_out: {\n                props: {\n                    value: parseInt(pattern.midi_out.channel, 10) + 1,\n                    min: 1,\n                    max: 16\n                }\n            },\n            pitch_out: {\n                props: {\n                    value: parseInt(pattern.midi_out.pitch, 10),\n                    min: 0,\n                    max: 127\n                }\n            },\n            velocity_out: {\n                props: {\n                    value: parseInt(pattern.midi_out.velocity, 10),\n                    min: 0,\n                    max: 127\n                }\n            },\n            rate: {\n                props: {\n                    value: 1 / parseInt(pattern.settings.quantization, 10) * 4\n                }\n            },\n            is_triplets: {\n                props: {\n                    value: false\n                }\n            },\n            note_length: {\n                props: {\n                    // Old noteLength is in pulses where PPQN is 24, \n                    // so for example 6 is a sixteenth note length,\n                    // 96 is one 4/4 measure.\n                    value: convertNoteLength(parseInt(pattern.settings.notelength, 10))\n                }\n            },\n            is_mute: {\n                props: {\n                    value: pattern.settings.mute == 'true'\n                }\n            },\n            name: {\n                props: {\n                    value: pattern.name['#text']\n                }\n            },\n            position2d: {\n                props: {\n                    value: {\n                        x: parseInt(pattern.location.x, 10) + 100,\n                        y: parseInt(pattern.location.y, 10) + 100\n                    }\n                }\n            },\n            destinations: []\n        };\n        dest.network.processors.push(processor);\n    };\n    return dest;\n}\n\n/**\n * Old noteLength is in pulses where PPQN is 24, \n * so for example 6 is a sixteenth note length,\n * 96 is one 4/4 measure.\n * @param  {Number} oldLength Note length in pulses.\n * @return {Number} New note length in fraction of a beat.\n */\nfunction convertNoteLength(oldLength) {\n    var newNoteLength = void 0;\n    if (oldLength == 96) {\n        newNoteLength = 4;\n    } else if (oldLength >= 48) {\n        newNoteLength = 2;\n    } else if (oldLength >= 24) {\n        newNoteLength = 1;\n    } else if (oldLength >= 12) {\n        newNoteLength = 0.5;\n    } else if (oldLength >= 6) {\n        newNoteLength = 0.25;\n    } else {\n        newNoteLength = 0.125;\n    }\n    return newNoteLength;\n}\n\n/**\n * Parse XML string to Javascript object.\n * @see https://stackoverflow.com/questions/4200913/xml-to-javascript-object\n * @param  {String} xmlString XML data as string.\n * @param  {[type]} arrayTags [description]\n * @return {Object} Javascript object created from XML.\n */\nfunction parseXML(xml, arrayTags) {\n    var dom = null;\n    if (window.DOMParser) {\n        dom = new DOMParser().parseFromString(xml, \"text/xml\");\n    } else if (window.ActiveXObject) {\n        dom = new ActiveXObject('Microsoft.XMLDOM');\n        dom.async = false;\n        if (!dom.loadXML(xml)) {\n            throw dom.parseError.reason + \" \" + dom.parseError.srcText;\n        }\n    } else {\n        throw \"cannot parse xml string!\";\n    }\n\n    function isArray(o) {\n        return Object.prototype.toString.apply(o) === '[object Array]';\n    }\n\n    function parseNode(xmlNode, result) {\n        if (xmlNode.nodeName == \"#text\" || xmlNode.nodeName == '#cdata-section') {\n            var v = xmlNode.nodeValue;\n            if (v.trim()) {\n                result['#text'] = v;\n            }\n            return;\n        }\n\n        var jsonNode = {};\n        var existing = result[xmlNode.nodeName];\n        if (existing) {\n            if (!isArray(existing)) {\n                result[xmlNode.nodeName] = [existing, jsonNode];\n            } else {\n                result[xmlNode.nodeName].push(jsonNode);\n            }\n        } else {\n            if (arrayTags && arrayTags.indexOf(xmlNode.nodeName) != -1) {\n                result[xmlNode.nodeName] = [jsonNode];\n            } else {\n                result[xmlNode.nodeName] = jsonNode;\n            }\n        }\n\n        if (xmlNode.attributes) {\n            var length = xmlNode.attributes.length;\n            for (var i = 0; i < length; i++) {\n                var attribute = xmlNode.attributes[i];\n                jsonNode[attribute.nodeName] = attribute.nodeValue;\n            }\n        }\n\n        var length = xmlNode.childNodes.length;\n        for (var i = 0; i < length; i++) {\n            parseNode(xmlNode.childNodes[i], jsonNode);\n        }\n    }\n\n    var result = {};\n    if (dom.childNodes.length) {\n        parseNode(dom.childNodes[0], result);\n    }\n\n    return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createReducers;\n\nvar _network_ordering = __webpack_require__(13);\n\nvar _network_ordering2 = _interopRequireDefault(_network_ordering);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction createReducers() {\n\n    var initialState = {\n        processors: {\n            byId: {},\n            allIds: []\n        },\n        connections: {\n            byId: {},\n            allIds: []\n        },\n        ports: {\n            byId: {},\n            allIds: []\n        },\n        types: {\n            byId: {},\n            allIds: []\n        },\n        assignments: {\n            byId: {},\n            allIds: []\n        },\n        camera: {\n            x: 0,\n            y: 0,\n            z: 0\n        },\n        bpm: 120,\n        selectedID: null,\n        theme: 'light', // 'light|dark' \n        transport: 'stop', // 'play|pause|stop'\n        connectModeActive: false,\n        learnModeActive: false,\n        learnTargetProcessorID: null,\n        learnTargetParameterKey: null,\n        showHelpPanel: false,\n        showLibraryPanel: true,\n        showPreferencesPanel: false,\n        showSettingsPanel: false\n    },\n        reduce = function reduce() {\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var newState = void 0;\n        switch (action.type) {\n\n            case actions.CREATE_PROJECT:\n                return _extends({}, initialState, action.data || {}, {\n                    transport: initialState.transport });\n\n            case actions.SET_THEME:\n                return _extends({}, state, { theme: state.theme === 'light' ? 'dark' : 'light' });\n\n            case actions.ADD_PROCESSOR:\n                newState = _extends({}, state, {\n                    showSettingsPanel: true,\n                    processors: {\n                        byId: _extends({}, state.processors.byId, _defineProperty({}, action.data.id, action.data)),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // array index depends on processor type\n                var numInputProcessors = newState.processors.allIds.filter(function (id) {\n                    newState.processors.byId[id].type === 'input';\n                }).length;\n                switch (action.data.type) {\n                    case 'input':\n                        newState.processors.allIds.unshift(action.data.id);\n                        numInputProcessors++;\n                        break;\n                    case 'output':\n                        newState.processors.allIds.push(action.data.id);\n                        break;\n                    default:\n                        newState.processors.allIds.splice(numInputProcessors, 0, action.data.id);\n                }\n\n                return newState;\n\n            case actions.DELETE_PROCESSOR:\n                var index = state.processors.allIds.indexOf(action.id);\n\n                // delete the processor\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: state.processors.allIds.filter(function (id) {\n                            return id !== action.id;\n                        })\n                    } });\n                delete newState.processors.byId[action.id];\n\n                // delete all connections to and from the deleted processor\n                newState.connections = {\n                    byId: _extends({}, state.connections.byId),\n                    allIds: [].concat(_toConsumableArray(state.connections.allIds))\n                };\n                for (var i = newState.connections.allIds.length - 1, n = 0; i >= n; i--) {\n                    var connectionID = newState.connections.allIds[i];\n                    var connection = newState.connections.byId[connectionID];\n                    if (connection.sourceProcessorID === action.id || connection.destinationProcessorID === action.id) {\n                        newState.connections.allIds.splice(i, 1);\n                        delete newState.connections.byId[connectionID];\n                    }\n                }\n\n                // select the next processor, if any, or a previous one\n                var newIndex = void 0;\n                if (newState.selectedID === action.id && newState.processors.allIds.length) {\n                    if (newState.processors.allIds[index]) {\n                        newIndex = index;\n                    } else if (index > 0) {\n                        newIndex = index - 1;\n                    } else {\n                        newIndex = 0;\n                    }\n                    newState.selectedID = newState.processors.allIds[newIndex];\n                }\n\n                // reorder the processors\n                (0, _network_ordering2.default)(newState);\n\n                return newState;\n\n            case actions.SELECT_PROCESSOR:\n                return _extends({}, state, { selectedID: action.id });\n\n            case actions.DRAG_SELECTED_PROCESSOR:\n                return _extends({}, state, {\n                    processors: {\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                        byId: Object.values(state.processors.byId).reduce(function (accumulator, processor) {\n                            if (processor.id === state.selectedID) {\n                                accumulator[processor.id] = _extends({}, processor, { positionX: action.x, positionY: action.y, positionZ: action.z });\n                            } else {\n                                accumulator[processor.id] = _extends({}, processor);\n                            }\n                            return accumulator;\n                        }, {})\n                    } });\n\n            case actions.DRAG_ALL_PROCESSORS:\n                return _extends({}, state, {\n                    processors: {\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                        byId: Object.values(state.processors.byId).reduce(function (accumulator, processor) {\n                            accumulator[processor.id] = _extends({}, processor, {\n                                positionX: processor.positionX + action.x,\n                                positionY: processor.positionY + action.y });\n                            return accumulator;\n                        }, {})\n                    } });\n\n            case actions.CHANGE_PARAMETER:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                var param = newState.processors.byId[action.processorID].params.byId[action.paramKey];\n                switch (param.type) {\n                    case 'integer':\n                        param.value = Math.max(param.min, Math.min(action.paramValue, param.max));\n                        break;\n                    case 'boolean':\n                        param.value = !!action.paramValue;\n                        break;\n                    case 'itemized':\n                        param.value = action.paramValue;\n                        break;\n                    case 'string':\n                        param.value = action.paramValue;\n                        break;\n                }\n                return newState;\n\n            case actions.RECREATE_PARAMETER:\n                // clone state\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // clone parameter, overwrite with new settings.\n                newState.processors.byId[action.processorID].params.byId[action.paramKey] = _extends({}, newState.processors.byId[action.processorID].params.byId[action.paramKey], action.paramObj);\n\n                return newState;\n\n            case actions.SET_TEMPO:\n                return _extends({}, state, { bpm: action.value });\n\n            case actions.CREATE_MIDI_PORT:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds), [action.portID]),\n                        byId: _extends({}, state.ports.byId, _defineProperty({}, action.portID, action.data))\n                    }\n                });\n\n            case actions.UPDATE_MIDI_PORT:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds)),\n                        byId: Object.values(state.ports.byId).reduce(function (returnObject, port) {\n                            if (port.id === action.portID) {\n                                returnObject[port.id] = _extends({}, port, action.data);\n                            } else {\n                                returnObject[port.id] = _extends({}, port);\n                            }\n                            return returnObject;\n                        }, {})\n                    }\n                });\n\n            case actions.TOGGLE_MIDI_PREFERENCE:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds)),\n                        byId: Object.values(state.ports.allIds).reduce(function (accumulator, portID) {\n                            if (portID === action.id) {\n                                accumulator[portID] = _extends({}, state.ports.byId[portID], _defineProperty({}, action.preferenceName, typeof action.isEnabled === 'boolean' ? isEnabled : !state.ports.byId[action.id][action.preferenceName]));\n                            } else {\n                                accumulator[portID] = _extends({}, state.ports.byId[portID]);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n            case actions.TOGGLE_MIDI_LEARN_MODE:\n                return _extends({}, state, { learnModeActive: !state.learnModeActive });\n\n            case actions.TOGGLE_MIDI_LEARN_TARGET:\n                return _extends({}, state, {\n                    learnTargetProcessorID: action.processorID,\n                    learnTargetParameterKey: action.parameterKey\n                });\n\n            case actions.SET_TRANSPORT:\n                var value = action.command;\n                if (action.command === 'toggle') {\n                    value = state.transport === 'play' ? 'pause' : 'play';\n                }\n                return Object.assign({}, state, {\n                    transport: value\n                });\n\n            case actions.ASSIGN_EXTERNAL_CONTROL:\n                return _extends({}, state, {\n                    assignments: {\n                        allIds: [].concat(_toConsumableArray(state.assignments.allIds), [action.assignID]),\n                        byId: _extends({}, state.assignments.byId, _defineProperty({}, action.assignID, {\n                            remoteChannel: action.remoteChannel,\n                            remoteCC: action.remoteCC,\n                            processorID: action.processorID,\n                            paramKey: action.paramKey\n                        }))\n                    }\n                });\n\n            case actions.UNASSIGN_EXTERNAL_CONTROL:\n                return _extends({}, state, {\n                    assignments: {\n                        allIds: state.assignments.allIds.reduce(function (accumulator, assignID) {\n                            var assignment = state.assignments.byId[assignID];\n                            if (assignment.processorID !== action.processorID || assignment.paramKey !== action.paramKey) {\n                                accumulator.push(assignID);\n                            }\n                            return accumulator;\n                        }, []),\n                        byId: state.assignments.allIds.reduce(function (accumulator, assignID) {\n                            var assignment = state.assignments.byId[assignID];\n                            if (assignment.processorID !== action.processorID || assignment.paramKey !== action.paramKey) {\n                                accumulator[assignID] = _extends({}, assignment);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n            case actions.TOGGLE_PANEL:\n                return _extends({}, state, {\n                    showHelpPanel: action.panelName === 'help' ? !state.showHelpPanel : state.showHelpPanel,\n                    showPreferencesPanel: action.panelName === 'preferences' ? !state.showPreferencesPanel : state.showPreferencesPanel,\n                    showSettingsPanel: action.panelName === 'settings' ? !state.showSettingsPanel : state.showSettingsPanel,\n                    showLibraryPanel: action.panelName === 'library' ? !state.showLibraryPanel : state.showLibraryPanel\n                });\n\n            case actions.TOGGLE_CONNECT_MODE:\n                return _extends({}, state, {\n                    connectModeActive: !state.connectModeActive\n                });\n\n            case actions.CONNECT_PROCESSORS:\n\n                // abort if the connection already exists\n                for (var _i = 0, _n = state.connections.allIds.length; _i < _n; _i++) {\n                    var _connection = state.connections.byId[state.connections.allIds[_i]];\n                    if (_connection.sourceProcessorID === action.payload.sourceProcessorID && _connection.sourceConnectorID === action.payload.sourceConnectorID && _connection.destinationProcessorID === action.payload.destinationProcessorID && _connection.destinationConnectorID === action.payload.destinationConnectorID) {\n                        return state;\n                    }\n                }\n\n                // add new connection\n                newState = _extends({}, state, {\n                    connections: {\n                        byId: _extends({}, state.connections.byId, _defineProperty({}, action.id, action.payload)),\n                        allIds: [].concat(_toConsumableArray(state.connections.allIds), [action.id])\n                    },\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    }\n                });\n\n                // reorder the processors\n                (0, _network_ordering2.default)(newState);\n                return newState;\n\n            case actions.DISCONNECT_PROCESSORS:\n                newState = _extends({}, state, {\n                    connections: {\n                        allIds: state.connections.allIds.reduce(function (accumulator, connectionID) {\n                            if (connectionID !== action.id) {\n                                accumulator.push(connectionID);\n                            }\n                            return accumulator;\n                        }, []),\n                        byId: Object.values(state.connections.allIds).reduce(function (accumulator, connectionID) {\n                            if (connectionID !== action.id) {\n                                accumulator[connectionID] = _extends({}, state.connections.byId[connectionID]);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n                // reorder the processors\n                (0, _network_ordering2.default)(newState);\n                return newState;\n\n            case actions.RESCAN_TYPES:\n                return _extends({}, state, {\n                    types: {\n                        allIds: Object.keys(action.types),\n                        byId: action.types\n                    }\n                });\n\n            case actions.SET_CAMERA_POSITION:\n                var x = action.x,\n                    y = action.y,\n                    z = action.z,\n                    isRelative = action.isRelative;\n\n                return _extends({}, state, {\n                    camera: {\n                        x: isRelative ? state.camera.x + x : x,\n                        y: isRelative ? state.camera.y + y : y,\n                        z: isRelative ? state.camera.z + z : z\n                    }\n                });\n\n            default:\n                return state;\n        }\n    };\n\n    return {\n        reduce: reduce\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = orderProcessors;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * \n * @param {Object} state Application state.\n */\nfunction orderProcessors(state) {\n  var ordered = [];\n  var nodes = createNodes(state);\n  nodes.forEach(function (node) {\n    if (node.sourceIds.length === 0) {\n      followDownStream(node, nodes, ordered);\n    }\n  });\n  console.log('Processor order:');\n  ordered.forEach(function (id) {\n    console.log(':', state.processors.byId[id].params.byId['name'].value);\n  });\n  state.processors.allIds = [].concat(ordered);\n}\n\n/**\n * Recursively follow the processor nodes by destination.\n * @param {Object} node Processor node.\n * @param {Array} nodes All processor nodes, unordered.\n * @param {Array} ordered Ordered processor IDs.\n */\nfunction followDownStream(node, nodes, ordered) {\n  ordered.push(node.id);\n  node.destinationIds.forEach(function (destinationId) {\n    var nextNode = nodes.find(function (node) {\n      return node.id === destinationId;\n    });\n    if (nextNode.sourceIds.length === 1) {\n      followDownStream(nextNode, nodes, ordered);\n    } else if (nextNode.sourceIds.length > 1) {\n      var isAllSourcesOrdered = nextNode.sourceIds.every(function (sourceId) {\n        return ordered.indexOf(sourceId) > -1;\n      });\n      if (isAllSourcesOrdered) {\n        followDownStream(nextNode, nodes, ordered);\n      }\n    }\n  });\n}\n\n/**\n * Create node objects from state processor and connection data.\n * @param {Object} state Application state.\n */\nfunction createNodes(state) {\n  return state.processors.allIds.map(function (id) {\n    return {\n      id: id,\n      sourceIds: getSourceIds(id, state.connections),\n      destinationIds: getDestinationIds(id, state.connections)\n    };\n  });\n}\n\n/**\n * Find all processors connected to the processor's input.\n * @param {String} processorId Processor ID.\n * @param {Object} connections State connections data.\n * @returns {Array} Processor IDs.\n */\nfunction getSourceIds(processorId, connections) {\n  return connections.allIds.reduce(function (sourceIds, connectionId) {\n    var connection = connections.byId[connectionId];\n    if (connection.destinationProcessorID === processorId) {\n      return [].concat(_toConsumableArray(sourceIds), [connection.sourceProcessorID]);\n    };\n    return sourceIds;\n  }, []);\n}\n\n/**\n * Find all processors connected to the processor's output.\n * @param {String} processorId Processor ID.\n * @param {Object} connections State connections data.\n * @returns {Array} Processor IDs.\n */\nfunction getDestinationIds(processorId, connections) {\n  return connections.allIds.reduce(function (destinationIds, connectionId) {\n    var connection = connections.byId[connectionId];\n    if (connection.sourceProcessorID === processorId) {\n      return [].concat(_toConsumableArray(destinationIds), [connection.destinationProcessorID]);\n    };\n    return destinationIds;\n  }, []);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9uZXR3b3JrX29yZGVyaW5nLmpzP2UxYTYiXSwibmFtZXMiOlsib3JkZXJQcm9jZXNzb3JzIiwic3RhdGUiLCJvcmRlcmVkIiwibm9kZXMiLCJjcmVhdGVOb2RlcyIsImZvckVhY2giLCJub2RlIiwic291cmNlSWRzIiwibGVuZ3RoIiwiZm9sbG93RG93blN0cmVhbSIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzb3JzIiwiYnlJZCIsImlkIiwicGFyYW1zIiwidmFsdWUiLCJhbGxJZHMiLCJwdXNoIiwiZGVzdGluYXRpb25JZHMiLCJuZXh0Tm9kZSIsImZpbmQiLCJkZXN0aW5hdGlvbklkIiwiaXNBbGxTb3VyY2VzT3JkZXJlZCIsImV2ZXJ5IiwiaW5kZXhPZiIsInNvdXJjZUlkIiwibWFwIiwiZ2V0U291cmNlSWRzIiwiY29ubmVjdGlvbnMiLCJnZXREZXN0aW5hdGlvbklkcyIsInByb2Nlc3NvcklkIiwicmVkdWNlIiwiY29ubmVjdGlvbklkIiwiY29ubmVjdGlvbiIsImRlc3RpbmF0aW9uUHJvY2Vzc29ySUQiLCJzb3VyY2VQcm9jZXNzb3JJRCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBS3dCQSxlOzs7O0FBSnhCOzs7O0FBSWUsU0FBU0EsZUFBVCxDQUF5QkMsS0FBekIsRUFBZ0M7QUFDN0MsTUFBTUMsVUFBVSxFQUFoQjtBQUNBLE1BQU1DLFFBQVFDLFlBQVlILEtBQVosQ0FBZDtBQUNBRSxRQUFNRSxPQUFOLENBQWMsZ0JBQVE7QUFDcEIsUUFBSUMsS0FBS0MsU0FBTCxDQUFlQyxNQUFmLEtBQTBCLENBQTlCLEVBQWlDO0FBQy9CQyx1QkFBaUJILElBQWpCLEVBQXVCSCxLQUF2QixFQUE4QkQsT0FBOUI7QUFDRDtBQUNGLEdBSkQ7QUFLQVEsVUFBUUMsR0FBUixDQUFZLGtCQUFaO0FBQ0FULFVBQVFHLE9BQVIsQ0FBZ0IsY0FBTTtBQUNwQkssWUFBUUMsR0FBUixDQUFZLEdBQVosRUFBaUJWLE1BQU1XLFVBQU4sQ0FBaUJDLElBQWpCLENBQXNCQyxFQUF0QixFQUEwQkMsTUFBMUIsQ0FBaUNGLElBQWpDLENBQXNDLE1BQXRDLEVBQThDRyxLQUEvRDtBQUNELEdBRkQ7QUFHQWYsUUFBTVcsVUFBTixDQUFpQkssTUFBakIsYUFBK0JmLE9BQS9CO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1BLFNBQVNPLGdCQUFULENBQTBCSCxJQUExQixFQUFnQ0gsS0FBaEMsRUFBdUNELE9BQXZDLEVBQWdEO0FBQzlDQSxVQUFRZ0IsSUFBUixDQUFhWixLQUFLUSxFQUFsQjtBQUNBUixPQUFLYSxjQUFMLENBQW9CZCxPQUFwQixDQUE0Qix5QkFBaUI7QUFDM0MsUUFBTWUsV0FBV2pCLE1BQU1rQixJQUFOLENBQVc7QUFBQSxhQUFRZixLQUFLUSxFQUFMLEtBQVlRLGFBQXBCO0FBQUEsS0FBWCxDQUFqQjtBQUNBLFFBQUlGLFNBQVNiLFNBQVQsQ0FBbUJDLE1BQW5CLEtBQThCLENBQWxDLEVBQXFDO0FBQ25DQyx1QkFBaUJXLFFBQWpCLEVBQTJCakIsS0FBM0IsRUFBa0NELE9BQWxDO0FBQ0QsS0FGRCxNQUVPLElBQUlrQixTQUFTYixTQUFULENBQW1CQyxNQUFuQixHQUE0QixDQUFoQyxFQUFtQztBQUN4QyxVQUFNZSxzQkFBc0JILFNBQVNiLFNBQVQsQ0FBbUJpQixLQUFuQixDQUF5QixvQkFBWTtBQUMvRCxlQUFPdEIsUUFBUXVCLE9BQVIsQ0FBZ0JDLFFBQWhCLElBQTRCLENBQUMsQ0FBcEM7QUFDRCxPQUYyQixDQUE1QjtBQUdBLFVBQUlILG1CQUFKLEVBQXlCO0FBQ3ZCZCx5QkFBaUJXLFFBQWpCLEVBQTJCakIsS0FBM0IsRUFBa0NELE9BQWxDO0FBQ0Q7QUFDRjtBQUNGLEdBWkQ7QUFhRDs7QUFFRDs7OztBQUlBLFNBQVNFLFdBQVQsQ0FBcUJILEtBQXJCLEVBQTRCO0FBQzFCLFNBQU9BLE1BQU1XLFVBQU4sQ0FBaUJLLE1BQWpCLENBQXdCVSxHQUF4QixDQUE0QixjQUFNO0FBQ3ZDLFdBQU87QUFDTGIsWUFESztBQUVMUCxpQkFBV3FCLGFBQWFkLEVBQWIsRUFBaUJiLE1BQU00QixXQUF2QixDQUZOO0FBR0xWLHNCQUFnQlcsa0JBQWtCaEIsRUFBbEIsRUFBc0JiLE1BQU00QixXQUE1QjtBQUhYLEtBQVA7QUFLRCxHQU5NLENBQVA7QUFPRDs7QUFFRDs7Ozs7O0FBTUEsU0FBU0QsWUFBVCxDQUFzQkcsV0FBdEIsRUFBbUNGLFdBQW5DLEVBQWdEO0FBQzlDLFNBQU9BLFlBQVlaLE1BQVosQ0FBbUJlLE1BQW5CLENBQTBCLFVBQUN6QixTQUFELEVBQVkwQixZQUFaLEVBQTZCO0FBQzVELFFBQU1DLGFBQWFMLFlBQVloQixJQUFaLENBQWlCb0IsWUFBakIsQ0FBbkI7QUFDQSxRQUFJQyxXQUFXQyxzQkFBWCxLQUFzQ0osV0FBMUMsRUFBdUQ7QUFDckQsMENBQVd4QixTQUFYLElBQXNCMkIsV0FBV0UsaUJBQWpDO0FBQ0Q7QUFDRCxXQUFPN0IsU0FBUDtBQUNELEdBTk0sRUFNSixFQU5JLENBQVA7QUFPRDs7QUFFRDs7Ozs7O0FBTUEsU0FBU3VCLGlCQUFULENBQTJCQyxXQUEzQixFQUF3Q0YsV0FBeEMsRUFBcUQ7QUFDbkQsU0FBT0EsWUFBWVosTUFBWixDQUFtQmUsTUFBbkIsQ0FBMEIsVUFBQ2IsY0FBRCxFQUFpQmMsWUFBakIsRUFBa0M7QUFDakUsUUFBTUMsYUFBYUwsWUFBWWhCLElBQVosQ0FBaUJvQixZQUFqQixDQUFuQjtBQUNBLFFBQUlDLFdBQVdFLGlCQUFYLEtBQWlDTCxXQUFyQyxFQUFrRDtBQUNoRCwwQ0FBV1osY0FBWCxJQUEyQmUsV0FBV0Msc0JBQXRDO0FBQ0Q7QUFDRCxXQUFPaEIsY0FBUDtBQUNELEdBTk0sRUFNSixFQU5JLENBQVA7QUFPRCIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSBBcHBsaWNhdGlvbiBzdGF0ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJQcm9jZXNzb3JzKHN0YXRlKSB7XG4gIGNvbnN0IG9yZGVyZWQgPSBbXTtcbiAgY29uc3Qgbm9kZXMgPSBjcmVhdGVOb2RlcyhzdGF0ZSk7XG4gIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUuc291cmNlSWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZm9sbG93RG93blN0cmVhbShub2RlLCBub2Rlcywgb3JkZXJlZCk7XG4gICAgfVxuICB9KTtcbiAgY29uc29sZS5sb2coJ1Byb2Nlc3NvciBvcmRlcjonKTtcbiAgb3JkZXJlZC5mb3JFYWNoKGlkID0+IHtcbiAgICBjb25zb2xlLmxvZygnOicsIHN0YXRlLnByb2Nlc3NvcnMuYnlJZFtpZF0ucGFyYW1zLmJ5SWRbJ25hbWUnXS52YWx1ZSk7XG4gIH0pO1xuICBzdGF0ZS5wcm9jZXNzb3JzLmFsbElkcyA9IFsgLi4ub3JkZXJlZCBdO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGZvbGxvdyB0aGUgcHJvY2Vzc29yIG5vZGVzIGJ5IGRlc3RpbmF0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG5vZGUgUHJvY2Vzc29yIG5vZGUuXG4gKiBAcGFyYW0ge0FycmF5fSBub2RlcyBBbGwgcHJvY2Vzc29yIG5vZGVzLCB1bm9yZGVyZWQuXG4gKiBAcGFyYW0ge0FycmF5fSBvcmRlcmVkIE9yZGVyZWQgcHJvY2Vzc29yIElEcy5cbiAqL1xuZnVuY3Rpb24gZm9sbG93RG93blN0cmVhbShub2RlLCBub2Rlcywgb3JkZXJlZCkge1xuICBvcmRlcmVkLnB1c2gobm9kZS5pZCk7XG4gIG5vZGUuZGVzdGluYXRpb25JZHMuZm9yRWFjaChkZXN0aW5hdGlvbklkID0+IHtcbiAgICBjb25zdCBuZXh0Tm9kZSA9IG5vZGVzLmZpbmQobm9kZSA9PiBub2RlLmlkID09PSBkZXN0aW5hdGlvbklkKTtcbiAgICBpZiAobmV4dE5vZGUuc291cmNlSWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZm9sbG93RG93blN0cmVhbShuZXh0Tm9kZSwgbm9kZXMsIG9yZGVyZWQpO1xuICAgIH0gZWxzZSBpZiAobmV4dE5vZGUuc291cmNlSWRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IGlzQWxsU291cmNlc09yZGVyZWQgPSBuZXh0Tm9kZS5zb3VyY2VJZHMuZXZlcnkoc291cmNlSWQgPT4ge1xuICAgICAgICByZXR1cm4gb3JkZXJlZC5pbmRleE9mKHNvdXJjZUlkKSA+IC0xO1xuICAgICAgfSk7XG4gICAgICBpZiAoaXNBbGxTb3VyY2VzT3JkZXJlZCkge1xuICAgICAgICBmb2xsb3dEb3duU3RyZWFtKG5leHROb2RlLCBub2Rlcywgb3JkZXJlZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgbm9kZSBvYmplY3RzIGZyb20gc3RhdGUgcHJvY2Vzc29yIGFuZCBjb25uZWN0aW9uIGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgQXBwbGljYXRpb24gc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5wcm9jZXNzb3JzLmFsbElkcy5tYXAoaWQgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZCxcbiAgICAgIHNvdXJjZUlkczogZ2V0U291cmNlSWRzKGlkLCBzdGF0ZS5jb25uZWN0aW9ucyksXG4gICAgICBkZXN0aW5hdGlvbklkczogZ2V0RGVzdGluYXRpb25JZHMoaWQsIHN0YXRlLmNvbm5lY3Rpb25zKSxcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBGaW5kIGFsbCBwcm9jZXNzb3JzIGNvbm5lY3RlZCB0byB0aGUgcHJvY2Vzc29yJ3MgaW5wdXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvY2Vzc29ySWQgUHJvY2Vzc29yIElELlxuICogQHBhcmFtIHtPYmplY3R9IGNvbm5lY3Rpb25zIFN0YXRlIGNvbm5lY3Rpb25zIGRhdGEuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFByb2Nlc3NvciBJRHMuXG4gKi9cbmZ1bmN0aW9uIGdldFNvdXJjZUlkcyhwcm9jZXNzb3JJZCwgY29ubmVjdGlvbnMpIHtcbiAgcmV0dXJuIGNvbm5lY3Rpb25zLmFsbElkcy5yZWR1Y2UoKHNvdXJjZUlkcywgY29ubmVjdGlvbklkKSA9PiB7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IGNvbm5lY3Rpb25zLmJ5SWRbY29ubmVjdGlvbklkXTtcbiAgICBpZiAoY29ubmVjdGlvbi5kZXN0aW5hdGlvblByb2Nlc3NvcklEID09PSBwcm9jZXNzb3JJZCkge1xuICAgICAgcmV0dXJuIFsuLi5zb3VyY2VJZHMsIGNvbm5lY3Rpb24uc291cmNlUHJvY2Vzc29ySURdO1xuICAgIH07XG4gICAgcmV0dXJuIHNvdXJjZUlkcztcbiAgfSwgW10pO1xufVxuXG4vKipcbiAqIEZpbmQgYWxsIHByb2Nlc3NvcnMgY29ubmVjdGVkIHRvIHRoZSBwcm9jZXNzb3IncyBvdXRwdXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvY2Vzc29ySWQgUHJvY2Vzc29yIElELlxuICogQHBhcmFtIHtPYmplY3R9IGNvbm5lY3Rpb25zIFN0YXRlIGNvbm5lY3Rpb25zIGRhdGEuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFByb2Nlc3NvciBJRHMuXG4gKi9cbmZ1bmN0aW9uIGdldERlc3RpbmF0aW9uSWRzKHByb2Nlc3NvcklkLCBjb25uZWN0aW9ucykge1xuICByZXR1cm4gY29ubmVjdGlvbnMuYWxsSWRzLnJlZHVjZSgoZGVzdGluYXRpb25JZHMsIGNvbm5lY3Rpb25JZCkgPT4ge1xuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBjb25uZWN0aW9ucy5ieUlkW2Nvbm5lY3Rpb25JZF07XG4gICAgaWYgKGNvbm5lY3Rpb24uc291cmNlUHJvY2Vzc29ySUQgPT09IHByb2Nlc3NvcklkKSB7XG4gICAgICByZXR1cm4gWy4uLmRlc3RpbmF0aW9uSWRzLCBjb25uZWN0aW9uLmRlc3RpbmF0aW9uUHJvY2Vzc29ySURdO1xuICAgIH07XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uSWRzO1xuICB9LCBbXSk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL21pZGkvbmV0d29ya19vcmRlcmluZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStore;\n\nvar _selectors = __webpack_require__(1);\n\nfunction createStore() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var STATE_CHANGE = 'STATE_CHANGE';\n\n    var that = {},\n        actions = specs.actions,\n        reducers = specs.reducers,\n        currentState = void 0,\n        init = function init() {\n        currentState = reducers.reduce();\n    },\n        dispatch = function dispatch(action) {\n        // thunk or not\n        if (typeof action === 'function') {\n            action(dispatch, getState, getActions);\n        } else {\n            currentState = reducers.reduce(currentState, action, actions);\n            (0, _selectors.memoize)(currentState, action, actions);\n            document.dispatchEvent(new CustomEvent(STATE_CHANGE, { detail: {\n                    state: currentState,\n                    action: action,\n                    actions: actions\n                } }));\n        }\n    },\n        getActions = function getActions() {\n        return actions;\n    },\n        getState = function getState() {\n        return currentState;\n    },\n        persist = function persist() {\n        var name = 'persist';\n        window.addEventListener('beforeunload', function (e) {\n            localStorage.setItem(name, JSON.stringify(currentState));\n        });\n        var data = localStorage.getItem(name);\n        if (data) {\n            dispatch(getActions().setProject(JSON.parse(data)));\n        }\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    that.STATE_CHANGE = STATE_CHANGE;\n    that.dispatch = dispatch;\n    that.getActions = getActions;\n    that.getState = getState;\n    that.persist = persist;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanM/ZDhjZSJdLCJuYW1lcyI6WyJjcmVhdGVTdG9yZSIsInNwZWNzIiwibXkiLCJTVEFURV9DSEFOR0UiLCJ0aGF0IiwiYWN0aW9ucyIsInJlZHVjZXJzIiwiY3VycmVudFN0YXRlIiwiaW5pdCIsInJlZHVjZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwiZ2V0U3RhdGUiLCJnZXRBY3Rpb25zIiwiZG9jdW1lbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJzdGF0ZSIsInBlcnNpc3QiLCJuYW1lIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImdldEl0ZW0iLCJzZXRQcm9qZWN0IiwicGFyc2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUV3QkEsVzs7QUFGeEI7O0FBRWUsU0FBU0EsV0FBVCxHQUEwQztBQUFBLFFBQXJCQyxLQUFxQix1RUFBYixFQUFhO0FBQUEsUUFBVEMsRUFBUyx1RUFBSixFQUFJOztBQUNyRCxRQUFNQyxlQUFlLGNBQXJCOztBQUVBLFFBQUlDLE9BQU8sRUFBWDtBQUFBLFFBQ0lDLFVBQVVKLE1BQU1JLE9BRHBCO0FBQUEsUUFFSUMsV0FBV0wsTUFBTUssUUFGckI7QUFBQSxRQUdJQyxxQkFISjtBQUFBLFFBS0lDLE9BQU8sU0FBUEEsSUFBTyxHQUFNO0FBQ1RELHVCQUFlRCxTQUFTRyxNQUFULEVBQWY7QUFDSCxLQVBMO0FBQUEsUUFTSUMsV0FBVyxTQUFYQSxRQUFXLENBQUNDLE1BQUQsRUFBWTtBQUNuQjtBQUNBLFlBQUksT0FBT0EsTUFBUCxLQUFrQixVQUF0QixFQUFrQztBQUM5QkEsbUJBQU9ELFFBQVAsRUFBaUJFLFFBQWpCLEVBQTJCQyxVQUEzQjtBQUNILFNBRkQsTUFFTztBQUNITiwyQkFBZUQsU0FBU0csTUFBVCxDQUFnQkYsWUFBaEIsRUFBOEJJLE1BQTlCLEVBQXNDTixPQUF0QyxDQUFmO0FBQ0Esb0NBQVFFLFlBQVIsRUFBc0JJLE1BQXRCLEVBQThCTixPQUE5QjtBQUNBUyxxQkFBU0MsYUFBVCxDQUF1QixJQUFJQyxXQUFKLENBQWdCYixZQUFoQixFQUE4QixFQUFFYyxRQUFRO0FBQzNEQywyQkFBT1gsWUFEb0Q7QUFFM0RJLDRCQUFRQSxNQUZtRDtBQUczRE4sNkJBQVNBO0FBSGtELGlCQUFWLEVBQTlCLENBQXZCO0FBS0g7QUFDSixLQXRCTDtBQUFBLFFBd0JJUSxhQUFhLFNBQWJBLFVBQWEsR0FBTTtBQUNmLGVBQU9SLE9BQVA7QUFDSCxLQTFCTDtBQUFBLFFBNEJJTyxXQUFXLFNBQVhBLFFBQVcsR0FBTTtBQUNiLGVBQU9MLFlBQVA7QUFDSCxLQTlCTDtBQUFBLFFBZ0NJWSxVQUFVLFNBQVZBLE9BQVUsR0FBTTtBQUNaLFlBQU1DLE9BQU8sU0FBYjtBQUNBQyxlQUFPQyxnQkFBUCxDQUF3QixjQUF4QixFQUF3QyxhQUFLO0FBQ3pDQyx5QkFBYUMsT0FBYixDQUFxQkosSUFBckIsRUFBMkJLLEtBQUtDLFNBQUwsQ0FBZW5CLFlBQWYsQ0FBM0I7QUFDSCxTQUZEO0FBR0EsWUFBSW9CLE9BQU9KLGFBQWFLLE9BQWIsQ0FBcUJSLElBQXJCLENBQVg7QUFDQSxZQUFJTyxJQUFKLEVBQVU7QUFDTmpCLHFCQUFTRyxhQUFhZ0IsVUFBYixDQUF3QkosS0FBS0ssS0FBTCxDQUFXSCxJQUFYLENBQXhCLENBQVQ7QUFDSDtBQUNKLEtBekNMOztBQTJDQXZCLFdBQU9ILE1BQU1HLElBQU4sSUFBYyxFQUFyQjs7QUFFQUk7O0FBRUFKLFNBQUtELFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0FDLFNBQUtNLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0FOLFNBQUtTLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0FULFNBQUtRLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0FSLFNBQUtlLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFdBQU9mLElBQVA7QUFDSCIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lbW9pemUgfSBmcm9tICcuL3NlbGVjdG9ycy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHNwZWNzID0ge30sIG15ID0ge30pIHtcbiAgICBjb25zdCBTVEFURV9DSEFOR0UgPSAnU1RBVEVfQ0hBTkdFJztcblxuICAgIGxldCB0aGF0ID0ge30sXG4gICAgICAgIGFjdGlvbnMgPSBzcGVjcy5hY3Rpb25zLFxuICAgICAgICByZWR1Y2VycyA9IHNwZWNzLnJlZHVjZXJzLFxuICAgICAgICBjdXJyZW50U3RhdGUsXG5cbiAgICAgICAgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHJlZHVjZXJzLnJlZHVjZSgpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZGlzcGF0Y2ggPSAoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAvLyB0aHVuayBvciBub3RcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZ2V0QWN0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHJlZHVjZXJzLnJlZHVjZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgbWVtb2l6ZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoU1RBVEVfQ0hBTkdFLCB7IGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogY3VycmVudFN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogYWN0aW9uc1xuICAgICAgICAgICAgICAgIH19KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgZ2V0QWN0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgcGVyc2lzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAncGVyc2lzdCc7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkoY3VycmVudFN0YXRlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5zZXRQcm9qZWN0KEpTT04ucGFyc2UoZGF0YSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgdGhhdC5TVEFURV9DSEFOR0UgPSBTVEFURV9DSEFOR0U7XG4gICAgdGhhdC5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICAgIHRoYXQuZ2V0QWN0aW9ucyA9IGdldEFjdGlvbnM7XG4gICAgdGhhdC5nZXRTdGF0ZSA9IGdldFN0YXRlO1xuICAgIHRoYXQucGVyc2lzdCA9IHBlcnNpc3Q7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createAppView;\n\nvar _settings = __webpack_require__(16);\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _windowresize = __webpack_require__(5);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * Main application view.\n */\nfunction createAppView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl = document.querySelector('#app'),\n        panelsEl = document.querySelector('.panels'),\n        libraryEl = document.querySelector('.library'),\n        helpEl = document.querySelector('.help'),\n        prefsEl = document.querySelector('.prefs'),\n        editEl = document.querySelector('.edit'),\n        editContentEl = document.querySelector('.edit .panel__content'),\n        remoteEl = document.querySelector('.remote'),\n        settingsViews = [],\n        panelHeaderHeight,\n        resetKeyCombo = [],\n        controls = {\n        new: {\n            type: 'checkbox',\n            input: document.querySelector('#file-new')\n        },\n        import: {\n            type: 'checkbox',\n            input: document.querySelector('#file-import')\n        },\n        export: {\n            type: 'checkbox',\n            input: document.querySelector('#file-export')\n        },\n        play: {\n            type: 'checkbox',\n            input: document.getElementById('play-check')\n        },\n        bpm: {\n            type: 'number',\n            input: document.getElementById('bpm-number')\n        },\n        library: {\n            type: 'checkbox',\n            input: document.getElementById('library-check')\n        },\n        remote: {\n            type: 'checkbox',\n            input: document.getElementById('learn-check')\n        },\n        prefs: {\n            type: 'checkbox',\n            input: document.getElementById('prefs-check')\n        },\n        edit: {\n            type: 'checkbox',\n            input: document.getElementById('edit-check')\n        },\n        connections: {\n            type: 'checkbox',\n            input: document.getElementById('connections-check')\n        },\n        help: {\n            type: 'checkbox',\n            input: document.getElementById('help-check')\n        }\n    },\n        init = function init() {\n        controls.new.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().newProject());\n        });\n        controls.import.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().importProject(e.target.files[0]));\n        });\n        controls.export.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().exportProject());\n        });\n        controls.play.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTransport('toggle'));\n        });\n        controls.bpm.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTempo(controls.bpm.input.value));\n        });\n        controls.remote.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleMIDILearnMode());\n        });\n        controls.library.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('library'));\n        });\n        controls.prefs.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('preferences'));\n        });\n        controls.edit.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('settings'));\n        });\n        controls.connections.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleConnectMode());\n        });\n        controls.help.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('help'));\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 32:\n                    // don't toggle play while typing space key in a text field.\n                    if (!(e.target.tagName.toLowerCase() == 'input' && e.target.getAttribute('type') == 'text')) {\n                        store.dispatch(store.getActions().setTransport('toggle'));\n                    }\n                    break;\n\n                case 83:\n                    // s\n                    console.log('state', store.getState());\n                    break;\n            }\n            resetKeyCombo = [];\n        });\n\n        document.addEventListener('keydown', function (e) {\n            switch (e.keyCode) {\n                case 82:\n                case 83:\n                case 84:\n                    // clear all data on key combination 'rst' (reset)\n                    resetKeyCombo.push(e.keyCode);\n                    if (resetKeyCombo.indexOf(82) > -1 && resetKeyCombo.indexOf(83) > -1 && resetKeyCombo.indexOf(84) > -1) {\n                        localStorage.clear();\n                        store.dispatch(store.getActions().newProject());\n                    }\n                    break;\n            }\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    setProject(e.detail.state);\n                    showPanels(e.detail.state);\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createSettingsViews(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteSettingsView(e.detail.action.id);\n                    showPanels(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.SET_TRANSPORT:\n                    controls.play.input.checked = e.detail.state.transport === 'play';\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                    selectSettingsView(e.detail.action.id);\n                // fall through intentional\n                case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n                case e.detail.actions.TOGGLE_PANEL:\n                    showPanels(e.detail.state);\n                    break;\n            }\n        });\n\n        // get panel header height from CSS.\n        var style = getComputedStyle(document.body);\n        panelHeaderHeight = parseInt(style.getPropertyValue('--header-height'), 10);\n\n        my.addWindowResizeCallback(renderLayout);\n        renderLayout();\n    },\n\n\n    /**\n     * Create settings controls view for a processor.\n     * @param  {Object} processor MIDI processor to control with the settings.\n     */\n    createSettingsViews = function createSettingsViews(state) {\n        state.processors.allIds.forEach(function (id, i) {\n            var processorData = state.processors.byId[id];\n            var exists = false;\n            settingsViews.forEach(function (settingsView) {\n                if (settingsView.getID() === id) {\n                    exists = true;\n                }\n            });\n            if (!exists) {\n                fetch('js/wh/processors/' + processorData.type + '/settings.html').then(function (response) {\n                    return response.text();\n                }, function (error) {\n                    return console.log('An error occurred.', error);\n                }).then(function (html) {\n                    settingsViews.splice(i, 0, (0, _settings2.default)({\n                        data: processorData,\n                        store: store,\n                        parentEl: editContentEl,\n                        template: html,\n                        isSelected: store.getState().selectedID === processorData.id\n                    }));\n                });\n            }\n        });\n    },\n\n\n    /**\n     * Delete settings controls view for a processor.\n     * @param  {String} id MIDI processor ID.\n     */\n    deleteSettingsView = function deleteSettingsView(id) {\n        settingsViews = settingsViews.reduce(function (accumulator, view) {\n            if (view.getID() === id) {\n                view.terminate();\n                return accumulator;\n            }\n            return [].concat(_toConsumableArray(accumulator), [view]);\n        }, []);\n    },\n\n\n    /**\n     * Show the settings controls view for a processor.\n     * @param  {String} id MIDI processor ID.\n     */\n    selectSettingsView = function selectSettingsView(id) {\n        settingsViews.forEach(function (view) {\n            return view.select(id);\n        });\n    },\n        setProject = function setProject(state) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            deleteSettingsView(settingsViews[n].getID());\n        }\n        createSettingsViews(state);\n    },\n        renderLayout = function renderLayout() {\n        var leftColumn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var rightColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (leftColumn) {\n            renderColumnLayout(prefsEl, remoteEl, false);\n        }\n        if (rightColumn) {\n            renderColumnLayout(helpEl, editEl, true);\n        }\n    },\n        renderColumnLayout = function renderColumnLayout(topEl, btmEl, isRightColumn) {\n        var totalHeight = panelsEl.clientHeight,\n            columnWidth = document.querySelector('.panels__right').clientWidth,\n            topWidth = topEl.clientWidth,\n            btmWidth = btmEl.clientWidth,\n            isTopVisible = topEl.dataset.show == 'true',\n            isBtmVisible = btmEl.dataset.show == 'true',\n            topViewportEl = topEl.querySelector('.panel__viewport'),\n            btmViewportEl = btmEl.querySelector('.panel__viewport');\n\n        var topHeight = void 0,\n            btmHeight = void 0,\n            topContentHeight = void 0,\n            btmContentHeight = void 0;\n\n        // reset heights before measuring them\n        topViewportEl.style.height = 'auto';\n        btmViewportEl.style.height = 'auto';\n\n        topHeight = topEl.clientHeight, btmHeight = btmEl.clientHeight, topContentHeight = topEl.querySelector('.panel__content').clientHeight, btmContentHeight = btmEl.querySelector('.panel__content').clientHeight;\n\n        if (isRightColumn && topWidth + btmWidth < columnWidth) {\n            if (topContentHeight + panelHeaderHeight > totalHeight) {\n                topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                topViewportEl.style.height = 'auto';\n            }\n            if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                btmViewportEl.style.height = 'auto';\n            }\n        } else {\n            if (isTopVisible && isBtmVisible) {\n                var combinedHeight = topContentHeight + btmContentHeight + panelHeaderHeight * 2;\n                if (combinedHeight > totalHeight) {\n                    if (topContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = prefsEl.topContentHeight + 'px';\n                        btmViewportEl.style.height = totalHeight - topContentHeight - panelHeaderHeight * 2 + 'px';\n                    } else if (btmContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = totalHeight - btmContentHeight - panelHeaderHeight * 2 + 'px';\n                        btmViewportEl.style.height = remoteEl.topContentHeight + 'px';\n                    } else {\n                        topViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                        btmViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                    }\n                } else {\n                    topViewportEl.style.height = 'auto';\n                    btmViewportEl.style.height = 'auto';\n                }\n            } else if (isTopVisible) {\n                if (topContentHeight + panelHeaderHeight > totalHeight) {\n                    topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    topViewportEl.style.height = 'auto';\n                }\n            } else if (isBtmVisible) {\n                if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                    btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    btmViewportEl.style.height = 'auto';\n                }\n            }\n        }\n    },\n        showPanels = function showPanels(state) {\n        helpEl.dataset.show = state.showHelpPanel;\n        controls.help.input.checked = state.showHelpPanel;\n\n        prefsEl.dataset.show = state.showPreferencesPanel;\n        controls.prefs.input.checked = state.showPreferencesPanel;\n\n        remoteEl.dataset.show = state.learnModeActive;\n        controls.remote.input.checked = state.learnModeActive;\n\n        editEl.dataset.show = state.showSettingsPanel;\n        controls.edit.input.checked = state.showSettingsPanel;\n\n        libraryEl.dataset.show = state.showLibraryPanel;\n        controls.library.input.checked = state.showLibraryPanel;\n\n        controls.connections.input.checked = state.connectModeActive;\n\n        renderLayout();\n    };\n\n    my = my || {};\n\n    that = (0, _windowresize2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createSettingsPanel;\n\nvar _boolean = __webpack_require__(17);\n\nvar _boolean2 = _interopRequireDefault(_boolean);\n\nvar _integer = __webpack_require__(19);\n\nvar _integer2 = _interopRequireDefault(_integer);\n\nvar _itemized = __webpack_require__(20);\n\nvar _itemized2 = _interopRequireDefault(_itemized);\n\nvar _string = __webpack_require__(21);\n\nvar _string2 = _interopRequireDefault(_string);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor settings view.\n */\nfunction createSettingsPanel(specs, my) {\n  var that = void 0,\n      store = specs.store,\n      data = specs.data,\n      parentEl = specs.parentEl,\n      settingViews = [],\n      el = void 0,\n      initialize = function initialize() {\n    // const htmlString = require(`html-loader!../processors/${data.type}/settings.html`);\n    el = document.createElement('div');\n    el.innerHTML = specs.template;\n\n    // loop through all processor parameters and add setting view if required\n    data.params.allIds.forEach(function (id) {\n      // only create setting if there's a container el for it in the settings panel\n      var settingContainerEl = el.querySelector('.' + id);\n      if (settingContainerEl) {\n        var paramData = data.params.byId[id],\n            settingView = void 0,\n            settingViewSpecs = {\n          store: store,\n          key: id,\n          data: paramData,\n          parentEl: settingContainerEl,\n          processorID: data.id\n        };\n\n        // create the setting view based on the parameter type\n        switch (paramData.type) {\n          case 'integer':\n            settingView = (0, _integer2.default)(settingViewSpecs);\n            break;\n          case 'boolean':\n            settingView = (0, _boolean2.default)(settingViewSpecs);\n            break;\n          case 'itemized':\n            settingView = (0, _itemized2.default)(settingViewSpecs);\n            break;\n          case 'string':\n            settingView = (0, _string2.default)(settingViewSpecs);\n            break;\n        }\n      }\n    });\n\n    // default delete button of the settings panel\n    if (el && el.querySelector('.settings__delete')) {\n      el.querySelector('.settings__delete').addEventListener('click', function (e) {\n        e.preventDefault();\n        store.dispatch(store.getActions().deleteProcessor(data.id));\n      });\n    }\n\n    show(specs.isSelected);\n  },\n\n\n  /**\n   * Called before this view is deleted.\n   */\n  terminate = function terminate() {\n    if (el && parentEl) {\n      show(false);\n    }\n  },\n\n\n  /**\n   * Show settings if the processor is selected, else remove.\n   * @param {Boolean} isSelected True if selected.\n   */\n  show = function show(isSelected) {\n    if (isSelected) {\n      parentEl.appendChild(el);\n    } else if (parentEl.contains(el)) {\n      parentEl.removeChild(el);\n    }\n  },\n\n\n  /**\n   * Show or hide settings depending on ID.\n   * @param {String} id ID of the selected processor.\n   */\n  select = function select(id) {\n    show(id === data.id);\n  },\n      getID = function getID() {\n    return data.id;\n  };\n\n  that = data.that || {};\n\n  initialize();\n\n  that.terminate = terminate;\n  that.select = select;\n  that.getID = getID;\n  return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5ncy5qcz8wMjgxIl0sIm5hbWVzIjpbImNyZWF0ZVNldHRpbmdzUGFuZWwiLCJzcGVjcyIsIm15IiwidGhhdCIsInN0b3JlIiwiZGF0YSIsInBhcmVudEVsIiwic2V0dGluZ1ZpZXdzIiwiZWwiLCJpbml0aWFsaXplIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwidGVtcGxhdGUiLCJwYXJhbXMiLCJhbGxJZHMiLCJmb3JFYWNoIiwic2V0dGluZ0NvbnRhaW5lckVsIiwicXVlcnlTZWxlY3RvciIsImlkIiwicGFyYW1EYXRhIiwiYnlJZCIsInNldHRpbmdWaWV3Iiwic2V0dGluZ1ZpZXdTcGVjcyIsImtleSIsInByb2Nlc3NvcklEIiwidHlwZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwicHJldmVudERlZmF1bHQiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJkZWxldGVQcm9jZXNzb3IiLCJzaG93IiwiaXNTZWxlY3RlZCIsInRlcm1pbmF0ZSIsImFwcGVuZENoaWxkIiwiY29udGFpbnMiLCJyZW1vdmVDaGlsZCIsInNlbGVjdCIsImdldElEIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFRd0JBLG1COztBQVJ4Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLG1CQUFULENBQTZCQyxLQUE3QixFQUFvQ0MsRUFBcEMsRUFBd0M7QUFDckQsTUFBSUMsYUFBSjtBQUFBLE1BQ0VDLFFBQVFILE1BQU1HLEtBRGhCO0FBQUEsTUFFRUMsT0FBT0osTUFBTUksSUFGZjtBQUFBLE1BR0VDLFdBQVdMLE1BQU1LLFFBSG5CO0FBQUEsTUFJRUMsZUFBZSxFQUpqQjtBQUFBLE1BS0VDLFdBTEY7QUFBQSxNQU9FQyxhQUFhLFNBQWJBLFVBQWEsR0FBVztBQUN0QjtBQUNBRCxTQUFLRSxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQUw7QUFDQUgsT0FBR0ksU0FBSCxHQUFlWCxNQUFNWSxRQUFyQjs7QUFFQTtBQUNBUixTQUFLUyxNQUFMLENBQVlDLE1BQVosQ0FBbUJDLE9BQW5CLENBQTJCLGNBQU07QUFDL0I7QUFDQSxVQUFJQyxxQkFBcUJULEdBQUdVLGFBQUgsQ0FBaUIsTUFBTUMsRUFBdkIsQ0FBekI7QUFDQSxVQUFJRixrQkFBSixFQUF3QjtBQUN0QixZQUFJRyxZQUFZZixLQUFLUyxNQUFMLENBQVlPLElBQVosQ0FBaUJGLEVBQWpCLENBQWhCO0FBQUEsWUFDRUcsb0JBREY7QUFBQSxZQUVFQyxtQkFBbUI7QUFDakJuQixpQkFBT0EsS0FEVTtBQUVqQm9CLGVBQUtMLEVBRlk7QUFHakJkLGdCQUFNZSxTQUhXO0FBSWpCZCxvQkFBVVcsa0JBSk87QUFLakJRLHVCQUFhcEIsS0FBS2M7QUFMRCxTQUZyQjs7QUFVQTtBQUNBLGdCQUFRQyxVQUFVTSxJQUFsQjtBQUNFLGVBQUssU0FBTDtBQUNFSiwwQkFBYyx1QkFBeUJDLGdCQUF6QixDQUFkO0FBQ0E7QUFDRixlQUFLLFNBQUw7QUFDRUQsMEJBQWMsdUJBQXlCQyxnQkFBekIsQ0FBZDtBQUNBO0FBQ0YsZUFBSyxVQUFMO0FBQ0VELDBCQUFjLHdCQUEwQkMsZ0JBQTFCLENBQWQ7QUFDQTtBQUNGLGVBQUssUUFBTDtBQUNFRCwwQkFBYyxzQkFBd0JDLGdCQUF4QixDQUFkO0FBQ0E7QUFaSjtBQWNEO0FBQ0YsS0E5QkQ7O0FBZ0NBO0FBQ0EsUUFBSWYsTUFBTUEsR0FBR1UsYUFBSCxDQUFpQixtQkFBakIsQ0FBVixFQUFpRDtBQUMvQ1YsU0FBR1UsYUFBSCxDQUFpQixtQkFBakIsRUFBc0NTLGdCQUF0QyxDQUF1RCxPQUF2RCxFQUFnRSxVQUFTQyxDQUFULEVBQVk7QUFDMUVBLFVBQUVDLGNBQUY7QUFDQXpCLGNBQU0wQixRQUFOLENBQWUxQixNQUFNMkIsVUFBTixHQUFtQkMsZUFBbkIsQ0FBbUMzQixLQUFLYyxFQUF4QyxDQUFmO0FBQ0QsT0FIRDtBQUlEOztBQUVEYyxTQUFLaEMsTUFBTWlDLFVBQVg7QUFDRCxHQXRESDs7O0FBd0RFOzs7QUFHQUMsY0FBWSxTQUFaQSxTQUFZLEdBQVc7QUFDckIsUUFBSTNCLE1BQU1GLFFBQVYsRUFBb0I7QUFDbEIyQixXQUFLLEtBQUw7QUFDRDtBQUNGLEdBL0RIOzs7QUFpRUU7Ozs7QUFJQUEsU0FBTyxTQUFQQSxJQUFPLENBQVNDLFVBQVQsRUFBc0I7QUFDM0IsUUFBSUEsVUFBSixFQUFnQjtBQUNkNUIsZUFBUzhCLFdBQVQsQ0FBcUI1QixFQUFyQjtBQUNELEtBRkQsTUFFTyxJQUFJRixTQUFTK0IsUUFBVCxDQUFrQjdCLEVBQWxCLENBQUosRUFBMkI7QUFDaENGLGVBQVNnQyxXQUFULENBQXFCOUIsRUFBckI7QUFDRDtBQUNGLEdBM0VIOzs7QUE2RUU7Ozs7QUFJQStCLFdBQVMsU0FBVEEsTUFBUyxDQUFTcEIsRUFBVCxFQUFhO0FBQ3BCYyxTQUFLZCxPQUFPZCxLQUFLYyxFQUFqQjtBQUNELEdBbkZIO0FBQUEsTUFxRkVxQixRQUFRLFNBQVJBLEtBQVEsR0FBVztBQUNqQixXQUFPbkMsS0FBS2MsRUFBWjtBQUNELEdBdkZIOztBQXlGQWhCLFNBQU9FLEtBQUtGLElBQUwsSUFBYSxFQUFwQjs7QUFFQU07O0FBRUFOLE9BQUtnQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUNBaEMsT0FBS29DLE1BQUwsR0FBY0EsTUFBZDtBQUNBcEMsT0FBS3FDLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQU9yQyxJQUFQO0FBQ0QiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQm9vbGVhblNldHRpbmdWaWV3IGZyb20gJy4vc2V0dGluZy9ib29sZWFuLmpzJztcbmltcG9ydCBjcmVhdGVJbnRlZ2VyU2V0dGluZ1ZpZXcgZnJvbSAnLi9zZXR0aW5nL2ludGVnZXIuanMnO1xuaW1wb3J0IGNyZWF0ZUl0ZW1pemVkU2V0dGluZ1ZpZXcgZnJvbSAnLi9zZXR0aW5nL2l0ZW1pemVkLmpzJztcbmltcG9ydCBjcmVhdGVTdHJpbmdTZXR0aW5nVmlldyBmcm9tICcuL3NldHRpbmcvc3RyaW5nLmpzJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZ3Mgdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2V0dGluZ3NQYW5lbChzcGVjcywgbXkpIHtcbiAgbGV0IHRoYXQsXG4gICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICBkYXRhID0gc3BlY3MuZGF0YSxcbiAgICBwYXJlbnRFbCA9IHNwZWNzLnBhcmVudEVsLFxuICAgIHNldHRpbmdWaWV3cyA9IFtdLFxuICAgIGVsLFxuICAgICAgXG4gICAgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gY29uc3QgaHRtbFN0cmluZyA9IHJlcXVpcmUoYGh0bWwtbG9hZGVyIS4uL3Byb2Nlc3NvcnMvJHtkYXRhLnR5cGV9L3NldHRpbmdzLmh0bWxgKTtcbiAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBlbC5pbm5lckhUTUwgPSBzcGVjcy50ZW1wbGF0ZTtcbiAgICAgIFxuICAgICAgLy8gbG9vcCB0aHJvdWdoIGFsbCBwcm9jZXNzb3IgcGFyYW1ldGVycyBhbmQgYWRkIHNldHRpbmcgdmlldyBpZiByZXF1aXJlZFxuICAgICAgZGF0YS5wYXJhbXMuYWxsSWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAvLyBvbmx5IGNyZWF0ZSBzZXR0aW5nIGlmIHRoZXJlJ3MgYSBjb250YWluZXIgZWwgZm9yIGl0IGluIHRoZSBzZXR0aW5ncyBwYW5lbFxuICAgICAgICB2YXIgc2V0dGluZ0NvbnRhaW5lckVsID0gZWwucXVlcnlTZWxlY3RvcignLicgKyBpZCk7XG4gICAgICAgIGlmIChzZXR0aW5nQ29udGFpbmVyRWwpIHtcbiAgICAgICAgICBsZXQgcGFyYW1EYXRhID0gZGF0YS5wYXJhbXMuYnlJZFtpZF0sXG4gICAgICAgICAgICBzZXR0aW5nVmlldyxcbiAgICAgICAgICAgIHNldHRpbmdWaWV3U3BlY3MgPSB7XG4gICAgICAgICAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgICAgICAgICAga2V5OiBpZCxcbiAgICAgICAgICAgICAgZGF0YTogcGFyYW1EYXRhLFxuICAgICAgICAgICAgICBwYXJlbnRFbDogc2V0dGluZ0NvbnRhaW5lckVsLFxuICAgICAgICAgICAgICBwcm9jZXNzb3JJRDogZGF0YS5pZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgc2V0dGluZyB2aWV3IGJhc2VkIG9uIHRoZSBwYXJhbWV0ZXIgdHlwZVxuICAgICAgICAgIHN3aXRjaCAocGFyYW1EYXRhLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgICAgICAgICBzZXR0aW5nVmlldyA9IGNyZWF0ZUludGVnZXJTZXR0aW5nVmlldyhzZXR0aW5nVmlld1NwZWNzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgICAgc2V0dGluZ1ZpZXcgPSBjcmVhdGVCb29sZWFuU2V0dGluZ1ZpZXcoc2V0dGluZ1ZpZXdTcGVjcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXRlbWl6ZWQnOlxuICAgICAgICAgICAgICBzZXR0aW5nVmlldyA9IGNyZWF0ZUl0ZW1pemVkU2V0dGluZ1ZpZXcoc2V0dGluZ1ZpZXdTcGVjcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgc2V0dGluZ1ZpZXcgPSBjcmVhdGVTdHJpbmdTZXR0aW5nVmlldyhzZXR0aW5nVmlld1NwZWNzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBkZWZhdWx0IGRlbGV0ZSBidXR0b24gb2YgdGhlIHNldHRpbmdzIHBhbmVsXG4gICAgICBpZiAoZWwgJiYgZWwucXVlcnlTZWxlY3RvcignLnNldHRpbmdzX19kZWxldGUnKSkge1xuICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ3NfX2RlbGV0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzdG9yZS5nZXRBY3Rpb25zKCkuZGVsZXRlUHJvY2Vzc29yKGRhdGEuaWQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHNob3coc3BlY3MuaXNTZWxlY3RlZCk7XG4gICAgfSxcbiAgICBcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYmVmb3JlIHRoaXMgdmlldyBpcyBkZWxldGVkLlxuICAgICAqL1xuICAgIHRlcm1pbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGVsICYmIHBhcmVudEVsKSB7XG4gICAgICAgIHNob3coZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgICAgIFxuICAgIC8qKlxuICAgICAqIFNob3cgc2V0dGluZ3MgaWYgdGhlIHByb2Nlc3NvciBpcyBzZWxlY3RlZCwgZWxzZSByZW1vdmUuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc1NlbGVjdGVkIFRydWUgaWYgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgc2hvdyA9IGZ1bmN0aW9uKGlzU2VsZWN0ZWQpICB7XG4gICAgICBpZiAoaXNTZWxlY3RlZCkge1xuICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICB9IGVsc2UgaWYgKHBhcmVudEVsLmNvbnRhaW5zKGVsKSkge1xuICAgICAgICBwYXJlbnRFbC5yZW1vdmVDaGlsZChlbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgXG4gICAgLyoqXG4gICAgICogU2hvdyBvciBoaWRlIHNldHRpbmdzIGRlcGVuZGluZyBvbiBJRC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgSUQgb2YgdGhlIHNlbGVjdGVkIHByb2Nlc3Nvci5cbiAgICAgKi9cbiAgICBzZWxlY3QgPSBmdW5jdGlvbihpZCkge1xuICAgICAgc2hvdyhpZCA9PT0gZGF0YS5pZCk7XG4gICAgfSxcbiAgICAgICAgXG4gICAgZ2V0SUQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkYXRhLmlkO1xuICAgIH07XG4gICAgXG4gIHRoYXQgPSBkYXRhLnRoYXQgfHwge307XG4gIFxuICBpbml0aWFsaXplKCk7XG4gIFxuICB0aGF0LnRlcm1pbmF0ZSA9IHRlcm1pbmF0ZTtcbiAgdGhhdC5zZWxlY3QgPSBzZWxlY3Q7XG4gIHRoYXQuZ2V0SUQgPSBnZXRJRDtcbiAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5ncy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBooleanSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\nfunction createBooleanSettingView(specs, my) {\n    var that,\n        checkEl,\n        init = function init() {\n        var id = getTemporaryInputAndLabelId();\n\n        checkEl = my.el.querySelector('.setting__check');\n        checkEl.value = my.data.default;\n        checkEl.setAttribute('id', id);\n        checkEl.addEventListener('change', onChange);\n\n        var labelEl = my.el.querySelector('.toggle__label');\n        labelEl.setAttribute('for', id);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {},\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.checked));\n    },\n        setValue = function setValue(value) {\n        checkEl.checked = value;\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jvb2xlYW4uanM/ZTAyMiJdLCJuYW1lcyI6WyJjcmVhdGVCb29sZWFuU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImNoZWNrRWwiLCJpbml0IiwiaWQiLCJnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQiLCJlbCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZSIsImRhdGEiLCJkZWZhdWx0Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwibGFiZWxFbCIsImluaXREYXRhIiwic2V0VmFsdWUiLCJNYXRoIiwicmFuZG9tIiwicGVyZm9ybWFuY2UiLCJub3ciLCJlIiwic3RvcmUiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjaGFuZ2VQYXJhbWV0ZXIiLCJwcm9jZXNzb3JJRCIsImtleSIsInRhcmdldCIsImNoZWNrZWQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU13QkEsd0I7O0FBTnhCOzs7Ozs7QUFFQTs7OztBQUllLFNBQVNBLHdCQUFULENBQWtDQyxLQUFsQyxFQUF5Q0MsRUFBekMsRUFBNkM7QUFDeEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLE9BREo7QUFBQSxRQUdJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkLFlBQUlDLEtBQUtDLDZCQUFUOztBQUVBSCxrQkFBVUYsR0FBR00sRUFBSCxDQUFNQyxhQUFOLENBQW9CLGlCQUFwQixDQUFWO0FBQ0FMLGdCQUFRTSxLQUFSLEdBQWdCUixHQUFHUyxJQUFILENBQVFDLE9BQXhCO0FBQ0FSLGdCQUFRUyxZQUFSLENBQXFCLElBQXJCLEVBQTJCUCxFQUEzQjtBQUNBRixnQkFBUVUsZ0JBQVIsQ0FBeUIsUUFBekIsRUFBbUNDLFFBQW5DOztBQUVBLFlBQUlDLFVBQVVkLEdBQUdNLEVBQUgsQ0FBTUMsYUFBTixDQUFvQixnQkFBcEIsQ0FBZDtBQUNBTyxnQkFBUUgsWUFBUixDQUFxQixLQUFyQixFQUE0QlAsRUFBNUI7O0FBRUFXO0FBQ0FDLGlCQUFTaEIsR0FBR1MsSUFBSCxDQUFRRCxLQUFqQjtBQUNILEtBaEJMO0FBQUEsUUFrQklPLFdBQVcsU0FBWEEsUUFBVyxHQUFXLENBRXJCLENBcEJMOzs7QUFzQkk7Ozs7QUFJQVYsa0NBQThCLFNBQTlCQSwyQkFBOEIsR0FBVztBQUNyQyxlQUFPLE9BQU9ZLEtBQUtDLE1BQUwsRUFBUCxHQUF1QkMsWUFBWUMsR0FBWixFQUE5QjtBQUNILEtBNUJMO0FBQUEsUUE4QklQLFdBQVcsU0FBWEEsUUFBVyxDQUFTUSxDQUFULEVBQVk7QUFDbkJyQixXQUFHc0IsS0FBSCxDQUFTQyxRQUFULENBQWtCdkIsR0FBR3NCLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZHpCLEdBQUcwQixXQURXLEVBRWQxQixHQUFHMkIsR0FGVyxFQUdkTixFQUFFTyxNQUFGLENBQVNDLE9BSEssQ0FBbEI7QUFJSCxLQW5DTDtBQUFBLFFBcUNJYixXQUFXLFNBQVhBLFFBQVcsQ0FBU1IsS0FBVCxFQUFnQjtBQUN2Qk4sZ0JBQVEyQixPQUFSLEdBQWtCckIsS0FBbEI7QUFDSCxLQXZDTDs7QUF5Q0FSLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHZ0IsUUFBSCxHQUFjQSxRQUFkOztBQUVBZixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFHOztBQUVBLFdBQU9GLElBQVA7QUFDSCIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlLmpzJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIEJvb2xlYW4gdHlwZSBwYXJhbWV0ZXIsXG4gKiB3aGljaCBoYXMgYSBjaGVja2JveCBpbnB1dC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm9vbGVhblNldHRpbmdWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBjaGVja0VsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGlkID0gZ2V0VGVtcG9yYXJ5SW5wdXRBbmRMYWJlbElkKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNoZWNrRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fY2hlY2snKTtcbiAgICAgICAgICAgIGNoZWNrRWwudmFsdWUgPSBteS5kYXRhLmRlZmF1bHQ7XG4gICAgICAgICAgICBjaGVja0VsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgICAgICBjaGVja0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGxhYmVsRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcudG9nZ2xlX19sYWJlbCcpO1xuICAgICAgICAgICAgbGFiZWxFbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHF1aWNrIElEIHRvIHRpZSBsYWJlbCB0byBpbnB1dCBlbGVtZW50cy5cbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgSUQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnaWQnICsgTWF0aC5yYW5kb20oKSArIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNoZWNrZWQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGNoZWNrRWwuY2hlY2tlZCA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuc2V0VmFsdWUgPSBzZXRWYWx1ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVNldHRpbmdWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvc2V0dGluZy9ib29sZWFuLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteSettingView;\n/**\n * Processor setting overlay for assinging MIDI control to the parameter.\n */\nfunction createRemoteSettingView(specs, my) {\n    var that,\n        learnClickLayer,\n        init = function init() {\n        if (my.data.isMidiControllable) {\n            var template = document.querySelector('#template-setting-learnmode');\n            var clone = template.content.cloneNode(true);\n            learnClickLayer = clone.firstElementChild;\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     */\n    changeRemoteState = function changeRemoteState(state) {\n        if (my.data.isMidiControllable) {\n            if (state.learnModeActive) {\n                showRemoteState('enter');\n\n                // search for assignment\n                var assignment = void 0;\n                state.assignments.allIds.forEach(function (assignID) {\n                    var assign = state.assignments.byId[assignID];\n                    if (assign.processorID === my.processorID && assign.paramKey === my.key) {\n                        assignment = assign;\n                    }\n                });\n\n                if (assignment) {\n                    showRemoteState('assigned');\n                } else {\n                    showRemoteState('unassigned');\n                }\n                if (state.learnTargetProcessorID === my.processorID && state.learnTargetParameterKey === my.key) {\n                    showRemoteState('selected');\n                } else {\n                    showRemoteState('deselected');\n                }\n            } else {\n                showRemoteState('exit');\n            }\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} status New state of the parameter.\n     */\n    showRemoteState = function showRemoteState(status) {\n        switch (status) {\n            case 'enter':\n                my.el.appendChild(learnClickLayer);\n                learnClickLayer.addEventListener('click', onLearnLayerClick);\n                break;\n            case 'exit':\n                if (my.el.contains(learnClickLayer)) {\n                    my.el.removeChild(learnClickLayer);\n                    learnClickLayer.removeEventListener('click', onLearnLayerClick);\n                }\n                break;\n            case 'selected':\n                learnClickLayer.dataset.selected = true;\n                break;\n            case 'deselected':\n                learnClickLayer.dataset.selected = false;\n                break;\n            case 'assigned':\n                learnClickLayer.dataset.assigned = true;\n                break;\n            case 'unassigned':\n                learnClickLayer.dataset.assigned = false;\n                break;\n            default:\n                console.log('Unknown remote state: ', state);\n                break;\n        }\n    },\n        onLearnLayerClick = function onLearnLayerClick(e) {\n        my.store.dispatch(my.store.getActions().toggleMIDILearnTarget(my.processorID, my.key));\n    };\n\n    my = my || {};\n    my.changeRemoteState = changeRemoteState;\n\n    that = that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIntegerSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createIntegerSettingView(specs, my) {\n    var that,\n        rangeEl,\n        numberEl,\n        init = function init() {\n        rangeEl = my.el.getElementsByClassName('setting__range')[0];\n        rangeEl.addEventListener('input', onChange);\n        rangeEl.addEventListener('change', onChange);\n\n        numberEl = my.el.getElementsByClassName('setting__number')[0];\n        numberEl.addEventListener('change', onChange);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {\n        rangeEl.setAttribute('min', my.data.min);\n        rangeEl.setAttribute('max', my.data.max);\n\n        numberEl.setAttribute('min', my.data.min);\n        numberEl.setAttribute('max', my.data.max);\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, parseInt(e.target.value, 10)));\n    },\n        setValue = function setValue(value) {\n        rangeEl.value = value;\n        numberEl.value = value;\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanM/NTk2MCJdLCJuYW1lcyI6WyJjcmVhdGVJbnRlZ2VyU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInJhbmdlRWwiLCJudW1iZXJFbCIsImluaXQiLCJlbCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwib25DaGFuZ2UiLCJpbml0RGF0YSIsInNldFZhbHVlIiwiZGF0YSIsInZhbHVlIiwic2V0QXR0cmlidXRlIiwibWluIiwibWF4IiwiZSIsInN0b3JlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwiY2hhbmdlUGFyYW1ldGVyIiwicHJvY2Vzc29ySUQiLCJrZXkiLCJwYXJzZUludCIsInRhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBTXdCQSx3Qjs7QUFOeEI7Ozs7OztBQUVBOzs7O0FBSWUsU0FBU0Esd0JBQVQsQ0FBa0NDLEtBQWxDLEVBQXlDQyxFQUF6QyxFQUE2QztBQUN4RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsT0FESjtBQUFBLFFBRUlDLFFBRko7QUFBQSxRQUlJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixrQkFBVUYsR0FBR0ssRUFBSCxDQUFNQyxzQkFBTixDQUE2QixnQkFBN0IsRUFBK0MsQ0FBL0MsQ0FBVjtBQUNBSixnQkFBUUssZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0NDLFFBQWxDO0FBQ0FOLGdCQUFRSyxnQkFBUixDQUF5QixRQUF6QixFQUFtQ0MsUUFBbkM7O0FBRUFMLG1CQUFXSCxHQUFHSyxFQUFILENBQU1DLHNCQUFOLENBQTZCLGlCQUE3QixFQUFnRCxDQUFoRCxDQUFYO0FBQ0FILGlCQUFTSSxnQkFBVCxDQUEwQixRQUExQixFQUFvQ0MsUUFBcEM7O0FBRUFDO0FBQ0FDLGlCQUFTVixHQUFHVyxJQUFILENBQVFDLEtBQWpCO0FBQ0gsS0FkTDtBQUFBLFFBZ0JJSCxXQUFXLFNBQVhBLFFBQVcsR0FBVztBQUNsQlAsZ0JBQVFXLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJiLEdBQUdXLElBQUgsQ0FBUUcsR0FBcEM7QUFDQVosZ0JBQVFXLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJiLEdBQUdXLElBQUgsQ0FBUUksR0FBcEM7O0FBRUFaLGlCQUFTVSxZQUFULENBQXNCLEtBQXRCLEVBQTZCYixHQUFHVyxJQUFILENBQVFHLEdBQXJDO0FBQ0FYLGlCQUFTVSxZQUFULENBQXNCLEtBQXRCLEVBQTZCYixHQUFHVyxJQUFILENBQVFJLEdBQXJDO0FBQ0gsS0F0Qkw7QUFBQSxRQXdCSVAsV0FBVyxTQUFYQSxRQUFXLENBQVNRLENBQVQsRUFBWTtBQUNuQmhCLFdBQUdpQixLQUFILENBQVNDLFFBQVQsQ0FBa0JsQixHQUFHaUIsS0FBSCxDQUFTRSxVQUFULEdBQXNCQyxlQUF0QixDQUNkcEIsR0FBR3FCLFdBRFcsRUFFZHJCLEdBQUdzQixHQUZXLEVBR2RDLFNBQVNQLEVBQUVRLE1BQUYsQ0FBU1osS0FBbEIsRUFBeUIsRUFBekIsQ0FIYyxDQUFsQjtBQUlILEtBN0JMO0FBQUEsUUErQklGLFdBQVcsU0FBWEEsUUFBVyxDQUFTRSxLQUFULEVBQWdCO0FBQ3ZCVixnQkFBUVUsS0FBUixHQUFnQkEsS0FBaEI7QUFDQVQsaUJBQVNTLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0gsS0FsQ0w7O0FBb0NBWixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR1MsUUFBSCxHQUFjQSxRQUFkO0FBQ0FULE9BQUdVLFFBQUgsR0FBY0EsUUFBZDs7QUFFQVQsV0FBTyxvQkFBc0JGLEtBQXRCLEVBQTZCQyxFQUE3QixDQUFQOztBQUVBSTs7QUFFQSxXQUFPSCxJQUFQO0FBQ0giLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVNldHRpbmdWaWV3IGZyb20gJy4vYmFzZS5qcyc7XG5cbi8qKlxuICogUHJvY2Vzc29yIHNldHRpbmcgdmlldyBmb3IgYSBsaW5lYXIgaW50ZWdlciB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIHNsaWRlciBhbmQgYSBudW1iZXIgZmllbGQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUludGVnZXJTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgcmFuZ2VFbCxcbiAgICAgICAgbnVtYmVyRWwsXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fcmFuZ2UnKVswXTtcbiAgICAgICAgICAgIHJhbmdlRWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkNoYW5nZSk7XG4gICAgICAgICAgICByYW5nZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbnVtYmVyRWwgPSBteS5lbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzZXR0aW5nX19udW1iZXInKVswXTtcbiAgICAgICAgICAgIG51bWJlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcblxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsLnNldEF0dHJpYnV0ZSgnbWluJywgbXkuZGF0YS5taW4pO1xuICAgICAgICAgICAgcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcblxuICAgICAgICAgICAgbnVtYmVyRWwuc2V0QXR0cmlidXRlKCdtaW4nLCBteS5kYXRhLm1pbik7XG4gICAgICAgICAgICBudW1iZXJFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgbXkuc3RvcmUuZGlzcGF0Y2gobXkuc3RvcmUuZ2V0QWN0aW9ucygpLmNoYW5nZVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgICBteS5wcm9jZXNzb3JJRCwgXG4gICAgICAgICAgICAgICAgbXkua2V5LCBcbiAgICAgICAgICAgICAgICBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByYW5nZUVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBudW1iZXJFbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuaW5pdERhdGEgPSBpbml0RGF0YTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createItemizedSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a itemized type parameter,\n * which has a radio buttons for item selection.\n */\nfunction createItemizedSettingView(specs, my) {\n    var that,\n        valueEl,\n        radioInputs = [],\n        numInputs,\n        init = function init() {\n        valueEl = my.el.querySelector('.setting__value');\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {\n        // remove previous radio buttons, if any\n        while (valueEl.firstChild) {\n            valueEl.firstChild.removeEventListener('change', onChange);\n            valueEl.removeChild(valueEl.firstChild);\n        }\n\n        // add the radio buttons\n        var radioTemplate = document.querySelector('#template-setting-itemized-item'),\n            model = my.data.model;\n        numInputs = model.length;\n        for (var i = 0; i < numInputs; i++) {\n            var id = getTemporaryInputAndLabelId();\n\n            // add a new cloned radio element\n            var radioInputEl = radioTemplate.content.children[0].cloneNode(true);\n            valueEl.appendChild(radioInputEl);\n            radioInputEl.setAttribute('name', specs.key);\n            radioInputEl.setAttribute('id', id);\n            radioInputEl.value = model[i].value;\n            radioInputEl.addEventListener('change', onChange);\n            radioInputs.push(radioInputEl);\n\n            // add a new cloned label element\n            var radioLabelEl = radioTemplate.content.children[1].cloneNode(true);\n            valueEl.appendChild(radioLabelEl);\n            radioLabelEl.setAttribute('for', id);\n            radioLabelEl.innerHTML = model[i].label;\n        }\n    },\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        radioInputs.forEach(function (radioInput) {\n            radioInput.checked = radioInput.value == value;\n        });\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2l0ZW1pemVkLmpzPzdhMjAiXSwibmFtZXMiOlsiY3JlYXRlSXRlbWl6ZWRTZXR0aW5nVmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwidmFsdWVFbCIsInJhZGlvSW5wdXRzIiwibnVtSW5wdXRzIiwiaW5pdCIsImVsIiwicXVlcnlTZWxlY3RvciIsImluaXREYXRhIiwic2V0VmFsdWUiLCJkYXRhIiwidmFsdWUiLCJmaXJzdENoaWxkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJyYWRpb1RlbXBsYXRlIiwiZG9jdW1lbnQiLCJtb2RlbCIsImxlbmd0aCIsImkiLCJpZCIsImdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCIsInJhZGlvSW5wdXRFbCIsImNvbnRlbnQiLCJjaGlsZHJlbiIsImNsb25lTm9kZSIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlIiwia2V5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJyYWRpb0xhYmVsRWwiLCJpbm5lckhUTUwiLCJsYWJlbCIsIk1hdGgiLCJyYW5kb20iLCJwZXJmb3JtYW5jZSIsIm5vdyIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwidGFyZ2V0IiwiZm9yRWFjaCIsInJhZGlvSW5wdXQiLCJjaGVja2VkIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHlCOztBQU54Qjs7Ozs7O0FBRUE7Ozs7QUFJZSxTQUFTQSx5QkFBVCxDQUFtQ0MsS0FBbkMsRUFBMENDLEVBQTFDLEVBQThDO0FBQ3pELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxPQURKO0FBQUEsUUFFSUMsY0FBYyxFQUZsQjtBQUFBLFFBR0lDLFNBSEo7QUFBQSxRQUtJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkSCxrQkFBVUYsR0FBR00sRUFBSCxDQUFNQyxhQUFOLENBQW9CLGlCQUFwQixDQUFWOztBQUVBQztBQUNBQyxpQkFBU1QsR0FBR1UsSUFBSCxDQUFRQyxLQUFqQjtBQUNILEtBVkw7QUFBQSxRQVlJSCxXQUFXLFNBQVhBLFFBQVcsR0FBVztBQUNsQjtBQUNBLGVBQU9OLFFBQVFVLFVBQWYsRUFBMkI7QUFDdkJWLG9CQUFRVSxVQUFSLENBQW1CQyxtQkFBbkIsQ0FBdUMsUUFBdkMsRUFBaURDLFFBQWpEO0FBQ0FaLG9CQUFRYSxXQUFSLENBQW9CYixRQUFRVSxVQUE1QjtBQUNIOztBQUVEO0FBQ0EsWUFBSUksZ0JBQWdCQyxTQUFTVixhQUFULENBQXVCLGlDQUF2QixDQUFwQjtBQUFBLFlBQ0lXLFFBQVFsQixHQUFHVSxJQUFILENBQVFRLEtBRHBCO0FBRUFkLG9CQUFZYyxNQUFNQyxNQUFsQjtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJaEIsU0FBcEIsRUFBK0JnQixHQUEvQixFQUFvQztBQUNoQyxnQkFBSUMsS0FBS0MsNkJBQVQ7O0FBRUE7QUFDQSxnQkFBSUMsZUFBZVAsY0FBY1EsT0FBZCxDQUFzQkMsUUFBdEIsQ0FBK0IsQ0FBL0IsRUFBa0NDLFNBQWxDLENBQTRDLElBQTVDLENBQW5CO0FBQ0F4QixvQkFBUXlCLFdBQVIsQ0FBb0JKLFlBQXBCO0FBQ0FBLHlCQUFhSyxZQUFiLENBQTBCLE1BQTFCLEVBQWtDN0IsTUFBTThCLEdBQXhDO0FBQ0FOLHlCQUFhSyxZQUFiLENBQTBCLElBQTFCLEVBQWdDUCxFQUFoQztBQUNBRSx5QkFBYVosS0FBYixHQUFxQk8sTUFBTUUsQ0FBTixFQUFTVCxLQUE5QjtBQUNBWSx5QkFBYU8sZ0JBQWIsQ0FBOEIsUUFBOUIsRUFBd0NoQixRQUF4QztBQUNBWCx3QkFBWTRCLElBQVosQ0FBaUJSLFlBQWpCOztBQUVBO0FBQ0EsZ0JBQUlTLGVBQWVoQixjQUFjUSxPQUFkLENBQXNCQyxRQUF0QixDQUErQixDQUEvQixFQUFrQ0MsU0FBbEMsQ0FBNEMsSUFBNUMsQ0FBbkI7QUFDQXhCLG9CQUFReUIsV0FBUixDQUFvQkssWUFBcEI7QUFDQUEseUJBQWFKLFlBQWIsQ0FBMEIsS0FBMUIsRUFBaUNQLEVBQWpDO0FBQ0FXLHlCQUFhQyxTQUFiLEdBQXlCZixNQUFNRSxDQUFOLEVBQVNjLEtBQWxDO0FBQ0g7QUFDSixLQXpDTDs7O0FBMkNJOzs7O0FBSUFaLGtDQUE4QixTQUE5QkEsMkJBQThCLEdBQVc7QUFDckMsZUFBTyxPQUFPYSxLQUFLQyxNQUFMLEVBQVAsR0FBdUJDLFlBQVlDLEdBQVosRUFBOUI7QUFDSCxLQWpETDtBQUFBLFFBbURJeEIsV0FBVyxTQUFYQSxRQUFXLENBQVN5QixDQUFULEVBQVk7QUFDbkJ2QyxXQUFHd0MsS0FBSCxDQUFTQyxRQUFULENBQWtCekMsR0FBR3dDLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZDNDLEdBQUc0QyxXQURXLEVBRWQ1QyxHQUFHNkIsR0FGVyxFQUdkVSxFQUFFTSxNQUFGLENBQVNsQyxLQUhLLENBQWxCO0FBSUgsS0F4REw7QUFBQSxRQTBESUYsV0FBVyxTQUFYQSxRQUFXLENBQVNFLEtBQVQsRUFBZ0I7QUFDdkJSLG9CQUFZMkMsT0FBWixDQUFvQixzQkFBYztBQUM5QkMsdUJBQVdDLE9BQVgsR0FBc0JELFdBQVdwQyxLQUFYLElBQW9CQSxLQUExQztBQUNILFNBRkQ7QUFHSCxLQTlETDs7QUFnRUFYLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHUSxRQUFILEdBQWNBLFFBQWQ7QUFDQVIsT0FBR1MsUUFBSCxHQUFjQSxRQUFkOztBQUVBUixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFLOztBQUVBLFdBQU9KLElBQVA7QUFDSCIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlLmpzJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIGl0ZW1pemVkIHR5cGUgcGFyYW1ldGVyLFxuICogd2hpY2ggaGFzIGEgcmFkaW8gYnV0dG9ucyBmb3IgaXRlbSBzZWxlY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1pemVkU2V0dGluZ1ZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHZhbHVlRWwsXG4gICAgICAgIHJhZGlvSW5wdXRzID0gW10sXG4gICAgICAgIG51bUlucHV0cyxcbiAgICAgICAgXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhbHVlRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fdmFsdWUnKTtcblxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJldmlvdXMgcmFkaW8gYnV0dG9ucywgaWYgYW55XG4gICAgICAgICAgICB3aGlsZSAodmFsdWVFbC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVFbC5maXJzdENoaWxkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZUVsLnJlbW92ZUNoaWxkKHZhbHVlRWwuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgcmFkaW8gYnV0dG9uc1xuICAgICAgICAgICAgbGV0IHJhZGlvVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtc2V0dGluZy1pdGVtaXplZC1pdGVtJyksXG4gICAgICAgICAgICAgICAgbW9kZWwgPSBteS5kYXRhLm1vZGVsO1xuICAgICAgICAgICAgbnVtSW5wdXRzID0gbW9kZWwubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1JbnB1dHM7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IGdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCBhIG5ldyBjbG9uZWQgcmFkaW8gZWxlbWVudFxuICAgICAgICAgICAgICAgIGxldCByYWRpb0lucHV0RWwgPSByYWRpb1RlbXBsYXRlLmNvbnRlbnQuY2hpbGRyZW5bMF0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIHZhbHVlRWwuYXBwZW5kQ2hpbGQocmFkaW9JbnB1dEVsKTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuc2V0QXR0cmlidXRlKCduYW1lJywgc3BlY3Mua2V5KTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwudmFsdWUgPSBtb2RlbFtpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRzLnB1c2gocmFkaW9JbnB1dEVsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBhZGQgYSBuZXcgY2xvbmVkIGxhYmVsIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBsZXQgcmFkaW9MYWJlbEVsID0gcmFkaW9UZW1wbGF0ZS5jb250ZW50LmNoaWxkcmVuWzFdLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZUVsLmFwcGVuZENoaWxkKHJhZGlvTGFiZWxFbCk7XG4gICAgICAgICAgICAgICAgcmFkaW9MYWJlbEVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaWQpO1xuICAgICAgICAgICAgICAgIHJhZGlvTGFiZWxFbC5pbm5lckhUTUwgPSBtb2RlbFtpXS5sYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHF1aWNrIElEIHRvIHRpZSBsYWJlbCB0byBpbnB1dCBlbGVtZW50cy5cbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgSUQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnaWQnICsgTWF0aC5yYW5kb20oKSArIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmFkaW9JbnB1dHMuZm9yRWFjaChyYWRpb0lucHV0ID0+IHtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0LmNoZWNrZWQgPSAocmFkaW9JbnB1dC52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5pbml0RGF0YSA9IGluaXREYXRhO1xuICAgIG15LnNldFZhbHVlID0gc2V0VmFsdWU7XG4gICAgXG4gICAgdGhhdCA9IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyhzcGVjcywgbXkpO1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3NldHRpbmcvaXRlbWl6ZWQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStringSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\n\nfunction createStringSettingView(specs, my) {\n    var that,\n        textEl,\n        init = function init() {\n        textEl = my.el.getElementsByClassName('setting__text')[0];\n        textEl.addEventListener('input', onChange);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {},\n        onChange = function onChange(e) {\n        e.preventDefault();\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        // only update if the text input doesn't have focus,\n        // else value gets refreshed and cursor jumps to end\n        if (textEl != document.activeElement) {\n            textEl.value = value;\n        }\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3N0cmluZy5qcz83MjVmIl0sIm5hbWVzIjpbImNyZWF0ZVN0cmluZ1NldHRpbmdWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJ0ZXh0RWwiLCJpbml0IiwiZWwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwiaW5pdERhdGEiLCJzZXRWYWx1ZSIsImRhdGEiLCJ2YWx1ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3JlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwiY2hhbmdlUGFyYW1ldGVyIiwicHJvY2Vzc29ySUQiLCJrZXkiLCJ0YXJnZXQiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU93QkEsdUI7O0FBUHhCOzs7Ozs7QUFFQTs7Ozs7QUFLZSxTQUFTQSx1QkFBVCxDQUFpQ0MsS0FBakMsRUFBd0NDLEVBQXhDLEVBQTRDO0FBQ3ZELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxNQURKO0FBQUEsUUFHSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEQsaUJBQVNGLEdBQUdJLEVBQUgsQ0FBTUMsc0JBQU4sQ0FBNkIsZUFBN0IsRUFBOEMsQ0FBOUMsQ0FBVDtBQUNBSCxlQUFPSSxnQkFBUCxDQUF3QixPQUF4QixFQUFpQ0MsUUFBakM7O0FBRUFDO0FBQ0FDLGlCQUFTVCxHQUFHVSxJQUFILENBQVFDLEtBQWpCO0FBQ0gsS0FUTDtBQUFBLFFBV0lILFdBQVcsU0FBWEEsUUFBVyxHQUFXLENBQUUsQ0FYNUI7QUFBQSxRQWFJRCxXQUFXLFNBQVhBLFFBQVcsQ0FBU0ssQ0FBVCxFQUFZO0FBQ25CQSxVQUFFQyxjQUFGO0FBQ0FiLFdBQUdjLEtBQUgsQ0FBU0MsUUFBVCxDQUFrQmYsR0FBR2MsS0FBSCxDQUFTRSxVQUFULEdBQXNCQyxlQUF0QixDQUNkakIsR0FBR2tCLFdBRFcsRUFFZGxCLEdBQUdtQixHQUZXLEVBR2RQLEVBQUVRLE1BQUYsQ0FBU1QsS0FISyxDQUFsQjtBQUlILEtBbkJMO0FBQUEsUUFxQklGLFdBQVcsU0FBWEEsUUFBVyxDQUFTRSxLQUFULEVBQWdCO0FBQ3ZCO0FBQ0E7QUFDQSxZQUFJVCxVQUFVbUIsU0FBU0MsYUFBdkIsRUFBc0M7QUFDbENwQixtQkFBT1MsS0FBUCxHQUFlQSxLQUFmO0FBQ0g7QUFDSixLQTNCTDs7QUE2QkFYLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHUyxRQUFILEdBQWNBLFFBQWQ7O0FBRUFSLFdBQU8sb0JBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDs7QUFFQUc7O0FBRUEsV0FBT0YsSUFBUDtBQUNIIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyBmcm9tICcuL2Jhc2UuanMnO1xuXG4vKipcbiAqIFByb2Nlc3NvciBzZXR0aW5nIHZpZXcgZm9yIGEgQm9vbGVhbiB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIGNoZWNrYm94IGlucHV0LlxuICovXG4gXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHJpbmdTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgdGV4dEVsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGV4dEVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fdGV4dCcpWzBdO1xuICAgICAgICAgICAgdGV4dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbml0RGF0YSgpO1xuICAgICAgICAgICAgc2V0VmFsdWUobXkuZGF0YS52YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdERhdGEgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHVwZGF0ZSBpZiB0aGUgdGV4dCBpbnB1dCBkb2Vzbid0IGhhdmUgZm9jdXMsXG4gICAgICAgICAgICAvLyBlbHNlIHZhbHVlIGdldHMgcmVmcmVzaGVkIGFuZCBjdXJzb3IganVtcHMgdG8gZW5kXG4gICAgICAgICAgICBpZiAodGV4dEVsICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0RWwudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnNldFZhbHVlID0gc2V0VmFsdWU7XG4gICAgXG4gICAgdGhhdCA9IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyhzcGVjcywgbXkpO1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3NldHRpbmcvc3RyaW5nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createCanvas3d;\n\nvar _windowresize = __webpack_require__(5);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nvar _connections3d = __webpack_require__(23);\n\nvar _connections3d2 = _interopRequireDefault(_connections3d);\n\nvar _selectors = __webpack_require__(1);\n\nvar _util = __webpack_require__(3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar _THREE = THREE,\n    Color = _THREE.Color,\n    PerspectiveCamera = _THREE.PerspectiveCamera,\n    Plane = _THREE.Plane,\n    Raycaster = _THREE.Raycaster,\n    Scene = _THREE.Scene,\n    Vector2 = _THREE.Vector2,\n    Vector3 = _THREE.Vector3,\n    WebGLRenderer = _THREE.WebGLRenderer;\nfunction createCanvas3d(specs, my) {\n  var that = void 0,\n      store = specs.store,\n      rootEl = void 0,\n      canvasRect = void 0,\n      renderer = void 0,\n      camera = void 0,\n      plane = void 0,\n      mousePoint = new Vector2(),\n      mousePointPrevious = new Vector2(),\n      intersection = new Vector3(),\n      raycaster = new Raycaster(),\n      dragObject = void 0,\n      dragObjectType = void 0,\n      dragOffset = new Vector3(),\n      allObjects = [],\n      controllers = [],\n      doubleClickCounter = 0,\n      doubleClickDelay = 300,\n      doubleClickTimer = void 0,\n      init = function init() {\n\n    document.addEventListener(store.STATE_CHANGE, function (e) {\n      switch (e.detail.action.type) {\n\n        case e.detail.actions.SELECT_PROCESSOR:\n          selectProcessorView(e.detail.state);\n          break;\n\n        case e.detail.actions.ADD_PROCESSOR:\n          createProcessorViews(e.detail.state);\n          break;\n\n        case e.detail.actions.DELETE_PROCESSOR:\n          deleteProcessorView(e.detail.action.id);\n          selectProcessorView(e.detail.state);\n          break;\n\n        case e.detail.actions.CREATE_PROJECT:\n          setThemeOnWorld();\n          updateCamera(e.detail.state);\n          clearProcessorViews();\n          createProcessorViews(e.detail.state);\n          onWindowResize();\n          break;\n\n        case e.detail.actions.SET_THEME:\n          setThemeOnWorld();\n          break;\n\n        case e.detail.actions.SET_CAMERA_POSITION:\n          updateCamera(e.detail.state);\n          break;\n      }\n    });\n\n    my.addWindowResizeCallback(onWindowResize);\n    initWorld();\n    initDOMEvents();\n    onWindowResize();\n    draw();\n  },\n\n\n  /**\n   * Initialise DOM events for click, drag etcetera.\n   */\n  initDOMEvents = function initDOMEvents() {\n    renderer.domElement.addEventListener(_util.util.eventType.click, onClick);\n    renderer.domElement.addEventListener(_util.util.eventType.start, onTouchStart);\n    renderer.domElement.addEventListener(_util.util.eventType.move, dragMove);\n    renderer.domElement.addEventListener(_util.util.eventType.end, dragEnd);\n    renderer.domElement.addEventListener('drop', onDrop);\n\n    // prevent system doubleclick to interfere with the custom doubleclick\n    renderer.domElement.addEventListener('dblclick', function (e) {\n      e.preventDefault();\n    });\n  },\n\n\n  /**\n   * Window resize event handler.\n   */\n  onWindowResize = function onWindowResize() {\n    canvasRect = renderer.domElement.getBoundingClientRect();\n    renderer.setSize(window.innerWidth, window.innerHeight - canvasRect.top);\n    camera.aspect = window.innerWidth / (window.innerHeight - canvasRect.top);\n    camera.updateProjectionMatrix();\n    canvasRect = renderer.domElement.getBoundingClientRect();\n\n    // move camera further back when viewport height increases so objects stay the same size \n    var scale = 0.15;\n    var fieldOfView = camera.fov * (Math.PI / 180); // convert fov to radians\n    var targetZ = canvasRect.height / (2 * Math.tan(fieldOfView / 2));\n\n    store.dispatch(store.getActions().setCameraPosition(camera.position.x, camera.position.y, targetZ * scale));\n  },\n\n\n  /**\n   * Drop of object dragged from library.\n   * Create a new processor.\n   */\n  onDrop = function onDrop(e) {\n    e.preventDefault();\n    updateMouseRay(e);\n    if (raycaster.ray.intersectPlane(plane, intersection)) {\n      store.dispatch(store.getActions().createProcessor({\n        type: e.dataTransfer.getData('text/plain'),\n        positionX: intersection.x,\n        positionY: intersection.y,\n        positionZ: intersection.z\n      }));\n    };\n  },\n\n\n  /**\n   * Separate click and doubleclick.\n   * @see http://stackoverflow.com/questions/6330431/jquery-bind-double-click-and-single-click-separately\n   */\n  onClick = function onClick(e) {\n    // separate click from doubleclick\n    doubleClickCounter++;\n    if (doubleClickCounter == 1) {\n      doubleClickTimer = setTimeout(function () {\n        doubleClickCounter = 0;\n        // implement single click behaviour here\n        handleClick(e);\n      }, doubleClickDelay);\n    } else {\n      clearTimeout(doubleClickTimer);\n      doubleClickCounter = 0;\n      // implement double click behaviour here\n    }\n  },\n\n\n  /**\n   * Select the object under the mouse.\n   * Start dragging the object.\n   */\n  onTouchStart = function onTouchStart(e) {\n    // update picking ray\n    updateMouseRay(e);\n    mousePointPrevious = _extends({}, mousePoint);\n\n    // get intersected object3ds\n    var intersects = raycaster.intersectObjects(allObjects, true);\n    var outerObject = null;\n    dragObjectType = 'background';\n    if (intersects.length) {\n\n      // test for processors\n      var intersect = intersects.find(function (intersect) {\n        return intersect.object.name === 'hitarea';\n      });\n      if (intersect) {\n        // get topmost parent of closest object\n        outerObject = getOuterParentObject(intersect.object);\n        // select the touched processor\n        store.dispatch(store.getActions().selectProcessor(outerObject.userData.id));\n        dragObjectType = 'processor';\n      }\n\n      // test for output connectors\n      intersect = intersects.find(function (intersect) {\n        return intersect.object.name === 'output';\n      });\n      if (intersect && my.isConnectMode) {\n        // get outer parent of closest object\n        outerObject = getOuterParentObject(intersect.object);\n        my.dragStartConnection(outerObject.userData.id, intersect.object.userData.id, outerObject.clone().position.add(intersect.object.position));\n        dragObjectType = 'connection';\n      }\n    }\n\n    if (dragObjectType === 'background') {\n      outerObject = camera;\n    }\n\n    dragStart(outerObject, mousePoint);\n  },\n\n\n  /**\n   * Initialise object dragging.\n   * @param {object} object3d The Object3D to be dragged.\n   */\n  dragStart = function dragStart(object3d, mousePoint) {\n    dragObject = object3d;\n    // update the picking ray with the camera and mouse position\n    raycaster.setFromCamera(mousePoint, camera);\n    // if ray intersects plane, store point in vector 'intersection'\n    if (raycaster.ray.intersectPlane(plane, intersection)) {\n      switch (dragObjectType) {\n\n        case 'processor':\n          // offset is the intersection point minus object position,\n          // so distance from object to mouse\n          dragOffset.copy(intersection).sub(dragObject.position);\n          break;\n\n        case 'connection':\n          break;\n\n        case 'background':\n          dragOffset.copy(intersection).sub(dragObject.position);\n          break;\n      }\n      rootEl.style.cursor = 'move';\n    }\n  },\n\n\n  /**\n   * Drag a 3D object.\n   * @param  {Object} e Event.\n   */\n  dragMove = function dragMove(e) {\n    e.preventDefault();\n\n    // update picking ray.\n    updateMouseRay(e);\n    switch (dragObjectType) {\n      case 'processor':\n        if (raycaster.ray.intersectPlane(plane, intersection)) {\n          // set position of dragObject to the mouse intersection minus the offset\n          var position = intersection.sub(dragOffset);\n          store.dispatch(store.getActions().dragSelectedProcessor(intersection.x, intersection.y, position.z));\n        }\n        break;\n\n      case 'background':\n        var x = (mousePointPrevious.x - mousePoint.x) * 50;\n        var y = (mousePointPrevious.y - mousePoint.y) * 50;\n        store.dispatch(store.getActions().setCameraPosition(x, y, 0, true));\n        break;\n\n      case 'connection':\n        if (raycaster.ray.intersectPlane(plane, intersection)) {\n          my.dragMoveConnection(intersection);\n        }\n        break;\n\n      // when not dragging\n      default:\n        var intersects = raycaster.intersectObjects(allObjects, true);\n        if (intersects.length > 0) {\n          var intersectHitarea = intersects.find(function (intersect) {\n            return intersect.object.name === 'hitarea';\n          });\n          if (intersectHitarea) {\n            rootEl.style.cursor = 'pointer';\n          } else {\n            rootEl.style.cursor = 'auto';\n          }\n        }\n    }\n    mousePointPrevious = _extends({}, mousePoint);\n  },\n\n\n  /**\n   * Dragging 3D object ended.\n   * @param  {Object} e Event.\n   */\n  dragEnd = function dragEnd(e) {\n    e.preventDefault();\n    updateMouseRay(e);\n\n    switch (dragObjectType) {\n      case 'connection':\n        my.dragEndConnection();\n\n        // test for input connectors\n        var intersects = raycaster.intersectObjects(allObjects, true);\n        var intersect = intersects.find(function (intersect) {\n          return intersect.object.name === 'input';\n        });\n        if (intersect && my.isConnectMode) {\n          var outerObject = getOuterParentObject(intersect.object);\n          my.createConnection(outerObject.userData.id, intersect.object.userData.id);\n        }\n        break;\n    }\n    dragObject = null;\n    dragObjectType = null;\n    rootEl.style.cursor = 'auto';\n  },\n\n\n  /**\n   * Handle single mouse click.\n   */\n  handleClick = function handleClick(e) {\n    updateMouseRay(e);\n\n    // look for click on connection cable delete button\n    var cableIntersects = raycaster.intersectObjects(my.cablesGroup.children, true);\n    var deleteIntersect = cableIntersects.find(function (intersect) {\n      return intersect.object.name === 'delete';\n    });\n    if (deleteIntersect) {\n      store.dispatch(store.getActions().disconnectProcessors(deleteIntersect.object.userData.connectionId));\n    }\n  },\n\n\n  /**\n   * Set up the 3D world.\n   */\n  initWorld = function initWorld() {\n\n    renderer = new WebGLRenderer({ antialias: true });\n    renderer.setClearColor(new Color((0, _selectors.getThemeColors)().colorBackground || '#cccccc'));\n\n    rootEl = document.querySelector('#canvas-container');\n    rootEl.appendChild(renderer.domElement);\n\n    my.scene = new Scene();\n\n    camera = new PerspectiveCamera(45, 1, 1, 500);\n    my.scene.add(camera);\n\n    plane = new Plane();\n    plane.name = 'plane';\n    plane.setFromNormalAndCoplanarPoint(camera.getWorldDirection(plane.normal), new Vector3(0, 0, 0));\n  },\n\n\n  /**\n   * Update the camera position to what's stored in the state.\n   */\n  updateCamera = function updateCamera(state) {\n    camera.position.set(state.camera.x, state.camera.y, state.camera.z);\n  },\n      setThemeOnWorld = function setThemeOnWorld() {\n    renderer.setClearColor(new Color((0, _selectors.getThemeColors)().colorBackground));\n  },\n\n\n  /**\n   * Set a raycaster's ray to point from the camera to the mouse postion.\n   * @param {event} mouseEvent Event rom which to get the mouse coordinates.\n   */\n  updateMouseRay = function updateMouseRay(mouseEvent) {\n    // update mouse vector with mouse coordinated translated to viewport\n    mousePoint.x = (mouseEvent.clientX - canvasRect.left) / canvasRect.width * 2 - 1;\n    mousePoint.y = -((mouseEvent.clientY - canvasRect.top) / canvasRect.height) * 2 + 1;\n\n    // update the picking ray with the camera and mouse position\n    raycaster.setFromCamera(mousePoint, camera);\n  },\n\n\n  /**\n   * Recursive function to get top level object of a group.\n   * @param {object} object3d An Three.js Object3D.\n   */\n  getOuterParentObject = function getOuterParentObject(object3d) {\n    if (object3d.object && object3d.object.parent && object3d.object.parent.type !== 'Scene') {\n      return getOuterParentObject(object3d.object.parent);\n    } else if (object3d.parent && object3d.parent.type !== 'Scene') {\n      return getOuterParentObject(object3d.parent);\n    }\n    if (object3d.object) {\n      return object3d.object;\n    }\n    return object3d;\n  },\n\n\n  /**\n   * Create canvas 2D object if it exists for the type.\n   * @param  {Array} data Array of current processors' state.\n   */\n  createProcessorViews = async function createProcessorViews(state) {\n    var isConnectMode = state.connectModeActive;\n    // state.processors.allIds.forEach((id, i) => {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = async function _loop() {\n        var id = _step.value;\n\n        var processorData = state.processors.byId[id];\n        var inputs = processorData.inputs,\n            outputs = processorData.outputs,\n            positionX = processorData.positionX,\n            positionY = processorData.positionY,\n            positionZ = processorData.positionZ,\n            type = processorData.type;\n\n        var isExists = allObjects.find(function (obj3d) {\n          return obj3d.userData.id === id;\n        });\n        if (!isExists) {\n\n          // create the processor 3d object\n          var object3dModule = await new Promise(function (resolve) {\n            __webpack_require__.e/* require.ensure */(2).then((function (require) {\n              resolve(__webpack_require__(33)(\"./\" + type + '/object3d.js'));\n            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n          });\n          var object3d = object3dModule.createObject3d(id, inputs, outputs);\n          object3d.position.set(positionX, positionY, positionZ);\n          allObjects.push(object3d);\n          my.scene.add(object3d);\n\n          // create controller for the object\n          var controllerModule = await new Promise(function (resolve) {\n            __webpack_require__.e/* require.ensure */(0).then((function (require) {\n              resolve(__webpack_require__(34)(\"./\" + type + '/object3dController.js'));\n            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n          });\n          var controller = controllerModule.createObject3dController({ object3d: object3d, processorData: processorData, store: store, isConnectMode: isConnectMode });\n          controller.updateSelectCircle(store.getState().selectedID);\n          controllers.push(controller);\n        }\n      };\n\n      for (var _iterator = state.processors.allIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        await _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    ;\n  },\n\n\n  /** \n   * Show the selected state of the processors.\n   */\n  selectProcessorView = function selectProcessorView(state) {\n    controllers.forEach(function (controller) {\n      controller.updateSelectCircle(state.selectedID);\n    });\n  },\n\n\n  /** \n   * Remove all processor objects from the scene\n   * and delete all their controllers.\n   */\n  clearProcessorViews = function clearProcessorViews() {\n    // remove all processor 3D objects\n    allObjects = allObjects.reduce(function (accumulator, object3D) {\n      my.scene.remove(object3D);\n      return accumulator;\n    }, []);\n\n    // remove all controllers\n    controllers = controllers.reduce(function (accumulator, controller) {\n      controller.terminate();\n      return accumulator;\n    }, []);\n  },\n\n\n  /**\n   * Delete canvas 2D object when the processor is deleted.\n   * @param  {Object} processor MIDI processor for which the 3D object will be a view.\n   */\n  deleteProcessorView = function deleteProcessorView(id) {\n    // remove 3D object from allObjects\n    allObjects = allObjects.reduce(function (accumulator, object3D) {\n      if (object3D.userData.id === id) {\n        // remove 3D object from scene\n        my.scene.remove(object3D);\n        return accumulator;\n      }\n      return [].concat(_toConsumableArray(accumulator), [object3D]);\n    }, []);\n\n    // remove controller\n    controllers = controllers.reduce(function (accumulator, controller) {\n      if (controller.getID() === id) {\n        controller.terminate();\n        return accumulator;\n      }\n      return [].concat(_toConsumableArray(accumulator), [controller]);\n    }, []);\n  },\n\n\n  /**\n   * Update any tween animations that are going on and redraw the canvases if needed.\n   * @param {Number} position Transport playback position in ticks.\n   * @param {Array} processorEvents Array of processor generated events to displayin the view.\n   */\n  draw = function draw(position, processorEvents) {\n    controllers.forEach(function (controller) {\n      return controller.draw(position, processorEvents);\n    });\n    renderer.render(my.scene, camera);\n  };\n\n  my = my || {};\n  my.scene = null;\n\n  that = (0, _windowresize2.default)(specs, my);\n  that = (0, _connections3d2.default)(specs, my);\n\n  init();\n\n  that.draw = draw;\n  return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = addConnections3d;\n\nvar _selectors = __webpack_require__(1);\n\nvar _draw3dHelper = __webpack_require__(7);\n\nvar _THREE = THREE,\n    BufferAttribute = _THREE.BufferAttribute,\n    BufferGeometry = _THREE.BufferGeometry,\n    Color = _THREE.Color,\n    CubicBezierCurve = _THREE.CubicBezierCurve,\n    Group = _THREE.Group,\n    Line = _THREE.Line,\n    LineBasicMaterial = _THREE.LineBasicMaterial,\n    Vector2 = _THREE.Vector2,\n    Vector3 = _THREE.Vector3;\nfunction addConnections3d(specs, my) {\n  var that = void 0,\n      store = specs.store,\n      state = {\n    sourceProcessorID: null,\n    sourceConnectorID: null,\n    sourceConnectorPosition: null\n  },\n      defaultColor = void 0,\n      lineMaterial = void 0,\n      currentCable = void 0,\n      currentCableDragHandle = void 0,\n      cablesGroup = void 0,\n      deleteButtonRadius = 2.0,\n      deleteCrossRadius = 0.8,\n      dragHandleRadius = 1.5,\n      init = function init() {\n    defaultColor = (0, _selectors.getThemeColors)().colorHigh;\n    currentCableDragHandle = (0, _draw3dHelper.createCircleOutline)(dragHandleRadius, defaultColor);\n    currentCableDragHandle.name = 'dragHandle';\n\n    document.addEventListener(store.STATE_CHANGE, function (e) {\n      switch (e.detail.action.type) {\n\n        case e.detail.actions.TOGGLE_CONNECT_MODE:\n          toggleConnectMode(e.detail.state.connectModeActive);\n          break;\n\n        case e.detail.actions.DELETE_PROCESSOR:\n        case e.detail.actions.CONNECT_PROCESSORS:\n        case e.detail.actions.DISCONNECT_PROCESSORS:\n          updateCables(e.detail.state);\n          drawCables(e.detail.state);\n          break;\n\n        case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n        case e.detail.actions.DRAG_ALL_PROCESSORS:\n          drawCables(e.detail.state);\n          break;\n\n        case e.detail.actions.CREATE_PROJECT:\n          setTheme();\n          updateCables(e.detail.state);\n          drawCables(e.detail.state);\n          toggleConnectMode(e.detail.state.connectModeActive);\n          break;\n\n        case e.detail.actions.SET_THEME:\n          setTheme();\n          toggleConnectMode(e.detail.state.connectModeActive);\n          break;\n      }\n    });\n  },\n\n\n  /**\n   * Start dragging a connection cable.\n   * @param {String} sourceProcessorID\n   * @param {String} sourceConnectorID\n   * @param {Vector3} sourceConnectorPosition\n   */\n  dragStartConnection = function dragStartConnection(sourceProcessorID, sourceConnectorID, sourceConnectorPosition) {\n    state = _extends({}, state, { sourceProcessorID: sourceProcessorID, sourceConnectorID: sourceConnectorID, sourceConnectorPosition: sourceConnectorPosition });\n    currentCable = (0, _draw3dHelper.createShape)();\n    currentCable.name = 'currentCable';\n    cablesGroup.add(currentCable);\n\n    currentCableDragHandle.position.copy(sourceConnectorPosition);\n    cablesGroup.add(currentCableDragHandle);\n  },\n\n\n  /**\n   * Drag a connection cable.\n   * @param {Vector3} position3d\n   */\n  dragMoveConnection = function dragMoveConnection(position3d) {\n    drawCable(currentCable.name, new Vector2(state.sourceConnectorPosition.x, state.sourceConnectorPosition.y), new Vector2(position3d.x, position3d.y));\n    currentCableDragHandle.position.copy(position3d);\n  },\n\n\n  /**\n   * Drag connection cable ended.\n   */\n  dragEndConnection = function dragEndConnection() {\n    currentCable.geometry.dispose();\n    cablesGroup.remove(currentCable);\n    cablesGroup.remove(currentCableDragHandle);\n  },\n\n\n  /**\n   * Create connection between two processors.\n   * @param {String} destinationProcessorID Processor ID.\n   * @param {String} destinationConnectorID Connector ID.\n   */\n  createConnection = function createConnection(destinationProcessorID, destinationConnectorID) {\n    store.dispatch(store.getActions().connectProcessors({\n      sourceProcessorID: state.sourceProcessorID,\n      sourceConnectorID: state.sourceConnectorID,\n      destinationProcessorID: destinationProcessorID,\n      destinationConnectorID: destinationConnectorID\n    }));\n    state.sourceProcessorID = null;\n    state.sourceConnectorID = null;\n  },\n\n\n  /**\n   * Create and delete cables acctording to the state.\n   * @param {Object} state Application state.\n   */\n  updateCables = function updateCables(state) {\n    if (!cablesGroup) {\n      cablesGroup = new Group();\n      my.cablesGroup = cablesGroup;\n      my.scene.add(cablesGroup);\n    }\n\n    // delete all removed cables\n    var count = cablesGroup.children.length;\n    while (--count >= 0) {\n      var cable = cablesGroup.children[count];\n      if (state.connections.allIds.indexOf(cable.name) === -1) {\n        cablesGroup.remove(cable);\n      }\n    }\n\n    // create all new cables\n    state.connections.allIds.forEach(function (connectionId) {\n      if (!cablesGroup.getObjectByName(connectionId)) {\n        createCable(connectionId);\n      }\n    });\n  },\n\n\n  /**\n   * Draw all cables acctording to the state.\n   * @param {String} connectionId Connection ID.\n   * @return {Object} Cable object3d.\n   */\n  createCable = function createCable(connectionId) {\n    var cable = (0, _draw3dHelper.createShape)();\n    cable.name = connectionId;\n    cablesGroup.add(cable);\n\n    var deleteBtn = (0, _draw3dHelper.createCircleFilled)(deleteButtonRadius, lineMaterial.color, 0);\n    deleteBtn.name = 'delete';\n    deleteBtn.userData.connectionId = connectionId;\n    deleteBtn.visible = my.isConnectMode;\n    cable.add(deleteBtn);\n\n    var deleteBtnBorder = (0, _draw3dHelper.createCircleOutline)(deleteButtonRadius, defaultColor);\n    deleteBtnBorder.name = 'deleteBorder';\n    deleteBtn.add(deleteBtnBorder);\n\n    var points1 = [new Vector2(-deleteCrossRadius, -deleteCrossRadius), new Vector2(deleteCrossRadius, deleteCrossRadius)];\n    var line1 = (0, _draw3dHelper.createShape)(points1, defaultColor);\n    line1.name = 'deleteCross1';\n    deleteBtn.add(line1);\n\n    var points2 = [new Vector2(-deleteCrossRadius, deleteCrossRadius), new Vector2(deleteCrossRadius, -deleteCrossRadius)];\n    var line2 = (0, _draw3dHelper.createShape)(points2, defaultColor);\n    line2.name = 'deleteCross2';\n    deleteBtn.add(line2);\n\n    return cable;\n  },\n\n\n  /**\n   * Draw all cables acctording to the state.\n   * @param {Object} state Application state.\n   */\n  drawCables = function drawCables(state) {\n    state.connections.allIds.forEach(function (connectionID) {\n      var connection = state.connections.byId[connectionID];\n      var sourceProcessor = state.processors.byId[connection.sourceProcessorID];\n      var destinationProcessor = state.processors.byId[connection.destinationProcessorID];\n\n      if (sourceProcessor && destinationProcessor) {\n        var sourceConnector = sourceProcessor.outputs.byId[connection.sourceConnectorID];\n        var destinationConnector = destinationProcessor.inputs.byId[connection.destinationConnectorID];\n\n        var cable = cablesGroup.getObjectByName(connectionID);\n        drawCable(connectionID, new Vector2(sourceProcessor.positionX + sourceConnector.x, sourceProcessor.positionY + sourceConnector.y), new Vector2(destinationProcessor.positionX + destinationConnector.x, destinationProcessor.positionY + destinationConnector.y));\n      }\n    });\n  },\n\n\n  /**\n   * Enter or leave application connect mode.\n   * @param {Vector3} sourcePosition Cable start position.\n   * @param {Vector3} destinationPosition Cable end position.\n   */\n  drawCable = function drawCable(connectionID, sourcePosition, destinationPosition) {\n    var cable = cablesGroup.getObjectByName(connectionID);\n    if (cable) {\n      var distance = sourcePosition.distanceTo(destinationPosition);\n      var curveStrength = Math.min(distance / 2, 30);\n      var curve = new CubicBezierCurve(sourcePosition.clone(), sourcePosition.clone().sub(new Vector2(0, curveStrength)), destinationPosition.clone().add(new Vector2(0, curveStrength)), destinationPosition.clone());\n      var points = curve.getPoints(50);\n\n      (0, _draw3dHelper.redrawShape)(cable, points, defaultColor);\n\n      var deleteBtn = cable.getObjectByName('delete');\n      if (deleteBtn) {\n\n        // get mid point on cable\n        var position = points[Math.floor(points.length / 2)];\n        deleteBtn.position.set(position.x, position.y, 0);\n      }\n    }\n  },\n\n\n  /**\n   * Enter or leave application connect mode.\n   * @param {Boolean} isEnabled True to enable connect mode.\n   */\n  toggleConnectMode = function toggleConnectMode(isEnabled) {\n    my.isConnectMode = isEnabled;\n\n    // toggle cable delete buttons\n    cablesGroup.children.forEach(function (cable) {\n      var deleteBtn = cable.getObjectByName('delete');\n      deleteBtn.visible = my.isConnectMode;\n    });\n  },\n\n\n  /**\n   * Update theme colors.\n   */\n  setTheme = function setTheme() {\n    defaultColor = (0, _selectors.getThemeColors)().colorHigh;\n    lineMaterial = new LineBasicMaterial({\n      color: defaultColor\n    });\n    currentCableDragHandle.material.color.set(defaultColor);\n  };\n\n  my = my || {};\n  my.isConnectMode = false, my.cablesGroup = cablesGroup;\n  my.dragStartConnection = dragStartConnection;\n  my.dragMoveConnection = dragMoveConnection;\n  my.dragEndConnection = dragEndConnection;\n  my.createConnection = createConnection;\n\n  that = specs.that || {};\n\n  init();\n\n  return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createLibraryView;\n/**\n * Library for all processor types.\n */\nfunction createLibraryView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.library__list'),\n        init = function init() {\n        document.addEventListener('dragenter', onDragEnter);\n        document.addEventListener('dragover', onDragOver);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.RESCAN_TYPES:\n                    populateLibrary(e.detail.state.types);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Populate the library with all available processor types.\n     * Processor types are not shown in the libray \n     * if they have the flag excludedFromLibrary = true\n     * in their config.json file.\n     */\n    populateLibrary = function populateLibrary(typesTable) {\n        var template = document.querySelector('#template-library-item');\n\n        typesTable.allIds.forEach(function (id) {\n            var type = typesTable.byId[id];\n            var clone = template.content.cloneNode(true);\n            var el = clone.firstElementChild;\n            listEl.appendChild(el);\n\n            el.querySelector('.library__item-label').innerHTML = type.name;\n            el.dataset.type = id;\n            el.addEventListener('dragstart', onDragStart);\n        });\n    },\n\n\n    /**\n     * Store type of processor when drag starts.\n     */\n    onDragStart = function onDragStart(e) {\n        e.dataTransfer.setData('text/plain', e.target.dataset.type);\n    },\n        onDragEnter = function onDragEnter(e) {\n        e.preventDefault();\n    },\n        onDragOver = function onDragOver(e) {\n        e.preventDefault();\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9saWJyYXJ5LmpzP2M1YjEiXSwibmFtZXMiOlsiY3JlYXRlTGlicmFyeVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInN0b3JlIiwibGlzdEVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5pdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkRyYWdFbnRlciIsIm9uRHJhZ092ZXIiLCJTVEFURV9DSEFOR0UiLCJlIiwiZGV0YWlsIiwiYWN0aW9uIiwidHlwZSIsImFjdGlvbnMiLCJSRVNDQU5fVFlQRVMiLCJwb3B1bGF0ZUxpYnJhcnkiLCJzdGF0ZSIsInR5cGVzIiwidHlwZXNUYWJsZSIsInRlbXBsYXRlIiwiYWxsSWRzIiwiZm9yRWFjaCIsImJ5SWQiLCJpZCIsImNsb25lIiwiY29udGVudCIsImNsb25lTm9kZSIsImVsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsIm5hbWUiLCJkYXRhc2V0Iiwib25EcmFnU3RhcnQiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwidGFyZ2V0IiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUd3QkEsaUI7QUFIeEI7OztBQUdlLFNBQVNBLGlCQUFULENBQTJCQyxLQUEzQixFQUFrQ0MsRUFBbEMsRUFBc0M7QUFDakQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLFFBQVFILE1BQU1HLEtBRGxCO0FBQUEsUUFFSUMsU0FBU0MsU0FBU0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FGYjtBQUFBLFFBSUlDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RGLGlCQUFTRyxnQkFBVCxDQUEwQixXQUExQixFQUF1Q0MsV0FBdkM7QUFDQUosaUJBQVNHLGdCQUFULENBQTBCLFVBQTFCLEVBQXNDRSxVQUF0Qzs7QUFFQUwsaUJBQVNHLGdCQUFULENBQTBCTCxNQUFNUSxZQUFoQyxFQUE4QyxVQUFDQyxDQUFELEVBQU87QUFDakQsb0JBQVFBLEVBQUVDLE1BQUYsQ0FBU0MsTUFBVCxDQUFnQkMsSUFBeEI7QUFDSSxxQkFBS0gsRUFBRUMsTUFBRixDQUFTRyxPQUFULENBQWlCQyxZQUF0QjtBQUNJQyxvQ0FBZ0JOLEVBQUVDLE1BQUYsQ0FBU00sS0FBVCxDQUFlQyxLQUEvQjtBQUNBO0FBSFI7QUFLSCxTQU5EO0FBT0gsS0FmTDs7O0FBaUJJOzs7Ozs7QUFNQUYsc0JBQWtCLFNBQWxCQSxlQUFrQixDQUFTRyxVQUFULEVBQXFCO0FBQ25DLFlBQU1DLFdBQVdqQixTQUFTQyxhQUFULENBQXVCLHdCQUF2QixDQUFqQjs7QUFFQWUsbUJBQVdFLE1BQVgsQ0FBa0JDLE9BQWxCLENBQTBCLGNBQU07QUFDNUIsZ0JBQU1ULE9BQU9NLFdBQVdJLElBQVgsQ0FBZ0JDLEVBQWhCLENBQWI7QUFDQSxnQkFBTUMsUUFBUUwsU0FBU00sT0FBVCxDQUFpQkMsU0FBakIsQ0FBMkIsSUFBM0IsQ0FBZDtBQUNBLGdCQUFNQyxLQUFLSCxNQUFNSSxpQkFBakI7QUFDQTNCLG1CQUFPNEIsV0FBUCxDQUFtQkYsRUFBbkI7O0FBRUFBLGVBQUd4QixhQUFILENBQWlCLHNCQUFqQixFQUF5QzJCLFNBQXpDLEdBQXFEbEIsS0FBS21CLElBQTFEO0FBQ0FKLGVBQUdLLE9BQUgsQ0FBV3BCLElBQVgsR0FBa0JXLEVBQWxCO0FBQ0FJLGVBQUd0QixnQkFBSCxDQUFvQixXQUFwQixFQUFpQzRCLFdBQWpDO0FBQ0gsU0FURDtBQVVILEtBcENMOzs7QUFzQ0k7OztBQUdBQSxrQkFBYyxTQUFkQSxXQUFjLENBQVN4QixDQUFULEVBQVk7QUFDdEJBLFVBQUV5QixZQUFGLENBQWVDLE9BQWYsQ0FBdUIsWUFBdkIsRUFBcUMxQixFQUFFMkIsTUFBRixDQUFTSixPQUFULENBQWlCcEIsSUFBdEQ7QUFDSCxLQTNDTDtBQUFBLFFBNkNJTixjQUFjLFNBQWRBLFdBQWMsQ0FBU0csQ0FBVCxFQUFZO0FBQ3RCQSxVQUFFNEIsY0FBRjtBQUNILEtBL0NMO0FBQUEsUUFpREk5QixhQUFhLFNBQWJBLFVBQWEsQ0FBU0UsQ0FBVCxFQUFZO0FBQ3JCQSxVQUFFNEIsY0FBRjtBQUNILEtBbkRMOztBQXFEQXRDLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQUs7O0FBRUEsV0FBT0wsSUFBUDtBQUNIIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWJyYXJ5IGZvciBhbGwgcHJvY2Vzc29yIHR5cGVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVMaWJyYXJ5VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgbGlzdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpYnJhcnlfX2xpc3QnKSxcblxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBvbkRyYWdFbnRlcik7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRHJhZ092ZXIpO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHN0b3JlLlNUQVRFX0NIQU5HRSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuZGV0YWlsLmFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5SRVNDQU5fVFlQRVM6XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUxpYnJhcnkoZS5kZXRhaWwuc3RhdGUudHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUG9wdWxhdGUgdGhlIGxpYnJhcnkgd2l0aCBhbGwgYXZhaWxhYmxlIHByb2Nlc3NvciB0eXBlcy5cbiAgICAgICAgICogUHJvY2Vzc29yIHR5cGVzIGFyZSBub3Qgc2hvd24gaW4gdGhlIGxpYnJheSBcbiAgICAgICAgICogaWYgdGhleSBoYXZlIHRoZSBmbGFnIGV4Y2x1ZGVkRnJvbUxpYnJhcnkgPSB0cnVlXG4gICAgICAgICAqIGluIHRoZWlyIGNvbmZpZy5qc29uIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBwb3B1bGF0ZUxpYnJhcnkgPSBmdW5jdGlvbih0eXBlc1RhYmxlKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1saWJyYXJ5LWl0ZW0nKTtcblxuICAgICAgICAgICAgdHlwZXNUYWJsZS5hbGxJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVzVGFibGUuYnlJZFtpZF07XG4gICAgICAgICAgICAgICAgY29uc3QgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGNsb25lLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICAgICAgICAgIGxpc3RFbC5hcHBlbmRDaGlsZChlbCk7XG5cbiAgICAgICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcubGlicmFyeV9faXRlbS1sYWJlbCcpLmlubmVySFRNTCA9IHR5cGUubmFtZTtcbiAgICAgICAgICAgICAgICBlbC5kYXRhc2V0LnR5cGUgPSBpZDtcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBvbkRyYWdTdGFydCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZSB0eXBlIG9mIHByb2Nlc3NvciB3aGVuIGRyYWcgc3RhcnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgb25EcmFnU3RhcnQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgZS50YXJnZXQuZGF0YXNldC50eXBlKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uRHJhZ0VudGVyID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25EcmFnT3ZlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfTtcbiAgICBcbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcblxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L2xpYnJhcnkuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDINetwork;\n/**\n * Manages the graph of midi processors.\n */\nfunction createMIDINetwork(specs, my) {\n    var that,\n        store = specs.store,\n        processors = [],\n        numProcessors = 0,\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            var _e$detail = e.detail,\n                action = _e$detail.action,\n                actions = _e$detail.actions,\n                state = _e$detail.state;\n\n            switch (action.type) {\n                case actions.CREATE_PROJECT:\n                    disconnectProcessors(state.connections);\n                    deleteProcessors(state.processors);\n                    createProcessors(state);\n                    break;\n\n                case actions.ADD_PROCESSOR:\n                    createProcessors(state);\n                    break;\n\n                case actions.DELETE_PROCESSOR:\n                    disconnectProcessors(state.connections);\n                    deleteProcessors(state.processors);\n                    reorderProcessors(state.processors);\n                    break;\n\n                case actions.CONNECT_PROCESSORS:\n                    connectProcessors(state.connections);\n                    reorderProcessors(state.processors);\n                    break;\n\n                case actions.DISCONNECT_PROCESSORS:\n                    disconnectProcessors(state.connections);\n                    reorderProcessors(state.processors);\n                    break;\n            }\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 83:\n                    // s\n                    console.log('    ++++    ');\n                    processors.forEach(function (processor) {\n                        console.log('network processor', processor.getID());\n                    });\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Create a new processor in the network.\n     * @param {Object} state State processors table.\n     */\n    createProcessors = async function createProcessors(state) {\n        var loaded = 0;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            var _loop = async function _loop() {\n                var id = _step.value;\n\n                var processorData = state.processors.byId[id];\n                var isExists = processors.find(function (processor) {\n                    return processor.getID() === id;\n                });\n                if (!isExists) {\n                    var module = await new Promise(function (resolve) {\n                        __webpack_require__.e/* require.ensure */(1).then((function (require) {\n                            resolve(__webpack_require__(35)(\"./\" + processorData.type + '/processor.js'));\n                        }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n                    });\n                    var processor = module.createProcessor({\n                        that: {},\n                        data: processorData,\n                        store: store\n                    });\n                    processors.push(processor);\n                    numProcessors = processors.length;\n\n                    loaded += 1;\n                    if (loaded === state.processors.allIds.length) {\n                        connectProcessors(state.connections);\n                        reorderProcessors(state.processors);\n                    }\n                }\n            };\n\n            for (var _iterator = state.processors.allIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                await _loop();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        ;\n    },\n\n\n    /**\n     * Delete a processor.\n     * @param {Object} state State processors table.\n     */\n    deleteProcessors = function deleteProcessors(processorsState) {\n        var _loop2 = function _loop2(i, n) {\n            // search for the processor in the state\n            var exists = false;\n            processorsState.allIds.forEach(function (processorID) {\n                if (processorID === processors[i].getID()) {\n                    exists = true;\n                }\n            });\n\n            // remove processor if it doesn't exist in the state\n            if (!exists) {\n                var processor = processors[i];\n                if (processor.terminate instanceof Function) {\n                    processor.terminate();\n                }\n                processors.splice(i, 1);\n            }\n        };\n\n        for (var i = processors.length - 1, n = 0; i >= n; i--) {\n            _loop2(i, n);\n        }\n        numProcessors = processors.length;\n    },\n\n\n    /**\n     * Go through all connection data and create the connections \n     * that don't yet exist.\n     */\n    connectProcessors = function connectProcessors(connections) {\n        connections.allIds.forEach(function (connectionID) {\n            var connection = connections.byId[connectionID];\n            processors.forEach(function (sourceProcessor) {\n                if (sourceProcessor.getID() === connection.sourceProcessorID) {\n                    var _exists = false;\n                    sourceProcessor.getDestinations().forEach(function (destinationProcessor) {\n                        if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                            _exists = true;\n                        }\n                    });\n                    if (!_exists) {\n                        processors.forEach(function (destinationProcessor) {\n                            if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                                sourceProcessor.connect(destinationProcessor);\n                            }\n                        });\n                    }\n                }\n            });\n        });\n    },\n\n\n    /**\n     * Go through all processor outputs and check if \n     * they still exist in the state. If not, disconnect them.\n     * \n     * TODO: allow for processors with multiple inputs or outputs.\n     */\n    disconnectProcessors = function disconnectProcessors(connections) {\n        processors.forEach(function (sourceProcessor) {\n            if (sourceProcessor.getDestinations instanceof Function) {\n                var destinationProcessors = sourceProcessor.getDestinations();\n                destinationProcessors.forEach(function (destinationProcessor) {\n                    var exists = false;\n                    connections.allIds.forEach(function (connectionID) {\n                        var connection = connections.byId[connectionID];\n                        if (connection.sourceProcessorID === sourceProcessor.getID() && connection.destinationProcessorID === destinationProcessor.getID()) {\n                            exists = true;\n                        }\n                    });\n                    if (!exists) {\n                        sourceProcessor.disconnect(destinationProcessor);\n                    }\n                });\n            }\n        });\n    },\n\n\n    /**\n     * Reorder the processors according to their order in the state.\n     * @param {Object} State processor table.\n     */\n    reorderProcessors = function reorderProcessors(processorsState) {\n        var orderedProcessors = [];\n        processorsState.allIds.forEach(function (processorID) {\n            processors.forEach(function (processor) {\n                if (processor.getID() === processorID) {\n                    orderedProcessors.push(processor);\n                }\n            });\n        });\n        processors = orderedProcessors;\n    },\n\n\n    /**\n     * Let all processors process their data.\n     * @param {Number} start Start time in ticks of timespan to process.\n     * @param {Number} end End time in ticks of timespan to process.\n     * @param {Number} nowToScanStart Duration from now until start time in ticks.\n     * @param {Number} ticksToMsMultiplier Ticks to ms. conversion multiplier.\n     * @param {Number} offset Position of transport playhead in ticks.\n     * @param {Object} processorEvents Object to collect processor generated events to displayin the view.\n     */\n    process = function process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n        for (var i = 0; i < numProcessors; i++) {\n            processors[i].process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents);\n        }\n    };\n\n    my = my || {};\n\n    that = specs.that;\n\n    init();\n\n    that.process = process;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createPreferencesView;\n\nvar _midi_input = __webpack_require__(27);\n\nvar _midi_input2 = _interopRequireDefault(_midi_input);\n\nvar _midi_output = __webpack_require__(28);\n\nvar _midi_output2 = _interopRequireDefault(_midi_output);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Preferences settings view.\n */\nfunction createPreferencesView(specs) {\n    var that,\n        store = specs.store,\n        preferencesEl = document.querySelector('.prefs'),\n        midiInputsEl = document.querySelector('.prefs__inputs'),\n        midiOutputsEl = document.querySelector('.prefs__outputs'),\n        midiPortViews = [],\n        controls = {\n        darkTheme: {\n            type: 'checkbox',\n            input: document.querySelector('.prefs__dark-theme')\n        }\n    },\n        init = function init() {\n        controls.darkTheme.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTheme(e.target.checked));\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_THEME:\n                    updateControl('dark-theme', e.detail.state.theme === 'dark');\n                    break;\n\n                case e.detail.actions.CREATE_MIDI_PORT:\n                case e.detail.actions.UPDATE_MIDI_PORT:\n                case e.detail.actions.MIDI_PORT_CHANGE:\n                    updateMIDIPortViews(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Callback function to update one of the controls after if the\n     * preference's state changed.\n     * @param {String} key Key that indicates the control.\n     * @param {Boolean} value Value of the control.\n     */\n    updateControl = function updateControl(key, value) {\n        switch (key) {\n            case 'dark-theme':\n                controls.darkTheme.input.checked = value;\n                break;\n        }\n    },\n\n\n    /**\n     * Update lists of ports after a change.\n     * @param {Array} ports MIDI port objects.\n     */\n    updateMIDIPortViews = function updateMIDIPortViews(ports) {\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            var view = midiPortViews.find(function (view) {\n                return port.id === view.getID();\n            });\n            if (view && port.state === 'disconnected') {\n                view.terminate();\n                midiPortViews.splice(midiPortViews.findIndex(function (view) {\n                    return port.id === view.getID();\n                }), 1);\n            }\n            if (!view && port.state === 'connected') {\n                var createFunction = void 0,\n                    parentEl = void 0;\n                if (port.type === 'input') {\n                    createFunction = _midi_input2.default;\n                    parentEl = midiInputsEl;\n                } else {\n                    createFunction = _midi_output2.default;\n                    parentEl = midiOutputsEl;\n                }\n                midiPortViews.push(createFunction({\n                    store: store,\n                    id: port.id,\n                    name: port.name,\n                    parentEl: parentEl,\n                    isInput: port.type === 'input',\n                    syncEnabled: port.syncEnabled,\n                    remoteEnabled: port.remoteEnabled,\n                    networkEnabled: port.networkEnabled\n                }));\n            }\n        });\n    };\n\n    that = specs.that;\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIInputView;\n\nvar _midi_base = __webpack_require__(6);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Input processor view.\n */\nfunction createMIDIInputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.networkEl.dataset.disabled = 'true';\n        my.networkEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX2lucHV0LmpzPzdjZTUiXSwibmFtZXMiOlsiY3JlYXRlTUlESUlucHV0VmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwiaW5pdCIsIm5ldHdvcmtFbCIsImRhdGFzZXQiLCJkaXNhYmxlZCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUt3QkEsbUI7O0FBTHhCOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxFQUFwQyxFQUF3QztBQUNuRCxRQUFJQyxJQUFKOzs7QUFFSTs7OztBQUlBQyxXQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixXQUFHRyxTQUFILENBQWFDLE9BQWIsQ0FBcUJDLFFBQXJCLEdBQWdDLE1BQWhDO0FBQ0FMLFdBQUdHLFNBQUgsQ0FBYUcsYUFBYixDQUEyQixPQUEzQixFQUFvQ0MsWUFBcEMsQ0FBaUQsVUFBakQsRUFBNkQsVUFBN0Q7QUFDSCxLQVRMOztBQVdBUCxTQUFLQSxNQUFNLEVBQVg7O0FBRUFDLFdBQU8seUJBQW1CRixLQUFuQixFQUEwQkMsRUFBMUIsQ0FBUDs7QUFFQUU7O0FBRUEsV0FBT0QsSUFBUDtBQUNIIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU1JRElCYXNlVmlldyBmcm9tICcuL21pZGlfYmFzZS5qcyc7XG5cbi8qKlxuICogTUlESSBJbnB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUlucHV0VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGluaXQgZnVuY3Rpb24gaXMgY2FsbGVkIGFmdGVyIHRoZSBiYXNlIHZpZXcncyBpbml0aWFsaXNlIGZ1bmN0aW9uLFxuICAgICAgICAgKiBzbyBwcm9wZXJ0aWVzIG9mIG9uICdteScgYXJlIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG15Lm5ldHdvcmtFbC5kYXRhc2V0LmRpc2FibGVkID0gJ3RydWUnO1xuICAgICAgICAgICAgbXkubmV0d29ya0VsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jykuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVNSURJQmFzZVZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG5cbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L21pZGlfaW5wdXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIOutputView;\n\nvar _midi_base = __webpack_require__(6);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Output processor view.\n */\nfunction createMIDIOutputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.syncEl.dataset.disabled = 'true';\n        my.syncEl.querySelector('input').setAttribute('disabled', 'disabled');\n        my.remoteEl.dataset.disabled = 'true';\n        my.remoteEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcz83Nzk4Il0sIm5hbWVzIjpbImNyZWF0ZU1JRElPdXRwdXRWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJpbml0Iiwic3luY0VsIiwiZGF0YXNldCIsImRpc2FibGVkIiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsInJlbW90ZUVsIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLG9COztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLG9CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsRUFBckMsRUFBeUM7QUFDcEQsUUFBSUMsSUFBSjs7O0FBRUk7Ozs7QUFJQUMsV0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEYsV0FBR0csTUFBSCxDQUFVQyxPQUFWLENBQWtCQyxRQUFsQixHQUE2QixNQUE3QjtBQUNBTCxXQUFHRyxNQUFILENBQVVHLGFBQVYsQ0FBd0IsT0FBeEIsRUFBaUNDLFlBQWpDLENBQThDLFVBQTlDLEVBQTBELFVBQTFEO0FBQ0FQLFdBQUdRLFFBQUgsQ0FBWUosT0FBWixDQUFvQkMsUUFBcEIsR0FBK0IsTUFBL0I7QUFDQUwsV0FBR1EsUUFBSCxDQUFZRixhQUFaLENBQTBCLE9BQTFCLEVBQW1DQyxZQUFuQyxDQUFnRCxVQUFoRCxFQUE0RCxVQUE1RDtBQUNILEtBWEw7O0FBYUFQLFNBQUtBLE1BQU0sRUFBWDs7QUFFQUMsV0FBTyx5QkFBbUJGLEtBQW5CLEVBQTBCQyxFQUExQixDQUFQOztBQUVBRTs7QUFFQSxXQUFPRCxJQUFQO0FBQ0giLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTUlESUJhc2VWaWV3IGZyb20gJy4vbWlkaV9iYXNlLmpzJztcblxuLyoqXG4gKiBNSURJIE91dHB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESU91dHB1dFZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpbml0IGZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciB0aGUgYmFzZSB2aWV3J3MgaW5pdGlhbGlzZSBmdW5jdGlvbixcbiAgICAgICAgICogc28gcHJvcGVydGllcyBvZiBvbiAnbXknIGFyZSBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBteS5zeW5jRWwuZGF0YXNldC5kaXNhYmxlZCA9ICd0cnVlJztcbiAgICAgICAgICAgIG15LnN5bmNFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIG15LnJlbW90ZUVsLmRhdGFzZXQuZGlzYWJsZWQgPSAndHJ1ZSc7XG4gICAgICAgICAgICBteS5yZW1vdGVFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlTUlESUJhc2VWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteView;\n\nvar _remote_group = __webpack_require__(30);\n\nvar _remote_group2 = _interopRequireDefault(_remote_group);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Overview list of all assigned MIDI controller assignments.\n */\nfunction createRemoteView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.remote__list'),\n        groupViews = {\n        byId: {},\n        allIds: []\n    },\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    createRemoteGroups(e.detail.state);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createRemoteGroup(e.detail.state.processors.byId[e.detail.action.data.id]);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteRemoteGroups(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n                    if (e.detail.state.learnTargetProcessorID) {\n                        var _groupView = groupViews.byId[e.detail.state.learnTargetProcessorID],\n                            _processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                        if (!_groupView) {\n                            createRemoteGroups(e.detail.state);\n                        } else {\n                            _groupView.updateViews(e.detail.state);\n                        }\n                    }\n                    break;\n\n                case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                    var groupView = groupViews.byId[e.detail.action.processorID],\n                        processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                    if (groupView && processor) {\n                        groupView.updateViews(e.detail.state);\n                    }\n                    break;\n            }\n        });\n    },\n        createRemoteGroups = function createRemoteGroups(state) {\n        state.assignments.allIds.forEach(function (assignID) {\n            var assignment = state.assignments.byId[assignID];\n            if (!groupViews.byId[assignment.processorID]) {\n                createRemoteGroup(state.processors.byId[assignment.processorID]);\n            }\n        });\n\n        // processors.allIds.forEach(id => {\n        //     if (!groupViews.byId[id]) {\n        //         const processor = processors.byId[id];\n        //         let hasAssignment = false;\n        //         processor.params.allIds.forEach(id => {\n        //             const param = processor.params.byId[id];\n        //             if (param.isMidiControllable && param.remoteChannel && param.remoteCC != null) {\n        //                 hasAssignment = true;\n        //             }\n        //         });\n        //         if (hasAssignment) {\n        //             createRemoteGroup(processor);\n        //         }\n        //     }\n        // });\n    },\n\n\n    /**\n     * Create a container view to hold assigned parameter views.\n     * @param {Array} processors Processor list.\n     */\n    createRemoteGroup = function createRemoteGroup(processor) {\n        if (!groupViews.byId[processor.id]) {\n            groupViews.allIds.push(processor.id);\n            groupViews.byId[processor.id] = (0, _remote_group2.default)({\n                store: store,\n                processorID: processor.id,\n                parentEl: listEl\n            });\n        }\n    },\n\n\n    /**\n     * Delete a container view to hold assigned parameter views.\n     * @param {Object} processor Processor with assignable parameters.\n     */\n    deleteRemoteGroups = function deleteRemoteGroups(processors) {\n        var n = groupViews.allIds.length;\n        for (var i = groupViews.allIds.length - 1; i >= 0; i--) {\n            var id = groupViews.allIds[i];\n            if (!processors.byId[id]) {\n                groupViews.allIds.splice(i, 1);\n                groupViews.byId[id].terminate();\n                delete groupViews.byId[id];\n            }\n        }\n    },\n        that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteGroupView;\n\nvar _remote_item = __webpack_require__(31);\n\nvar _remote_item2 = _interopRequireDefault(_remote_item);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Group within overview list of all assigned MIDI controller assignments.\n * The items are grouped by processor.\n */\nfunction createRemoteGroupView(specs, my) {\n    var that,\n        store = specs.store,\n        processorID = specs.processorID,\n        parentEl = specs.parentEl,\n        el,\n        listEl,\n        nameParam,\n        views = {\n        byId: {},\n        allIds: []\n    },\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-group');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        parentEl.appendChild(el);\n\n        listEl = el.querySelector('.remote__group-list');\n\n        var state = store.getState();\n        setName(state.processors.byId[processorID].params.byId.name.value);\n        updateViews(state);\n\n        document.addEventListener(store.STATE_CHANGE, handleStateChange);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChange);\n\n        views.allIds.forEach(function (id) {\n            views.byId[id].terminate();\n        });\n\n        parentEl.removeChild(el);\n        views = null;\n        parentEl = null;\n    },\n        handleStateChange = function handleStateChange(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === processorID && e.detail.action.paramKey === 'name') {\n                    setName(e.detail.state.processors.byId[processorID].params.byId.name.value);\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Update list to contain all assignments.\n     */\n    updateViews = function updateViews(state) {\n        state.processors.byId[processorID].params.allIds.forEach(function (paramKey) {\n\n            // search assignment for this parameter\n            var assignment = void 0;\n            state.assignments.allIds.forEach(function (assignID) {\n                var assign = state.assignments.byId[assignID];\n                if (assign.processorID === processorID && assign.paramKey === paramKey) {\n                    assignment = assign;\n                }\n            });\n\n            // create or delete the parameter's view\n            var view = views.byId[paramKey];\n            if (assignment && !view) {\n                var param = state.processors.byId[processorID].params.byId[paramKey];\n                addView(paramKey, param.label, assignment.remoteChannel, assignment.remoteCC);\n            } else if (!assignment && view) {\n                removeView(paramKey);\n            }\n        });\n\n        // show group if there are assignments\n        el.dataset.hasAssignments = views.allIds.length > 0;\n    },\n        addView = function addView(paramKey, paramLabel, remoteChannel, remoteCC) {\n        views.byId[paramKey] = (0, _remote_item2.default)({\n            store: store,\n            paramKey: paramKey,\n            paramLabel: paramLabel,\n            processorID: processorID,\n            remoteChannel: remoteChannel,\n            remoteCC: remoteCC,\n            parentEl: listEl\n        });\n        views.allIds.push(paramKey);\n    },\n        removeView = function removeView(paramKey) {\n        views.byId[paramKey].terminate();\n        delete views.byId[paramKey];\n        views.allIds.splice(views.allIds.indexOf(paramKey), 1);\n    },\n\n\n    /**\n     * If a group has no assignments its header is hidden.\n     */\n    updateGroupVisibility = function updateGroupVisibility() {\n        el.dataset.hasAssignments = itemViews.length > 0;\n    },\n\n\n    /**\n     * Set the group's header to the processor's name.\n     * @param {String} name Processor's name.\n     */\n    setName = function setName(name) {\n        el.querySelector('.remote__group-header-label').innerHTML = name;\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.updateViews = updateViews;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteItemView;\n/**\n * View for a parameter that's linked to a remote MIDI controller.\n * The items are grouped by processor.\n */\nfunction createRemoteItemView(specs, my) {\n    var that,\n        store = specs.store,\n        paramKey = specs.paramKey,\n        paramLabel = specs.paramLabel,\n        processorID = specs.processorID,\n        remoteChannel = specs.remoteChannel,\n        remoteCC = specs.remoteCC,\n        parentEl = specs.parentEl,\n        el,\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-item');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        el.querySelector('.remote__item-label').innerHTML = paramLabel;\n        el.querySelector('.remote__item-channel').innerHTML = remoteChannel;\n        el.querySelector('.remote__item-control').innerHTML = remoteCC;\n        parentEl.appendChild(el);\n\n        // add DOM event listeners\n        el.querySelector('.remote__item-delete').addEventListener('click', onUnregisterClick);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        el.querySelector('.remote__item-delete').removeEventListener('click', onUnregisterClick);\n        parentEl.removeChild(el);\n        parentEl = null;\n    },\n\n\n    /**\n     * Unassign button click handler.\n     * @param  {Object} e Click event object.\n     */\n    onUnregisterClick = function onUnregisterClick(e) {\n        store.dispatch(store.getActions().unassignExternalControl(processorID, paramKey));\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     * @param {Function} callback Not used here.\n     */\n    changeRemoteState = function changeRemoteState(state, callback) {\n        switch (state) {\n            case 'assigned':\n                // TODO: normale tekst\n                break;\n            case 'inactive':\n                // TODO: tekst grijs of zoiets\n                break;\n        }\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcz82ZWZmIl0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZUl0ZW1WaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJzdG9yZSIsInBhcmFtS2V5IiwicGFyYW1MYWJlbCIsInByb2Nlc3NvcklEIiwicmVtb3RlQ2hhbm5lbCIsInJlbW90ZUNDIiwicGFyZW50RWwiLCJlbCIsImluaXRpYWxpemUiLCJ0ZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lIiwiY29udGVudCIsImNsb25lTm9kZSIsImZpcnN0RWxlbWVudENoaWxkIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwib25VbnJlZ2lzdGVyQ2xpY2siLCJ0ZXJtaW5hdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwidW5hc3NpZ25FeHRlcm5hbENvbnRyb2wiLCJjaGFuZ2VSZW1vdGVTdGF0ZSIsInN0YXRlIiwiY2FsbGJhY2siXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUl3QkEsb0I7QUFKeEI7Ozs7QUFJZSxTQUFTQSxvQkFBVCxDQUE4QkMsS0FBOUIsRUFBcUNDLEVBQXJDLEVBQXlDO0FBQ3BELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxRQUFRSCxNQUFNRyxLQURsQjtBQUFBLFFBRUlDLFdBQVdKLE1BQU1JLFFBRnJCO0FBQUEsUUFHSUMsYUFBYUwsTUFBTUssVUFIdkI7QUFBQSxRQUlJQyxjQUFjTixNQUFNTSxXQUp4QjtBQUFBLFFBS0lDLGdCQUFnQlAsTUFBTU8sYUFMMUI7QUFBQSxRQU1JQyxXQUFXUixNQUFNUSxRQU5yQjtBQUFBLFFBT0lDLFdBQVdULE1BQU1TLFFBUHJCO0FBQUEsUUFRSUMsRUFSSjtBQUFBLFFBVUlDLGFBQWEsU0FBYkEsVUFBYSxHQUFXO0FBQ3BCO0FBQ0EsWUFBSUMsV0FBV0MsU0FBU0MsYUFBVCxDQUF1Qix1QkFBdkIsQ0FBZjtBQUNBLFlBQUlDLFFBQVFILFNBQVNJLE9BQVQsQ0FBaUJDLFNBQWpCLENBQTJCLElBQTNCLENBQVo7QUFDQVAsYUFBS0ssTUFBTUcsaUJBQVg7QUFDQVIsV0FBR0ksYUFBSCxDQUFpQixxQkFBakIsRUFBd0NLLFNBQXhDLEdBQW9EZCxVQUFwRDtBQUNBSyxXQUFHSSxhQUFILENBQWlCLHVCQUFqQixFQUEwQ0ssU0FBMUMsR0FBc0RaLGFBQXREO0FBQ0FHLFdBQUdJLGFBQUgsQ0FBaUIsdUJBQWpCLEVBQTBDSyxTQUExQyxHQUFzRFgsUUFBdEQ7QUFDQUMsaUJBQVNXLFdBQVQsQ0FBcUJWLEVBQXJCOztBQUVBO0FBQ0FBLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDTyxnQkFBekMsQ0FBMEQsT0FBMUQsRUFBbUVDLGlCQUFuRTtBQUNILEtBdEJMOzs7QUF3Qkk7OztBQUdBQyxnQkFBWSxTQUFaQSxTQUFZLEdBQVc7QUFDbkJiLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDVSxtQkFBekMsQ0FBNkQsT0FBN0QsRUFBc0VGLGlCQUF0RTtBQUNBYixpQkFBU2dCLFdBQVQsQ0FBcUJmLEVBQXJCO0FBQ0FELG1CQUFXLElBQVg7QUFDSCxLQS9CTDs7O0FBaUNJOzs7O0FBSUFhLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNJLENBQVQsRUFBWTtBQUM1QnZCLGNBQU13QixRQUFOLENBQWV4QixNQUFNeUIsVUFBTixHQUFtQkMsdUJBQW5CLENBQTJDdkIsV0FBM0MsRUFBd0RGLFFBQXhELENBQWY7QUFDSCxLQXZDTDs7O0FBeUNJOzs7Ozs7QUFNQTBCLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNDLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQTBCO0FBQzFDLGdCQUFRRCxLQUFSO0FBQ0ksaUJBQUssVUFBTDtBQUNJO0FBQ0E7QUFDSixpQkFBSyxVQUFMO0FBQ0k7QUFDQTtBQU5SO0FBUUgsS0F4REw7O0FBMERBN0IsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBUzs7QUFFQVQsU0FBS3FCLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsV0FBT3JCLElBQVA7QUFDSCIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmlldyBmb3IgYSBwYXJhbWV0ZXIgdGhhdCdzIGxpbmtlZCB0byBhIHJlbW90ZSBNSURJIGNvbnRyb2xsZXIuXG4gKiBUaGUgaXRlbXMgYXJlIGdyb3VwZWQgYnkgcHJvY2Vzc29yLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZW1vdGVJdGVtVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgcGFyYW1LZXkgPSBzcGVjcy5wYXJhbUtleSxcbiAgICAgICAgcGFyYW1MYWJlbCA9IHNwZWNzLnBhcmFtTGFiZWwsXG4gICAgICAgIHByb2Nlc3NvcklEID0gc3BlY3MucHJvY2Vzc29ySUQsXG4gICAgICAgIHJlbW90ZUNoYW5uZWwgPSBzcGVjcy5yZW1vdGVDaGFubmVsLFxuICAgICAgICByZW1vdGVDQyA9IHNwZWNzLnJlbW90ZUNDLFxuICAgICAgICBwYXJlbnRFbCA9IHNwZWNzLnBhcmVudEVsLFxuICAgICAgICBlbCxcbiAgICAgICAgXG4gICAgICAgIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQuXG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtcmVtb3RlLWl0ZW0nKTtcbiAgICAgICAgICAgIGxldCBjbG9uZSA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgZWwgPSBjbG9uZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2l0ZW0tbGFiZWwnKS5pbm5lckhUTUwgPSBwYXJhbUxhYmVsO1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1jaGFubmVsJykuaW5uZXJIVE1MID0gcmVtb3RlQ2hhbm5lbDtcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2l0ZW0tY29udHJvbCcpLmlubmVySFRNTCA9IHJlbW90ZUNDO1xuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhZGQgRE9NIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1kZWxldGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uVW5yZWdpc3RlckNsaWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgYmVmb3JlIHRoaXMgdmlldyBpcyBkZWxldGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGVybWluYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWRlbGV0ZScpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25VbnJlZ2lzdGVyQ2xpY2spO1xuICAgICAgICAgICAgcGFyZW50RWwucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgcGFyZW50RWwgPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuYXNzaWduIGJ1dHRvbiBjbGljayBoYW5kbGVyLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGUgQ2xpY2sgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgb25VbnJlZ2lzdGVyQ2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzdG9yZS5nZXRBY3Rpb25zKCkudW5hc3NpZ25FeHRlcm5hbENvbnRyb2wocHJvY2Vzc29ySUQsIHBhcmFtS2V5KSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RhdGUgb2YgdGhlIHBhcmFtZXRlciBpbiB0aGUgYXNzaWdubWVudCBwcm9jZXNzIGNoYW5nZWQsXG4gICAgICAgICAqIHRoZSBlbGVtZW50IHdpbGwgc2hvdyB0aGlzIHZpc3VhbGx5LlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgTmV3IHN0YXRlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIE5vdCB1c2VkIGhlcmUuXG4gICAgICAgICAqL1xuICAgICAgICBjaGFuZ2VSZW1vdGVTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Fzc2lnbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogbm9ybWFsZSB0ZWtzdFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdpbmFjdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHRla3N0IGdyaWpzIG9mIHpvaWV0c1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgaW5pdGlhbGl6ZSgpO1xuXG4gICAgdGhhdC50ZXJtaW5hdGUgPSB0ZXJtaW5hdGU7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createSequencer = createSequencer;\nexports.default = createTransport;\n/**\n * Timing, transport and sequencing functionality.\n * Divided in two sets of functionality, Transport and Sequencer.\n * \n * Unix epoch,                page    AudioContext   Transport        now,\n * 01-01-1970 00:00:00 UTC    load    created        start            the present\n *  |                          |       |              |                | \n *  |--------------------------|-------|-------//-----|--------//------|\n *  \n *  |------------------------------------------------------------------> Date.now()\n *                             |---------------------------------------> performance.now()\n *                                     |-------------------------------> AudioContext.currentTime\n */\n\n/**\n * @description Creates sequencer functionality.\n * Takes time from transport to get music events from arrangement and\n * drives components that process music events.\n * @param {Object} specs External specifications.\n * @param {Object} my Internally shared properties.\n */\nfunction createSequencer(specs, my) {\n    var that,\n        canvasView = specs.canvasView,\n        midiNetwork = specs.midiNetwork,\n        ppqn = 480,\n        bpm = 120,\n        lastBpm = bpm,\n        tickInMilliseconds,\n        audioContextOffset = 0,\n        timelineOffset = 0,\n        playbackQueue = [],\n        renderThrottleCounter = 0,\n        processorEvents = {},\n\n\n    /**\n     * Scan the arrangement for events and send them to concerned components.\n     * @param {Number} scanStart Start in ms of timespan to scan.\n     * @param {Number} scanEnd End in ms of timespan to scan.\n     * @param {Number} nowToScanStart Duration from now until start time in ms.\n     * @param {Number} offset Position of transport playhead in ms.\n     */\n    scanEvents = function scanEvents(scanStart, scanEnd, nowToScanStart, offset) {\n        midiNetwork.process(msec2tick(scanStart), msec2tick(scanEnd), msec2tick(nowToScanStart), tickInMilliseconds, msec2tick(offset), processorEvents);\n    },\n\n\n    /**\n     * Use Timing's requestAnimationFrame as clock for view updates.\n     * @param {Number} position Timing position, equal to performance.now(). \n     */\n    updateView = function updateView(position) {\n        if (renderThrottleCounter % 2 === 0) {\n            canvasView.draw(msec2tick(position), processorEvents);\n            Object.keys(processorEvents).forEach(function (v) {\n                return processorEvents[v] = [];\n            });\n        }\n        renderThrottleCounter++;\n    },\n\n\n    /**\n     * Convert milliseconds to ticks.\n     */\n    msec2tick = function msec2tick(sec) {\n        return sec / tickInMilliseconds;\n    },\n\n\n    /**\n     * Convert ticks to milliseconds.\n     */\n    tick2msec = function tick2msec(tick) {\n        return tick * tickInMilliseconds;\n    },\n\n\n    /**\n     * Set Beats Per Minute.\n     * @param {Number} newBpm New value for BPM.\n     */\n    setBPM = function setBPM() {\n        var newBpm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 120;\n\n        bpm = newBpm;\n        var beatInMilliseconds = 60000.0 / bpm;\n        tickInMilliseconds = beatInMilliseconds / ppqn;\n        // calculate change factor\n        var factor = lastBpm / bpm;\n        my.setLoopByFactor(factor);\n    },\n\n\n    /**\n     * Get Beats Per Minute of the project.\n     * @return [Number] Beats Per Minute.\n     */\n    getBPM = function getBPM() {\n        return bpm;\n    },\n\n\n    /**\n     * Set difference between AudioContext.currentTime and performance.now.\n     * Used to convert timing for AudioContext playback.\n     * @param {Number} acCurrentTime Timestamp in seconds.\n     */\n    setAudioContextOffset = function setAudioContextOffset(acCurrentTime) {\n        audioContextOffset = performance.now() - acCurrentTime * 1000;\n    };\n\n    my = my || {};\n    my.setBPM = setBPM;\n    my.store = specs.store;\n    my.scanEvents = scanEvents;\n    my.updateView = updateView;\n\n    that = specs.that || {};\n\n    that.setBPM = setBPM;\n    that.getBPM = getBPM;\n    that.setAudioContextOffset = setAudioContextOffset;\n    return that;\n}\n\n/**\n * Functionality to add synchronisation to external MIDI clock.\n * MIDI clock sends clock events at 24 ppqn.\n * @see https://en.wikipedia.org/wiki/MIDI_beat_clock\n * \n * The MIDI 'start' and 'stop' events just start and stop the transport.\n * The MIDI 'clock' event adjusts the BPM tempo.\n * \n * BPM is calculated with the time difference between clock event timestamps.\n */\nfunction createExternalClock(specs, my) {\n    var that,\n        isEnabled = false,\n        midiInput,\n        prevBPM = 0,\n        prevTimestamp = 0,\n        updateTimeout,\n\n\n    /**\n     * Enable synchronisation to external MIDI clock.\n     * @param {Boolean} isEnabled True to synchronise to external MIDI clock.\n     * @param {Object} midiInputPort MIDI input port.\n     */\n    setExternalClockEnabled = function setExternalClockEnabled(isEnabled, midiInputPort) {\n        if (isEnabled) {\n            midiInput = midiInputPort;\n            midiInput.addListener('start', 1, onStart);\n            midiInput.addListener('stop', 1, onStop);\n            midiInput.addListener('clock', 1, onClock);\n        } else {\n            if (midiInput) {\n                midiInput.removeListener('start', onStart);\n                midiInput.removeListener('stop', onStop);\n                midiInput.removeListener('clock', onClock);\n            }\n            midiInput = null;\n        }\n    },\n\n\n    /**\n     * Start transport.\n     */\n    onStart = function onStart() {\n        that.start();\n    },\n\n\n    /**\n     * Stop transport.\n     */\n    onStop = function onStop() {\n        that.pause();\n        that.rewind();\n    },\n\n\n    /**\n     * Convert events at 24 ppqn to BPM, suppress jitter from unstable clocks.\n     * @param {Object} e Event from WebMIDI.js.\n     */\n    onClock = function onClock(e) {\n        if (prevTimestamp > 0) {\n            var newBPM = 60000 / ((e.timestamp - prevTimestamp) * 24);\n            var bpm = prevBPM ? (prevBPM * 23 + newBPM) / 24 : newBPM;\n            prevBPM = bpm;\n            bpm = bpm.toFixed(1);\n            if (bpm != that.getBPM()) {\n                updateTempo(bpm);\n            }\n        }\n        prevTimestamp = e.timestamp;\n    },\n\n\n    /**\n     * Update tempo no more than once every 500ms.\n     * @param {Number} bpm The new changed BPM.\n     */\n    updateTempo = function updateTempo(bpm) {\n        if (!updateTimeout) {\n            that.setBPM(bpm);\n            updateTimeout = setTimeout(function () {\n                updateTimeout = 0;\n            }, 500);\n        }\n    };\n\n    that = specs.that || {};\n\n    that.setExternalClockEnabled = setExternalClockEnabled;\n    return that;\n}\n\n/**\n * @description Creates transport timing functionality.\n * Time is always measured in milliseconds since document load.\n * The timer can be started, stopped, rewound to zero and looped.\n * It defines a scan range that is just ahead of the play position\n * and that is meant to be used to scan for events to play.\n * @param {Object} specs Options.\n * @param {Object} my Properties shared between the functionalities of the object.\n */\nfunction createTransport(specs, my) {\n    var that,\n        position = 0,\n        origin = 0,\n        scanStart = 0,\n        scanEnd = 0,\n        lookAhead = 200,\n        loopStart = 0,\n        loopEnd = 0,\n        isRunning = false,\n        isLooping = false,\n        needsScan = false,\n        init = function init() {\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_TRANSPORT:\n                    switch (e.detail.state.transport) {\n                        case 'pause':\n                            pause();\n                            break;\n                        case 'play':\n                            rewind();\n                            start();\n                            break;\n                        case 'stop':\n                            pause();\n                            rewind();\n                            break;\n                    }\n                    break;\n\n                case e.detail.actions.CREATE_PROJECT:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n            }\n        });\n\n        my.setBPM();\n    },\n\n\n    /**\n     * Set the scan range.\n     * @param {Number} start Start timestamp of scan range.\n     */\n    setScanRange = function setScanRange(start) {\n        scanStart = start;\n        scanEnd = scanStart + lookAhead;\n        needsScan = true;\n    },\n\n\n    /**\n     * Updated the playhead position by adjusting the timeline origin.\n     * @param {Number} newOrigin Timeline origin timestamp.\n     */\n    setOrigin = function setOrigin(newOrigin) {\n        loopStart = loopStart - origin + newOrigin;\n        loopEnd = loopEnd - origin + newOrigin;\n        origin = newOrigin;\n    },\n\n\n    /**\n     * Timer using requestAnimationFrame that updates the transport timing.\n     */\n    run = function run() {\n        if (isRunning) {\n            position = performance.now();\n            if (isLooping && position < loopEnd && scanStart < loopEnd && scanEnd > loopEnd) {\n                setOrigin(origin + (loopEnd - loopStart));\n            }\n            if (scanEnd - position < 16.7) {\n                setScanRange(scanEnd);\n            }\n            if (needsScan) {\n                needsScan = false;\n                my.scanEvents(scanStart - origin, scanEnd - origin, scanStart - position, position - origin);\n            }\n        }\n        my.updateView(position - origin);\n        requestAnimationFrame(run);\n    },\n\n\n    /**\n     * Start the timer.\n     */\n    start = function start() {\n        var offset = position - origin;\n        position = performance.now();\n        setOrigin(position - offset);\n        setScanRange(position);\n        isRunning = true;\n    },\n\n\n    /**\n     * Pause the timer.\n     */\n    pause = function pause() {\n        isRunning = false;\n    },\n\n\n    /**\n     * Rewind the timer to timeline start.\n     */\n    rewind = function rewind() {\n        position = performance.now();\n        setOrigin(position);\n        setScanRange(position);\n    },\n\n\n    /**\n     * Toggle between stop and play.\n     */\n    toggleStartStop = function toggleStartStop() {\n        if (isRunning) {\n            pause();\n        } else {\n            rewind();\n            start();\n        }\n    },\n\n\n    /**\n     * Set loop startpoint.\n     * @param {Number} position Loop start timestamp.\n     */\n    setLoopStart = function setLoopStart(position) {\n        loopStart = origin + position;\n    },\n\n\n    /**\n     * Set loop endpoint.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoopEnd = function setLoopEnd(position) {\n        loopEnd = origin + position;\n    },\n\n\n    /**\n     * Set loop mode.\n     * @param {Boolean} isEnabled True to enable looping.\n     * @param {Number} position Loop start timestamp.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoop = function setLoop(isEnabled, startPosition, endPosition) {\n        isLooping = isEnabled;\n    },\n\n\n    /**\n     * Change loop points by a factor if the tempo changes.\n     * @param {number} factor Time points multiplier.\n     */\n    setLoopByFactor = function setLoopByFactor(factor) {\n        setLoopStart(loopStart * factor);\n        setLoopEnd(loopEnd * factor);\n    };\n\n    my = my || {};\n    my.setLoopByFactor = setLoopByFactor;\n\n    that = createSequencer(specs, my);\n    that = createExternalClock(specs, my);\n\n    init();\n\n    that.run = run;\n\n    return that;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ })
/******/ ]);