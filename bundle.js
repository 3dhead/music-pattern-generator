/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		2: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + ".bundle.js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBaseSettingView;\n\nvar _remote = __webpack_require__(17);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createBaseSettingView(specs, my) {\n    var that,\n        initialise = function initialise() {\n        // find template, add clone to settings panel\n        var template = document.querySelector('#template-setting-' + my.data.type);\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        specs.parentEl.appendChild(my.el);\n\n        // show label\n        my.el.querySelector('.setting__label').innerHTML = my.data.label;\n\n        if (my.data.isMidiControllable) {\n            my.changeRemoteState(specs.store.getState());\n        }\n\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.setValue(e.detail.state.processors.byId[my.processorID].params.byId[my.key].value);\n                }\n                break;\n\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.data = e.detail.state.processors.byId[my.processorID].params.byId[my.key];\n                    my.initData();\n                    my.setValue(e.detail.state.processors.byId[my.processorID].params.byId[my.key].value);\n                }\n                break;\n\n            case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n            case e.detail.actions.TOGGLE_MIDI_LEARN_TARGET:\n            case e.detail.actions.SELECT_PROCESSOR:\n            case e.detail.actions.DELETE_PROCESSOR:\n            case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n            case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                if (my.data.isMidiControllable) {\n                    my.changeRemoteState(e.detail.state);\n                }\n                break;\n        }\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.key = specs.key;\n    my.data = specs.data;\n    my.processorID = specs.processorID;\n    my.el;\n\n    that = that || {};\n    if (my.data.isMidiControllable) {\n        that = (0, _remote2.default)(specs, my);\n    }\n\n    initialise();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jhc2UuanM/NDZhNCJdLCJuYW1lcyI6WyJjcmVhdGVCYXNlU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImluaXRpYWxpc2UiLCJ0ZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGEiLCJ0eXBlIiwiY2xvbmUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZWwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsInBhcmVudEVsIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJsYWJlbCIsImlzTWlkaUNvbnRyb2xsYWJsZSIsImNoYW5nZVJlbW90ZVN0YXRlIiwic3RvcmUiLCJnZXRTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJTVEFURV9DSEFOR0UiLCJoYW5kbGVTdGF0ZUNoYW5nZXMiLCJ0ZXJtaW5hdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZSIsImRldGFpbCIsImFjdGlvbiIsImFjdGlvbnMiLCJDSEFOR0VfUEFSQU1FVEVSIiwicHJvY2Vzc29ySUQiLCJwYXJhbUtleSIsImtleSIsInNldFZhbHVlIiwic3RhdGUiLCJwcm9jZXNzb3JzIiwiYnlJZCIsInBhcmFtcyIsInZhbHVlIiwiUkVDUkVBVEVfUEFSQU1FVEVSIiwiaW5pdERhdGEiLCJUT0dHTEVfTUlESV9MRUFSTl9NT0RFIiwiVE9HR0xFX01JRElfTEVBUk5fVEFSR0VUIiwiU0VMRUNUX1BST0NFU1NPUiIsIkRFTEVURV9QUk9DRVNTT1IiLCJBU1NJR05fRVhURVJOQUxfQ09OVFJPTCIsIlVOQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU13QkEscUI7O0FBTnhCOzs7Ozs7QUFFQTs7OztBQUllLFNBQVNBLHFCQUFULENBQStCQyxLQUEvQixFQUFzQ0MsRUFBdEMsRUFBMEM7QUFDckQsUUFBSUMsSUFBSjtBQUFBLFFBRUlDLGFBQWEsU0FBYkEsVUFBYSxHQUFXO0FBQ3BCO0FBQ0EsWUFBSUMsV0FBV0MsU0FBU0MsYUFBVCxDQUF1Qix1QkFBdUJMLEdBQUdNLElBQUgsQ0FBUUMsSUFBdEQsQ0FBZjtBQUNBLFlBQUlDLFFBQVFMLFNBQVNNLE9BQVQsQ0FBaUJDLFNBQWpCLENBQTJCLElBQTNCLENBQVo7QUFDQVYsV0FBR1csRUFBSCxHQUFRSCxNQUFNSSxpQkFBZDtBQUNBYixjQUFNYyxRQUFOLENBQWVDLFdBQWYsQ0FBMkJkLEdBQUdXLEVBQTlCOztBQUVBO0FBQ0FYLFdBQUdXLEVBQUgsQ0FBTU4sYUFBTixDQUFvQixpQkFBcEIsRUFBdUNVLFNBQXZDLEdBQW1EZixHQUFHTSxJQUFILENBQVFVLEtBQTNEOztBQUVBLFlBQUloQixHQUFHTSxJQUFILENBQVFXLGtCQUFaLEVBQWdDO0FBQzVCakIsZUFBR2tCLGlCQUFILENBQXFCbkIsTUFBTW9CLEtBQU4sQ0FBWUMsUUFBWixFQUFyQjtBQUNIOztBQUVEaEIsaUJBQVNpQixnQkFBVCxDQUEwQnJCLEdBQUdtQixLQUFILENBQVNHLFlBQW5DLEVBQWlEQyxrQkFBakQ7QUFDSCxLQWpCTDtBQUFBLFFBbUJJQyxZQUFZLFNBQVpBLFNBQVksR0FBVztBQUNuQnBCLGlCQUFTcUIsbUJBQVQsQ0FBNkJ6QixHQUFHbUIsS0FBSCxDQUFTRyxZQUF0QyxFQUFvREMsa0JBQXBEO0FBQ0gsS0FyQkw7QUFBQSxRQXVCSUEscUJBQXFCLFNBQXJCQSxrQkFBcUIsQ0FBU0csQ0FBVCxFQUFZO0FBQzdCLGdCQUFRQSxFQUFFQyxNQUFGLENBQVNDLE1BQVQsQ0FBZ0JyQixJQUF4QjtBQUNJLGlCQUFLbUIsRUFBRUMsTUFBRixDQUFTRSxPQUFULENBQWlCQyxnQkFBdEI7QUFDSSxvQkFBSUosRUFBRUMsTUFBRixDQUFTQyxNQUFULENBQWdCRyxXQUFoQixLQUFnQy9CLEdBQUcrQixXQUFuQyxJQUNBTCxFQUFFQyxNQUFGLENBQVNDLE1BQVQsQ0FBZ0JJLFFBQWhCLEtBQTZCaEMsR0FBR2lDLEdBRHBDLEVBQ3lDO0FBQ3JDakMsdUJBQUdrQyxRQUFILENBQVlSLEVBQUVDLE1BQUYsQ0FBU1EsS0FBVCxDQUFlQyxVQUFmLENBQTBCQyxJQUExQixDQUErQnJDLEdBQUcrQixXQUFsQyxFQUErQ08sTUFBL0MsQ0FBc0RELElBQXRELENBQTJEckMsR0FBR2lDLEdBQTlELEVBQW1FTSxLQUEvRTtBQUNIO0FBQ0Q7O0FBRUosaUJBQUtiLEVBQUVDLE1BQUYsQ0FBU0UsT0FBVCxDQUFpQlcsa0JBQXRCO0FBQ0ksb0JBQUlkLEVBQUVDLE1BQUYsQ0FBU0MsTUFBVCxDQUFnQkcsV0FBaEIsS0FBZ0MvQixHQUFHK0IsV0FBbkMsSUFDQUwsRUFBRUMsTUFBRixDQUFTQyxNQUFULENBQWdCSSxRQUFoQixLQUE2QmhDLEdBQUdpQyxHQURwQyxFQUN5QztBQUNyQ2pDLHVCQUFHTSxJQUFILEdBQVVvQixFQUFFQyxNQUFGLENBQVNRLEtBQVQsQ0FBZUMsVUFBZixDQUEwQkMsSUFBMUIsQ0FBK0JyQyxHQUFHK0IsV0FBbEMsRUFBK0NPLE1BQS9DLENBQXNERCxJQUF0RCxDQUEyRHJDLEdBQUdpQyxHQUE5RCxDQUFWO0FBQ0FqQyx1QkFBR3lDLFFBQUg7QUFDQXpDLHVCQUFHa0MsUUFBSCxDQUFZUixFQUFFQyxNQUFGLENBQVNRLEtBQVQsQ0FBZUMsVUFBZixDQUEwQkMsSUFBMUIsQ0FBK0JyQyxHQUFHK0IsV0FBbEMsRUFBK0NPLE1BQS9DLENBQXNERCxJQUF0RCxDQUEyRHJDLEdBQUdpQyxHQUE5RCxFQUFtRU0sS0FBL0U7QUFDSDtBQUNEOztBQUVKLGlCQUFLYixFQUFFQyxNQUFGLENBQVNFLE9BQVQsQ0FBaUJhLHNCQUF0QjtBQUNBLGlCQUFLaEIsRUFBRUMsTUFBRixDQUFTRSxPQUFULENBQWlCYyx3QkFBdEI7QUFDQSxpQkFBS2pCLEVBQUVDLE1BQUYsQ0FBU0UsT0FBVCxDQUFpQmUsZ0JBQXRCO0FBQ0EsaUJBQUtsQixFQUFFQyxNQUFGLENBQVNFLE9BQVQsQ0FBaUJnQixnQkFBdEI7QUFDQSxpQkFBS25CLEVBQUVDLE1BQUYsQ0FBU0UsT0FBVCxDQUFpQmlCLHVCQUF0QjtBQUNBLGlCQUFLcEIsRUFBRUMsTUFBRixDQUFTRSxPQUFULENBQWlCa0IseUJBQXRCO0FBQ0ksb0JBQUkvQyxHQUFHTSxJQUFILENBQVFXLGtCQUFaLEVBQWdDO0FBQzVCakIsdUJBQUdrQixpQkFBSCxDQUFxQlEsRUFBRUMsTUFBRixDQUFTUSxLQUE5QjtBQUNIO0FBQ0Q7QUExQlI7QUE0QkgsS0FwREw7O0FBc0RBbkMsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdtQixLQUFILEdBQVdwQixNQUFNb0IsS0FBakI7QUFDQW5CLE9BQUdpQyxHQUFILEdBQVNsQyxNQUFNa0MsR0FBZjtBQUNBakMsT0FBR00sSUFBSCxHQUFVUCxNQUFNTyxJQUFoQjtBQUNBTixPQUFHK0IsV0FBSCxHQUFpQmhDLE1BQU1nQyxXQUF2QjtBQUNBL0IsT0FBR1csRUFBSDs7QUFFQVYsV0FBT0EsUUFBUSxFQUFmO0FBQ0EsUUFBSUQsR0FBR00sSUFBSCxDQUFRVyxrQkFBWixFQUFnQztBQUM1QmhCLGVBQU8sc0JBQXdCRixLQUF4QixFQUErQkMsRUFBL0IsQ0FBUDtBQUNIOztBQUVERTs7QUFFQSxXQUFPRCxJQUFQO0FBQ0giLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVSZW1vdGVTZXR0aW5nVmlldyBmcm9tICcuL3JlbW90ZS5qcyc7XG5cbi8qKlxuICogUHJvY2Vzc29yIHNldHRpbmcgdmlldyBmb3IgYSBsaW5lYXIgaW50ZWdlciB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIHNsaWRlciBhbmQgYSBudW1iZXIgZmllbGQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJhc2VTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIGluaXRpYWxpc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGZpbmQgdGVtcGxhdGUsIGFkZCBjbG9uZSB0byBzZXR0aW5ncyBwYW5lbFxuICAgICAgICAgICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBsYXRlLXNldHRpbmctJyArIG15LmRhdGEudHlwZSk7XG4gICAgICAgICAgICBsZXQgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgIG15LmVsID0gY2xvbmUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICBzcGVjcy5wYXJlbnRFbC5hcHBlbmRDaGlsZChteS5lbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHNob3cgbGFiZWxcbiAgICAgICAgICAgIG15LmVsLnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5nX19sYWJlbCcpLmlubmVySFRNTCA9IG15LmRhdGEubGFiZWw7XG5cbiAgICAgICAgICAgIGlmIChteS5kYXRhLmlzTWlkaUNvbnRyb2xsYWJsZSkge1xuICAgICAgICAgICAgICAgIG15LmNoYW5nZVJlbW90ZVN0YXRlKHNwZWNzLnN0b3JlLmdldFN0YXRlKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKG15LnN0b3JlLlNUQVRFX0NIQU5HRSwgaGFuZGxlU3RhdGVDaGFuZ2VzKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHRlcm1pbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihteS5zdG9yZS5TVEFURV9DSEFOR0UsIGhhbmRsZVN0YXRlQ2hhbmdlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBoYW5kbGVTdGF0ZUNoYW5nZXMgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGUuZGV0YWlsLmFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLkNIQU5HRV9QQVJBTUVURVI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmRldGFpbC5hY3Rpb24ucHJvY2Vzc29ySUQgPT09IG15LnByb2Nlc3NvcklEICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5kZXRhaWwuYWN0aW9uLnBhcmFtS2V5ID09PSBteS5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15LnNldFZhbHVlKGUuZGV0YWlsLnN0YXRlLnByb2Nlc3NvcnMuYnlJZFtteS5wcm9jZXNzb3JJRF0ucGFyYW1zLmJ5SWRbbXkua2V5XS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLlJFQ1JFQVRFX1BBUkFNRVRFUjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGV0YWlsLmFjdGlvbi5wcm9jZXNzb3JJRCA9PT0gbXkucHJvY2Vzc29ySUQgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmRldGFpbC5hY3Rpb24ucGFyYW1LZXkgPT09IG15LmtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXkuZGF0YSA9IGUuZGV0YWlsLnN0YXRlLnByb2Nlc3NvcnMuYnlJZFtteS5wcm9jZXNzb3JJRF0ucGFyYW1zLmJ5SWRbbXkua2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15LmluaXREYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBteS5zZXRWYWx1ZShlLmRldGFpbC5zdGF0ZS5wcm9jZXNzb3JzLmJ5SWRbbXkucHJvY2Vzc29ySURdLnBhcmFtcy5ieUlkW215LmtleV0udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5UT0dHTEVfTUlESV9MRUFSTl9NT0RFOlxuICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5UT0dHTEVfTUlESV9MRUFSTl9UQVJHRVQ6XG4gICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLlNFTEVDVF9QUk9DRVNTT1I6XG4gICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLkRFTEVURV9QUk9DRVNTT1I6XG4gICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLkFTU0lHTl9FWFRFUk5BTF9DT05UUk9MOlxuICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5VTkFTU0lHTl9FWFRFUk5BTF9DT05UUk9MOlxuICAgICAgICAgICAgICAgICAgICBpZiAobXkuZGF0YS5pc01pZGlDb250cm9sbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15LmNoYW5nZVJlbW90ZVN0YXRlKGUuZGV0YWlsLnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5zdG9yZSA9IHNwZWNzLnN0b3JlO1xuICAgIG15LmtleSA9IHNwZWNzLmtleTtcbiAgICBteS5kYXRhID0gc3BlY3MuZGF0YTtcbiAgICBteS5wcm9jZXNzb3JJRCA9IHNwZWNzLnByb2Nlc3NvcklEO1xuICAgIG15LmVsO1xuICAgIFxuICAgIHRoYXQgPSB0aGF0IHx8IHt9O1xuICAgIGlmIChteS5kYXRhLmlzTWlkaUNvbnRyb2xsYWJsZSkge1xuICAgICAgICB0aGF0ID0gY3JlYXRlUmVtb3RlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICB9XG4gICAgXG4gICAgaW5pdGlhbGlzZSgpO1xuXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jhc2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.memoize = memoize;\nexports.getThemeColors = getThemeColors;\nvar themeColors = {};\n\nfunction memoize(state) {\n    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var actions = arguments[2];\n\n    switch (action.type) {\n\n        case actions.CREATE_PROJECT:\n        case actions.SET_THEME:\n            document.querySelector('#app').dataset.theme = state.theme;\n            var themeStyles = window.getComputedStyle(document.querySelector('[data-theme]'));\n            themeColors.colorHigh = themeStyles.getPropertyValue('--text-color');\n            themeColors.colorMid = themeStyles.getPropertyValue('--border-color');\n            themeColors.colorLow = themeStyles.getPropertyValue('--panel-bg-color');\n            break;\n    }\n}\n\n/**\n * Memoised selector to access processors by id as object key.\n * Recreates the memoised data each time a processor is created or deleted.\n */\nfunction getThemeColors() {\n    return themeColors;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc2VsZWN0b3JzLmpzPzFmY2MiXSwibmFtZXMiOlsibWVtb2l6ZSIsImdldFRoZW1lQ29sb3JzIiwidGhlbWVDb2xvcnMiLCJzdGF0ZSIsImFjdGlvbiIsImFjdGlvbnMiLCJ0eXBlIiwiQ1JFQVRFX1BST0pFQ1QiLCJTRVRfVEhFTUUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhc2V0IiwidGhlbWUiLCJ0aGVtZVN0eWxlcyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJjb2xvckhpZ2giLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY29sb3JNaWQiLCJjb2xvckxvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFFZ0JBLE8sR0FBQUEsTztRQWtCQUMsYyxHQUFBQSxjO0FBcEJoQixJQUFNQyxjQUFjLEVBQXBCOztBQUVPLFNBQVNGLE9BQVQsQ0FBaUJHLEtBQWpCLEVBQThDO0FBQUEsUUFBdEJDLE1BQXNCLHVFQUFiLEVBQWE7QUFBQSxRQUFUQyxPQUFTOztBQUNqRCxZQUFRRCxPQUFPRSxJQUFmOztBQUVJLGFBQUtELFFBQVFFLGNBQWI7QUFDQSxhQUFLRixRQUFRRyxTQUFiO0FBQ0lDLHFCQUFTQyxhQUFULENBQXVCLE1BQXZCLEVBQStCQyxPQUEvQixDQUF1Q0MsS0FBdkMsR0FBK0NULE1BQU1TLEtBQXJEO0FBQ0EsZ0JBQU1DLGNBQWNDLE9BQU9DLGdCQUFQLENBQXdCTixTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBQXhCLENBQXBCO0FBQ0FSLHdCQUFZYyxTQUFaLEdBQXdCSCxZQUFZSSxnQkFBWixDQUE2QixjQUE3QixDQUF4QjtBQUNBZix3QkFBWWdCLFFBQVosR0FBdUJMLFlBQVlJLGdCQUFaLENBQTZCLGdCQUE3QixDQUF2QjtBQUNBZix3QkFBWWlCLFFBQVosR0FBdUJOLFlBQVlJLGdCQUFaLENBQTZCLGtCQUE3QixDQUF2QjtBQUNBO0FBVFI7QUFXSDs7QUFFRDs7OztBQUlPLFNBQVNoQixjQUFULEdBQTBCO0FBQzdCLFdBQU9DLFdBQVA7QUFDSCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGhlbWVDb2xvcnMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemUoc3RhdGUsIGFjdGlvbiA9IHt9LCBhY3Rpb25zKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuXG4gICAgICAgIGNhc2UgYWN0aW9ucy5DUkVBVEVfUFJPSkVDVDpcbiAgICAgICAgY2FzZSBhY3Rpb25zLlNFVF9USEVNRTpcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhcHAnKS5kYXRhc2V0LnRoZW1lID0gc3RhdGUudGhlbWU7XG4gICAgICAgICAgICBjb25zdCB0aGVtZVN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRoZW1lXScpKTtcbiAgICAgICAgICAgIHRoZW1lQ29sb3JzLmNvbG9ySGlnaCA9IHRoZW1lU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tdGV4dC1jb2xvcicpO1xuICAgICAgICAgICAgdGhlbWVDb2xvcnMuY29sb3JNaWQgPSB0aGVtZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLWJvcmRlci1jb2xvcicpO1xuICAgICAgICAgICAgdGhlbWVDb2xvcnMuY29sb3JMb3cgPSB0aGVtZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLXBhbmVsLWJnLWNvbG9yJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbi8qKlxuICogTWVtb2lzZWQgc2VsZWN0b3IgdG8gYWNjZXNzIHByb2Nlc3NvcnMgYnkgaWQgYXMgb2JqZWN0IGtleS5cbiAqIFJlY3JlYXRlcyB0aGUgbWVtb2lzZWQgZGF0YSBlYWNoIHRpbWUgYSBwcm9jZXNzb3IgaXMgY3JlYXRlZCBvciBkZWxldGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhlbWVDb2xvcnMoKSB7XG4gICAgcmV0dXJuIHRoZW1lQ29sb3JzO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3N0YXRlL3NlbGVjdG9ycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createUUID = createUUID;\n/**\n * Utilities\n * Mouse or touch event detection.\n */\nvar util = exports.util = function () {\n    var isTouchDevice = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch;\n\n    /**\n     * Type of events to use, touch or mouse\n     * @type {String}\n     */\n    var eventType = {\n        start: isTouchDevice ? 'touchstart' : 'mousedown',\n        end: isTouchDevice ? 'touchend' : 'mouseup',\n        click: isTouchDevice ? 'touchend' : 'click',\n        move: isTouchDevice ? 'touchmove' : 'mousemove'\n    };\n\n    return {\n        isTouchDevice: isTouchDevice,\n        eventType: eventType\n    };\n}();\n\n/**\n * Create a fairly unique ID.\n * @see https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\nfunction createUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS91dGlsLmpzPzg5OWEiXSwibmFtZXMiOlsiY3JlYXRlVVVJRCIsInV0aWwiLCJpc1RvdWNoRGV2aWNlIiwid2luZG93IiwiRG9jdW1lbnRUb3VjaCIsImRvY3VtZW50IiwiZXZlbnRUeXBlIiwic3RhcnQiLCJlbmQiLCJjbGljayIsIm1vdmUiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwidiIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7OztRQTRCZ0JBLFUsR0FBQUEsVTtBQTVCaEI7Ozs7QUFJTyxJQUFNQyxzQkFBUyxZQUFXO0FBQzdCLFFBQU1DLGdCQUFnQixrQkFBa0JDLE1BQWxCLElBQTRCQSxPQUFPQyxhQUFQLElBQXdCQyxvQkFBb0JELGFBQTlGOztBQUVBOzs7O0FBSUEsUUFBTUUsWUFBWTtBQUNkQyxlQUFPTCxnQkFBZ0IsWUFBaEIsR0FBK0IsV0FEeEI7QUFFZE0sYUFBS04sZ0JBQWdCLFVBQWhCLEdBQTZCLFNBRnBCO0FBR2RPLGVBQU9QLGdCQUFnQixVQUFoQixHQUE2QixPQUh0QjtBQUlkUSxjQUFNUixnQkFBZ0IsV0FBaEIsR0FBOEI7QUFKdEIsS0FBbEI7O0FBT0EsV0FBTztBQUNIQSx1QkFBZUEsYUFEWjtBQUVISSxtQkFBV0E7QUFGUixLQUFQO0FBSUgsQ0FsQm1CLEVBQWI7O0FBb0JQOzs7O0FBSU8sU0FBU04sVUFBVCxHQUFzQjtBQUN6QixXQUFPLHVDQUF1Q1csT0FBdkMsQ0FBK0MsT0FBL0MsRUFBd0QsVUFBU0MsQ0FBVCxFQUFZO0FBQ3ZFLFlBQUlDLElBQUlDLEtBQUtDLE1BQUwsS0FBZ0IsRUFBaEIsR0FBcUIsQ0FBN0I7QUFBQSxZQUFnQ0MsSUFBSUosS0FBSyxHQUFMLEdBQVdDLENBQVgsR0FBZ0JBLElBQUksR0FBSixHQUFVLEdBQTlEO0FBQ0EsZUFBT0csRUFBRUMsUUFBRixDQUFXLEVBQVgsQ0FBUDtBQUNILEtBSE0sQ0FBUDtBQUlIIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllc1xuICogTW91c2Ugb3IgdG91Y2ggZXZlbnQgZGV0ZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgdXRpbCA9ICggZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaXNUb3VjaERldmljZSA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g7XG4gICAgXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBldmVudHMgdG8gdXNlLCB0b3VjaCBvciBtb3VzZVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgY29uc3QgZXZlbnRUeXBlID0ge1xuICAgICAgICBzdGFydDogaXNUb3VjaERldmljZSA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLFxuICAgICAgICBlbmQ6IGlzVG91Y2hEZXZpY2UgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnLFxuICAgICAgICBjbGljazogaXNUb3VjaERldmljZSA/ICd0b3VjaGVuZCcgOiAnY2xpY2snLFxuICAgICAgICBtb3ZlOiBpc1RvdWNoRGV2aWNlID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJyxcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIGlzVG91Y2hEZXZpY2U6IGlzVG91Y2hEZXZpY2UsXG4gICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlXG4gICAgfVxufSkoKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmYWlybHkgdW5pcXVlIElELlxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvY3JlYXRlLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvY29yZS91dGlsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDI;\nexports.getMIDIPortByID = getMIDIPortByID;\nexports.getAllMIDIPorts = getAllMIDIPorts;\nvar midiAccess = void 0;\n\nfunction createMIDI(specs) {\n    var that,\n        store = specs.store,\n        syncListeners = [],\n        remoteListeners = [],\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n\n                case e.detail.actions.CREATE_MIDI_PORT:\n                case e.detail.actions.UPDATE_MIDI_PORT:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n        connect = function connect() {\n        return new Promise(function (resolve, reject) {\n            requestAccess(resolve, reject, false);\n        });\n    },\n\n\n    /**\n     * Request system for access to MIDI ports.\n     * @param {function} successCallback\n     * @param {function} failureCallback\n     * @param {boolean} sysex True if sysex data must be included.\n     */\n    requestAccess = function requestAccess(successCallback, failureCallback, sysex) {\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess({\n                sysex: !!sysex\n            }).then(function (_midiAccess) {\n                if (!_midiAccess.inputs.size && !_midiAccess.outputs.size) {\n                    onAccessFailure('No MIDI devices found on this system.');\n                } else {\n                    onAccessSuccess(_midiAccess);\n                    successCallback();\n                }\n            }, function () {\n                failureCallback('Request for MIDI access failed.');\n            });\n        } else {\n            failureCallback('Web MIDI API not available.');\n        }\n    },\n\n\n    /**\n     * MIDI access request failed.\n     * @param {String} errorMessage\n     */\n    onAccessFailure = function onAccessFailure(errorMessage) {\n        console.log(errorMessage);\n    },\n\n\n    /**\n     * MIDI access request succeeded.\n     * @param {Object} midiAccessObj MidiAccess object.\n     */\n    onAccessSuccess = function onAccessSuccess(_midiAccess) {\n        console.log('MIDI enabled.');\n        midiAccess = _midiAccess;\n\n        var inputs = midiAccess.inputs.values();\n        var outputs = midiAccess.outputs.values();\n\n        for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n            port.value.onmidimessage = onMIDIMessage;\n        }\n\n        midiAccess.onstatechange = onAccessStateChange;\n    },\n\n\n    /**\n     * MIDIAccess object statechange handler.\n     * If the change is the addition of a new port, create a port module.\n     * This handles MIDI devices that are connected after the app initialisation.\n     * Disconnected or reconnected ports are handled by the port modules.\n     * \n     * If this is\n     * @param {Object} e MIDIConnectionEvent object.\n     */\n    onAccessStateChange = function onAccessStateChange(e) {\n        store.dispatch(store.getActions().midiAccessChange(e.port));\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDISyncListeners = function updateMIDISyncListeners(ports) {\n        syncListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.syncEnabled) {\n                syncListeners.push(port.id);\n            }\n        });\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDIRemoteListeners = function updateMIDIRemoteListeners(ports) {\n        remoteListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.remoteEnabled) {\n                remoteListeners.push(port.id);\n            }\n        });\n    },\n        onMIDIMessage = function onMIDIMessage(e) {\n        // console.log(e.data[0] & 0xf0, e.data[0] & 0x0f, e.target.id, e.data[0], e.data[1], e.data[2]);\n        switch (e.data[0] & 0xf0) {\n            case 240:\n                onSystemRealtimeMessage(e);\n                break;\n            case 176:\n                // CC\n                onControlChangeMessage(e);\n                break;\n            case 144: // note on\n            case 128:\n                // note off\n                // onNoteMessage(e);\n                break;\n        }\n    },\n\n\n    /**\n     * Eventlistener for incoming MIDI messages.\n     * data[1] and data[2] are undefined,\n     * for e.data[0] & 0xf:\n     * 8 = clock, 248 (11110000 | 00000100)\n     * 10 = start\n     * 11 = continue\n     * 12 = stop\n     * @see https://www.w3.org/TR/webmidi/#idl-def-MIDIMessageEvent\n     * @see https://www.midi.org/specifications/item/table-1-summary-of-midi-message\n     * @param  {Object} e MIDIMessageEvent event.\n     */\n    onSystemRealtimeMessage = function onSystemRealtimeMessage(e) {\n        if (syncListeners.indexOf(e.target.id) > -1) {\n            switch (e.data[0]) {\n                case 248:\n                    // clock\n                    break;\n                case 250:\n                    // start\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 251:\n                    // continue\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 252:\n                    // stop\n                    store.dispatch(store.getActions().setTransport('pause'));\n                    break;\n            }\n        }\n    },\n        onControlChangeMessage = function onControlChangeMessage(e) {\n        if (remoteListeners.indexOf(e.target.id) > -1) {\n            store.dispatch(store.getActions().receiveMIDIControlChange(e.data));\n        }\n    };\n\n    that = specs.that;\n\n    init();\n\n    that.connect = connect;\n    return that;\n}\n\nfunction getMIDIPortByID(id) {\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        if (port.value.id === id) {\n            return port.value;\n        }\n    }\n\n    for (var _port = outputs.next(); _port && !_port.done; _port = outputs.next()) {\n        if (_port.value.id === id) {\n            return _port.value;\n        }\n    }\n}\n\n/**\n * Get all MIDI input and output ports.\n * @returns {Array} Array of all ports.\n */\nfunction getAllMIDIPorts() {\n    var allPorts = [];\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        allPorts.push(port.value);\n    }\n\n    for (var _port2 = outputs.next(); _port2 && !_port2.done; _port2 = outputs.next()) {\n        allPorts.push(_port2.value);\n    }\n\n    return allPorts;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = orderProcessors;\nvar maxDepth = 100;\n\n/**\n * Order thee processors according to their connections\n * to optimise the flow from inputs to outputs.\n * \n * Rule: when connected, the source goes before the destination\n * \n * @param {Object} state The whole state object.\n */\nfunction orderProcessors(state) {\n    console.log('ORDER', state.processors.allIds.length);\n    state.processors.allIds.sort(function (a, b) {\n        var nameA = state.processors.byId[a].params.byId['name'].value;\n        var nameB = state.processors.byId[b].params.byId['name'].value;\n        console.log('---');\n        console.log('start sort');\n        console.log('start search \\'' + nameA + '\\'');\n        console.log('start search \\'' + nameB + '\\'');\n        if (searchUpStream(a, b, state)) {\n            console.log('1, source \\'' + nameB + '\\' to destination \\'' + nameA + '\\'');\n            return 1;\n        } else if (searchDownStream(a, b, state)) {\n            console.log('-1, source \\'' + nameA + '\\' to destination \\'' + nameB + '\\'');\n            return -1;\n        } else {\n            console.log('0, no stream between \\'' + nameA + '\\' and \\'' + nameB + '\\'');\n            return 0;\n        }\n    });\n    logResult(state);\n}\n\nfunction searchUpStream(a, b, state) {\n    var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (depth >= maxDepth) {\n        console.log('Error: maximum (' + maxDepth + ') recursions reached while searching source.');\n        return false;\n    }\n    var sources = getSources(a, state);\n    for (var i = 0, n = sources.length; i < n; i++) {\n        if (sources[i] === b) {\n            console.log('found upstream');\n            return true;\n        } else {\n            return searchUpStream(sources[i], b, state, depth + 1);\n        }\n    }\n    console.log('not found upstream');\n    return false;\n}\n\nfunction searchDownStream(a, b, state) {\n    var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (depth >= maxDepth) {\n        console.log('Error: maximum (' + maxDepth + ') recursions reached while searching destination.');\n        return false;\n    }\n    var destinations = getDestinations(a, state);\n    for (var i = 0, n = destinations.length; i < n; i++) {\n        if (destinations[i] === b) {\n            console.log('found downstream');\n            return true;\n        } else {\n            return searchDownStream(destinations[i], b, state, depth + 1);\n        }\n    }\n    console.log('not found downstream');\n    return false;\n}\n\nfunction getSources(processorID, state) {\n    var sourceIDs = [];\n    state.connections.allIds.forEach(function (connectionID) {\n        var connection = state.connections.byId[connectionID];\n        if (connection.destinationProcessorID === processorID) {\n            sourceIDs.push(connection.sourceProcessorID);\n        }\n    });\n    return sourceIDs;\n}\n\nfunction getDestinations(processorID, state) {\n    var destinationIDs = [];\n    state.connections.allIds.forEach(function (connectionID) {\n        var connection = state.connections.byId[connectionID];\n        if (connection.sourceProcessorID === processorID) {\n            destinationIDs.push(connection.destinationProcessorID);\n        }\n    });\n    return destinationIDs;\n}\n\nfunction logResult(state) {\n    console.log('===========');\n    console.log('PROCESSOR ORDER');\n    console.log('-----------');\n    state.processors.allIds.forEach(function (id) {\n        console.log(state.processors.byId[id].params.byId['name'].value);\n    });\n    console.log('===========');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createDialog;\nexports.showDialog = showDialog;\n\n/**\n * Dialog overlay.\n */\n\nvar dialogEl = void 0,\n    headerEl = void 0,\n    bodyEl = void 0,\n    resolveBtnEl = void 0,\n    rejectBtnEl = void 0,\n    resolveBtnCallback = void 0,\n    rejectBtnCallback = void 0;\n\nfunction createDialog(specs, my) {\n    var that = void 0,\n        init = function init() {\n        dialogEl = document.querySelector('.dialog');\n        headerEl = dialogEl.querySelector('.dialog__header .header__label');\n        bodyEl = dialogEl.querySelector('.dialog__body');\n        resolveBtnEl = dialogEl.querySelector('.dialog__resolve');\n        rejectBtnEl = dialogEl.querySelector('.dialog__reject');\n        resolveBtnEl.addEventListener('click', function (e) {\n            dialogEl.dataset.show = false;\n            resolveBtnCallback && resolveBtnCallback();\n        });\n        rejectBtnEl.addEventListener('click', function (e) {\n            dialogEl.dataset.show = false;\n            rejectBtnCallback && rejectBtnCallback();\n        });\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}\n\nfunction showDialog() {\n    var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var resolve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var reject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var resolveCb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var rejectCb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    dialogEl.dataset.show = true;\n    headerEl.innerHTML = header;\n    bodyEl.innerHTML = body;\n    resolveBtnEl.innerHTML = resolve;\n    rejectBtnEl.innerHTML = reject;\n    resolveBtnCallback = resolveCb;\n    rejectBtnCallback = rejectCb;\n    resolveBtnEl.style.display = resolve != null ? 'block' : 'none';\n    rejectBtnEl.style.display = reject != null ? 'block' : 'none';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9kaWFsb2cuanM/OGY2YiJdLCJuYW1lcyI6WyJjcmVhdGVEaWFsb2ciLCJzaG93RGlhbG9nIiwiZGlhbG9nRWwiLCJoZWFkZXJFbCIsImJvZHlFbCIsInJlc29sdmVCdG5FbCIsInJlamVjdEJ0bkVsIiwicmVzb2x2ZUJ0bkNhbGxiYWNrIiwicmVqZWN0QnRuQ2FsbGJhY2siLCJzcGVjcyIsIm15IiwidGhhdCIsImluaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZGF0YXNldCIsInNob3ciLCJoZWFkZXIiLCJib2R5IiwicmVzb2x2ZSIsInJlamVjdCIsInJlc29sdmVDYiIsInJlamVjdENiIiwiaW5uZXJIVE1MIiwic3R5bGUiLCJkaXNwbGF5Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFhd0JBLFk7UUEwQlJDLFUsR0FBQUEsVTs7QUF0Q2hCOzs7O0FBSUEsSUFBSUMsaUJBQUo7QUFBQSxJQUNJQyxpQkFESjtBQUFBLElBRUlDLGVBRko7QUFBQSxJQUdJQyxxQkFISjtBQUFBLElBSUlDLG9CQUpKO0FBQUEsSUFLSUMsMkJBTEo7QUFBQSxJQU1JQywwQkFOSjs7QUFRZSxTQUFTUixZQUFULENBQXNCUyxLQUF0QixFQUE2QkMsRUFBN0IsRUFBaUM7QUFDNUMsUUFBSUMsYUFBSjtBQUFBLFFBRUlDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RWLG1CQUFXVyxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQVg7QUFDQVgsbUJBQVdELFNBQVNZLGFBQVQsQ0FBdUIsZ0NBQXZCLENBQVg7QUFDQVYsaUJBQVNGLFNBQVNZLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBVDtBQUNBVCx1QkFBZUgsU0FBU1ksYUFBVCxDQUF1QixrQkFBdkIsQ0FBZjtBQUNBUixzQkFBY0osU0FBU1ksYUFBVCxDQUF1QixpQkFBdkIsQ0FBZDtBQUNBVCxxQkFBYVUsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsYUFBSztBQUN4Q2IscUJBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLEtBQXhCO0FBQ0FWLGtDQUFzQkEsb0JBQXRCO0FBQ0gsU0FIRDtBQUlBRCxvQkFBWVMsZ0JBQVosQ0FBNkIsT0FBN0IsRUFBc0MsYUFBSztBQUN2Q2IscUJBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLEtBQXhCO0FBQ0FULGlDQUFxQkEsbUJBQXJCO0FBQ0gsU0FIRDtBQUlILEtBaEJMOztBQWtCQUcsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBQzs7QUFFQSxXQUFPRCxJQUFQO0FBQ0g7O0FBRU0sU0FBU1YsVUFBVCxHQUE4RztBQUFBLFFBQTFGaUIsTUFBMEYsdUVBQWpGLEVBQWlGO0FBQUEsUUFBN0VDLElBQTZFLHVFQUF0RSxFQUFzRTtBQUFBLFFBQWxFQyxPQUFrRSx1RUFBeEQsSUFBd0Q7QUFBQSxRQUFsREMsTUFBa0QsdUVBQXpDLElBQXlDO0FBQUEsUUFBbkNDLFNBQW1DLHVFQUF2QixJQUF1QjtBQUFBLFFBQWpCQyxRQUFpQix1RUFBTixJQUFNOztBQUNqSHJCLGFBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLElBQXhCO0FBQ0FkLGFBQVNxQixTQUFULEdBQXFCTixNQUFyQjtBQUNBZCxXQUFPb0IsU0FBUCxHQUFtQkwsSUFBbkI7QUFDQWQsaUJBQWFtQixTQUFiLEdBQXlCSixPQUF6QjtBQUNBZCxnQkFBWWtCLFNBQVosR0FBd0JILE1BQXhCO0FBQ0FkLHlCQUFxQmUsU0FBckI7QUFDQWQsd0JBQW9CZSxRQUFwQjtBQUNBbEIsaUJBQWFvQixLQUFiLENBQW1CQyxPQUFuQixHQUE2Qk4sV0FBVyxJQUFYLEdBQWtCLE9BQWxCLEdBQTRCLE1BQXpEO0FBQ0FkLGdCQUFZbUIsS0FBWixDQUFrQkMsT0FBbEIsR0FBNEJMLFVBQVUsSUFBVixHQUFpQixPQUFqQixHQUEyQixNQUF2RDtBQUNIIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogRGlhbG9nIG92ZXJsYXkuXG4gKi9cblxubGV0IGRpYWxvZ0VsLFxuICAgIGhlYWRlckVsLFxuICAgIGJvZHlFbCxcbiAgICByZXNvbHZlQnRuRWwsXG4gICAgcmVqZWN0QnRuRWwsXG4gICAgcmVzb2x2ZUJ0bkNhbGxiYWNrLFxuICAgIHJlamVjdEJ0bkNhbGxiYWNrO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEaWFsb2coc3BlY3MsIG15KSB7XG4gICAgbGV0IHRoYXQsXG5cbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZGlhbG9nRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nJyk7XG4gICAgICAgICAgICBoZWFkZXJFbCA9IGRpYWxvZ0VsLnF1ZXJ5U2VsZWN0b3IoJy5kaWFsb2dfX2hlYWRlciAuaGVhZGVyX19sYWJlbCcpO1xuICAgICAgICAgICAgYm9keUVsID0gZGlhbG9nRWwucXVlcnlTZWxlY3RvcignLmRpYWxvZ19fYm9keScpO1xuICAgICAgICAgICAgcmVzb2x2ZUJ0bkVsID0gZGlhbG9nRWwucXVlcnlTZWxlY3RvcignLmRpYWxvZ19fcmVzb2x2ZScpO1xuICAgICAgICAgICAgcmVqZWN0QnRuRWwgPSBkaWFsb2dFbC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nX19yZWplY3QnKTtcbiAgICAgICAgICAgIHJlc29sdmVCdG5FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGRpYWxvZ0VsLmRhdGFzZXQuc2hvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlc29sdmVCdG5DYWxsYmFjayAmJiByZXNvbHZlQnRuQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVqZWN0QnRuRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBkaWFsb2dFbC5kYXRhc2V0LnNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZWplY3RCdG5DYWxsYmFjayAmJiByZWplY3RCdG5DYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RGlhbG9nKGhlYWRlciA9ICcnLCBib2R5ID0gJycsIHJlc29sdmUgPSBudWxsLCByZWplY3QgPSBudWxsLCByZXNvbHZlQ2IgPSBudWxsLCByZWplY3RDYiA9IG51bGwpIHtcbiAgICBkaWFsb2dFbC5kYXRhc2V0LnNob3cgPSB0cnVlO1xuICAgIGhlYWRlckVsLmlubmVySFRNTCA9IGhlYWRlcjtcbiAgICBib2R5RWwuaW5uZXJIVE1MID0gYm9keTtcbiAgICByZXNvbHZlQnRuRWwuaW5uZXJIVE1MID0gcmVzb2x2ZTtcbiAgICByZWplY3RCdG5FbC5pbm5lckhUTUwgPSByZWplY3Q7XG4gICAgcmVzb2x2ZUJ0bkNhbGxiYWNrID0gcmVzb2x2ZUNiO1xuICAgIHJlamVjdEJ0bkNhbGxiYWNrID0gcmVqZWN0Q2I7XG4gICAgcmVzb2x2ZUJ0bkVsLnN0eWxlLmRpc3BsYXkgPSByZXNvbHZlICE9IG51bGwgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgIHJlamVjdEJ0bkVsLnN0eWxlLmRpc3BsYXkgPSByZWplY3QgIT0gbnVsbCA/ICdibG9jaycgOiAnbm9uZSc7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvZGlhbG9nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = addWindowResize;\n/**\n * Window resize listener functionality.\n * Add callback functions that will be called on window resize,\n * but debounced to not be called more that every so many milliseconds.\n */\nvar debouncedFunction,\n    callbacks = [],\n    delay = 250,\n\n\n/**\n * Returns a function, that, as long as it continues to be invoked, \n * will not be triggered. The function will be called after it \n * stops being called for N milliseconds. If `immediate` is passed, \n * trigger the function on the leading edge, instead of the trailing.\n * @see https://davidwalsh.name/javascript-debounce-function\n * @param  {Function} func Function to call after delay.\n * @param  {Number} wait Milliseconds to wait before next call.\n * @param  {Boolean} immediate True to not wait.\n */\ndebounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function () {\n        var context = this,\n            args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\n\nfunction addWindowResize(specs, my) {\n    var that,\n\n\n    /**\n     * Add callback function to be called on debounced resize.\n     * @param  {Function} callback Callback function.\n     */\n    addWindowResizeCallback = function addWindowResizeCallback(callback) {\n        callbacks.push(callback);\n        if (!debouncedFunction) {\n            debouncedFunction = debounce(function () {\n                callbacks.forEach(function (callbackFunction) {\n                    callbackFunction();\n                });\n            }, delay);\n            window.addEventListener('resize', debouncedFunction);\n        }\n    };\n\n    my = my || {};\n    my.addWindowResizeCallback = addWindowResizeCallback;\n\n    that = specs.that || {};\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy93aW5kb3dyZXNpemUuanM/OTM1MiJdLCJuYW1lcyI6WyJhZGRXaW5kb3dSZXNpemUiLCJkZWJvdW5jZWRGdW5jdGlvbiIsImNhbGxiYWNrcyIsImRlbGF5IiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImxhdGVyIiwiYXBwbHkiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInNwZWNzIiwibXkiLCJ0aGF0IiwiYWRkV2luZG93UmVzaXplQ2FsbGJhY2siLCJjYWxsYmFjayIsInB1c2giLCJmb3JFYWNoIiwiY2FsbGJhY2tGdW5jdGlvbiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQW9Dd0JBLGU7QUFwQ3hCOzs7OztBQUtBLElBQUlDLGlCQUFKO0FBQUEsSUFDSUMsWUFBWSxFQURoQjtBQUFBLElBRUlDLFFBQVEsR0FGWjs7O0FBSUk7Ozs7Ozs7Ozs7QUFVQUMsV0FBVyxTQUFYQSxRQUFXLENBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFxQkMsU0FBckIsRUFBZ0M7QUFDdkMsUUFBSUMsT0FBSjtBQUNBLFdBQU8sWUFBVztBQUNkLFlBQUlDLFVBQVUsSUFBZDtBQUFBLFlBQW9CQyxPQUFPQyxTQUEzQjtBQUNBLFlBQUlDLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ25CSixzQkFBVSxJQUFWO0FBQ0EsZ0JBQUksQ0FBQ0QsU0FBTCxFQUFnQjtBQUNaRixxQkFBS1EsS0FBTCxDQUFXSixPQUFYLEVBQW9CQyxJQUFwQjtBQUNIO0FBQ0osU0FMRDtBQU1BLFlBQUlJLFVBQVVQLGFBQWEsQ0FBQ0MsT0FBNUI7QUFDQU8scUJBQWFQLE9BQWI7QUFDQUEsa0JBQVVRLFdBQVdKLEtBQVgsRUFBa0JOLElBQWxCLENBQVY7QUFDQSxZQUFJUSxPQUFKLEVBQWFULEtBQUtRLEtBQUwsQ0FBV0osT0FBWCxFQUFvQkMsSUFBcEI7QUFDaEIsS0FaRDtBQWFILENBN0JMOztBQStCZSxTQUFTVixlQUFULENBQXlCaUIsS0FBekIsRUFBZ0NDLEVBQWhDLEVBQW9DO0FBQy9DLFFBQUlDLElBQUo7OztBQUVJOzs7O0FBSUFDLDhCQUEwQixTQUExQkEsdUJBQTBCLENBQVNDLFFBQVQsRUFBbUI7QUFDekNuQixrQkFBVW9CLElBQVYsQ0FBZUQsUUFBZjtBQUNBLFlBQUksQ0FBQ3BCLGlCQUFMLEVBQXdCO0FBQ3BCQSxnQ0FBb0JHLFNBQVMsWUFBVztBQUNwQ0YsMEJBQVVxQixPQUFWLENBQWtCLFVBQVNDLGdCQUFULEVBQTJCO0FBQ3pDQTtBQUNILGlCQUZEO0FBR0gsYUFKbUIsRUFJakJyQixLQUppQixDQUFwQjtBQUtBc0IsbUJBQU9DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDekIsaUJBQWxDO0FBQ0g7QUFDSixLQWhCTDs7QUFrQkFpQixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0UsdUJBQUgsR0FBNkJBLHVCQUE3Qjs7QUFFQUQsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBLFdBQU9BLElBQVA7QUFDSCIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXaW5kb3cgcmVzaXplIGxpc3RlbmVyIGZ1bmN0aW9uYWxpdHkuXG4gKiBBZGQgY2FsbGJhY2sgZnVuY3Rpb25zIHRoYXQgd2lsbCBiZSBjYWxsZWQgb24gd2luZG93IHJlc2l6ZSxcbiAqIGJ1dCBkZWJvdW5jZWQgdG8gbm90IGJlIGNhbGxlZCBtb3JlIHRoYXQgZXZlcnkgc28gbWFueSBtaWxsaXNlY29uZHMuXG4gKi9cbnZhciBkZWJvdW5jZWRGdW5jdGlvbixcbiAgICBjYWxsYmFja3MgPSBbXSxcbiAgICBkZWxheSA9IDI1MCxcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIFxuICAgICAqIHdpbGwgbm90IGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IFxuICAgICAqIHN0b3BzIGJlaW5nIGNhbGxlZCBmb3IgTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgXG4gICAgICogdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gICAgICogQHNlZSBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9qYXZhc2NyaXB0LWRlYm91bmNlLWZ1bmN0aW9uXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZ1bmMgRnVuY3Rpb24gdG8gY2FsbCBhZnRlciBkZWxheS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHdhaXQgTWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIG5leHQgY2FsbC5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpbW1lZGlhdGUgVHJ1ZSB0byBub3Qgd2FpdC5cbiAgICAgKi9cbiAgICBkZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgdGltZW91dDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRXaW5kb3dSZXNpemUoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBkZWJvdW5jZWQgcmVzaXplLlxuICAgICAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRXaW5kb3dSZXNpemVDYWxsYmFjayA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoIWRlYm91bmNlZEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgZGVib3VuY2VkRnVuY3Rpb24gPSBkZWJvdW5jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2tGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tGdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlZEZ1bmN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LmFkZFdpbmRvd1Jlc2l6ZUNhbGxiYWNrID0gYWRkV2luZG93UmVzaXplQ2FsbGJhY2s7XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy93aW5kb3dyZXNpemUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIBaseView;\n/**\n * MIDI input or output port processor view.\n */\nfunction createMIDIBaseView(specs, my) {\n    var that,\n        parentEl = specs.parentEl,\n        port = specs.port,\n        initialize = function initialize() {\n        // find template, add clone to midi ports list\n        var template = document.querySelector('#template-midi-port');\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        parentEl.appendChild(my.el);\n\n        // set data-connected=\"true\" to make the element visible\n        my.el.dataset.connected = true;\n\n        // show label\n        my.el.querySelector('.midi-port__label').innerHTML = specs.name;\n\n        // find checkboxes\n        my.networkEl = my.el.querySelector('.midi-port__network');\n        my.syncEl = my.el.querySelector('.midi-port__sync');\n        my.remoteEl = my.el.querySelector('.midi-port__remote');\n\n        // set checkboxes\n        my.networkEl.querySelector('[type=checkbox]').checked = specs.networkEnabled;\n        my.syncEl.querySelector('[type=checkbox]').checked = specs.syncEnabled;\n        my.remoteEl.querySelector('[type=checkbox]').checked = specs.remoteEnabled;\n\n        // add DOM event listeners\n        my.networkEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'networkEnabled'));\n            }\n        });\n        my.syncEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'syncEnabled'));\n            }\n        });\n        my.remoteEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'remoteEnabled'));\n            }\n        });\n\n        // listen to state updates\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                case e.detail.actions.CREATE_PROJECT:\n                    var _port = e.detail.state.ports.byId[my.id];\n                    if (_port) {\n                        my.networkEl.querySelector('[type=checkbox]').checked = _port.networkEnabled;\n                        my.syncEl.querySelector('[type=checkbox]').checked = _port.syncEnabled;\n                        my.remoteEl.querySelector('[type=checkbox]').checked = _port.remoteEnabled;\n                    } else {\n                        console.log('MIDI port with id ' + my.id + ' not found.');\n                    }\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (my.el && parentEl) {\n            parentEl.removeChild(my.el);\n        }\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.isInput = specs.isInput;\n    my.id = specs.id;\n    my.el;\n    my.networkEl;\n    my.syncEl;\n    my.remoteEl;\n\n    that = that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = init;\n\nvar _actions = __webpack_require__(9);\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nvar _reducers = __webpack_require__(12);\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nvar _store = __webpack_require__(13);\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _app = __webpack_require__(14);\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _canvas = __webpack_require__(21);\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nvar _dialog = __webpack_require__(5);\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nvar _library = __webpack_require__(24);\n\nvar _library2 = _interopRequireDefault(_library);\n\nvar _midi = __webpack_require__(3);\n\nvar _midi2 = _interopRequireDefault(_midi);\n\nvar _network = __webpack_require__(25);\n\nvar _network2 = _interopRequireDefault(_network);\n\nvar _preferences = __webpack_require__(26);\n\nvar _preferences2 = _interopRequireDefault(_preferences);\n\nvar _remote = __webpack_require__(29);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nvar _transport = __webpack_require__(32);\n\nvar _transport2 = _interopRequireDefault(_transport);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.log('main');\n\n/**\n    Euclidean Pattern Generator\n    Copyright (C) 2017, 2018  Wouter Hisschemoller\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Application startup.\n */\nfunction init() {\n    // Create all objects that will be the modules of the app.\n    var appView = {},\n        canvasView = {},\n        dialog = {},\n        libraryView = {},\n        midi = {},\n        midiNetwork = {},\n        preferencesView = {},\n        remoteView = {},\n        transport = {};\n\n    var store = (0, _store2.default)({\n        actions: (0, _actions2.default)(),\n        reducers: (0, _reducers2.default)()\n    });\n\n    // Add functionality to the modules and inject dependencies.\n    (0, _app2.default)({\n        that: appView,\n        store: store\n    });\n    (0, _canvas2.default)({\n        that: canvasView,\n        store: store\n    });\n    (0, _dialog2.default)({\n        that: dialog\n    });\n    (0, _library2.default)({\n        that: libraryView,\n        store: store\n    });\n    (0, _midi2.default)({\n        that: midi,\n        store: store\n    });\n    (0, _network2.default)({\n        that: midiNetwork,\n        store: store\n    });\n    (0, _preferences2.default)({\n        that: preferencesView,\n        store: store\n    });\n    (0, _remote2.default)({\n        that: remoteView,\n        store: store\n    });\n    (0, _transport2.default)({\n        that: transport,\n        store: store,\n        canvasView: canvasView,\n        midiNetwork: midiNetwork\n    });\n\n    // scan installed processors\n    store.dispatch(store.getActions().rescanTypes());\n\n    // initialise\n    midi.connect().then(function () {\n        store.persist();\n        transport.run();\n    }).catch(function (errorMsg) {\n        (0, _dialog.showDialog)('MIDI access failure', 'The app can\\'t initialise because it failed to access the computer\\'s MIDI ports. If you view the app in a browser, please check if it supports the Web MIDI API.<br>Error message: ' + errorMsg);\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz9jNDViIl0sIm5hbWVzIjpbImluaXQiLCJjb25zb2xlIiwibG9nIiwiYXBwVmlldyIsImNhbnZhc1ZpZXciLCJkaWFsb2ciLCJsaWJyYXJ5VmlldyIsIm1pZGkiLCJtaWRpTmV0d29yayIsInByZWZlcmVuY2VzVmlldyIsInJlbW90ZVZpZXciLCJ0cmFuc3BvcnQiLCJzdG9yZSIsImFjdGlvbnMiLCJyZWR1Y2VycyIsInRoYXQiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJyZXNjYW5UeXBlcyIsImNvbm5lY3QiLCJ0aGVuIiwicGVyc2lzdCIsInJ1biIsImNhdGNoIiwiZXJyb3JNc2ciXSwibWFwcGluZ3MiOiI7Ozs7O2tCQXVDd0JBLEk7O0FBbkJ4Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQWhDQUMsUUFBUUMsR0FBUixDQUFZLE1BQVo7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQTs7O0FBR2UsU0FBU0YsSUFBVCxHQUFnQjtBQUMzQjtBQUNBLFFBQUlHLFVBQVUsRUFBZDtBQUFBLFFBQ0lDLGFBQWEsRUFEakI7QUFBQSxRQUVJQyxTQUFTLEVBRmI7QUFBQSxRQUdJQyxjQUFjLEVBSGxCO0FBQUEsUUFJSUMsT0FBTyxFQUpYO0FBQUEsUUFLSUMsY0FBYyxFQUxsQjtBQUFBLFFBTUlDLGtCQUFrQixFQU50QjtBQUFBLFFBT0lDLGFBQWEsRUFQakI7QUFBQSxRQVFJQyxZQUFZLEVBUmhCOztBQVVBLFFBQU1DLFFBQVEscUJBQVk7QUFDdEJDLGlCQUFTLHdCQURhO0FBRXRCQyxrQkFBVTtBQUZZLEtBQVosQ0FBZDs7QUFLQTtBQUNBLHVCQUFjO0FBQ1ZDLGNBQU1aLE9BREk7QUFFVlM7QUFGVSxLQUFkO0FBSUEsMEJBQWlCO0FBQ2JHLGNBQU1YLFVBRE87QUFFYlE7QUFGYSxLQUFqQjtBQUlBLDBCQUFhO0FBQ1RHLGNBQU1WO0FBREcsS0FBYjtBQUdBLDJCQUFrQjtBQUNkVSxjQUFNVCxXQURRO0FBRWRNO0FBRmMsS0FBbEI7QUFJQSx3QkFBVztBQUNQRyxjQUFNUixJQURDO0FBRVBLO0FBRk8sS0FBWDtBQUlBLDJCQUFrQjtBQUNkRyxjQUFNUCxXQURRO0FBRWRJO0FBRmMsS0FBbEI7QUFJQSwrQkFBc0I7QUFDbEJHLGNBQU1OLGVBRFk7QUFFbEJHO0FBRmtCLEtBQXRCO0FBSUEsMEJBQWlCO0FBQ2JHLGNBQU1MLFVBRE87QUFFYkU7QUFGYSxLQUFqQjtBQUlBLDZCQUFnQjtBQUNaRyxjQUFNSixTQURNO0FBRVpDLG9CQUZZO0FBR1pSLDhCQUhZO0FBSVpJO0FBSlksS0FBaEI7O0FBT0E7QUFDQUksVUFBTUksUUFBTixDQUFlSixNQUFNSyxVQUFOLEdBQW1CQyxXQUFuQixFQUFmOztBQUVBO0FBQ0FYLFNBQUtZLE9BQUwsR0FDS0MsSUFETCxDQUNVLFlBQU07QUFDUlIsY0FBTVMsT0FBTjtBQUNBVixrQkFBVVcsR0FBVjtBQUNILEtBSkwsRUFLS0MsS0FMTCxDQUtXLG9CQUFZO0FBQ2YsZ0NBQVcscUJBQVgsMkxBQXVOQyxRQUF2TjtBQUNILEtBUEw7QUFRSCIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc29sZS5sb2coJ21haW4nKTtcblxuLyoqXG4gICAgRXVjbGlkZWFuIFBhdHRlcm4gR2VuZXJhdG9yXG4gICAgQ29weXJpZ2h0IChDKSAyMDE3LCAyMDE4ICBXb3V0ZXIgSGlzc2NoZW1vbGxlclxuXG4gICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICovXG5cbmltcG9ydCBjcmVhdGVBY3Rpb25zIGZyb20gJy4vd2gvc3RhdGUvYWN0aW9ucy5qcyc7XG5pbXBvcnQgY3JlYXRlUmVkdWNlcnMgZnJvbSAnLi93aC9zdGF0ZS9yZWR1Y2Vycy5qcyc7XG5pbXBvcnQgY3JlYXRlU3RvcmUgZnJvbSAnLi93aC9zdGF0ZS9zdG9yZS5qcyc7XG5cbmltcG9ydCBjcmVhdGVBcHBWaWV3IGZyb20gJy4vd2gvdmlldy9hcHAuanMnO1xuaW1wb3J0IGNyZWF0ZUNhbnZhc1ZpZXcgZnJvbSAnLi93aC92aWV3L2NhbnZhcy5qcyc7XG5pbXBvcnQgY3JlYXRlRGlhbG9nIGZyb20gJy4vd2gvdmlldy9kaWFsb2cuanMnO1xuaW1wb3J0IGNyZWF0ZUxpYnJhcnlWaWV3IGZyb20gJy4vd2gvdmlldy9saWJyYXJ5LmpzJztcbmltcG9ydCBjcmVhdGVNSURJIGZyb20gJy4vd2gvbWlkaS9taWRpLmpzJztcbmltcG9ydCBjcmVhdGVNSURJTmV0d29yayBmcm9tICcuL3doL21pZGkvbmV0d29yay5qcyc7XG5pbXBvcnQgY3JlYXRlUHJlZmVyZW5jZXNWaWV3IGZyb20gJy4vd2gvdmlldy9wcmVmZXJlbmNlcy5qcyc7XG5pbXBvcnQgY3JlYXRlUmVtb3RlVmlldyBmcm9tICcuL3doL3ZpZXcvcmVtb3RlLmpzJztcbmltcG9ydCBjcmVhdGVUcmFuc3BvcnQgZnJvbSAnLi93aC9jb3JlL3RyYW5zcG9ydC5qcyc7XG5cbmltcG9ydCB7IHNob3dEaWFsb2cgfSBmcm9tICcuL3doL3ZpZXcvZGlhbG9nLmpzJztcblxuLyoqXG4gKiBBcHBsaWNhdGlvbiBzdGFydHVwLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0KCkge1xuICAgIC8vIENyZWF0ZSBhbGwgb2JqZWN0cyB0aGF0IHdpbGwgYmUgdGhlIG1vZHVsZXMgb2YgdGhlIGFwcC5cbiAgICB2YXIgYXBwVmlldyA9IHt9LFxuICAgICAgICBjYW52YXNWaWV3ID0ge30sXG4gICAgICAgIGRpYWxvZyA9IHt9LFxuICAgICAgICBsaWJyYXJ5VmlldyA9IHt9LFxuICAgICAgICBtaWRpID0ge30sXG4gICAgICAgIG1pZGlOZXR3b3JrID0ge30sXG4gICAgICAgIHByZWZlcmVuY2VzVmlldyA9IHt9LFxuICAgICAgICByZW1vdGVWaWV3ID0ge30sXG4gICAgICAgIHRyYW5zcG9ydCA9IHt9O1xuICAgIFxuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoe1xuICAgICAgICBhY3Rpb25zOiBjcmVhdGVBY3Rpb25zKCksXG4gICAgICAgIHJlZHVjZXJzOiBjcmVhdGVSZWR1Y2VycygpXG4gICAgfSk7XG5cbiAgICAvLyBBZGQgZnVuY3Rpb25hbGl0eSB0byB0aGUgbW9kdWxlcyBhbmQgaW5qZWN0IGRlcGVuZGVuY2llcy5cbiAgICBjcmVhdGVBcHBWaWV3KHsgXG4gICAgICAgIHRoYXQ6IGFwcFZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVDYW52YXNWaWV3KHsgXG4gICAgICAgIHRoYXQ6IGNhbnZhc1ZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVEaWFsb2coe1xuICAgICAgICB0aGF0OiBkaWFsb2csXG4gICAgfSk7XG4gICAgY3JlYXRlTGlicmFyeVZpZXcoeyBcbiAgICAgICAgdGhhdDogbGlicmFyeVZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJKHsgXG4gICAgICAgIHRoYXQ6IG1pZGksIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJTmV0d29yayh7XG4gICAgICAgIHRoYXQ6IG1pZGlOZXR3b3JrLFxuICAgICAgICBzdG9yZVxuICAgIH0pO1xuICAgIGNyZWF0ZVByZWZlcmVuY2VzVmlldyh7IFxuICAgICAgICB0aGF0OiBwcmVmZXJlbmNlc1ZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVSZW1vdGVWaWV3KHtcbiAgICAgICAgdGhhdDogcmVtb3RlVmlldyxcbiAgICAgICAgc3RvcmVcbiAgICB9KTtcbiAgICBjcmVhdGVUcmFuc3BvcnQoeyBcbiAgICAgICAgdGhhdDogdHJhbnNwb3J0LCBcbiAgICAgICAgc3RvcmUsIFxuICAgICAgICBjYW52YXNWaWV3LCBcbiAgICAgICAgbWlkaU5ldHdvcmsgXG4gICAgfSk7XG5cbiAgICAvLyBzY2FuIGluc3RhbGxlZCBwcm9jZXNzb3JzXG4gICAgc3RvcmUuZGlzcGF0Y2goc3RvcmUuZ2V0QWN0aW9ucygpLnJlc2NhblR5cGVzKCkpO1xuXG4gICAgLy8gaW5pdGlhbGlzZVxuICAgIG1pZGkuY29ubmVjdCgpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHN0b3JlLnBlcnNpc3QoKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5ydW4oKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yTXNnID0+IHtcbiAgICAgICAgICAgIHNob3dEaWFsb2coJ01JREkgYWNjZXNzIGZhaWx1cmUnLCBgVGhlIGFwcCBjYW4ndCBpbml0aWFsaXNlIGJlY2F1c2UgaXQgZmFpbGVkIHRvIGFjY2VzcyB0aGUgY29tcHV0ZXIncyBNSURJIHBvcnRzLiBJZiB5b3UgdmlldyB0aGUgYXBwIGluIGEgYnJvd3NlciwgcGxlYXNlIGNoZWNrIGlmIGl0IHN1cHBvcnRzIHRoZSBXZWIgTUlESSBBUEkuPGJyPkVycm9yIG1lc3NhZ2U6ICR7ZXJyb3JNc2d9YCk7XG4gICAgICAgIH0pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createActions;\n\nvar _convert_xml = __webpack_require__(10);\n\nvar _convert_xml2 = _interopRequireDefault(_convert_xml);\n\nvar _util = __webpack_require__(2);\n\nvar _config = __webpack_require__(11);\n\nvar _midi = __webpack_require__(3);\n\nvar _network_ordering = __webpack_require__(4);\n\nvar _network_ordering2 = _interopRequireDefault(_network_ordering);\n\nvar _dialog = __webpack_require__(5);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createActions() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var RESCAN_TYPES = 'RESCAN_TYPES',\n        CREATE_PROJECT = 'CREATE_PROJECT',\n        SET_THEME = 'SET_THEME',\n        CREATE_PROCESSOR = 'CREATE_PROCESSOR',\n        ADD_PROCESSOR = 'ADD_PROCESSOR',\n        DELETE_PROCESSOR = 'DELETE_PROCESSOR',\n        SELECT_PROCESSOR = 'SELECT_PROCESSOR',\n        DRAG_SELECTED_PROCESSOR = 'DRAG_SELECTED_PROCESSOR',\n        DRAG_ALL_PROCESSORS = 'DRAG_ALL_PROCESSORS',\n        CHANGE_PARAMETER = 'CHANGE_PARAMETER',\n        RECREATE_PARAMETER = 'RECREATE_PARAMETER',\n        SET_TEMPO = 'SET_TEMPO',\n        CREATE_MIDI_PORT = 'CREATE_MIDI_PORT',\n        UPDATE_MIDI_PORT = 'UPDATE_MIDI_PORT',\n        TOGGLE_MIDI_PREFERENCE = 'TOGGLE_MIDI_PREFERENCE',\n        TOGGLE_MIDI_LEARN_MODE = 'TOGGLE_MIDI_LEARN_MODE',\n        TOGGLE_MIDI_LEARN_TARGET = 'TOGGLE_MIDI_LEARN_TARGET',\n        SET_TRANSPORT = 'SET_TRANSPORT',\n        RECEIVE_MIDI_CC = 'RECEIVE_MIDI_CC',\n        ASSIGN_EXTERNAL_CONTROL = 'ASSIGN_EXTERNAL_CONTROL',\n        UNASSIGN_EXTERNAL_CONTROL = 'UNASSIGN_EXTERNAL_CONTROL',\n        TOGGLE_PANEL = 'TOGGLE_PANEL',\n        TOGGLE_CONNECT_MODE = 'TOGGLE_CONNECT_MODE',\n        CONNECT_PROCESSORS = 'CONNECT_PROCESSORS',\n        DISCONNECT_PROCESSORS = 'DISCONNECT_PROCESSORS';\n\n    return {\n\n        importProject: function importProject(file) {\n            return function (dispatch, getState, getActions) {\n                var fileReader = new FileReader();\n\n                // closure to capture the file information\n                fileReader.onload = function (f) {\n                    return function (e) {\n                        var isJSON = true,\n                            isXML = false;\n                        try {\n                            var data = JSON.parse(e.target.result);\n                            if (data) {\n                                dispatch(getActions().setProject(data));\n                            }\n                        } catch (errorMessage) {\n                            isJSON = false;\n                        }\n                        if (!isJSON) {\n\n                            // try if it's a legacy xml file\n                            var legacyData = (0, _convert_xml2.default)(e.target.result);\n                            if (legacyData) {\n                                dispatch(getActions().setProject(legacyData));\n                                isXML = true;\n                            }\n                        }\n                        if (!isJSON && !isXML) {\n                            (0, _dialog.showDialog)('Import failed', 'The file to import wasn\\'t recognised as a valid type for this application.', 'Ok');\n                        }\n                    };\n                }(file);\n                fileReader.readAsText(file);\n            };\n        },\n\n        exportProject: function exportProject() {\n            return function (dispatch, getState, getActions) {\n                var jsonString = JSON.stringify(getState()),\n                    blob = new Blob([jsonString], { type: 'application/json' }),\n                    a = document.createElement('a');\n                a.download = 'mpg.json';\n                a.href = URL.createObjectURL(blob);\n                a.click();\n            };\n        },\n\n        newProject: function newProject() {\n            return function (dispatch, getState, getActions) {\n\n                // create an empty initial state\n                dispatch(getActions().createProject());\n\n                // add the existing MIDI ports\n                var existingMIDIPorts = (0, _midi.getAllMIDIPorts)();\n                existingMIDIPorts.forEach(function (port) {\n                    dispatch(getActions().midiAccessChange(port));\n                });\n\n                // recreate the state with the existing ports\n                dispatch(getActions().createProject(getState()));\n            };\n        },\n\n        setProject: function setProject(data) {\n            return function (dispatch, getState, getActions) {\n\n                // create an empty initial state\n                dispatch(getActions().createProject());\n\n                // add the existing MIDI ports\n                var existingMIDIPorts = (0, _midi.getAllMIDIPorts)();\n                existingMIDIPorts.forEach(function (port) {\n                    dispatch(getActions().midiAccessChange(port));\n                });\n\n                // copy the port settings of existing ports\n                var existingPorts = _extends({}, getState().ports);\n\n                // copy the port settings defined in the project\n                var projectPorts = _extends({}, data.ports);\n\n                // clear the project's port settings\n                data.ports.allIds = [];\n                data.ports.byId = {};\n\n                // add all existing ports to the project data\n                existingPorts.allIds.forEach(function (existingPortID) {\n                    data.ports.allIds.push(existingPortID);\n                    data.ports.byId[existingPortID] = existingPorts.byId[existingPortID];\n                });\n\n                // set the existing ports to the project's settings,\n                // and create ports that do not exist\n                projectPorts.allIds.forEach(function (projectPortID) {\n                    var projectPort = projectPorts.byId[projectPortID];\n                    var portExists = false;\n                    existingPorts.allIds.forEach(function (existingPortID) {\n                        if (existingPortID === projectPortID) {\n\n                            portExists = true;\n\n                            // project port's settings exists, update the settings\n                            var existingPort = existingPorts.byId[existingPortID];\n                            existingPort.syncEnabled = projectPort.syncEnabled;\n                            existingPort.remoteEnabled = projectPort.remoteEnabled;\n                            existingPort.networkEnabled = projectPort.networkEnabled;\n                        }\n                    });\n\n                    // port settings object doesn't exist, so create it, but disabled\n                    if (!portExists) {\n                        data.ports.allIds.push(projectPortID);\n                        data.ports.byId[projectPortID] = {\n                            id: projectPortID,\n                            type: projectPort.type,\n                            name: projectPort.name,\n                            connection: 'closed', // closed | open | pending\n                            state: 'disconnected', // disconnected | connected\n                            syncEnabled: projectPort.syncEnabled,\n                            remoteEnabled: projectPort.remoteEnabled,\n                            networkEnabled: projectPort.networkEnabled\n                        };\n                    }\n                });\n\n                // order the processors according to their connection (fix faulty data)\n                (0, _network_ordering2.default)(data);\n\n                // create the project with the merged ports\n                dispatch(getActions().createProject(data));\n            };\n        },\n\n        CREATE_PROJECT: CREATE_PROJECT,\n        createProject: function createProject(data) {\n            return { type: CREATE_PROJECT, data: data };\n        },\n\n        SET_THEME: SET_THEME,\n        setTheme: function setTheme(themeName) {\n            return { type: SET_THEME, themeName: themeName };\n        },\n\n        CREATE_PROCESSOR: CREATE_PROCESSOR,\n        createProcessor: function createProcessor(data) {\n            return function (dispatch, getState, getActions) {\n                fetch('js/wh/processors/' + data.type + '/config.json').then(function (response) {\n                    return response.json();\n                }, function (error) {\n                    return console.log('An error occurred.', error);\n                }).then(function (json) {\n                    var id = data.id || data.type + '_' + (0, _util.createUUID)();\n                    var fullData = _extends({}, json, data);\n                    fullData.id = id;\n                    fullData.positionX = data.positionX;\n                    fullData.positionY = data.positionY;\n                    fullData.params.byId.name.value = data.name || getProcessorDefaultName(getState().processors);\n                    dispatch(getActions().addProcessor(fullData));\n                    dispatch(getActions().selectProcessor(id));\n                });\n            };\n        },\n\n        ADD_PROCESSOR: ADD_PROCESSOR,\n        addProcessor: function addProcessor(data) {\n            return { type: ADD_PROCESSOR, data: data };\n        },\n\n        DELETE_PROCESSOR: DELETE_PROCESSOR,\n        deleteProcessor: function deleteProcessor(id) {\n            return { type: DELETE_PROCESSOR, id: id };\n        },\n\n        SELECT_PROCESSOR: SELECT_PROCESSOR,\n        selectProcessor: function selectProcessor(id) {\n            return { type: SELECT_PROCESSOR, id: id };\n        },\n\n        DRAG_SELECTED_PROCESSOR: DRAG_SELECTED_PROCESSOR,\n        dragSelectedProcessor: function dragSelectedProcessor(x, y) {\n            return { type: DRAG_SELECTED_PROCESSOR, x: x, y: y };\n        },\n\n        DRAG_ALL_PROCESSORS: DRAG_ALL_PROCESSORS,\n        dragAllProcessors: function dragAllProcessors(x, y) {\n            return { type: DRAG_ALL_PROCESSORS, x: x, y: y };\n        },\n\n        CHANGE_PARAMETER: CHANGE_PARAMETER,\n        changeParameter: function changeParameter(processorID, paramKey, paramValue) {\n            return { type: CHANGE_PARAMETER, processorID: processorID, paramKey: paramKey, paramValue: paramValue };\n        },\n\n        RECREATE_PARAMETER: RECREATE_PARAMETER,\n        recreateParameter: function recreateParameter(processorID, paramKey, paramObj) {\n            return { type: RECREATE_PARAMETER, processorID: processorID, paramKey: paramKey, paramObj: paramObj };\n        },\n\n        SET_TEMPO: SET_TEMPO,\n        setTempo: function setTempo(value) {\n            return { type: SET_TEMPO, value: value };\n        },\n\n        CREATE_MIDI_PORT: CREATE_MIDI_PORT,\n        createMIDIPort: function createMIDIPort(portID, data) {\n            return { type: CREATE_MIDI_PORT, portID: portID, data: data };\n        },\n\n        UPDATE_MIDI_PORT: UPDATE_MIDI_PORT,\n        updateMIDIPort: function updateMIDIPort(portID, data) {\n            return { type: UPDATE_MIDI_PORT, portID: portID, data: data };\n        },\n\n        midiAccessChange: function midiAccessChange(midiPort) {\n            return function (dispatch, getState, getActions) {\n\n                // check if the port already exists\n                var state = getState();\n                var portExists = state.ports.allIds.indexOf(midiPort.id) > -1;\n\n                // create port or update existing\n                if (portExists) {\n\n                    // update existing port\n                    dispatch(getActions().updateMIDIPort(midiPort.id, {\n                        connection: midiPort.connection,\n                        state: midiPort.state\n                    }));\n                } else {\n\n                    // restore settings from config\n                    var config = (0, _config.getConfig)();\n                    var configPort = config.ports && config.ports.byId ? config.ports.byId[midiPort.id] : null;\n\n                    if (!configPort && config.ports && config.ports.allIds) {\n                        for (var i = config.ports.allIds.length - 1; i >= 0; i--) {\n                            var port = config.ports.byId[config.ports.allIds[i]];\n                            if (port.name === midiPort.name && port.type === midiPort.type) {\n                                configPort = port;\n                                break;\n                            }\n                        }\n                    }\n\n                    // create port\n                    dispatch(getActions().createMIDIPort(midiPort.id, {\n                        id: midiPort.id,\n                        type: midiPort.type,\n                        name: midiPort.name,\n                        connection: midiPort.connection,\n                        state: midiPort.state,\n                        networkEnabled: configPort ? configPort.networkEnabled : false,\n                        syncEnabled: configPort ? configPort.syncEnabled : false,\n                        remoteEnabled: configPort ? configPort.remoteEnabled : false\n                    }));\n                }\n\n                // store the changes in configuration\n                (0, _config.setConfig)(getState());\n            };\n        },\n\n        TOGGLE_MIDI_PREFERENCE: TOGGLE_MIDI_PREFERENCE,\n        toggleMIDIPreference: function toggleMIDIPreference(id, preferenceName, isEnabled) {\n            return { type: TOGGLE_MIDI_PREFERENCE, id: id, preferenceName: preferenceName, isEnabled: isEnabled };\n        },\n\n        TOGGLE_MIDI_LEARN_MODE: TOGGLE_MIDI_LEARN_MODE,\n        toggleMIDILearnMode: function toggleMIDILearnMode() {\n            return { type: TOGGLE_MIDI_LEARN_MODE };\n        },\n\n        TOGGLE_MIDI_LEARN_TARGET: TOGGLE_MIDI_LEARN_TARGET,\n        toggleMIDILearnTarget: function toggleMIDILearnTarget(processorID, parameterKey) {\n            return { type: TOGGLE_MIDI_LEARN_TARGET, processorID: processorID, parameterKey: parameterKey };\n        },\n\n        SET_TRANSPORT: SET_TRANSPORT,\n        setTransport: function setTransport(command) {\n            return { type: SET_TRANSPORT, command: command };\n        },\n\n        RECEIVE_MIDI_CC: RECEIVE_MIDI_CC,\n        receiveMIDIControlChange: function receiveMIDIControlChange(data) {\n            return function (dispatch, getState, getActions) {\n                var state = getState();\n                var remoteChannel = (data[0] & 0xf) + 1;\n                var remoteCC = data[1];\n\n                if (state.learnModeActive) {\n                    dispatch(getActions().unassignExternalControl(state.learnTargetProcessorID, state.learnTargetParameterKey));\n                    dispatch(getActions().assignExternalControl('assign_' + (0, _util.createUUID)(), state.learnTargetProcessorID, state.learnTargetParameterKey, remoteChannel, remoteCC));\n                } else {\n                    state.assignments.allIds.forEach(function (assignID) {\n                        var assignment = state.assignments.byId[assignID];\n                        if (assignment.remoteChannel === remoteChannel && assignment.remoteCC === remoteCC) {\n                            var param = state.processors.byId[assignment.processorID].params.byId[assignment.paramKey];\n                            var paramValue = midiControlToParameterValue(param, data[2]);\n                            dispatch(getActions().changeParameter(assignment.processorID, assignment.paramKey, paramValue));\n                        }\n                    });\n                }\n            };\n        },\n\n        ASSIGN_EXTERNAL_CONTROL: ASSIGN_EXTERNAL_CONTROL,\n        assignExternalControl: function assignExternalControl(assignID, processorID, paramKey, remoteChannel, remoteCC) {\n            return { type: ASSIGN_EXTERNAL_CONTROL, assignID: assignID, processorID: processorID, paramKey: paramKey, remoteChannel: remoteChannel, remoteCC: remoteCC };\n        },\n\n        UNASSIGN_EXTERNAL_CONTROL: UNASSIGN_EXTERNAL_CONTROL,\n        unassignExternalControl: function unassignExternalControl(processorID, paramKey) {\n            return { type: UNASSIGN_EXTERNAL_CONTROL, processorID: processorID, paramKey: paramKey };\n        },\n\n        TOGGLE_PANEL: TOGGLE_PANEL,\n        togglePanel: function togglePanel(panelName) {\n            return { type: TOGGLE_PANEL, panelName: panelName };\n        },\n\n        TOGGLE_CONNECT_MODE: TOGGLE_CONNECT_MODE,\n        toggleConnectMode: function toggleConnectMode() {\n            return { type: TOGGLE_CONNECT_MODE };\n        },\n\n        CONNECT_PROCESSORS: CONNECT_PROCESSORS,\n        connectProcessors: function connectProcessors(payload) {\n            return { type: CONNECT_PROCESSORS, payload: payload, id: 'conn_' + (0, _util.createUUID)() };\n        },\n\n        DISCONNECT_PROCESSORS: DISCONNECT_PROCESSORS,\n        disconnectProcessors2: function disconnectProcessors2(id) {\n            return { type: DISCONNECT_PROCESSORS, id: id };\n        },\n\n        disconnectProcessors: function disconnectProcessors(id) {\n            return function (dispatch, getState, getActions) {\n                var state = getState();\n                var connection = state.connections.byId[id];\n                var sourceProcessor = state.processors.byId[connection.sourceProcessorID];\n                var destinationProcessor = state.processors.byId[connection.destinationProcessorID];\n\n                // disconnect the processors\n                dispatch(getActions().disconnectProcessors2(id));\n            };\n        },\n\n        RESCAN_TYPES: RESCAN_TYPES,\n        rescanTypes: function rescanTypes() {\n            return { type: RESCAN_TYPES, types: _config.processorTypes };\n        }\n    };\n}\n\n/**\n * Convert a MIDI control value to a parameter value, depending on the parameter type.\n * @param {Object} param Processor parameter.\n * @param {Number} controllerValue MIDI controller value in the range 0 to 127.\n */\nfunction midiControlToParameterValue(param, controllerValue) {\n    var normalizedValue = controllerValue / 127;\n    switch (param.type) {\n        case 'integer':\n            return Math.round(param.min + (param.max - param.min) * normalizedValue);\n        case 'boolean':\n            return normalizedValue > .5;\n        case 'itemized':\n            if (normalizedValue === 1) {\n                return param.model[param.model.length - 1].value;\n            }\n            return param.model[Math.floor(normalizedValue * param.model.length)].value;\n        case 'string':\n        case 'position':\n        default:\n            return param.value;\n    }\n}\n\n/**\n * Provide a default processor name.\n * @param {Object} processor Processor to name.\n * @return {String} Name for a newly created processor.\n */\nfunction getProcessorDefaultName(processors) {\n    var name = void 0,\n        number = void 0,\n        spaceIndex = void 0,\n        highestNumber = 0,\n        staticName = 'Processor';\n    processors.allIds.forEach(function (id) {\n        name = processors.byId[id].params.byId.name.value;\n        if (name && name.indexOf(staticName) == 0) {\n            spaceIndex = name.lastIndexOf(' ');\n            if (spaceIndex != -1) {\n                number = parseInt(name.substr(spaceIndex), 10);\n                if (!isNaN(number)) {\n                    highestNumber = Math.max(highestNumber, number);\n                }\n            }\n        }\n    });\n    return staticName + ' ' + (highestNumber + 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvYWN0aW9ucy5qcz8xZDU4Il0sIm5hbWVzIjpbImNyZWF0ZUFjdGlvbnMiLCJzcGVjcyIsIm15IiwiUkVTQ0FOX1RZUEVTIiwiQ1JFQVRFX1BST0pFQ1QiLCJTRVRfVEhFTUUiLCJDUkVBVEVfUFJPQ0VTU09SIiwiQUREX1BST0NFU1NPUiIsIkRFTEVURV9QUk9DRVNTT1IiLCJTRUxFQ1RfUFJPQ0VTU09SIiwiRFJBR19TRUxFQ1RFRF9QUk9DRVNTT1IiLCJEUkFHX0FMTF9QUk9DRVNTT1JTIiwiQ0hBTkdFX1BBUkFNRVRFUiIsIlJFQ1JFQVRFX1BBUkFNRVRFUiIsIlNFVF9URU1QTyIsIkNSRUFURV9NSURJX1BPUlQiLCJVUERBVEVfTUlESV9QT1JUIiwiVE9HR0xFX01JRElfUFJFRkVSRU5DRSIsIlRPR0dMRV9NSURJX0xFQVJOX01PREUiLCJUT0dHTEVfTUlESV9MRUFSTl9UQVJHRVQiLCJTRVRfVFJBTlNQT1JUIiwiUkVDRUlWRV9NSURJX0NDIiwiQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wiLCJVTkFTU0lHTl9FWFRFUk5BTF9DT05UUk9MIiwiVE9HR0xFX1BBTkVMIiwiVE9HR0xFX0NPTk5FQ1RfTU9ERSIsIkNPTk5FQ1RfUFJPQ0VTU09SUyIsIkRJU0NPTk5FQ1RfUFJPQ0VTU09SUyIsImltcG9ydFByb2plY3QiLCJmaWxlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsImdldEFjdGlvbnMiLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImYiLCJlIiwiaXNKU09OIiwiaXNYTUwiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwidGFyZ2V0IiwicmVzdWx0Iiwic2V0UHJvamVjdCIsImVycm9yTWVzc2FnZSIsImxlZ2FjeURhdGEiLCJyZWFkQXNUZXh0IiwiZXhwb3J0UHJvamVjdCIsImpzb25TdHJpbmciLCJzdHJpbmdpZnkiLCJibG9iIiwiQmxvYiIsInR5cGUiLCJhIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZG93bmxvYWQiLCJocmVmIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiY2xpY2siLCJuZXdQcm9qZWN0IiwiY3JlYXRlUHJvamVjdCIsImV4aXN0aW5nTUlESVBvcnRzIiwiZm9yRWFjaCIsIm1pZGlBY2Nlc3NDaGFuZ2UiLCJwb3J0IiwiZXhpc3RpbmdQb3J0cyIsInBvcnRzIiwicHJvamVjdFBvcnRzIiwiYWxsSWRzIiwiYnlJZCIsInB1c2giLCJleGlzdGluZ1BvcnRJRCIsInByb2plY3RQb3J0IiwicHJvamVjdFBvcnRJRCIsInBvcnRFeGlzdHMiLCJleGlzdGluZ1BvcnQiLCJzeW5jRW5hYmxlZCIsInJlbW90ZUVuYWJsZWQiLCJuZXR3b3JrRW5hYmxlZCIsImlkIiwibmFtZSIsImNvbm5lY3Rpb24iLCJzdGF0ZSIsInNldFRoZW1lIiwidGhlbWVOYW1lIiwiY3JlYXRlUHJvY2Vzc29yIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZnVsbERhdGEiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJwYXJhbXMiLCJ2YWx1ZSIsImdldFByb2Nlc3NvckRlZmF1bHROYW1lIiwicHJvY2Vzc29ycyIsImFkZFByb2Nlc3NvciIsInNlbGVjdFByb2Nlc3NvciIsImRlbGV0ZVByb2Nlc3NvciIsImRyYWdTZWxlY3RlZFByb2Nlc3NvciIsIngiLCJ5IiwiZHJhZ0FsbFByb2Nlc3NvcnMiLCJjaGFuZ2VQYXJhbWV0ZXIiLCJwcm9jZXNzb3JJRCIsInBhcmFtS2V5IiwicGFyYW1WYWx1ZSIsInJlY3JlYXRlUGFyYW1ldGVyIiwicGFyYW1PYmoiLCJzZXRUZW1wbyIsImNyZWF0ZU1JRElQb3J0IiwicG9ydElEIiwidXBkYXRlTUlESVBvcnQiLCJpbmRleE9mIiwibWlkaVBvcnQiLCJjb25maWciLCJjb25maWdQb3J0IiwiaSIsImxlbmd0aCIsInRvZ2dsZU1JRElQcmVmZXJlbmNlIiwicHJlZmVyZW5jZU5hbWUiLCJpc0VuYWJsZWQiLCJ0b2dnbGVNSURJTGVhcm5Nb2RlIiwidG9nZ2xlTUlESUxlYXJuVGFyZ2V0IiwicGFyYW1ldGVyS2V5Iiwic2V0VHJhbnNwb3J0IiwiY29tbWFuZCIsInJlY2VpdmVNSURJQ29udHJvbENoYW5nZSIsInJlbW90ZUNoYW5uZWwiLCJyZW1vdGVDQyIsImxlYXJuTW9kZUFjdGl2ZSIsInVuYXNzaWduRXh0ZXJuYWxDb250cm9sIiwibGVhcm5UYXJnZXRQcm9jZXNzb3JJRCIsImxlYXJuVGFyZ2V0UGFyYW1ldGVyS2V5IiwiYXNzaWduRXh0ZXJuYWxDb250cm9sIiwiYXNzaWdubWVudHMiLCJhc3NpZ25tZW50IiwiYXNzaWduSUQiLCJwYXJhbSIsIm1pZGlDb250cm9sVG9QYXJhbWV0ZXJWYWx1ZSIsInRvZ2dsZVBhbmVsIiwicGFuZWxOYW1lIiwidG9nZ2xlQ29ubmVjdE1vZGUiLCJjb25uZWN0UHJvY2Vzc29ycyIsInBheWxvYWQiLCJkaXNjb25uZWN0UHJvY2Vzc29yczIiLCJkaXNjb25uZWN0UHJvY2Vzc29ycyIsImNvbm5lY3Rpb25zIiwic291cmNlUHJvY2Vzc29yIiwic291cmNlUHJvY2Vzc29ySUQiLCJkZXN0aW5hdGlvblByb2Nlc3NvciIsImRlc3RpbmF0aW9uUHJvY2Vzc29ySUQiLCJyZXNjYW5UeXBlcyIsInR5cGVzIiwiY29udHJvbGxlclZhbHVlIiwibm9ybWFsaXplZFZhbHVlIiwiTWF0aCIsInJvdW5kIiwibWluIiwibWF4IiwibW9kZWwiLCJmbG9vciIsIm51bWJlciIsInNwYWNlSW5kZXgiLCJoaWdoZXN0TnVtYmVyIiwic3RhdGljTmFtZSIsImxhc3RJbmRleE9mIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJpc05hTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBT3dCQSxhOztBQVB4Qjs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFFZSxTQUFTQSxhQUFULEdBQTRDO0FBQUEsUUFBckJDLEtBQXFCLHVFQUFiLEVBQWE7QUFBQSxRQUFUQyxF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QWF2RixLQUFLMEYsV0FBTCxDQUFpQixHQUFqQixDQUFiO0FBQ0EsZ0JBQUlILGNBQWMsQ0FBQyxDQUFuQixFQUFzQjtBQUNsQkQseUJBQVNLLFNBQVMzRixLQUFLNEYsTUFBTCxDQUFZTCxVQUFaLENBQVQsRUFBa0MsRUFBbEMsQ0FBVDtBQUNBLG9CQUFJLENBQUNNLE1BQU1QLE1BQU4sQ0FBTCxFQUFvQjtBQUNoQkUsb0NBQWdCUixLQUFLRyxHQUFMLENBQVNLLGFBQVQsRUFBd0JGLE1BQXhCLENBQWhCO0FBQ0g7QUFDSjtBQUNKO0FBQ0osS0FYRDtBQVlBLFdBQVVHLFVBQVYsVUFBd0JELGdCQUFnQixDQUF4QztBQUNIIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29udmVydExlZ2FjeUZpbGUgZnJvbSAnLi4vY29yZS9jb252ZXJ0X3htbC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAnLi4vY29yZS91dGlsLmpzJztcbmltcG9ydCB7IGdldENvbmZpZywgc2V0Q29uZmlnLCBwcm9jZXNzb3JUeXBlcyB9IGZyb20gJy4uL2NvcmUvY29uZmlnLmpzJztcbmltcG9ydCB7IGdldEFsbE1JRElQb3J0cyB9IGZyb20gJy4uL21pZGkvbWlkaS5qcyc7XG5pbXBvcnQgb3JkZXJQcm9jZXNzb3JzIGZyb20gJy4uL21pZGkvbmV0d29ya19vcmRlcmluZy5qcyc7XG5pbXBvcnQgeyBzaG93RGlhbG9nIH0gZnJvbSAnLi4vdmlldy9kaWFsb2cuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBY3Rpb25zKHNwZWNzID0ge30sIG15ID0ge30pIHtcbiAgICBjb25zdCBSRVNDQU5fVFlQRVMgPSAnUkVTQ0FOX1RZUEVTJyxcbiAgICAgICAgQ1JFQVRFX1BST0pFQ1QgPSAnQ1JFQVRFX1BST0pFQ1QnLFxuICAgICAgICBTRVRfVEhFTUUgPSAnU0VUX1RIRU1FJyxcbiAgICAgICAgQ1JFQVRFX1BST0NFU1NPUiA9ICdDUkVBVEVfUFJPQ0VTU09SJyxcbiAgICAgICAgQUREX1BST0NFU1NPUiA9ICdBRERfUFJPQ0VTU09SJyxcbiAgICAgICAgREVMRVRFX1BST0NFU1NPUiA9ICdERUxFVEVfUFJPQ0VTU09SJyxcbiAgICAgICAgU0VMRUNUX1BST0NFU1NPUiA9ICdTRUxFQ1RfUFJPQ0VTU09SJyxcbiAgICAgICAgRFJBR19TRUxFQ1RFRF9QUk9DRVNTT1IgPSAnRFJBR19TRUxFQ1RFRF9QUk9DRVNTT1InLFxuICAgICAgICBEUkFHX0FMTF9QUk9DRVNTT1JTID0gJ0RSQUdfQUxMX1BST0NFU1NPUlMnLFxuICAgICAgICBDSEFOR0VfUEFSQU1FVEVSID0gJ0NIQU5HRV9QQVJBTUVURVInLFxuICAgICAgICBSRUNSRUFURV9QQVJBTUVURVIgPSAnUkVDUkVBVEVfUEFSQU1FVEVSJyxcbiAgICAgICAgU0VUX1RFTVBPID0gJ1NFVF9URU1QTycsXG4gICAgICAgIENSRUFURV9NSURJX1BPUlQgPSAnQ1JFQVRFX01JRElfUE9SVCcsXG4gICAgICAgIFVQREFURV9NSURJX1BPUlQgPSAnVVBEQVRFX01JRElfUE9SVCcsXG4gICAgICAgIFRPR0dMRV9NSURJX1BSRUZFUkVOQ0UgPSAnVE9HR0xFX01JRElfUFJFRkVSRU5DRScsXG4gICAgICAgIFRPR0dMRV9NSURJX0xFQVJOX01PREUgPSAnVE9HR0xFX01JRElfTEVBUk5fTU9ERScsXG4gICAgICAgIFRPR0dMRV9NSURJX0xFQVJOX1RBUkdFVCA9ICdUT0dHTEVfTUlESV9MRUFSTl9UQVJHRVQnLFxuICAgICAgICBTRVRfVFJBTlNQT1JUID0gJ1NFVF9UUkFOU1BPUlQnLFxuICAgICAgICBSRUNFSVZFX01JRElfQ0MgPSAnUkVDRUlWRV9NSURJX0NDJyxcbiAgICAgICAgQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wgPSAnQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wnLFxuICAgICAgICBVTkFTU0lHTl9FWFRFUk5BTF9DT05UUk9MID0gJ1VOQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wnLFxuICAgICAgICBUT0dHTEVfUEFORUwgPSAnVE9HR0xFX1BBTkVMJyxcbiAgICAgICAgVE9HR0xFX0NPTk5FQ1RfTU9ERSA9ICdUT0dHTEVfQ09OTkVDVF9NT0RFJyxcbiAgICAgICAgQ09OTkVDVF9QUk9DRVNTT1JTID0gJ0NPTk5FQ1RfUFJPQ0VTU09SUycsXG4gICAgICAgIERJU0NPTk5FQ1RfUFJPQ0VTU09SUyA9ICdESVNDT05ORUNUX1BST0NFU1NPUlMnO1xuXG4gICAgcmV0dXJuIHtcblxuICAgICAgICBpbXBvcnRQcm9qZWN0OiAoZmlsZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGdldEFjdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBjbG9zdXJlIHRvIGNhcHR1cmUgdGhlIGZpbGUgaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IChmdW5jdGlvbihmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXNKU09OID0gdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1hNTCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShlLnRhcmdldC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5zZXRQcm9qZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSlNPTiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0pTT04pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeSBpZiBpdCdzIGEgbGVnYWN5IHhtbCBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVnYWN5RGF0YSA9IGNvbnZlcnRMZWdhY3lGaWxlKGUudGFyZ2V0LnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlZ2FjeURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLnNldFByb2plY3QobGVnYWN5RGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1hNTCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0pTT04gJiYgIWlzWE1MKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0RpYWxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ltcG9ydCBmYWlsZWQnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFRoZSBmaWxlIHRvIGltcG9ydCB3YXNuJ3QgcmVjb2duaXNlZCBhcyBhIHZhbGlkIHR5cGUgZm9yIHRoaXMgYXBwbGljYXRpb24uYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09rJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSkoZmlsZSk7XG4gICAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGV4cG9ydFByb2plY3Q6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBnZXRBY3Rpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShnZXRTdGF0ZSgpKSxcbiAgICAgICAgICAgICAgICBibG9iID0gbmV3IEJsb2IoW2pzb25TdHJpbmddLCB7dHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nfSksXG4gICAgICAgICAgICAgICAgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgICBhLmRvd25sb2FkID0gJ21wZy5qc29uJztcbiAgICAgICAgICAgICAgICBhLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgICAgICAgIGEuY2xpY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBuZXdQcm9qZWN0OiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZ2V0QWN0aW9ucykgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IGluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChnZXRBY3Rpb25zKCkuY3JlYXRlUHJvamVjdCgpKTtcblxuICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgZXhpc3RpbmcgTUlESSBwb3J0c1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nTUlESVBvcnRzID0gZ2V0QWxsTUlESVBvcnRzKCk7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdNSURJUG9ydHMuZm9yRWFjaChwb3J0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLm1pZGlBY2Nlc3NDaGFuZ2UocG9ydCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVjcmVhdGUgdGhlIHN0YXRlIHdpdGggdGhlIGV4aXN0aW5nIHBvcnRzXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLmNyZWF0ZVByb2plY3QoZ2V0U3RhdGUoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNldFByb2plY3Q6IChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZ2V0QWN0aW9ucykgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IGluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChnZXRBY3Rpb25zKCkuY3JlYXRlUHJvamVjdCgpKTtcblxuICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgZXhpc3RpbmcgTUlESSBwb3J0c1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nTUlESVBvcnRzID0gZ2V0QWxsTUlESVBvcnRzKCk7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdNSURJUG9ydHMuZm9yRWFjaChwb3J0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLm1pZGlBY2Nlc3NDaGFuZ2UocG9ydCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gY29weSB0aGUgcG9ydCBzZXR0aW5ncyBvZiBleGlzdGluZyBwb3J0c1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUG9ydHMgPSB7IC4uLmdldFN0YXRlKCkucG9ydHMgfVxuXG4gICAgICAgICAgICAgICAgLy8gY29weSB0aGUgcG9ydCBzZXR0aW5ncyBkZWZpbmVkIGluIHRoZSBwcm9qZWN0XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvamVjdFBvcnRzID0geyAuLi5kYXRhLnBvcnRzIH07XG5cbiAgICAgICAgICAgICAgICAvLyBjbGVhciB0aGUgcHJvamVjdCdzIHBvcnQgc2V0dGluZ3NcbiAgICAgICAgICAgICAgICBkYXRhLnBvcnRzLmFsbElkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGRhdGEucG9ydHMuYnlJZCA9IHt9O1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkIGFsbCBleGlzdGluZyBwb3J0cyB0byB0aGUgcHJvamVjdCBkYXRhXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdQb3J0cy5hbGxJZHMuZm9yRWFjaChleGlzdGluZ1BvcnRJRCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucG9ydHMuYWxsSWRzLnB1c2goZXhpc3RpbmdQb3J0SUQpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnBvcnRzLmJ5SWRbZXhpc3RpbmdQb3J0SURdID0gZXhpc3RpbmdQb3J0cy5ieUlkW2V4aXN0aW5nUG9ydElEXTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgZXhpc3RpbmcgcG9ydHMgdG8gdGhlIHByb2plY3QncyBzZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAvLyBhbmQgY3JlYXRlIHBvcnRzIHRoYXQgZG8gbm90IGV4aXN0XG4gICAgICAgICAgICAgICAgcHJvamVjdFBvcnRzLmFsbElkcy5mb3JFYWNoKHByb2plY3RQb3J0SUQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0UG9ydCA9IHByb2plY3RQb3J0cy5ieUlkW3Byb2plY3RQb3J0SURdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcG9ydEV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1BvcnRzLmFsbElkcy5mb3JFYWNoKGV4aXN0aW5nUG9ydElEID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ1BvcnRJRCA9PT0gcHJvamVjdFBvcnRJRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRFeGlzdHMgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvamVjdCBwb3J0J3Mgc2V0dGluZ3MgZXhpc3RzLCB1cGRhdGUgdGhlIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdQb3J0ID0gZXhpc3RpbmdQb3J0cy5ieUlkW2V4aXN0aW5nUG9ydElEXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1BvcnQuc3luY0VuYWJsZWQgPSBwcm9qZWN0UG9ydC5zeW5jRW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1BvcnQucmVtb3RlRW5hYmxlZCA9IHByb2plY3RQb3J0LnJlbW90ZUVuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQb3J0Lm5ldHdvcmtFbmFibGVkID0gcHJvamVjdFBvcnQubmV0d29ya0VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHBvcnQgc2V0dGluZ3Mgb2JqZWN0IGRvZXNuJ3QgZXhpc3QsIHNvIGNyZWF0ZSBpdCwgYnV0IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgICAgIGlmICghcG9ydEV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wb3J0cy5hbGxJZHMucHVzaChwcm9qZWN0UG9ydElEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucG9ydHMuYnlJZFtwcm9qZWN0UG9ydElEXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcHJvamVjdFBvcnRJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBwcm9qZWN0UG9ydC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb2plY3RQb3J0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbjogJ2Nsb3NlZCcsIC8vIGNsb3NlZCB8IG9wZW4gfCBwZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdkaXNjb25uZWN0ZWQnLCAvLyBkaXNjb25uZWN0ZWQgfCBjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jRW5hYmxlZDogcHJvamVjdFBvcnQuc3luY0VuYWJsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlRW5hYmxlZDogcHJvamVjdFBvcnQucmVtb3RlRW5hYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrRW5hYmxlZDogcHJvamVjdFBvcnQubmV0d29ya0VuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gb3JkZXIgdGhlIHByb2Nlc3NvcnMgYWNjb3JkaW5nIHRvIHRoZWlyIGNvbm5lY3Rpb24gKGZpeCBmYXVsdHkgZGF0YSlcbiAgICAgICAgICAgICAgICBvcmRlclByb2Nlc3NvcnMoZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgdGhlIHByb2plY3Qgd2l0aCB0aGUgbWVyZ2VkIHBvcnRzXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLmNyZWF0ZVByb2plY3QoZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIENSRUFURV9QUk9KRUNULFxuICAgICAgICBjcmVhdGVQcm9qZWN0OiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogQ1JFQVRFX1BST0pFQ1QsIGRhdGEgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBTRVRfVEhFTUUsXG4gICAgICAgIHNldFRoZW1lOiAodGhlbWVOYW1lKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiBTRVRfVEhFTUUsIHRoZW1lTmFtZSB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIENSRUFURV9QUk9DRVNTT1IsXG4gICAgICAgIGNyZWF0ZVByb2Nlc3NvcjogKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBnZXRBY3Rpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgZmV0Y2goYGpzL3doL3Byb2Nlc3NvcnMvJHtkYXRhLnR5cGV9L2NvbmZpZy5qc29uYClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9PiBjb25zb2xlLmxvZygnQW4gZXJyb3Igb2NjdXJyZWQuJywgZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oanNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGRhdGEuaWQgfHwgYCR7ZGF0YS50eXBlfV8ke2NyZWF0ZVVVSUQoKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVsbERhdGEgPSB7Li4uanNvbiwgLi4uZGF0YX07XG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsRGF0YS5pZCA9IGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbERhdGEucG9zaXRpb25YID0gZGF0YS5wb3NpdGlvblg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsRGF0YS5wb3NpdGlvblkgPSBkYXRhLnBvc2l0aW9uWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxEYXRhLnBhcmFtcy5ieUlkLm5hbWUudmFsdWUgPSBkYXRhLm5hbWUgfHwgZ2V0UHJvY2Vzc29yRGVmYXVsdE5hbWUoZ2V0U3RhdGUoKS5wcm9jZXNzb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5hZGRQcm9jZXNzb3IoZnVsbERhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5zZWxlY3RQcm9jZXNzb3IoaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgQUREX1BST0NFU1NPUixcbiAgICAgICAgYWRkUHJvY2Vzc29yOiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogQUREX1BST0NFU1NPUiwgZGF0YSB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIERFTEVURV9QUk9DRVNTT1IsXG4gICAgICAgIGRlbGV0ZVByb2Nlc3NvcjogaWQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogREVMRVRFX1BST0NFU1NPUiwgaWQgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBTRUxFQ1RfUFJPQ0VTU09SLFxuICAgICAgICBzZWxlY3RQcm9jZXNzb3I6IGlkID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFNFTEVDVF9QUk9DRVNTT1IsIGlkIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgRFJBR19TRUxFQ1RFRF9QUk9DRVNTT1IsXG4gICAgICAgIGRyYWdTZWxlY3RlZFByb2Nlc3NvcjogKHgsIHkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IERSQUdfU0VMRUNURURfUFJPQ0VTU09SLCB4LCB5IH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgRFJBR19BTExfUFJPQ0VTU09SUyxcbiAgICAgICAgZHJhZ0FsbFByb2Nlc3NvcnM6ICh4LCB5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiBEUkFHX0FMTF9QUk9DRVNTT1JTLCB4LCB5IH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgQ0hBTkdFX1BBUkFNRVRFUixcbiAgICAgICAgY2hhbmdlUGFyYW1ldGVyOiAocHJvY2Vzc29ySUQsIHBhcmFtS2V5LCBwYXJhbVZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiBDSEFOR0VfUEFSQU1FVEVSLCBwcm9jZXNzb3JJRCwgcGFyYW1LZXksIHBhcmFtVmFsdWUgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBSRUNSRUFURV9QQVJBTUVURVIsXG4gICAgICAgIHJlY3JlYXRlUGFyYW1ldGVyOiAocHJvY2Vzc29ySUQsIHBhcmFtS2V5LCBwYXJhbU9iaikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogUkVDUkVBVEVfUEFSQU1FVEVSLCBwcm9jZXNzb3JJRCwgcGFyYW1LZXksIHBhcmFtT2JqIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgU0VUX1RFTVBPLFxuICAgICAgICBzZXRUZW1wbzogdmFsdWUgPT4geyByZXR1cm4geyB0eXBlOiBTRVRfVEVNUE8sIHZhbHVlIH0gfSxcblxuICAgICAgICBDUkVBVEVfTUlESV9QT1JULFxuICAgICAgICBjcmVhdGVNSURJUG9ydDogKHBvcnRJRCwgZGF0YSkgPT4geyByZXR1cm4geyB0eXBlOiBDUkVBVEVfTUlESV9QT1JULCBwb3J0SUQsIGRhdGEgfSB9LFxuXG4gICAgICAgIFVQREFURV9NSURJX1BPUlQsXG4gICAgICAgIHVwZGF0ZU1JRElQb3J0OiAocG9ydElELCBkYXRhKSA9PiB7IHJldHVybiB7IHR5cGU6IFVQREFURV9NSURJX1BPUlQsIHBvcnRJRCwgZGF0YSB9IH0sXG5cbiAgICAgICAgbWlkaUFjY2Vzc0NoYW5nZTogbWlkaVBvcnQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGdldEFjdGlvbnMpID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBwb3J0IGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnRFeGlzdHMgPSBzdGF0ZS5wb3J0cy5hbGxJZHMuaW5kZXhPZihtaWRpUG9ydC5pZCkgPiAtMTtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBwb3J0IG9yIHVwZGF0ZSBleGlzdGluZ1xuICAgICAgICAgICAgICAgIGlmIChwb3J0RXhpc3RzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGV4aXN0aW5nIHBvcnRcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLnVwZGF0ZU1JRElQb3J0KG1pZGlQb3J0LmlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uOiBtaWRpUG9ydC5jb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IG1pZGlQb3J0LnN0YXRlXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzdG9yZSBzZXR0aW5ncyBmcm9tIGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSBnZXRDb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmZpZ1BvcnQgPSAoY29uZmlnLnBvcnRzICYmIGNvbmZpZy5wb3J0cy5ieUlkKSA/IGNvbmZpZy5wb3J0cy5ieUlkW21pZGlQb3J0LmlkXSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25maWdQb3J0ICYmIGNvbmZpZy5wb3J0cyAmJiBjb25maWcucG9ydHMuYWxsSWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gY29uZmlnLnBvcnRzLmFsbElkcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcnQgPSBjb25maWcucG9ydHMuYnlJZFtjb25maWcucG9ydHMuYWxsSWRzW2ldXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9ydC5uYW1lID09PSBtaWRpUG9ydC5uYW1lICYmIHBvcnQudHlwZSA9PT0gbWlkaVBvcnQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWdQb3J0ID0gcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIHBvcnRcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLmNyZWF0ZU1JRElQb3J0KG1pZGlQb3J0LmlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbWlkaVBvcnQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBtaWRpUG9ydC50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbWlkaVBvcnQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb246IG1pZGlQb3J0LmNvbm5lY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogbWlkaVBvcnQuc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrRW5hYmxlZDogY29uZmlnUG9ydCA/IGNvbmZpZ1BvcnQubmV0d29ya0VuYWJsZWQgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNFbmFibGVkOiBjb25maWdQb3J0ID8gY29uZmlnUG9ydC5zeW5jRW5hYmxlZCA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlRW5hYmxlZDogY29uZmlnUG9ydCA/IGNvbmZpZ1BvcnQucmVtb3RlRW5hYmxlZCA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzdG9yZSB0aGUgY2hhbmdlcyBpbiBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgc2V0Q29uZmlnKGdldFN0YXRlKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuICAgICAgICBUT0dHTEVfTUlESV9QUkVGRVJFTkNFLFxuICAgICAgICB0b2dnbGVNSURJUHJlZmVyZW5jZTogKGlkLCBwcmVmZXJlbmNlTmFtZSwgaXNFbmFibGVkKSA9PiAoeyB0eXBlOiBUT0dHTEVfTUlESV9QUkVGRVJFTkNFLCBpZCwgcHJlZmVyZW5jZU5hbWUsIGlzRW5hYmxlZCB9KSxcbiAgICAgICAgXG4gICAgICAgIFRPR0dMRV9NSURJX0xFQVJOX01PREUsXG4gICAgICAgIHRvZ2dsZU1JRElMZWFybk1vZGU6ICgpID0+ICh7IHR5cGU6IFRPR0dMRV9NSURJX0xFQVJOX01PREUgfSksXG5cbiAgICAgICAgVE9HR0xFX01JRElfTEVBUk5fVEFSR0VULFxuICAgICAgICB0b2dnbGVNSURJTGVhcm5UYXJnZXQ6IChwcm9jZXNzb3JJRCwgcGFyYW1ldGVyS2V5KSA9PiAoeyB0eXBlOiBUT0dHTEVfTUlESV9MRUFSTl9UQVJHRVQsIHByb2Nlc3NvcklELCBwYXJhbWV0ZXJLZXkgfSksXG5cbiAgICAgICAgU0VUX1RSQU5TUE9SVCxcbiAgICAgICAgc2V0VHJhbnNwb3J0OiBjb21tYW5kID0+ICh7IHR5cGU6IFNFVF9UUkFOU1BPUlQsIGNvbW1hbmQgfSksXG5cbiAgICAgICAgUkVDRUlWRV9NSURJX0NDLFxuICAgICAgICByZWNlaXZlTUlESUNvbnRyb2xDaGFuZ2U6IChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZ2V0QWN0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVDaGFubmVsID0gKGRhdGFbMF0gJiAweGYpICsgMTtcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVDQyA9IGRhdGFbMV07XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGVhcm5Nb2RlQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS51bmFzc2lnbkV4dGVybmFsQ29udHJvbChzdGF0ZS5sZWFyblRhcmdldFByb2Nlc3NvcklELCBzdGF0ZS5sZWFyblRhcmdldFBhcmFtZXRlcktleSkpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChnZXRBY3Rpb25zKCkuYXNzaWduRXh0ZXJuYWxDb250cm9sKGBhc3NpZ25fJHtjcmVhdGVVVUlEKCl9YCwgc3RhdGUubGVhcm5UYXJnZXRQcm9jZXNzb3JJRCwgc3RhdGUubGVhcm5UYXJnZXRQYXJhbWV0ZXJLZXksIHJlbW90ZUNoYW5uZWwsIHJlbW90ZUNDKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuYXNzaWdubWVudHMuYWxsSWRzLmZvckVhY2goYXNzaWduSUQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNzaWdubWVudCA9IHN0YXRlLmFzc2lnbm1lbnRzLmJ5SWRbYXNzaWduSURdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2lnbm1lbnQucmVtb3RlQ2hhbm5lbCA9PT0gcmVtb3RlQ2hhbm5lbCAmJiBhc3NpZ25tZW50LnJlbW90ZUNDID09PSByZW1vdGVDQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtID0gc3RhdGUucHJvY2Vzc29ycy5ieUlkW2Fzc2lnbm1lbnQucHJvY2Vzc29ySURdLnBhcmFtcy5ieUlkW2Fzc2lnbm1lbnQucGFyYW1LZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtVmFsdWUgPSBtaWRpQ29udHJvbFRvUGFyYW1ldGVyVmFsdWUocGFyYW0sIGRhdGFbMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5jaGFuZ2VQYXJhbWV0ZXIoYXNzaWdubWVudC5wcm9jZXNzb3JJRCwgYXNzaWdubWVudC5wYXJhbUtleSwgcGFyYW1WYWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wsXG4gICAgICAgIGFzc2lnbkV4dGVybmFsQ29udHJvbDogKGFzc2lnbklELCBwcm9jZXNzb3JJRCwgcGFyYW1LZXksIHJlbW90ZUNoYW5uZWwsIHJlbW90ZUNDKSA9PiAoe3R5cGU6IEFTU0lHTl9FWFRFUk5BTF9DT05UUk9MLCBhc3NpZ25JRCwgcHJvY2Vzc29ySUQsIHBhcmFtS2V5LCByZW1vdGVDaGFubmVsLCByZW1vdGVDQ30pLFxuXG4gICAgICAgIFVOQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wsXG4gICAgICAgIHVuYXNzaWduRXh0ZXJuYWxDb250cm9sOiAocHJvY2Vzc29ySUQsIHBhcmFtS2V5KSA9PiAoe3R5cGU6IFVOQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wsIHByb2Nlc3NvcklELCBwYXJhbUtleX0pLFxuICAgICAgICBcbiAgICAgICAgVE9HR0xFX1BBTkVMLFxuICAgICAgICB0b2dnbGVQYW5lbDogcGFuZWxOYW1lID0+ICh7dHlwZTogVE9HR0xFX1BBTkVMLCBwYW5lbE5hbWV9KSxcblxuICAgICAgICBUT0dHTEVfQ09OTkVDVF9NT0RFLFxuICAgICAgICB0b2dnbGVDb25uZWN0TW9kZTogKCkgPT4gKHsgdHlwZTogVE9HR0xFX0NPTk5FQ1RfTU9ERSB9KSxcblxuICAgICAgICBDT05ORUNUX1BST0NFU1NPUlMsXG4gICAgICAgIGNvbm5lY3RQcm9jZXNzb3JzOiBwYXlsb2FkID0+ICh7IHR5cGU6IENPTk5FQ1RfUFJPQ0VTU09SUywgcGF5bG9hZCwgaWQ6IGBjb25uXyR7Y3JlYXRlVVVJRCgpfWAgfSksXG5cbiAgICAgICAgRElTQ09OTkVDVF9QUk9DRVNTT1JTLFxuICAgICAgICBkaXNjb25uZWN0UHJvY2Vzc29yczI6IGlkID0+ICh7IHR5cGU6IERJU0NPTk5FQ1RfUFJPQ0VTU09SUywgaWQgfSksXG5cbiAgICAgICAgZGlzY29ubmVjdFByb2Nlc3NvcnM6IGlkID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBnZXRBY3Rpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gc3RhdGUuY29ubmVjdGlvbnMuYnlJZFtpZF07XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlUHJvY2Vzc29yID0gc3RhdGUucHJvY2Vzc29ycy5ieUlkW2Nvbm5lY3Rpb24uc291cmNlUHJvY2Vzc29ySURdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUHJvY2Vzc29yID0gc3RhdGUucHJvY2Vzc29ycy5ieUlkW2Nvbm5lY3Rpb24uZGVzdGluYXRpb25Qcm9jZXNzb3JJRF07XG5cbiAgICAgICAgICAgICAgICAvLyBkaXNjb25uZWN0IHRoZSBwcm9jZXNzb3JzXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goZ2V0QWN0aW9ucygpLmRpc2Nvbm5lY3RQcm9jZXNzb3JzMihpZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIFJFU0NBTl9UWVBFUyxcbiAgICAgICAgcmVzY2FuVHlwZXM6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFJFU0NBTl9UWVBFUywgdHlwZXM6IHByb2Nlc3NvclR5cGVzIH07XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBNSURJIGNvbnRyb2wgdmFsdWUgdG8gYSBwYXJhbWV0ZXIgdmFsdWUsIGRlcGVuZGluZyBvbiB0aGUgcGFyYW1ldGVyIHR5cGUuXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW0gUHJvY2Vzc29yIHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7TnVtYmVyfSBjb250cm9sbGVyVmFsdWUgTUlESSBjb250cm9sbGVyIHZhbHVlIGluIHRoZSByYW5nZSAwIHRvIDEyNy5cbiAqL1xuZnVuY3Rpb24gbWlkaUNvbnRyb2xUb1BhcmFtZXRlclZhbHVlKHBhcmFtLCBjb250cm9sbGVyVmFsdWUpIHtcbiAgICBjb25zdCBub3JtYWxpemVkVmFsdWUgPSBjb250cm9sbGVyVmFsdWUgLyAxMjc7XG4gICAgc3dpdGNoIChwYXJhbS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocGFyYW0ubWluICsgKHBhcmFtLm1heCAtIHBhcmFtLm1pbikgKiBub3JtYWxpemVkVmFsdWUpO1xuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemVkVmFsdWUgPiAuNTtcbiAgICAgICAgY2FzZSAnaXRlbWl6ZWQnOlxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRWYWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbS5tb2RlbFtwYXJhbS5tb2RlbC5sZW5ndGggLSAxXS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJhbS5tb2RlbFtNYXRoLmZsb29yKG5vcm1hbGl6ZWRWYWx1ZSAqIHBhcmFtLm1vZGVsLmxlbmd0aCldLnZhbHVlO1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBjYXNlICdwb3NpdGlvbic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyYW0udmFsdWU7XG4gICAgfVxufVxuXG4vKipcbiAqIFByb3ZpZGUgYSBkZWZhdWx0IHByb2Nlc3NvciBuYW1lLlxuICogQHBhcmFtIHtPYmplY3R9IHByb2Nlc3NvciBQcm9jZXNzb3IgdG8gbmFtZS5cbiAqIEByZXR1cm4ge1N0cmluZ30gTmFtZSBmb3IgYSBuZXdseSBjcmVhdGVkIHByb2Nlc3Nvci5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvY2Vzc29yRGVmYXVsdE5hbWUocHJvY2Vzc29ycykge1xuICAgIGxldCBuYW1lLCBudW1iZXIsIHNwYWNlSW5kZXgsIFxuICAgICAgICBoaWdoZXN0TnVtYmVyID0gMCxcbiAgICAgICAgc3RhdGljTmFtZSA9ICdQcm9jZXNzb3InO1xuICAgIHByb2Nlc3NvcnMuYWxsSWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICBuYW1lID0gcHJvY2Vzc29ycy5ieUlkW2lkXS5wYXJhbXMuYnlJZC5uYW1lLnZhbHVlO1xuICAgICAgICBpZiAobmFtZSAmJiBuYW1lLmluZGV4T2Yoc3RhdGljTmFtZSkgPT0gMCkge1xuICAgICAgICAgICAgc3BhY2VJbmRleCA9IG5hbWUubGFzdEluZGV4T2YoJyAnKTtcbiAgICAgICAgICAgIGlmIChzcGFjZUluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQobmFtZS5zdWJzdHIoc3BhY2VJbmRleCksIDEwKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdE51bWJlciA9IE1hdGgubWF4KGhpZ2hlc3ROdW1iZXIsIG51bWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGAke3N0YXRpY05hbWV9ICR7aGlnaGVzdE51bWJlciArIDF9YDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9zdGF0ZS9hY3Rpb25zLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = convertLegacyFile;\n/**\n * \n */\nfunction convertLegacyFile(xmlString) {\n    try {\n        var xmlData = parseXML(xmlString);\n        var data = convertData(xmlData);\n        return data;\n    } catch (errorMessage) {\n        // console.log('NO XML', errorMessage);\n    }\n}\n\n/**\n * \n */\nfunction convertData(src) {\n    var dest = {\n        bpm: src.project.tempo,\n        midi: {\n            inputs: [],\n            outputs: []\n        },\n        network: {\n            processors: []\n        },\n        remote: []\n    };\n    for (var i = 0, n = src.project.patterns.pattern.length; i < n; i++) {\n        var pattern = src.project.patterns.pattern[i];\n        var processor = {\n            type: 'epg',\n            id: pattern.id,\n            steps: {\n                props: {\n                    value: parseInt(pattern.events.steps, 10),\n                    min: 0,\n                    max: 64\n                }\n            },\n            pulses: {\n                props: {\n                    value: parseInt(pattern.events.notes, 10),\n                    min: 0,\n                    max: parseInt(pattern.events.steps, 10)\n                }\n            },\n            rotation: {\n                props: {\n                    value: parseInt(pattern.events.rotation, 10),\n                    min: 0,\n                    max: parseInt(pattern.events.steps, 10) - 1\n                }\n            },\n            channel_out: {\n                props: {\n                    value: parseInt(pattern.midi_out.channel, 10) + 1,\n                    min: 1,\n                    max: 16\n                }\n            },\n            pitch_out: {\n                props: {\n                    value: parseInt(pattern.midi_out.pitch, 10),\n                    min: 0,\n                    max: 127\n                }\n            },\n            velocity_out: {\n                props: {\n                    value: parseInt(pattern.midi_out.velocity, 10),\n                    min: 0,\n                    max: 127\n                }\n            },\n            rate: {\n                props: {\n                    value: 1 / parseInt(pattern.settings.quantization, 10) * 4\n                }\n            },\n            is_triplets: {\n                props: {\n                    value: false\n                }\n            },\n            note_length: {\n                props: {\n                    // Old noteLength is in pulses where PPQN is 24, \n                    // so for example 6 is a sixteenth note length,\n                    // 96 is one 4/4 measure.\n                    value: convertNoteLength(parseInt(pattern.settings.notelength, 10))\n                }\n            },\n            is_mute: {\n                props: {\n                    value: pattern.settings.mute == 'true'\n                }\n            },\n            name: {\n                props: {\n                    value: pattern.name['#text']\n                }\n            },\n            position2d: {\n                props: {\n                    value: {\n                        x: parseInt(pattern.location.x, 10) + 100,\n                        y: parseInt(pattern.location.y, 10) + 100\n                    }\n                }\n            },\n            destinations: []\n        };\n        dest.network.processors.push(processor);\n    };\n    return dest;\n}\n\n/**\n * Old noteLength is in pulses where PPQN is 24, \n * so for example 6 is a sixteenth note length,\n * 96 is one 4/4 measure.\n * @param  {Number} oldLength Note length in pulses.\n * @return {Number} New note length in fraction of a beat.\n */\nfunction convertNoteLength(oldLength) {\n    var newNoteLength = void 0;\n    if (oldLength == 96) {\n        newNoteLength = 4;\n    } else if (oldLength >= 48) {\n        newNoteLength = 2;\n    } else if (oldLength >= 24) {\n        newNoteLength = 1;\n    } else if (oldLength >= 12) {\n        newNoteLength = 0.5;\n    } else if (oldLength >= 6) {\n        newNoteLength = 0.25;\n    } else {\n        newNoteLength = 0.125;\n    }\n    return newNoteLength;\n}\n\n/**\n * Parse XML string to Javascript object.\n * @see https://stackoverflow.com/questions/4200913/xml-to-javascript-object\n * @param  {String} xmlString XML data as string.\n * @param  {[type]} arrayTags [description]\n * @return {Object} Javascript object created from XML.\n */\nfunction parseXML(xml, arrayTags) {\n    var dom = null;\n    if (window.DOMParser) {\n        dom = new DOMParser().parseFromString(xml, \"text/xml\");\n    } else if (window.ActiveXObject) {\n        dom = new ActiveXObject('Microsoft.XMLDOM');\n        dom.async = false;\n        if (!dom.loadXML(xml)) {\n            throw dom.parseError.reason + \" \" + dom.parseError.srcText;\n        }\n    } else {\n        throw \"cannot parse xml string!\";\n    }\n\n    function isArray(o) {\n        return Object.prototype.toString.apply(o) === '[object Array]';\n    }\n\n    function parseNode(xmlNode, result) {\n        if (xmlNode.nodeName == \"#text\" || xmlNode.nodeName == '#cdata-section') {\n            var v = xmlNode.nodeValue;\n            if (v.trim()) {\n                result['#text'] = v;\n            }\n            return;\n        }\n\n        var jsonNode = {};\n        var existing = result[xmlNode.nodeName];\n        if (existing) {\n            if (!isArray(existing)) {\n                result[xmlNode.nodeName] = [existing, jsonNode];\n            } else {\n                result[xmlNode.nodeName].push(jsonNode);\n            }\n        } else {\n            if (arrayTags && arrayTags.indexOf(xmlNode.nodeName) != -1) {\n                result[xmlNode.nodeName] = [jsonNode];\n            } else {\n                result[xmlNode.nodeName] = jsonNode;\n            }\n        }\n\n        if (xmlNode.attributes) {\n            var length = xmlNode.attributes.length;\n            for (var i = 0; i < length; i++) {\n                var attribute = xmlNode.attributes[i];\n                jsonNode[attribute.nodeName] = attribute.nodeValue;\n            }\n        }\n\n        var length = xmlNode.childNodes.length;\n        for (var i = 0; i < length; i++) {\n            parseNode(xmlNode.childNodes[i], jsonNode);\n        }\n    }\n\n    var result = {};\n    if (dom.childNodes.length) {\n        parseNode(dom.childNodes[0], result);\n    }\n\n    return result;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getConfig = getConfig;\nexports.setConfig = setConfig;\n/**\n * Unchangeable application configuration settings.\n * \n * Config saves the ports settings off all ports \n * that have ever been connected.\n */\nvar PPQN = exports.PPQN = 480;\n\n/**\n * The processors available in the processors directory.\n */\nvar processorTypes = exports.processorTypes = {\n    epg: { name: 'Euclidean' },\n    euclidfx: { name: 'Euclid FX' },\n    output: { name: 'Output' }\n};\n\nvar name = 'config';\n\nfunction getConfig() {\n    var data = localStorage.getItem(name);\n    return data ? JSON.parse(data) : {};\n}\n\nfunction setConfig(state) {\n\n    var config = getConfig();\n    var data = {\n        theme: state.theme\n    };\n\n    if (config && config.ports) {\n\n        // update the existing config with new data from the current state\n        var ports = config.ports;\n        state.ports.allIds.forEach(function (statePortID) {\n            var portExistsInConfig = false;\n            config.ports.allIds.forEach(function (configPortID) {\n                if (configPortID === statePortID) {\n                    portExistsInConfig = true;\n\n                    // update port if it exists\n                    var configPort = config.ports.byId[configPortID];\n                    var statePort = state.ports.byId[statePortID];\n                    configPort.syncEnabled = statePort.syncEnabled;\n                    configPort.remoteEnabled = statePort.remoteEnabled;\n                    configPort.networkEnabled = statePort.networkEnabled;\n                }\n            });\n\n            // add port if it doesn't exist yet\n            if (!portExistsInConfig) {\n                config.ports.allIds.push(statePortID);\n                config.ports.byId[statePortID] = state.ports.byId[statePortID];\n            }\n        });\n        data.ports = config.ports;\n    } else {\n        data.ports = state.ports;\n    }\n\n    localStorage.setItem(name, JSON.stringify(data));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS9jb25maWcuanM/ZDg1NiJdLCJuYW1lcyI6WyJnZXRDb25maWciLCJzZXRDb25maWciLCJQUFFOIiwicHJvY2Vzc29yVHlwZXMiLCJlcGciLCJuYW1lIiwiZXVjbGlkZngiLCJvdXRwdXQiLCJkYXRhIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInN0YXRlIiwiY29uZmlnIiwidGhlbWUiLCJwb3J0cyIsImFsbElkcyIsImZvckVhY2giLCJwb3J0RXhpc3RzSW5Db25maWciLCJjb25maWdQb3J0SUQiLCJzdGF0ZVBvcnRJRCIsImNvbmZpZ1BvcnQiLCJieUlkIiwic3RhdGVQb3J0Iiwic3luY0VuYWJsZWQiLCJyZW1vdGVFbmFibGVkIiwibmV0d29ya0VuYWJsZWQiLCJwdXNoIiwic2V0SXRlbSIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFtQmdCQSxTLEdBQUFBLFM7UUFLQUMsUyxHQUFBQSxTO0FBeEJoQjs7Ozs7O0FBTU8sSUFBTUMsc0JBQU8sR0FBYjs7QUFFUDs7O0FBR08sSUFBTUMsMENBQWlCO0FBQzFCQyxTQUFLLEVBQUVDLE1BQU0sV0FBUixFQURxQjtBQUUxQkMsY0FBVSxFQUFFRCxNQUFNLFdBQVIsRUFGZ0I7QUFHMUJFLFlBQVEsRUFBRUYsTUFBTSxRQUFSO0FBSGtCLENBQXZCOztBQU1QLElBQU1BLE9BQU8sUUFBYjs7QUFFTyxTQUFTTCxTQUFULEdBQXFCO0FBQ3hCLFFBQU1RLE9BQU9DLGFBQWFDLE9BQWIsQ0FBcUJMLElBQXJCLENBQWI7QUFDQSxXQUFPRyxPQUFPRyxLQUFLQyxLQUFMLENBQVdKLElBQVgsQ0FBUCxHQUEwQixFQUFqQztBQUNIOztBQUVNLFNBQVNQLFNBQVQsQ0FBbUJZLEtBQW5CLEVBQTBCOztBQUU3QixRQUFNQyxTQUFTZCxXQUFmO0FBQ0EsUUFBSVEsT0FBTztBQUNQTyxlQUFPRixNQUFNRTtBQUROLEtBQVg7O0FBSUEsUUFBSUQsVUFBVUEsT0FBT0UsS0FBckIsRUFBNEI7O0FBRXhCO0FBQ0EsWUFBTUEsUUFBUUYsT0FBT0UsS0FBckI7QUFDQUgsY0FBTUcsS0FBTixDQUFZQyxNQUFaLENBQW1CQyxPQUFuQixDQUEyQix1QkFBZTtBQUN0QyxnQkFBSUMscUJBQXFCLEtBQXpCO0FBQ0FMLG1CQUFPRSxLQUFQLENBQWFDLE1BQWIsQ0FBb0JDLE9BQXBCLENBQTRCLHdCQUFnQjtBQUN4QyxvQkFBSUUsaUJBQWlCQyxXQUFyQixFQUFrQztBQUM5QkYseUNBQXFCLElBQXJCOztBQUVBO0FBQ0Esd0JBQU1HLGFBQWFSLE9BQU9FLEtBQVAsQ0FBYU8sSUFBYixDQUFrQkgsWUFBbEIsQ0FBbkI7QUFDQSx3QkFBTUksWUFBWVgsTUFBTUcsS0FBTixDQUFZTyxJQUFaLENBQWlCRixXQUFqQixDQUFsQjtBQUNBQywrQkFBV0csV0FBWCxHQUF5QkQsVUFBVUMsV0FBbkM7QUFDQUgsK0JBQVdJLGFBQVgsR0FBMkJGLFVBQVVFLGFBQXJDO0FBQ0FKLCtCQUFXSyxjQUFYLEdBQTRCSCxVQUFVRyxjQUF0QztBQUNIO0FBQ0osYUFYRDs7QUFhQTtBQUNBLGdCQUFJLENBQUNSLGtCQUFMLEVBQXlCO0FBQ3JCTCx1QkFBT0UsS0FBUCxDQUFhQyxNQUFiLENBQW9CVyxJQUFwQixDQUF5QlAsV0FBekI7QUFDQVAsdUJBQU9FLEtBQVAsQ0FBYU8sSUFBYixDQUFrQkYsV0FBbEIsSUFBaUNSLE1BQU1HLEtBQU4sQ0FBWU8sSUFBWixDQUFpQkYsV0FBakIsQ0FBakM7QUFDSDtBQUNKLFNBcEJEO0FBcUJBYixhQUFLUSxLQUFMLEdBQWFGLE9BQU9FLEtBQXBCO0FBQ0gsS0ExQkQsTUEwQk87QUFDSFIsYUFBS1EsS0FBTCxHQUFhSCxNQUFNRyxLQUFuQjtBQUNIOztBQUVEUCxpQkFBYW9CLE9BQWIsQ0FBcUJ4QixJQUFyQixFQUEyQk0sS0FBS21CLFNBQUwsQ0FBZXRCLElBQWYsQ0FBM0I7QUFDSCIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVW5jaGFuZ2VhYmxlIGFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MuXG4gKiBcbiAqIENvbmZpZyBzYXZlcyB0aGUgcG9ydHMgc2V0dGluZ3Mgb2ZmIGFsbCBwb3J0cyBcbiAqIHRoYXQgaGF2ZSBldmVyIGJlZW4gY29ubmVjdGVkLlxuICovXG5leHBvcnQgY29uc3QgUFBRTiA9IDQ4MDtcblxuLyoqXG4gKiBUaGUgcHJvY2Vzc29ycyBhdmFpbGFibGUgaW4gdGhlIHByb2Nlc3NvcnMgZGlyZWN0b3J5LlxuICovXG5leHBvcnQgY29uc3QgcHJvY2Vzc29yVHlwZXMgPSB7XG4gICAgZXBnOiB7IG5hbWU6ICdFdWNsaWRlYW4nfSxcbiAgICBldWNsaWRmeDogeyBuYW1lOiAnRXVjbGlkIEZYJ30sXG4gICAgb3V0cHV0OiB7IG5hbWU6ICdPdXRwdXQnfSxcbn07XG5cbmNvbnN0IG5hbWUgPSAnY29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgICBjb25zdCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSlcbiAgICByZXR1cm4gZGF0YSA/IEpTT04ucGFyc2UoZGF0YSkgOiB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbmZpZyhzdGF0ZSkge1xuICAgIFxuICAgIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZygpO1xuICAgIGxldCBkYXRhID0ge1xuICAgICAgICB0aGVtZTogc3RhdGUudGhlbWVcbiAgICB9O1xuXG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcucG9ydHMpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgZXhpc3RpbmcgY29uZmlnIHdpdGggbmV3IGRhdGEgZnJvbSB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAgICBjb25zdCBwb3J0cyA9IGNvbmZpZy5wb3J0cztcbiAgICAgICAgc3RhdGUucG9ydHMuYWxsSWRzLmZvckVhY2goc3RhdGVQb3J0SUQgPT4ge1xuICAgICAgICAgICAgbGV0IHBvcnRFeGlzdHNJbkNvbmZpZyA9IGZhbHNlO1xuICAgICAgICAgICAgY29uZmlnLnBvcnRzLmFsbElkcy5mb3JFYWNoKGNvbmZpZ1BvcnRJRCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ1BvcnRJRCA9PT0gc3RhdGVQb3J0SUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9ydEV4aXN0c0luQ29uZmlnID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcG9ydCBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlnUG9ydCA9IGNvbmZpZy5wb3J0cy5ieUlkW2NvbmZpZ1BvcnRJRF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlUG9ydCA9IHN0YXRlLnBvcnRzLmJ5SWRbc3RhdGVQb3J0SURdO1xuICAgICAgICAgICAgICAgICAgICBjb25maWdQb3J0LnN5bmNFbmFibGVkID0gc3RhdGVQb3J0LnN5bmNFbmFibGVkO1xuICAgICAgICAgICAgICAgICAgICBjb25maWdQb3J0LnJlbW90ZUVuYWJsZWQgPSBzdGF0ZVBvcnQucmVtb3RlRW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnUG9ydC5uZXR3b3JrRW5hYmxlZCA9IHN0YXRlUG9ydC5uZXR3b3JrRW5hYmxlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gYWRkIHBvcnQgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICAgIGlmICghcG9ydEV4aXN0c0luQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnBvcnRzLmFsbElkcy5wdXNoKHN0YXRlUG9ydElEKTtcbiAgICAgICAgICAgICAgICBjb25maWcucG9ydHMuYnlJZFtzdGF0ZVBvcnRJRF0gPSBzdGF0ZS5wb3J0cy5ieUlkW3N0YXRlUG9ydElEXVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZGF0YS5wb3J0cyA9IGNvbmZpZy5wb3J0cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLnBvcnRzID0gc3RhdGUucG9ydHM7XG4gICAgfVxuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xufSBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvY29yZS9jb25maWcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createReducers;\n\nvar _network_ordering = __webpack_require__(4);\n\nvar _network_ordering2 = _interopRequireDefault(_network_ordering);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction createReducers() {\n\n    var initialState = {\n        processors: {\n            byId: {},\n            allIds: []\n        },\n        connections: {\n            byId: {},\n            allIds: []\n        },\n        ports: {\n            byId: {},\n            allIds: []\n        },\n        types: {\n            byId: {},\n            allIds: []\n        },\n        assignments: {\n            byId: {},\n            allIds: []\n        },\n        bpm: 120,\n        selectedID: null,\n        theme: 'dev', // 'light|dark' \n        transport: 'stop', // 'play|pause|stop'\n        connectModeActive: false,\n        learnModeActive: false,\n        learnTargetProcessorID: null,\n        learnTargetParameterKey: null,\n        showHelpPanel: false,\n        showLibraryPanel: true,\n        showPreferencesPanel: false,\n        showSettingsPanel: false\n    },\n        reduce = function reduce() {\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var newState = void 0;\n        switch (action.type) {\n\n            case actions.CREATE_PROJECT:\n                return _extends({}, initialState, action.data || {}, {\n                    transport: initialState.transport });\n\n            case actions.SET_THEME:\n                return _extends({}, state, { theme: state.theme === 'light' ? 'dark' : 'light' });\n\n            case actions.ADD_PROCESSOR:\n                newState = _extends({}, state, {\n                    showSettingsPanel: true,\n                    processors: {\n                        byId: _extends({}, state.processors.byId, _defineProperty({}, action.data.id, action.data)),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // array index depends on processor type\n                var numInputProcessors = newState.processors.allIds.filter(function (id) {\n                    newState.processors.byId[id].type === 'input';\n                }).length;\n                switch (action.data.type) {\n                    case 'input':\n                        newState.processors.allIds.unshift(action.data.id);\n                        numInputProcessors++;\n                        break;\n                    case 'output':\n                        newState.processors.allIds.push(action.data.id);\n                        break;\n                    default:\n                        newState.processors.allIds.splice(numInputProcessors, 0, action.data.id);\n                }\n\n                return newState;\n\n            case actions.DELETE_PROCESSOR:\n                var index = state.processors.allIds.indexOf(action.id);\n\n                // delete the processor\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: state.processors.allIds.filter(function (id) {\n                            return id !== action.id;\n                        })\n                    } });\n                delete newState.processors.byId[action.id];\n\n                // delete all connections to and from the deleted processor\n                newState.connections = {\n                    byId: _extends({}, state.connections.byId),\n                    allIds: [].concat(_toConsumableArray(state.connections.allIds))\n                };\n                for (var i = newState.connections.allIds.length - 1, n = 0; i >= n; i--) {\n                    var connectionID = newState.connections.allIds[i];\n                    var connection = newState.connections.byId[connectionID];\n                    if (connection.sourceProcessorID === action.id || connection.destinationProcessorID === action.id) {\n                        newState.connections.allIds.splice(i, 1);\n                        delete newState.connections.byId[connectionID];\n                    }\n                }\n\n                // select the next processor, if any, or a previous one\n                var newIndex = void 0;\n                if (newState.selectedID === action.id && newState.processors.allIds.length) {\n                    if (newState.processors.allIds[index]) {\n                        newIndex = index;\n                    } else if (index > 0) {\n                        newIndex = index - 1;\n                    } else {\n                        newIndex = 0;\n                    }\n                    newState.selectedID = newState.processors.allIds[newIndex];\n                }\n                return newState;\n\n            case actions.SELECT_PROCESSOR:\n                return _extends({}, state, { selectedID: action.id });\n\n            case actions.DRAG_SELECTED_PROCESSOR:\n                return _extends({}, state, {\n                    processors: {\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                        byId: Object.values(state.processors.byId).reduce(function (accumulator, processor) {\n                            if (processor.id === state.selectedID) {\n                                accumulator[processor.id] = _extends({}, processor, { positionX: action.x, positionY: action.y });\n                            } else {\n                                accumulator[processor.id] = _extends({}, processor);\n                            }\n                            return accumulator;\n                        }, {})\n                    } });\n\n            case actions.DRAG_ALL_PROCESSORS:\n                return _extends({}, state, {\n                    processors: {\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                        byId: Object.values(state.processors.byId).reduce(function (accumulator, processor) {\n                            accumulator[processor.id] = _extends({}, processor, {\n                                positionX: processor.positionX + action.x,\n                                positionY: processor.positionY + action.y });\n                            return accumulator;\n                        }, {})\n                    } });\n\n            case actions.CHANGE_PARAMETER:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                var param = newState.processors.byId[action.processorID].params.byId[action.paramKey];\n                switch (param.type) {\n                    case 'integer':\n                        param.value = Math.max(param.min, Math.min(action.paramValue, param.max));\n                        break;\n                    case 'boolean':\n                        param.value = !!action.paramValue;\n                        break;\n                    case 'itemized':\n                        param.value = action.paramValue;\n                        break;\n                    case 'string':\n                        param.value = action.paramValue;\n                        break;\n                }\n                return newState;\n\n            // return {\n            //     ...state,\n            //     processors: {\n            //         allIds: [ ...state.processors.allIds ],\n            //         byId: Object.values(state.processors.byId).reduce((accumulator, processor) => {\n            //             if (processor.id === state.selectedID) {\n            //                 accumulator[processor.id] = { \n            //                     ...processor, \n            //                     params: {\n            //                         allIds: [ ...processor.params.allIds ],\n            //                         byId: Object.values(processor.params.byId).reduce((acc, param) => {\n            //                             if (action.paramKey === param.id) {\n            //                                 acc[param.id] = { \n            //                                     ...param,\n            //                                     value\n            //                                 }\n            //                             } else {\n            //                                 acc[param.id] = { ...param };\n            //                             }\n            //                         })\n            //                     } };\n            //             } else {\n            //                 accumulator[processor.id] = { ...processor };\n            //             }\n            //             return accumulator;\n            //         })\n            //     }\n            // };\n\n            case actions.RECREATE_PARAMETER:\n                // clone state\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // clone parameter, overwrite with new settings.\n                newState.processors.byId[action.processorID].params.byId[action.paramKey] = _extends({}, newState.processors.byId[action.processorID].params.byId[action.paramKey], action.paramObj);\n\n                return newState;\n\n            case actions.SET_TEMPO:\n                return _extends({}, state, { bpm: action.value });\n\n            case actions.CREATE_MIDI_PORT:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds), [action.portID]),\n                        byId: _extends({}, state.ports.byId, _defineProperty({}, action.portID, action.data))\n                    }\n                });\n\n            case actions.UPDATE_MIDI_PORT:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds)),\n                        byId: Object.values(state.ports.byId).reduce(function (returnObject, port) {\n                            if (port.id === action.portID) {\n                                returnObject[port.id] = _extends({}, port, action.data);\n                            } else {\n                                returnObject[port.id] = _extends({}, port);\n                            }\n                            return returnObject;\n                        }, {})\n                    }\n                });\n\n            case actions.TOGGLE_MIDI_PREFERENCE:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds)),\n                        byId: Object.values(state.ports.allIds).reduce(function (accumulator, portID) {\n                            if (portID === action.id) {\n                                accumulator[portID] = _extends({}, state.ports.byId[portID], _defineProperty({}, action.preferenceName, typeof action.isEnabled === 'boolean' ? isEnabled : !state.ports.byId[action.id][action.preferenceName]));\n                            } else {\n                                accumulator[portID] = _extends({}, state.ports.byId[portID]);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n            case actions.TOGGLE_MIDI_LEARN_MODE:\n                return _extends({}, state, { learnModeActive: !state.learnModeActive });\n\n            case actions.TOGGLE_MIDI_LEARN_TARGET:\n                return _extends({}, state, {\n                    learnTargetProcessorID: action.processorID,\n                    learnTargetParameterKey: action.parameterKey\n                });\n\n            case actions.SET_TRANSPORT:\n                var value = action.command;\n                if (action.command === 'toggle') {\n                    value = state.transport === 'play' ? 'pause' : 'play';\n                }\n                return Object.assign({}, state, {\n                    transport: value\n                });\n\n            case actions.ASSIGN_EXTERNAL_CONTROL:\n                return _extends({}, state, {\n                    assignments: {\n                        allIds: [].concat(_toConsumableArray(state.assignments.allIds), [action.assignID]),\n                        byId: _extends({}, state.assignments.byId, _defineProperty({}, action.assignID, {\n                            remoteChannel: action.remoteChannel,\n                            remoteCC: action.remoteCC,\n                            processorID: action.processorID,\n                            paramKey: action.paramKey\n                        }))\n                    }\n                });\n\n            case actions.UNASSIGN_EXTERNAL_CONTROL:\n                return _extends({}, state, {\n                    assignments: {\n                        allIds: state.assignments.allIds.reduce(function (accumulator, assignID) {\n                            var assignment = state.assignments.byId[assignID];\n                            if (assignment.processorID !== action.processorID || assignment.paramKey !== action.paramKey) {\n                                accumulator.push(assignID);\n                            }\n                            return accumulator;\n                        }, []),\n                        byId: state.assignments.allIds.reduce(function (accumulator, assignID) {\n                            var assignment = state.assignments.byId[assignID];\n                            if (assignment.processorID !== action.processorID || assignment.paramKey !== action.paramKey) {\n                                accumulator[assignID] = _extends({}, assignment);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n            // case actions.ASSIGN_EXTERNAL_CONTROL:\n            // case actions.UNASSIGN_EXTERNAL_CONTROL:\n            //     return {\n            //         ...state,\n            //         processors: {\n            //             allIds: [...state.processors.allIds],\n            //             byId: state.processors.allIds.reduce((accumulator, processorID) => {\n            //                 const processor = state.processors.byId[processorID];\n            //                 if (action.processorID === processorID) {\n            //                     accumulator[processorID] = {\n            //                         ...processor,\n            //                         params: {\n            //                             allIds: [...processor.params.allIds],\n            //                             byId: processor.params.allIds.reduce((pAccumulator, paramKey) => {\n            //                                 const param = processor.params.byId[paramKey];\n            //                                 if (action.paramKey === paramKey) {\n            //                                     const isAssign = action.type === actions.ASSIGN_EXTERNAL_CONTROL;\n            //                                     pAccumulator[paramKey] = {\n            //                                         ...param,\n            //                                         remoteChannel: isAssign ? action.remoteChannel : null,\n            //                                         remoteCC: isAssign ? action.remoteCC : null\n            //                                     }\n            //                                 } else {\n            //                                     pAccumulator[paramKey] = {...param}\n            //                                 }\n            //                                 return pAccumulator;\n            //                             }, {})\n            //                         }\n            //                     }\n            //                 } else {\n            //                     accumulator[processorID] = {...processor}\n            //                 }\n            //                 return accumulator;\n            //             }, {})\n            //         }\n            //     };\n\n            case actions.TOGGLE_PANEL:\n                return _extends({}, state, {\n                    showHelpPanel: action.panelName === 'help' ? !state.showHelpPanel : state.showHelpPanel,\n                    showPreferencesPanel: action.panelName === 'preferences' ? !state.showPreferencesPanel : state.showPreferencesPanel,\n                    showSettingsPanel: action.panelName === 'settings' ? !state.showSettingsPanel : state.showSettingsPanel,\n                    showLibraryPanel: action.panelName === 'library' ? !state.showLibraryPanel : state.showLibraryPanel\n                });\n\n            case actions.TOGGLE_CONNECT_MODE:\n                return _extends({}, state, {\n                    connectModeActive: !state.connectModeActive\n                });\n\n            case actions.CONNECT_PROCESSORS:\n\n                // abort if the connection already exists\n                for (var _i = 0, _n = state.connections.allIds.length; _i < _n; _i++) {\n                    var _connection = state.connections.byId[state.connections.allIds[_i]];\n                    if (_connection.sourceProcessorID === action.payload.sourceProcessorID && _connection.sourceConnectorID === action.payload.sourceConnectorID && _connection.destinationProcessorID === action.payload.destinationProcessorID && _connection.destinationConnectorID === action.payload.destinationConnectorID) {\n                        return state;\n                    }\n                }\n\n                // add new connection\n                newState = _extends({}, state, {\n                    connections: {\n                        byId: _extends({}, state.connections.byId, _defineProperty({}, action.id, action.payload)),\n                        allIds: [].concat(_toConsumableArray(state.connections.allIds), [action.id])\n                    },\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    }\n                });\n\n                // reorder the processors\n                (0, _network_ordering2.default)(newState);\n                return newState;\n\n            case actions.DISCONNECT_PROCESSORS:\n                newState = _extends({}, state, {\n                    connections: {\n                        allIds: state.connections.allIds.reduce(function (accumulator, connectionID) {\n                            if (connectionID !== action.id) {\n                                accumulator.push(connectionID);\n                            }\n                            return accumulator;\n                        }, []),\n                        byId: Object.values(state.connections.allIds).reduce(function (accumulator, connectionID) {\n                            if (connectionID !== action.id) {\n                                accumulator[connectionID] = _extends({}, state.connections.byId[connectionID]);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n                // reorder the processors\n                (0, _network_ordering2.default)(newState);\n                return newState;\n\n            case actions.RESCAN_TYPES:\n                return _extends({}, state, {\n                    types: {\n                        allIds: Object.keys(action.types),\n                        byId: action.types\n                    }\n                });\n\n            default:\n                return state;\n        }\n    };\n\n    return {\n        reduce: reduce\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStore;\n\nvar _selectors = __webpack_require__(1);\n\nfunction createStore() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var STATE_CHANGE = 'STATE_CHANGE';\n\n    var that = {},\n        actions = specs.actions,\n        reducers = specs.reducers,\n        currentState = void 0,\n        init = function init() {\n        currentState = reducers.reduce();\n    },\n        dispatch = function dispatch(action) {\n        // thunk or not\n        if (typeof action === 'function') {\n            action(dispatch, getState, getActions);\n        } else {\n            currentState = reducers.reduce(currentState, action, actions);\n            (0, _selectors.memoize)(currentState, action, actions);\n            document.dispatchEvent(new CustomEvent(STATE_CHANGE, { detail: {\n                    state: currentState,\n                    action: action,\n                    actions: actions\n                } }));\n        }\n    },\n        getActions = function getActions() {\n        return actions;\n    },\n        getState = function getState() {\n        return currentState;\n    },\n        persist = function persist() {\n        var name = 'persist';\n        window.addEventListener('beforeunload', function (e) {\n            localStorage.setItem(name, JSON.stringify(currentState));\n        });\n        var data = localStorage.getItem(name);\n        if (data) {\n            dispatch(getActions().setProject(JSON.parse(data)));\n        }\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    that.STATE_CHANGE = STATE_CHANGE;\n    that.dispatch = dispatch;\n    that.getActions = getActions;\n    that.getState = getState;\n    that.persist = persist;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanM/ZDhjZSJdLCJuYW1lcyI6WyJjcmVhdGVTdG9yZSIsInNwZWNzIiwibXkiLCJTVEFURV9DSEFOR0UiLCJ0aGF0IiwiYWN0aW9ucyIsInJlZHVjZXJzIiwiY3VycmVudFN0YXRlIiwiaW5pdCIsInJlZHVjZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwiZ2V0U3RhdGUiLCJnZXRBY3Rpb25zIiwiZG9jdW1lbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJzdGF0ZSIsInBlcnNpc3QiLCJuYW1lIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImdldEl0ZW0iLCJzZXRQcm9qZWN0IiwicGFyc2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUV3QkEsVzs7QUFGeEI7O0FBRWUsU0FBU0EsV0FBVCxHQUEwQztBQUFBLFFBQXJCQyxLQUFxQix1RUFBYixFQUFhO0FBQUEsUUFBVEMsRUFBUyx1RUFBSixFQUFJOztBQUNyRCxRQUFNQyxlQUFlLGNBQXJCOztBQUVBLFFBQUlDLE9BQU8sRUFBWDtBQUFBLFFBQ0lDLFVBQVVKLE1BQU1JLE9BRHBCO0FBQUEsUUFFSUMsV0FBV0wsTUFBTUssUUFGckI7QUFBQSxRQUdJQyxxQkFISjtBQUFBLFFBS0lDLE9BQU8sU0FBUEEsSUFBTyxHQUFNO0FBQ1RELHVCQUFlRCxTQUFTRyxNQUFULEVBQWY7QUFDSCxLQVBMO0FBQUEsUUFTSUMsV0FBVyxTQUFYQSxRQUFXLENBQUNDLE1BQUQsRUFBWTtBQUNuQjtBQUNBLFlBQUksT0FBT0EsTUFBUCxLQUFrQixVQUF0QixFQUFrQztBQUM5QkEsbUJBQU9ELFFBQVAsRUFBaUJFLFFBQWpCLEVBQTJCQyxVQUEzQjtBQUNILFNBRkQsTUFFTztBQUNITiwyQkFBZUQsU0FBU0csTUFBVCxDQUFnQkYsWUFBaEIsRUFBOEJJLE1BQTlCLEVBQXNDTixPQUF0QyxDQUFmO0FBQ0Esb0NBQVFFLFlBQVIsRUFBc0JJLE1BQXRCLEVBQThCTixPQUE5QjtBQUNBUyxxQkFBU0MsYUFBVCxDQUF1QixJQUFJQyxXQUFKLENBQWdCYixZQUFoQixFQUE4QixFQUFFYyxRQUFRO0FBQzNEQywyQkFBT1gsWUFEb0Q7QUFFM0RJLDRCQUFRQSxNQUZtRDtBQUczRE4sNkJBQVNBO0FBSGtELGlCQUFWLEVBQTlCLENBQXZCO0FBS0g7QUFDSixLQXRCTDtBQUFBLFFBd0JJUSxhQUFhLFNBQWJBLFVBQWEsR0FBTTtBQUNmLGVBQU9SLE9BQVA7QUFDSCxLQTFCTDtBQUFBLFFBNEJJTyxXQUFXLFNBQVhBLFFBQVcsR0FBTTtBQUNiLGVBQU9MLFlBQVA7QUFDSCxLQTlCTDtBQUFBLFFBZ0NJWSxVQUFVLFNBQVZBLE9BQVUsR0FBTTtBQUNaLFlBQU1DLE9BQU8sU0FBYjtBQUNBQyxlQUFPQyxnQkFBUCxDQUF3QixjQUF4QixFQUF3QyxhQUFLO0FBQ3pDQyx5QkFBYUMsT0FBYixDQUFxQkosSUFBckIsRUFBMkJLLEtBQUtDLFNBQUwsQ0FBZW5CLFlBQWYsQ0FBM0I7QUFDSCxTQUZEO0FBR0EsWUFBSW9CLE9BQU9KLGFBQWFLLE9BQWIsQ0FBcUJSLElBQXJCLENBQVg7QUFDQSxZQUFJTyxJQUFKLEVBQVU7QUFDTmpCLHFCQUFTRyxhQUFhZ0IsVUFBYixDQUF3QkosS0FBS0ssS0FBTCxDQUFXSCxJQUFYLENBQXhCLENBQVQ7QUFDSDtBQUNKLEtBekNMOztBQTJDQXZCLFdBQU9ILE1BQU1HLElBQU4sSUFBYyxFQUFyQjs7QUFFQUk7O0FBRUFKLFNBQUtELFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0FDLFNBQUtNLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0FOLFNBQUtTLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0FULFNBQUtRLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0FSLFNBQUtlLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFdBQU9mLElBQVA7QUFDSCIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lbW9pemUgfSBmcm9tICcuL3NlbGVjdG9ycy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHNwZWNzID0ge30sIG15ID0ge30pIHtcbiAgICBjb25zdCBTVEFURV9DSEFOR0UgPSAnU1RBVEVfQ0hBTkdFJztcblxuICAgIGxldCB0aGF0ID0ge30sXG4gICAgICAgIGFjdGlvbnMgPSBzcGVjcy5hY3Rpb25zLFxuICAgICAgICByZWR1Y2VycyA9IHNwZWNzLnJlZHVjZXJzLFxuICAgICAgICBjdXJyZW50U3RhdGUsXG5cbiAgICAgICAgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHJlZHVjZXJzLnJlZHVjZSgpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZGlzcGF0Y2ggPSAoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAvLyB0aHVuayBvciBub3RcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZ2V0QWN0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHJlZHVjZXJzLnJlZHVjZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgbWVtb2l6ZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoU1RBVEVfQ0hBTkdFLCB7IGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogY3VycmVudFN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogYWN0aW9uc1xuICAgICAgICAgICAgICAgIH19KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgZ2V0QWN0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgcGVyc2lzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAncGVyc2lzdCc7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkoY3VycmVudFN0YXRlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5zZXRQcm9qZWN0KEpTT04ucGFyc2UoZGF0YSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgdGhhdC5TVEFURV9DSEFOR0UgPSBTVEFURV9DSEFOR0U7XG4gICAgdGhhdC5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICAgIHRoYXQuZ2V0QWN0aW9ucyA9IGdldEFjdGlvbnM7XG4gICAgdGhhdC5nZXRTdGF0ZSA9IGdldFN0YXRlO1xuICAgIHRoYXQucGVyc2lzdCA9IHBlcnNpc3Q7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createAppView;\n\nvar _settings = __webpack_require__(15);\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _windowresize = __webpack_require__(6);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Main application view.\n */\nfunction createAppView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl = document.querySelector('#app'),\n        panelsEl = document.querySelector('.panels'),\n        libraryEl = document.querySelector('.library'),\n        helpEl = document.querySelector('.help'),\n        prefsEl = document.querySelector('.prefs'),\n        editEl = document.querySelector('.edit'),\n        editContentEl = document.querySelector('.edit .panel__content'),\n        remoteEl = document.querySelector('.remote'),\n        settingsViews = [],\n        panelHeaderHeight,\n        resetKeyCombo = [],\n        controls = {\n        new: {\n            type: 'checkbox',\n            input: document.querySelector('#file-new')\n        },\n        import: {\n            type: 'checkbox',\n            input: document.querySelector('#file-import')\n        },\n        export: {\n            type: 'checkbox',\n            input: document.querySelector('#file-export')\n        },\n        play: {\n            type: 'checkbox',\n            input: document.getElementById('play-check')\n        },\n        bpm: {\n            type: 'number',\n            input: document.getElementById('bpm-number')\n        },\n        library: {\n            type: 'checkbox',\n            input: document.getElementById('library-check')\n        },\n        remote: {\n            type: 'checkbox',\n            input: document.getElementById('learn-check')\n        },\n        prefs: {\n            type: 'checkbox',\n            input: document.getElementById('prefs-check')\n        },\n        edit: {\n            type: 'checkbox',\n            input: document.getElementById('edit-check')\n        },\n        connections: {\n            type: 'checkbox',\n            input: document.getElementById('connections-check')\n        },\n        help: {\n            type: 'checkbox',\n            input: document.getElementById('help-check')\n        }\n    },\n        init = function init() {\n        controls.new.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().newProject());\n        });\n        controls.import.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().importProject(e.target.files[0]));\n        });\n        controls.export.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().exportProject());\n        });\n        controls.play.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTransport('toggle'));\n        });\n        controls.bpm.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTempo(controls.bpm.input.value));\n        });\n        controls.remote.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleMIDILearnMode());\n        });\n        controls.library.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('library'));\n        });\n        controls.prefs.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('preferences'));\n        });\n        controls.edit.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('settings'));\n        });\n        controls.connections.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleConnectMode());\n        });\n        controls.help.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('help'));\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 32:\n                    // don't toggle play while typing space key in a text field.\n                    if (!(e.target.tagName.toLowerCase() == 'input' && e.target.getAttribute('type') == 'text')) {\n                        store.dispatch(store.getActions().setTransport('toggle'));\n                    }\n                    break;\n\n                case 83:\n                    // s\n                    console.log('state', store.getState());\n                    break;\n            }\n            resetKeyCombo = [];\n        });\n\n        document.addEventListener('keydown', function (e) {\n            switch (e.keyCode) {\n                case 82:\n                case 83:\n                case 84:\n                    // clear all data on key combination 'rst' (reset)\n                    resetKeyCombo.push(e.keyCode);\n                    if (resetKeyCombo.indexOf(82) > -1 && resetKeyCombo.indexOf(83) > -1 && resetKeyCombo.indexOf(84) > -1) {\n                        localStorage.clear();\n                        store.dispatch(store.getActions().newProject());\n                    }\n                    break;\n            }\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    setProject(e.detail.state);\n                    showPanels(e.detail.state);\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createSettingsViews(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteSettingsView(e.detail.action.id);\n                    showPanels(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.SET_TRANSPORT:\n                    controls.play.input.checked = e.detail.state.transport === 'play';\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n                case e.detail.actions.TOGGLE_PANEL:\n                    showPanels(e.detail.state);\n                    break;\n            }\n        });\n\n        // get panel header height from CSS.\n        var style = getComputedStyle(document.body);\n        panelHeaderHeight = parseInt(style.getPropertyValue('--header-height'), 10);\n\n        my.addWindowResizeCallback(renderLayout);\n        renderLayout();\n    },\n\n\n    /**\n     * Create settings controls view for a processor.\n     * @param  {Object} processor MIDI processor to control with the settings.\n     */\n    createSettingsViews = function createSettingsViews(state) {\n        state.processors.allIds.forEach(function (id, i) {\n            var processorData = state.processors.byId[id];\n            var exists = false;\n            settingsViews.forEach(function (settingsView) {\n                if (settingsView.getID() === id) {\n                    exists = true;\n                }\n            });\n            if (!exists) {\n                fetch('js/wh/processors/' + processorData.type + '/settings.html').then(function (response) {\n                    return response.text();\n                }, function (error) {\n                    return console.log('An error occurred.', error);\n                }).then(function (html) {\n                    settingsViews.splice(i, 0, (0, _settings2.default)({\n                        data: processorData,\n                        store: store,\n                        parentEl: editContentEl,\n                        template: html,\n                        isSelected: state.selectedID === processorData.id\n                    }));\n                });\n                // const template = require(`html-loader!../processors/${processorData.type}/settings.html`);\n                // settingsViews.splice(i, 0, createSettingsPanel({\n                //     data: processorData,\n                //     store: store,\n                //     parentEl: editContentEl,\n                //     template: template,\n                //     isSelected: state.selectedID === processorData.id\n                // }));\n            }\n        });\n    },\n\n\n    /**\n     * Delete settings controls view for a processor.\n     * @param  {String} id MIDI processor ID.\n     */\n    deleteSettingsView = function deleteSettingsView(id) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            if (settingsViews[n].getID() === id) {\n                settingsViews[n].terminate();\n                settingsViews.splice(n, 1);\n                return false;\n            }\n        }\n    },\n        setProject = function setProject(state) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            deleteSettingsView(settingsViews[n].getID());\n        }\n        createSettingsViews(state);\n    },\n        renderLayout = function renderLayout() {\n        var leftColumn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var rightColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (leftColumn) {\n            renderColumnLayout(prefsEl, remoteEl, false);\n        }\n        if (rightColumn) {\n            renderColumnLayout(helpEl, editEl, true);\n        }\n    },\n        renderColumnLayout = function renderColumnLayout(topEl, btmEl, isRightColumn) {\n        var totalHeight = panelsEl.clientHeight,\n            columnWidth = document.querySelector('.panels__right').clientWidth,\n            topWidth = topEl.clientWidth,\n            btmWidth = btmEl.clientWidth,\n            isTopVisible = topEl.dataset.show == 'true',\n            isBtmVisible = btmEl.dataset.show == 'true',\n            topViewportEl = topEl.querySelector('.panel__viewport'),\n            btmViewportEl = btmEl.querySelector('.panel__viewport');\n\n        var topHeight = void 0,\n            btmHeight = void 0,\n            topContentHeight = void 0,\n            btmContentHeight = void 0;\n\n        // reset heights before measuring them\n        topViewportEl.style.height = 'auto';\n        btmViewportEl.style.height = 'auto';\n\n        topHeight = topEl.clientHeight, btmHeight = btmEl.clientHeight, topContentHeight = topEl.querySelector('.panel__content').clientHeight, btmContentHeight = btmEl.querySelector('.panel__content').clientHeight;\n\n        if (isRightColumn && topWidth + btmWidth < columnWidth) {\n            if (topContentHeight + panelHeaderHeight > totalHeight) {\n                topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                topViewportEl.style.height = 'auto';\n            }\n            if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                btmViewportEl.style.height = 'auto';\n            }\n        } else {\n            if (isTopVisible && isBtmVisible) {\n                var combinedHeight = topContentHeight + btmContentHeight + panelHeaderHeight * 2;\n                if (combinedHeight > totalHeight) {\n                    if (topContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = prefsEl.topContentHeight + 'px';\n                        btmViewportEl.style.height = totalHeight - topContentHeight - panelHeaderHeight * 2 + 'px';\n                    } else if (btmContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = totalHeight - btmContentHeight - panelHeaderHeight * 2 + 'px';\n                        btmViewportEl.style.height = remoteEl.topContentHeight + 'px';\n                    } else {\n                        topViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                        btmViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                    }\n                } else {\n                    topViewportEl.style.height = 'auto';\n                    btmViewportEl.style.height = 'auto';\n                }\n            } else if (isTopVisible) {\n                if (topContentHeight + panelHeaderHeight > totalHeight) {\n                    topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    topViewportEl.style.height = 'auto';\n                }\n            } else if (isBtmVisible) {\n                if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                    btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    btmViewportEl.style.height = 'auto';\n                }\n            }\n        }\n    },\n        showPanels = function showPanels(state) {\n        helpEl.dataset.show = state.showHelpPanel;\n        controls.help.input.checked = state.showHelpPanel;\n\n        prefsEl.dataset.show = state.showPreferencesPanel;\n        controls.prefs.input.checked = state.showPreferencesPanel;\n\n        remoteEl.dataset.show = state.learnModeActive;\n        controls.remote.input.checked = state.learnModeActive;\n\n        editEl.dataset.show = state.showSettingsPanel;\n        controls.edit.input.checked = state.showSettingsPanel;\n\n        libraryEl.dataset.show = state.showLibraryPanel;\n        controls.library.input.checked = state.showLibraryPanel;\n\n        controls.connections.input.checked = state.connectModeActive;\n\n        renderLayout();\n    };\n\n    my = my || {};\n\n    that = (0, _windowresize2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createSettingsPanel;\n\nvar _boolean = __webpack_require__(16);\n\nvar _boolean2 = _interopRequireDefault(_boolean);\n\nvar _integer = __webpack_require__(18);\n\nvar _integer2 = _interopRequireDefault(_integer);\n\nvar _itemized = __webpack_require__(19);\n\nvar _itemized2 = _interopRequireDefault(_itemized);\n\nvar _string = __webpack_require__(20);\n\nvar _string2 = _interopRequireDefault(_string);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor settings view.\n */\nfunction createSettingsPanel(specs, my) {\n    var that,\n        store = specs.store,\n        data = specs.data,\n        parentEl = specs.parentEl,\n        settingViews = [],\n        el,\n        initialize = function initialize() {\n        // const htmlString = require(`html-loader!../processors/${data.type}/settings.html`);\n        el = document.createElement('div');\n        el.innerHTML = specs.template;\n\n        // loop through all processor parameters and add setting view if required\n        data.params.allIds.forEach(function (id) {\n            // only create setting if there's a container el for it in the settings panel\n            var settingContainerEl = el.querySelector('.' + id);\n            if (settingContainerEl) {\n                var paramData = data.params.byId[id],\n                    settingView = void 0,\n                    settingViewSpecs = {\n                    store: store,\n                    key: id,\n                    data: paramData,\n                    parentEl: settingContainerEl,\n                    processorID: data.id\n                };\n\n                // create the setting view based on the parameter type\n                switch (paramData.type) {\n                    case 'integer':\n                        settingView = (0, _integer2.default)(settingViewSpecs);\n                        break;\n                    case 'boolean':\n                        settingView = (0, _boolean2.default)(settingViewSpecs);\n                        break;\n                    case 'itemized':\n                        settingView = (0, _itemized2.default)(settingViewSpecs);\n                        break;\n                    case 'string':\n                        settingView = (0, _string2.default)(settingViewSpecs);\n                        break;\n                }\n            }\n        });\n\n        // default delete button of the settings panel\n        if (el && el.querySelector('.settings__delete')) {\n            el.querySelector('.settings__delete').addEventListener('click', function (e) {\n                e.preventDefault();\n                store.dispatch(store.getActions().deleteProcessor(data.id));\n            });\n        }\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SELECT_PROCESSOR:\n                case e.detail.actions.DELETE_PROCESSOR:\n                    show(e.detail.state.selectedID === data.id);\n                    break;\n            }\n        });\n\n        show(specs.isSelected);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (el && parentEl) {\n            show(false);\n        }\n    },\n\n\n    /**\n     * Show settings if the processor is selected, else remove.\n     * @param {Boolean} isSelected True if selected.\n     */\n    show = function show(isSelected) {\n        if (isSelected) {\n            parentEl.appendChild(el);\n        } else if (el.parentNode === parentEl) {\n            parentEl.removeChild(el);\n        }\n    },\n        getID = function getID() {\n        return data.id;\n    };\n\n    that = data.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBooleanSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\nfunction createBooleanSettingView(specs, my) {\n    var that,\n        checkEl,\n        init = function init() {\n        var id = getTemporaryInputAndLabelId();\n\n        checkEl = my.el.querySelector('.setting__check');\n        checkEl.value = my.data.default;\n        checkEl.setAttribute('id', id);\n        checkEl.addEventListener('change', onChange);\n\n        var labelEl = my.el.querySelector('.toggle__label');\n        labelEl.setAttribute('for', id);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {},\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.checked));\n    },\n        setValue = function setValue(value) {\n        checkEl.checked = value;\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jvb2xlYW4uanM/ZTAyMiJdLCJuYW1lcyI6WyJjcmVhdGVCb29sZWFuU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImNoZWNrRWwiLCJpbml0IiwiaWQiLCJnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQiLCJlbCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZSIsImRhdGEiLCJkZWZhdWx0Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwibGFiZWxFbCIsImluaXREYXRhIiwic2V0VmFsdWUiLCJNYXRoIiwicmFuZG9tIiwicGVyZm9ybWFuY2UiLCJub3ciLCJlIiwic3RvcmUiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjaGFuZ2VQYXJhbWV0ZXIiLCJwcm9jZXNzb3JJRCIsImtleSIsInRhcmdldCIsImNoZWNrZWQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU13QkEsd0I7O0FBTnhCOzs7Ozs7QUFFQTs7OztBQUllLFNBQVNBLHdCQUFULENBQWtDQyxLQUFsQyxFQUF5Q0MsRUFBekMsRUFBNkM7QUFDeEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLE9BREo7QUFBQSxRQUdJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkLFlBQUlDLEtBQUtDLDZCQUFUOztBQUVBSCxrQkFBVUYsR0FBR00sRUFBSCxDQUFNQyxhQUFOLENBQW9CLGlCQUFwQixDQUFWO0FBQ0FMLGdCQUFRTSxLQUFSLEdBQWdCUixHQUFHUyxJQUFILENBQVFDLE9BQXhCO0FBQ0FSLGdCQUFRUyxZQUFSLENBQXFCLElBQXJCLEVBQTJCUCxFQUEzQjtBQUNBRixnQkFBUVUsZ0JBQVIsQ0FBeUIsUUFBekIsRUFBbUNDLFFBQW5DOztBQUVBLFlBQUlDLFVBQVVkLEdBQUdNLEVBQUgsQ0FBTUMsYUFBTixDQUFvQixnQkFBcEIsQ0FBZDtBQUNBTyxnQkFBUUgsWUFBUixDQUFxQixLQUFyQixFQUE0QlAsRUFBNUI7O0FBRUFXO0FBQ0FDLGlCQUFTaEIsR0FBR1MsSUFBSCxDQUFRRCxLQUFqQjtBQUNILEtBaEJMO0FBQUEsUUFrQklPLFdBQVcsU0FBWEEsUUFBVyxHQUFXLENBRXJCLENBcEJMOzs7QUFzQkk7Ozs7QUFJQVYsa0NBQThCLFNBQTlCQSwyQkFBOEIsR0FBVztBQUNyQyxlQUFPLE9BQU9ZLEtBQUtDLE1BQUwsRUFBUCxHQUF1QkMsWUFBWUMsR0FBWixFQUE5QjtBQUNILEtBNUJMO0FBQUEsUUE4QklQLFdBQVcsU0FBWEEsUUFBVyxDQUFTUSxDQUFULEVBQVk7QUFDbkJyQixXQUFHc0IsS0FBSCxDQUFTQyxRQUFULENBQWtCdkIsR0FBR3NCLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZHpCLEdBQUcwQixXQURXLEVBRWQxQixHQUFHMkIsR0FGVyxFQUdkTixFQUFFTyxNQUFGLENBQVNDLE9BSEssQ0FBbEI7QUFJSCxLQW5DTDtBQUFBLFFBcUNJYixXQUFXLFNBQVhBLFFBQVcsQ0FBU1IsS0FBVCxFQUFnQjtBQUN2Qk4sZ0JBQVEyQixPQUFSLEdBQWtCckIsS0FBbEI7QUFDSCxLQXZDTDs7QUF5Q0FSLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHZ0IsUUFBSCxHQUFjQSxRQUFkOztBQUVBZixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFHOztBQUVBLFdBQU9GLElBQVA7QUFDSCIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlLmpzJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIEJvb2xlYW4gdHlwZSBwYXJhbWV0ZXIsXG4gKiB3aGljaCBoYXMgYSBjaGVja2JveCBpbnB1dC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm9vbGVhblNldHRpbmdWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBjaGVja0VsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGlkID0gZ2V0VGVtcG9yYXJ5SW5wdXRBbmRMYWJlbElkKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNoZWNrRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fY2hlY2snKTtcbiAgICAgICAgICAgIGNoZWNrRWwudmFsdWUgPSBteS5kYXRhLmRlZmF1bHQ7XG4gICAgICAgICAgICBjaGVja0VsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgICAgICBjaGVja0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGxhYmVsRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcudG9nZ2xlX19sYWJlbCcpO1xuICAgICAgICAgICAgbGFiZWxFbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHF1aWNrIElEIHRvIHRpZSBsYWJlbCB0byBpbnB1dCBlbGVtZW50cy5cbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgSUQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnaWQnICsgTWF0aC5yYW5kb20oKSArIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNoZWNrZWQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGNoZWNrRWwuY2hlY2tlZCA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuc2V0VmFsdWUgPSBzZXRWYWx1ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVNldHRpbmdWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvc2V0dGluZy9ib29sZWFuLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteSettingView;\n/**\n * Processor setting overlay for assinging MIDI control to the parameter.\n */\nfunction createRemoteSettingView(specs, my) {\n    var that,\n        learnClickLayer,\n        init = function init() {\n        if (my.data.isMidiControllable) {\n            var template = document.querySelector('#template-setting-learnmode');\n            var clone = template.content.cloneNode(true);\n            learnClickLayer = clone.firstElementChild;\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     */\n    changeRemoteState = function changeRemoteState(state) {\n        if (my.data.isMidiControllable) {\n            if (state.learnModeActive) {\n                showRemoteState('enter');\n\n                // search for assignment\n                var assignment = void 0;\n                state.assignments.allIds.forEach(function (assignID) {\n                    var assign = state.assignments.byId[assignID];\n                    if (assign.processorID === my.processorID && assign.paramKey === my.key) {\n                        assignment = assign;\n                    }\n                });\n\n                if (assignment) {\n                    showRemoteState('assigned');\n                } else {\n                    showRemoteState('unassigned');\n                }\n                if (state.learnTargetProcessorID === my.processorID && state.learnTargetParameterKey === my.key) {\n                    showRemoteState('selected');\n                } else {\n                    showRemoteState('deselected');\n                }\n            } else {\n                showRemoteState('exit');\n            }\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} status New state of the parameter.\n     */\n    showRemoteState = function showRemoteState(status) {\n        switch (status) {\n            case 'enter':\n                my.el.appendChild(learnClickLayer);\n                learnClickLayer.addEventListener('click', onLearnLayerClick);\n                break;\n            case 'exit':\n                if (my.el.contains(learnClickLayer)) {\n                    my.el.removeChild(learnClickLayer);\n                    learnClickLayer.removeEventListener('click', onLearnLayerClick);\n                }\n                break;\n            case 'selected':\n                learnClickLayer.dataset.selected = true;\n                break;\n            case 'deselected':\n                learnClickLayer.dataset.selected = false;\n                break;\n            case 'assigned':\n                learnClickLayer.dataset.assigned = true;\n                break;\n            case 'unassigned':\n                learnClickLayer.dataset.assigned = false;\n                break;\n            default:\n                console.log('Unknown remote state: ', state);\n                break;\n        }\n    },\n        onLearnLayerClick = function onLearnLayerClick(e) {\n        my.store.dispatch(my.store.getActions().toggleMIDILearnTarget(my.processorID, my.key));\n    };\n\n    my = my || {};\n    my.changeRemoteState = changeRemoteState;\n\n    that = that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIntegerSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createIntegerSettingView(specs, my) {\n    var that,\n        rangeEl,\n        numberEl,\n        init = function init() {\n        rangeEl = my.el.getElementsByClassName('setting__range')[0];\n        rangeEl.addEventListener('input', onChange);\n        rangeEl.addEventListener('change', onChange);\n\n        numberEl = my.el.getElementsByClassName('setting__number')[0];\n        numberEl.addEventListener('change', onChange);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {\n        rangeEl.setAttribute('min', my.data.min);\n        rangeEl.setAttribute('max', my.data.max);\n\n        numberEl.setAttribute('min', my.data.min);\n        numberEl.setAttribute('max', my.data.max);\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, parseInt(e.target.value, 10)));\n    },\n        setValue = function setValue(value) {\n        rangeEl.value = value;\n        numberEl.value = value;\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanM/NTk2MCJdLCJuYW1lcyI6WyJjcmVhdGVJbnRlZ2VyU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInJhbmdlRWwiLCJudW1iZXJFbCIsImluaXQiLCJlbCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwib25DaGFuZ2UiLCJpbml0RGF0YSIsInNldFZhbHVlIiwiZGF0YSIsInZhbHVlIiwic2V0QXR0cmlidXRlIiwibWluIiwibWF4IiwiZSIsInN0b3JlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwiY2hhbmdlUGFyYW1ldGVyIiwicHJvY2Vzc29ySUQiLCJrZXkiLCJwYXJzZUludCIsInRhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBTXdCQSx3Qjs7QUFOeEI7Ozs7OztBQUVBOzs7O0FBSWUsU0FBU0Esd0JBQVQsQ0FBa0NDLEtBQWxDLEVBQXlDQyxFQUF6QyxFQUE2QztBQUN4RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsT0FESjtBQUFBLFFBRUlDLFFBRko7QUFBQSxRQUlJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixrQkFBVUYsR0FBR0ssRUFBSCxDQUFNQyxzQkFBTixDQUE2QixnQkFBN0IsRUFBK0MsQ0FBL0MsQ0FBVjtBQUNBSixnQkFBUUssZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0NDLFFBQWxDO0FBQ0FOLGdCQUFRSyxnQkFBUixDQUF5QixRQUF6QixFQUFtQ0MsUUFBbkM7O0FBRUFMLG1CQUFXSCxHQUFHSyxFQUFILENBQU1DLHNCQUFOLENBQTZCLGlCQUE3QixFQUFnRCxDQUFoRCxDQUFYO0FBQ0FILGlCQUFTSSxnQkFBVCxDQUEwQixRQUExQixFQUFvQ0MsUUFBcEM7O0FBRUFDO0FBQ0FDLGlCQUFTVixHQUFHVyxJQUFILENBQVFDLEtBQWpCO0FBQ0gsS0FkTDtBQUFBLFFBZ0JJSCxXQUFXLFNBQVhBLFFBQVcsR0FBVztBQUNsQlAsZ0JBQVFXLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJiLEdBQUdXLElBQUgsQ0FBUUcsR0FBcEM7QUFDQVosZ0JBQVFXLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJiLEdBQUdXLElBQUgsQ0FBUUksR0FBcEM7O0FBRUFaLGlCQUFTVSxZQUFULENBQXNCLEtBQXRCLEVBQTZCYixHQUFHVyxJQUFILENBQVFHLEdBQXJDO0FBQ0FYLGlCQUFTVSxZQUFULENBQXNCLEtBQXRCLEVBQTZCYixHQUFHVyxJQUFILENBQVFJLEdBQXJDO0FBQ0gsS0F0Qkw7QUFBQSxRQXdCSVAsV0FBVyxTQUFYQSxRQUFXLENBQVNRLENBQVQsRUFBWTtBQUNuQmhCLFdBQUdpQixLQUFILENBQVNDLFFBQVQsQ0FBa0JsQixHQUFHaUIsS0FBSCxDQUFTRSxVQUFULEdBQXNCQyxlQUF0QixDQUNkcEIsR0FBR3FCLFdBRFcsRUFFZHJCLEdBQUdzQixHQUZXLEVBR2RDLFNBQVNQLEVBQUVRLE1BQUYsQ0FBU1osS0FBbEIsRUFBeUIsRUFBekIsQ0FIYyxDQUFsQjtBQUlILEtBN0JMO0FBQUEsUUErQklGLFdBQVcsU0FBWEEsUUFBVyxDQUFTRSxLQUFULEVBQWdCO0FBQ3ZCVixnQkFBUVUsS0FBUixHQUFnQkEsS0FBaEI7QUFDQVQsaUJBQVNTLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0gsS0FsQ0w7O0FBb0NBWixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR1MsUUFBSCxHQUFjQSxRQUFkO0FBQ0FULE9BQUdVLFFBQUgsR0FBY0EsUUFBZDs7QUFFQVQsV0FBTyxvQkFBc0JGLEtBQXRCLEVBQTZCQyxFQUE3QixDQUFQOztBQUVBSTs7QUFFQSxXQUFPSCxJQUFQO0FBQ0giLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVNldHRpbmdWaWV3IGZyb20gJy4vYmFzZS5qcyc7XG5cbi8qKlxuICogUHJvY2Vzc29yIHNldHRpbmcgdmlldyBmb3IgYSBsaW5lYXIgaW50ZWdlciB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIHNsaWRlciBhbmQgYSBudW1iZXIgZmllbGQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUludGVnZXJTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgcmFuZ2VFbCxcbiAgICAgICAgbnVtYmVyRWwsXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fcmFuZ2UnKVswXTtcbiAgICAgICAgICAgIHJhbmdlRWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkNoYW5nZSk7XG4gICAgICAgICAgICByYW5nZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbnVtYmVyRWwgPSBteS5lbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzZXR0aW5nX19udW1iZXInKVswXTtcbiAgICAgICAgICAgIG51bWJlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcblxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsLnNldEF0dHJpYnV0ZSgnbWluJywgbXkuZGF0YS5taW4pO1xuICAgICAgICAgICAgcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcblxuICAgICAgICAgICAgbnVtYmVyRWwuc2V0QXR0cmlidXRlKCdtaW4nLCBteS5kYXRhLm1pbik7XG4gICAgICAgICAgICBudW1iZXJFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgbXkuc3RvcmUuZGlzcGF0Y2gobXkuc3RvcmUuZ2V0QWN0aW9ucygpLmNoYW5nZVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgICBteS5wcm9jZXNzb3JJRCwgXG4gICAgICAgICAgICAgICAgbXkua2V5LCBcbiAgICAgICAgICAgICAgICBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByYW5nZUVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBudW1iZXJFbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuaW5pdERhdGEgPSBpbml0RGF0YTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createItemizedSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a itemized type parameter,\n * which has a radio buttons for item selection.\n */\nfunction createItemizedSettingView(specs, my) {\n    var that,\n        valueEl,\n        radioInputs = [],\n        numInputs,\n        init = function init() {\n        valueEl = my.el.querySelector('.setting__value');\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {\n        // remove previous radio buttons, if any\n        while (valueEl.firstChild) {\n            valueEl.firstChild.removeEventListener('change', onChange);\n            valueEl.removeChild(valueEl.firstChild);\n        }\n\n        // add the radio buttons\n        var radioTemplate = document.querySelector('#template-setting-itemized-item'),\n            model = my.data.model;\n        numInputs = model.length;\n        for (var i = 0; i < numInputs; i++) {\n            var id = getTemporaryInputAndLabelId();\n\n            // add a new cloned radio element\n            var radioInputEl = radioTemplate.content.children[0].cloneNode(true);\n            valueEl.appendChild(radioInputEl);\n            radioInputEl.setAttribute('name', specs.key);\n            radioInputEl.setAttribute('id', id);\n            radioInputEl.value = model[i].value;\n            radioInputEl.addEventListener('change', onChange);\n            radioInputs.push(radioInputEl);\n\n            // add a new cloned label element\n            var radioLabelEl = radioTemplate.content.children[1].cloneNode(true);\n            valueEl.appendChild(radioLabelEl);\n            radioLabelEl.setAttribute('for', id);\n            radioLabelEl.innerHTML = model[i].label;\n        }\n    },\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        radioInputs.forEach(function (radioInput) {\n            radioInput.checked = radioInput.value == value;\n        });\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2l0ZW1pemVkLmpzPzdhMjAiXSwibmFtZXMiOlsiY3JlYXRlSXRlbWl6ZWRTZXR0aW5nVmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwidmFsdWVFbCIsInJhZGlvSW5wdXRzIiwibnVtSW5wdXRzIiwiaW5pdCIsImVsIiwicXVlcnlTZWxlY3RvciIsImluaXREYXRhIiwic2V0VmFsdWUiLCJkYXRhIiwidmFsdWUiLCJmaXJzdENoaWxkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJyYWRpb1RlbXBsYXRlIiwiZG9jdW1lbnQiLCJtb2RlbCIsImxlbmd0aCIsImkiLCJpZCIsImdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCIsInJhZGlvSW5wdXRFbCIsImNvbnRlbnQiLCJjaGlsZHJlbiIsImNsb25lTm9kZSIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlIiwia2V5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJyYWRpb0xhYmVsRWwiLCJpbm5lckhUTUwiLCJsYWJlbCIsIk1hdGgiLCJyYW5kb20iLCJwZXJmb3JtYW5jZSIsIm5vdyIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwidGFyZ2V0IiwiZm9yRWFjaCIsInJhZGlvSW5wdXQiLCJjaGVja2VkIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHlCOztBQU54Qjs7Ozs7O0FBRUE7Ozs7QUFJZSxTQUFTQSx5QkFBVCxDQUFtQ0MsS0FBbkMsRUFBMENDLEVBQTFDLEVBQThDO0FBQ3pELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxPQURKO0FBQUEsUUFFSUMsY0FBYyxFQUZsQjtBQUFBLFFBR0lDLFNBSEo7QUFBQSxRQUtJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkSCxrQkFBVUYsR0FBR00sRUFBSCxDQUFNQyxhQUFOLENBQW9CLGlCQUFwQixDQUFWOztBQUVBQztBQUNBQyxpQkFBU1QsR0FBR1UsSUFBSCxDQUFRQyxLQUFqQjtBQUNILEtBVkw7QUFBQSxRQVlJSCxXQUFXLFNBQVhBLFFBQVcsR0FBVztBQUNsQjtBQUNBLGVBQU9OLFFBQVFVLFVBQWYsRUFBMkI7QUFDdkJWLG9CQUFRVSxVQUFSLENBQW1CQyxtQkFBbkIsQ0FBdUMsUUFBdkMsRUFBaURDLFFBQWpEO0FBQ0FaLG9CQUFRYSxXQUFSLENBQW9CYixRQUFRVSxVQUE1QjtBQUNIOztBQUVEO0FBQ0EsWUFBSUksZ0JBQWdCQyxTQUFTVixhQUFULENBQXVCLGlDQUF2QixDQUFwQjtBQUFBLFlBQ0lXLFFBQVFsQixHQUFHVSxJQUFILENBQVFRLEtBRHBCO0FBRUFkLG9CQUFZYyxNQUFNQyxNQUFsQjtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJaEIsU0FBcEIsRUFBK0JnQixHQUEvQixFQUFvQztBQUNoQyxnQkFBSUMsS0FBS0MsNkJBQVQ7O0FBRUE7QUFDQSxnQkFBSUMsZUFBZVAsY0FBY1EsT0FBZCxDQUFzQkMsUUFBdEIsQ0FBK0IsQ0FBL0IsRUFBa0NDLFNBQWxDLENBQTRDLElBQTVDLENBQW5CO0FBQ0F4QixvQkFBUXlCLFdBQVIsQ0FBb0JKLFlBQXBCO0FBQ0FBLHlCQUFhSyxZQUFiLENBQTBCLE1BQTFCLEVBQWtDN0IsTUFBTThCLEdBQXhDO0FBQ0FOLHlCQUFhSyxZQUFiLENBQTBCLElBQTFCLEVBQWdDUCxFQUFoQztBQUNBRSx5QkFBYVosS0FBYixHQUFxQk8sTUFBTUUsQ0FBTixFQUFTVCxLQUE5QjtBQUNBWSx5QkFBYU8sZ0JBQWIsQ0FBOEIsUUFBOUIsRUFBd0NoQixRQUF4QztBQUNBWCx3QkFBWTRCLElBQVosQ0FBaUJSLFlBQWpCOztBQUVBO0FBQ0EsZ0JBQUlTLGVBQWVoQixjQUFjUSxPQUFkLENBQXNCQyxRQUF0QixDQUErQixDQUEvQixFQUFrQ0MsU0FBbEMsQ0FBNEMsSUFBNUMsQ0FBbkI7QUFDQXhCLG9CQUFReUIsV0FBUixDQUFvQkssWUFBcEI7QUFDQUEseUJBQWFKLFlBQWIsQ0FBMEIsS0FBMUIsRUFBaUNQLEVBQWpDO0FBQ0FXLHlCQUFhQyxTQUFiLEdBQXlCZixNQUFNRSxDQUFOLEVBQVNjLEtBQWxDO0FBQ0g7QUFDSixLQXpDTDs7O0FBMkNJOzs7O0FBSUFaLGtDQUE4QixTQUE5QkEsMkJBQThCLEdBQVc7QUFDckMsZUFBTyxPQUFPYSxLQUFLQyxNQUFMLEVBQVAsR0FBdUJDLFlBQVlDLEdBQVosRUFBOUI7QUFDSCxLQWpETDtBQUFBLFFBbURJeEIsV0FBVyxTQUFYQSxRQUFXLENBQVN5QixDQUFULEVBQVk7QUFDbkJ2QyxXQUFHd0MsS0FBSCxDQUFTQyxRQUFULENBQWtCekMsR0FBR3dDLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZDNDLEdBQUc0QyxXQURXLEVBRWQ1QyxHQUFHNkIsR0FGVyxFQUdkVSxFQUFFTSxNQUFGLENBQVNsQyxLQUhLLENBQWxCO0FBSUgsS0F4REw7QUFBQSxRQTBESUYsV0FBVyxTQUFYQSxRQUFXLENBQVNFLEtBQVQsRUFBZ0I7QUFDdkJSLG9CQUFZMkMsT0FBWixDQUFvQixzQkFBYztBQUM5QkMsdUJBQVdDLE9BQVgsR0FBc0JELFdBQVdwQyxLQUFYLElBQW9CQSxLQUExQztBQUNILFNBRkQ7QUFHSCxLQTlETDs7QUFnRUFYLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHUSxRQUFILEdBQWNBLFFBQWQ7QUFDQVIsT0FBR1MsUUFBSCxHQUFjQSxRQUFkOztBQUVBUixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFLOztBQUVBLFdBQU9KLElBQVA7QUFDSCIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlLmpzJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIGl0ZW1pemVkIHR5cGUgcGFyYW1ldGVyLFxuICogd2hpY2ggaGFzIGEgcmFkaW8gYnV0dG9ucyBmb3IgaXRlbSBzZWxlY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1pemVkU2V0dGluZ1ZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHZhbHVlRWwsXG4gICAgICAgIHJhZGlvSW5wdXRzID0gW10sXG4gICAgICAgIG51bUlucHV0cyxcbiAgICAgICAgXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhbHVlRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fdmFsdWUnKTtcblxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJldmlvdXMgcmFkaW8gYnV0dG9ucywgaWYgYW55XG4gICAgICAgICAgICB3aGlsZSAodmFsdWVFbC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVFbC5maXJzdENoaWxkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZUVsLnJlbW92ZUNoaWxkKHZhbHVlRWwuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgcmFkaW8gYnV0dG9uc1xuICAgICAgICAgICAgbGV0IHJhZGlvVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtc2V0dGluZy1pdGVtaXplZC1pdGVtJyksXG4gICAgICAgICAgICAgICAgbW9kZWwgPSBteS5kYXRhLm1vZGVsO1xuICAgICAgICAgICAgbnVtSW5wdXRzID0gbW9kZWwubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1JbnB1dHM7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IGdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCBhIG5ldyBjbG9uZWQgcmFkaW8gZWxlbWVudFxuICAgICAgICAgICAgICAgIGxldCByYWRpb0lucHV0RWwgPSByYWRpb1RlbXBsYXRlLmNvbnRlbnQuY2hpbGRyZW5bMF0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIHZhbHVlRWwuYXBwZW5kQ2hpbGQocmFkaW9JbnB1dEVsKTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuc2V0QXR0cmlidXRlKCduYW1lJywgc3BlY3Mua2V5KTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwudmFsdWUgPSBtb2RlbFtpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRzLnB1c2gocmFkaW9JbnB1dEVsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBhZGQgYSBuZXcgY2xvbmVkIGxhYmVsIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBsZXQgcmFkaW9MYWJlbEVsID0gcmFkaW9UZW1wbGF0ZS5jb250ZW50LmNoaWxkcmVuWzFdLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZUVsLmFwcGVuZENoaWxkKHJhZGlvTGFiZWxFbCk7XG4gICAgICAgICAgICAgICAgcmFkaW9MYWJlbEVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaWQpO1xuICAgICAgICAgICAgICAgIHJhZGlvTGFiZWxFbC5pbm5lckhUTUwgPSBtb2RlbFtpXS5sYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHF1aWNrIElEIHRvIHRpZSBsYWJlbCB0byBpbnB1dCBlbGVtZW50cy5cbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgSUQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnaWQnICsgTWF0aC5yYW5kb20oKSArIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmFkaW9JbnB1dHMuZm9yRWFjaChyYWRpb0lucHV0ID0+IHtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0LmNoZWNrZWQgPSAocmFkaW9JbnB1dC52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5pbml0RGF0YSA9IGluaXREYXRhO1xuICAgIG15LnNldFZhbHVlID0gc2V0VmFsdWU7XG4gICAgXG4gICAgdGhhdCA9IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyhzcGVjcywgbXkpO1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3NldHRpbmcvaXRlbWl6ZWQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStringSettingView;\n\nvar _base = __webpack_require__(0);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\n\nfunction createStringSettingView(specs, my) {\n    var that,\n        textEl,\n        init = function init() {\n        textEl = my.el.getElementsByClassName('setting__text')[0];\n        textEl.addEventListener('input', onChange);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {},\n        onChange = function onChange(e) {\n        e.preventDefault();\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        // only update if the text input doesn't have focus,\n        // else value gets refreshed and cursor jumps to end\n        if (textEl != document.activeElement) {\n            textEl.value = value;\n        }\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3N0cmluZy5qcz83MjVmIl0sIm5hbWVzIjpbImNyZWF0ZVN0cmluZ1NldHRpbmdWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJ0ZXh0RWwiLCJpbml0IiwiZWwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwiaW5pdERhdGEiLCJzZXRWYWx1ZSIsImRhdGEiLCJ2YWx1ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3JlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwiY2hhbmdlUGFyYW1ldGVyIiwicHJvY2Vzc29ySUQiLCJrZXkiLCJ0YXJnZXQiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU93QkEsdUI7O0FBUHhCOzs7Ozs7QUFFQTs7Ozs7QUFLZSxTQUFTQSx1QkFBVCxDQUFpQ0MsS0FBakMsRUFBd0NDLEVBQXhDLEVBQTRDO0FBQ3ZELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxNQURKO0FBQUEsUUFHSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEQsaUJBQVNGLEdBQUdJLEVBQUgsQ0FBTUMsc0JBQU4sQ0FBNkIsZUFBN0IsRUFBOEMsQ0FBOUMsQ0FBVDtBQUNBSCxlQUFPSSxnQkFBUCxDQUF3QixPQUF4QixFQUFpQ0MsUUFBakM7O0FBRUFDO0FBQ0FDLGlCQUFTVCxHQUFHVSxJQUFILENBQVFDLEtBQWpCO0FBQ0gsS0FUTDtBQUFBLFFBV0lILFdBQVcsU0FBWEEsUUFBVyxHQUFXLENBQUUsQ0FYNUI7QUFBQSxRQWFJRCxXQUFXLFNBQVhBLFFBQVcsQ0FBU0ssQ0FBVCxFQUFZO0FBQ25CQSxVQUFFQyxjQUFGO0FBQ0FiLFdBQUdjLEtBQUgsQ0FBU0MsUUFBVCxDQUFrQmYsR0FBR2MsS0FBSCxDQUFTRSxVQUFULEdBQXNCQyxlQUF0QixDQUNkakIsR0FBR2tCLFdBRFcsRUFFZGxCLEdBQUdtQixHQUZXLEVBR2RQLEVBQUVRLE1BQUYsQ0FBU1QsS0FISyxDQUFsQjtBQUlILEtBbkJMO0FBQUEsUUFxQklGLFdBQVcsU0FBWEEsUUFBVyxDQUFTRSxLQUFULEVBQWdCO0FBQ3ZCO0FBQ0E7QUFDQSxZQUFJVCxVQUFVbUIsU0FBU0MsYUFBdkIsRUFBc0M7QUFDbENwQixtQkFBT1MsS0FBUCxHQUFlQSxLQUFmO0FBQ0g7QUFDSixLQTNCTDs7QUE2QkFYLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHUyxRQUFILEdBQWNBLFFBQWQ7O0FBRUFSLFdBQU8sb0JBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDs7QUFFQUc7O0FBRUEsV0FBT0YsSUFBUDtBQUNIIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyBmcm9tICcuL2Jhc2UuanMnO1xuXG4vKipcbiAqIFByb2Nlc3NvciBzZXR0aW5nIHZpZXcgZm9yIGEgQm9vbGVhbiB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIGNoZWNrYm94IGlucHV0LlxuICovXG4gXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHJpbmdTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgdGV4dEVsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGV4dEVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fdGV4dCcpWzBdO1xuICAgICAgICAgICAgdGV4dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbml0RGF0YSgpO1xuICAgICAgICAgICAgc2V0VmFsdWUobXkuZGF0YS52YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdERhdGEgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHVwZGF0ZSBpZiB0aGUgdGV4dCBpbnB1dCBkb2Vzbid0IGhhdmUgZm9jdXMsXG4gICAgICAgICAgICAvLyBlbHNlIHZhbHVlIGdldHMgcmVmcmVzaGVkIGFuZCBjdXJzb3IganVtcHMgdG8gZW5kXG4gICAgICAgICAgICBpZiAodGV4dEVsICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0RWwudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnNldFZhbHVlID0gc2V0VmFsdWU7XG4gICAgXG4gICAgdGhhdCA9IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyhzcGVjcywgbXkpO1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3NldHRpbmcvc3RyaW5nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasView;\n\nvar _util = __webpack_require__(2);\n\nvar _windowresize = __webpack_require__(6);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nvar _canvasprocessors = __webpack_require__(22);\n\nvar _canvasprocessors2 = _interopRequireDefault(_canvasprocessors);\n\nvar _canvasconnections = __webpack_require__(23);\n\nvar _canvasconnections2 = _interopRequireDefault(_canvasconnections);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Graphic 2D view of the processor network.\n *\n * CanvasView draws the graphics for all processors.\n * DynamicCanvas shows all elements that update each requestAnimationFrame.\n * StaticCanvas shows all elements that update only infrequently.\n * \n * Each processor has its own view.\n * When a change happens to a processor that \n * requires the static canvas to be redrawn:\n * - The processor's view receives a callback from a changed parameter.\n * - The view redraws its static graphics on an off-screen canvas.\n * - The view sets a dirty flag on the canvasView (this).\n * - The canvasView receives the next draw request.\n * - It clears the staticCanvas.\n * - It draws each view's off-screen canvas on the staticCanvas.\n * - It clears the dirty flag.\n */\nfunction createCanvasView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl,\n        staticCanvas,\n        dynamicCanvas,\n        staticCtx,\n        dynamicCtx,\n        isDirty = false,\n        doubleClickCounter = 0,\n        doubleClickDelay = 300,\n        doubleClickTimer,\n        dragObjectType,\n        // 'background|processor|connection'\n\n    init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        staticCanvas = document.querySelector('.canvas-static');\n        dynamicCanvas = document.querySelector('.canvas-dynamic');\n        staticCtx = staticCanvas.getContext('2d');\n        dynamicCtx = dynamicCanvas.getContext('2d');\n\n        rootEl.addEventListener(_util.util.eventType.click, onClick);\n        rootEl.addEventListener(_util.util.eventType.start, onTouchStart);\n        rootEl.addEventListener(_util.util.eventType.move, dragMove);\n        rootEl.addEventListener(_util.util.eventType.end, dragEnd);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                    my.markDirty();\n                    break;\n            }\n        });\n\n        my.addWindowResizeCallback(onWindowResize);\n        onWindowResize();\n    },\n\n\n    /**\n     * Window resize event handler.\n     */\n    onWindowResize = function onWindowResize() {\n        staticCanvas.width = rootEl.clientWidth;\n        staticCanvas.height = rootEl.clientHeight;\n        dynamicCanvas.width = rootEl.clientWidth;\n        dynamicCanvas.height = rootEl.clientHeight;\n        my.canvasRect = dynamicCanvas.getBoundingClientRect();\n        my.resizeConnections();\n        markDirty();\n    },\n\n\n    /**\n     * Separate click and doubleclick.\n     * @see http://stackoverflow.com/questions/6330431/jquery-bind-double-click-and-single-click-separately\n     */\n    onClick = function onClick(e) {\n        // separate click from doubleclick\n        doubleClickCounter++;\n        if (doubleClickCounter == 1) {\n            doubleClickTimer = setTimeout(function () {\n                doubleClickCounter = 0;\n                // implement single click behaviour here\n            }, doubleClickDelay);\n        } else {\n            clearTimeout(doubleClickTimer);\n            doubleClickCounter = 0;\n            // implement double click behaviour here\n        }\n    },\n\n\n    /**\n     * Select the object under the mouse.\n     * Start dragging the object.\n     */\n    onTouchStart = function onTouchStart(e) {\n        var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n            canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n        if (my.isConnectMode && my.intersectsCableHandle(canvasX, canvasY)) {\n            dragObjectType = 'cablehandle';\n        } else if (my.isConnectMode && my.intersectsConnector(canvasX, canvasY, false)) {\n            dragObjectType = 'connection';\n        } else if (my.intersectsProcessor(canvasX, canvasY)) {\n            dragObjectType = 'processor';\n        } else {\n            dragObjectType = 'background';\n        }\n    },\n\n\n    /**\n     * Drag a view.\n     * @param  {Object} e Event.\n     */\n    dragMove = function dragMove(e) {\n        e.preventDefault();\n        if (dragObjectType) {\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n            switch (dragObjectType) {\n                case 'connection':\n                    my.dragMoveConnection(canvasX, canvasY);\n                    break;\n                case 'processor':\n                    my.dragSelectedProcessor(canvasX, canvasY);\n                    break;\n                case 'background':\n                    my.dragAllProcessors(canvasX, canvasY);\n                    break;\n            }\n        }\n    },\n\n\n    /**\n     * Dragging 3D object ended.\n     * @param  {Object} e Event.\n     */\n    dragEnd = function dragEnd(e) {\n        e.preventDefault();\n\n        if (dragObjectType) {\n            dragMove(e);\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n            switch (dragObjectType) {\n                case 'connection':\n                    my.intersectsConnector(canvasX, canvasY, true);\n                    my.dragEndConnection();\n                    break;\n                case 'processor':\n                    break;\n                case 'background':\n                    break;\n                case 'cablehandle':\n                    var connectionID = my.intersectsCableHandle(canvasX, canvasY);\n                    if (connectionID) {\n                        store.dispatch(store.getActions().disconnectProcessors(connectionID));\n                    }\n                    break;\n            }\n            dragObjectType = null;\n        }\n    },\n\n\n    /**\n     * Set a flag to indicate the static canvas should be redrawn.\n     */\n    markDirty = function markDirty() {\n        isDirty = true;\n    },\n\n\n    /**\n     * Update any tween animations that are going on and\n     * redraw the canvases if needed.\n     * @param {Number} position Transport playback position in ticks.\n     * @param {Array} processorEvents Array to processor generated events to displayin the view.\n     */\n    draw = function draw(position, processorEvents) {\n        var i = void 0,\n            views = my.getProcessorViews(),\n            n = views.length;\n        for (i = 0; i < n; i++) {\n            views[i].draw(position, processorEvents);\n        }\n        if (isDirty) {\n            isDirty = false;\n            staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            dynamicCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            my.addConnectionsToCanvas(staticCtx);\n            for (i = 0; i < n; i++) {\n                views[i].addToStaticView(staticCtx);\n            }\n        }\n\n        for (i = 0; i < n; i++) {\n            views[i].clearFromDynamicView(dynamicCtx);\n        }\n        for (i = 0; i < n; i++) {\n            views[i].addToDynamicView(dynamicCtx);\n        }\n    };\n\n    my = my || {};\n    my.theme;\n    my.canvasRect, my.markDirty = markDirty;\n\n    that = (0, _windowresize2.default)(specs, my);\n    that = (0, _canvasprocessors2.default)(specs, my);\n    that = (0, _canvasconnections2.default)(specs, my);\n\n    init();\n\n    that.draw = draw;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9jYW52YXMuanM/M2RmZSJdLCJuYW1lcyI6WyJjcmVhdGVDYW52YXNWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJzdG9yZSIsInJvb3RFbCIsInN0YXRpY0NhbnZhcyIsImR5bmFtaWNDYW52YXMiLCJzdGF0aWNDdHgiLCJkeW5hbWljQ3R4IiwiaXNEaXJ0eSIsImRvdWJsZUNsaWNrQ291bnRlciIsImRvdWJsZUNsaWNrRGVsYXkiLCJkb3VibGVDbGlja1RpbWVyIiwiZHJhZ09iamVjdFR5cGUiLCJpbml0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0Q29udGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudFR5cGUiLCJjbGljayIsIm9uQ2xpY2siLCJzdGFydCIsIm9uVG91Y2hTdGFydCIsIm1vdmUiLCJkcmFnTW92ZSIsImVuZCIsImRyYWdFbmQiLCJTVEFURV9DSEFOR0UiLCJlIiwiZGV0YWlsIiwiYWN0aW9uIiwidHlwZSIsImFjdGlvbnMiLCJEUkFHX1NFTEVDVEVEX1BST0NFU1NPUiIsIkRSQUdfQUxMX1BST0NFU1NPUlMiLCJtYXJrRGlydHkiLCJhZGRXaW5kb3dSZXNpemVDYWxsYmFjayIsIm9uV2luZG93UmVzaXplIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsImNhbnZhc1JlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZXNpemVDb25uZWN0aW9ucyIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjYW52YXNYIiwiY2xpZW50WCIsImxlZnQiLCJ3aW5kb3ciLCJzY3JvbGxYIiwiY2FudmFzWSIsImNsaWVudFkiLCJ0b3AiLCJzY3JvbGxZIiwiaXNDb25uZWN0TW9kZSIsImludGVyc2VjdHNDYWJsZUhhbmRsZSIsImludGVyc2VjdHNDb25uZWN0b3IiLCJpbnRlcnNlY3RzUHJvY2Vzc29yIiwicHJldmVudERlZmF1bHQiLCJkcmFnTW92ZUNvbm5lY3Rpb24iLCJkcmFnU2VsZWN0ZWRQcm9jZXNzb3IiLCJkcmFnQWxsUHJvY2Vzc29ycyIsImRyYWdFbmRDb25uZWN0aW9uIiwiY29ubmVjdGlvbklEIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwiZGlzY29ubmVjdFByb2Nlc3NvcnMiLCJkcmF3IiwicG9zaXRpb24iLCJwcm9jZXNzb3JFdmVudHMiLCJpIiwidmlld3MiLCJnZXRQcm9jZXNzb3JWaWV3cyIsIm4iLCJsZW5ndGgiLCJjbGVhclJlY3QiLCJhZGRDb25uZWN0aW9uc1RvQ2FudmFzIiwiYWRkVG9TdGF0aWNWaWV3IiwiY2xlYXJGcm9tRHluYW1pY1ZpZXciLCJhZGRUb0R5bmFtaWNWaWV3IiwidGhlbWUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQXVCd0JBLGdCOztBQXZCeEI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JlLFNBQVNBLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsRUFBakMsRUFBcUM7QUFDaEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLFFBQVFILE1BQU1HLEtBRGxCO0FBQUEsUUFFSUMsTUFGSjtBQUFBLFFBR0lDLFlBSEo7QUFBQSxRQUlJQyxhQUpKO0FBQUEsUUFLSUMsU0FMSjtBQUFBLFFBTUlDLFVBTko7QUFBQSxRQU9JQyxVQUFVLEtBUGQ7QUFBQSxRQVFJQyxxQkFBcUIsQ0FSekI7QUFBQSxRQVNJQyxtQkFBbUIsR0FUdkI7QUFBQSxRQVVJQyxnQkFWSjtBQUFBLFFBV0lDLGNBWEo7QUFBQSxRQVdvQjs7QUFFaEJDLFdBQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RWLGlCQUFTVyxTQUFTQyxhQUFULENBQXVCLG1CQUF2QixDQUFUO0FBQ0FYLHVCQUFlVSxTQUFTQyxhQUFULENBQXVCLGdCQUF2QixDQUFmO0FBQ0FWLHdCQUFnQlMsU0FBU0MsYUFBVCxDQUF1QixpQkFBdkIsQ0FBaEI7QUFDQVQsb0JBQVlGLGFBQWFZLFVBQWIsQ0FBd0IsSUFB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LENBQWhCLEVBQW1CSCxHQUFuQixFQUF3QjtBQUNwQkMsa0JBQU1ELENBQU4sRUFBU1Esb0JBQVQsQ0FBOEJ6RSxVQUE5QjtBQUNIO0FBQ0QsYUFBS2lFLElBQUksQ0FBVCxFQUFZQSxJQUFJRyxDQUFoQixFQUFtQkgsR0FBbkIsRUFBd0I7QUFDcEJDLGtCQUFNRCxDQUFOLEVBQVNTLGdCQUFULENBQTBCMUUsVUFBMUI7QUFDSDtBQUNKLEtBckxMOztBQXVMQVAsU0FBS0EsTUFBTSxFQUFYO0FBQ0FBLE9BQUdrRixLQUFIO0FBQ0FsRixPQUFHMEMsVUFBSCxFQUNBMUMsR0FBR21DLFNBQUgsR0FBZUEsU0FEZjs7QUFHQWxDLFdBQU8sNEJBQWdCRixLQUFoQixFQUF1QkMsRUFBdkIsQ0FBUDtBQUNBQyxXQUFPLGdDQUEyQkYsS0FBM0IsRUFBa0NDLEVBQWxDLENBQVA7QUFDQUMsV0FBTyxpQ0FBNEJGLEtBQTVCLEVBQW1DQyxFQUFuQyxDQUFQOztBQUVBYTs7QUFFQVosU0FBS29FLElBQUwsR0FBWUEsSUFBWjtBQUNBLFdBQU9wRSxJQUFQO0FBQ0giLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1dGlsIH0gZnJvbSAnLi4vY29yZS91dGlsLmpzJztcbmltcG9ydCBhZGRXaW5kb3dSZXNpemUgZnJvbSAnLi93aW5kb3dyZXNpemUuanMnO1xuaW1wb3J0IGNyZWF0ZUNhbnZhc1Byb2Nlc3NvclZpZXdzIGZyb20gJy4vY2FudmFzcHJvY2Vzc29ycy5qcyc7XG5pbXBvcnQgY3JlYXRlQ2FudmFzQ29ubmVjdGlvbnNWaWV3IGZyb20gJy4vY2FudmFzY29ubmVjdGlvbnMuanMnO1xuXG4vKipcbiAqIEdyYXBoaWMgMkQgdmlldyBvZiB0aGUgcHJvY2Vzc29yIG5ldHdvcmsuXG4gKlxuICogQ2FudmFzVmlldyBkcmF3cyB0aGUgZ3JhcGhpY3MgZm9yIGFsbCBwcm9jZXNzb3JzLlxuICogRHluYW1pY0NhbnZhcyBzaG93cyBhbGwgZWxlbWVudHMgdGhhdCB1cGRhdGUgZWFjaCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuXG4gKiBTdGF0aWNDYW52YXMgc2hvd3MgYWxsIGVsZW1lbnRzIHRoYXQgdXBkYXRlIG9ubHkgaW5mcmVxdWVudGx5LlxuICogXG4gKiBFYWNoIHByb2Nlc3NvciBoYXMgaXRzIG93biB2aWV3LlxuICogV2hlbiBhIGNoYW5nZSBoYXBwZW5zIHRvIGEgcHJvY2Vzc29yIHRoYXQgXG4gKiByZXF1aXJlcyB0aGUgc3RhdGljIGNhbnZhcyB0byBiZSByZWRyYXduOlxuICogLSBUaGUgcHJvY2Vzc29yJ3MgdmlldyByZWNlaXZlcyBhIGNhbGxiYWNrIGZyb20gYSBjaGFuZ2VkIHBhcmFtZXRlci5cbiAqIC0gVGhlIHZpZXcgcmVkcmF3cyBpdHMgc3RhdGljIGdyYXBoaWNzIG9uIGFuIG9mZi1zY3JlZW4gY2FudmFzLlxuICogLSBUaGUgdmlldyBzZXRzIGEgZGlydHkgZmxhZyBvbiB0aGUgY2FudmFzVmlldyAodGhpcykuXG4gKiAtIFRoZSBjYW52YXNWaWV3IHJlY2VpdmVzIHRoZSBuZXh0IGRyYXcgcmVxdWVzdC5cbiAqIC0gSXQgY2xlYXJzIHRoZSBzdGF0aWNDYW52YXMuXG4gKiAtIEl0IGRyYXdzIGVhY2ggdmlldydzIG9mZi1zY3JlZW4gY2FudmFzIG9uIHRoZSBzdGF0aWNDYW52YXMuXG4gKiAtIEl0IGNsZWFycyB0aGUgZGlydHkgZmxhZy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgcm9vdEVsLFxuICAgICAgICBzdGF0aWNDYW52YXMsXG4gICAgICAgIGR5bmFtaWNDYW52YXMsXG4gICAgICAgIHN0YXRpY0N0eCxcbiAgICAgICAgZHluYW1pY0N0eCxcbiAgICAgICAgaXNEaXJ0eSA9IGZhbHNlLFxuICAgICAgICBkb3VibGVDbGlja0NvdW50ZXIgPSAwLFxuICAgICAgICBkb3VibGVDbGlja0RlbGF5ID0gMzAwLFxuICAgICAgICBkb3VibGVDbGlja1RpbWVyLFxuICAgICAgICBkcmFnT2JqZWN0VHlwZSwgLy8gJ2JhY2tncm91bmR8cHJvY2Vzc29yfGNvbm5lY3Rpb24nXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByb290RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FudmFzLWNvbnRhaW5lcicpO1xuICAgICAgICAgICAgc3RhdGljQ2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1zdGF0aWMnKTtcbiAgICAgICAgICAgIGR5bmFtaWNDYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FudmFzLWR5bmFtaWMnKTtcbiAgICAgICAgICAgIHN0YXRpY0N0eCA9IHN0YXRpY0NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgZHluYW1pY0N0eCA9IGR5bmFtaWNDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcm9vdEVsLmFkZEV2ZW50TGlzdGVuZXIodXRpbC5ldmVudFR5cGUuY2xpY2ssIG9uQ2xpY2spO1xuICAgICAgICAgICAgcm9vdEVsLmFkZEV2ZW50TGlzdGVuZXIodXRpbC5ldmVudFR5cGUuc3RhcnQsIG9uVG91Y2hTdGFydCk7XG4gICAgICAgICAgICByb290RWwuYWRkRXZlbnRMaXN0ZW5lcih1dGlsLmV2ZW50VHlwZS5tb3ZlLCBkcmFnTW92ZSk7XG4gICAgICAgICAgICByb290RWwuYWRkRXZlbnRMaXN0ZW5lcih1dGlsLmV2ZW50VHlwZS5lbmQsIGRyYWdFbmQpO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHN0b3JlLlNUQVRFX0NIQU5HRSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuZGV0YWlsLmFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlIGUuZGV0YWlsLmFjdGlvbnMuRFJBR19TRUxFQ1RFRF9QUk9DRVNTT1I6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5EUkFHX0FMTF9QUk9DRVNTT1JTOlxuICAgICAgICAgICAgICAgICAgICAgICAgbXkubWFya0RpcnR5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbXkuYWRkV2luZG93UmVzaXplQ2FsbGJhY2sob25XaW5kb3dSZXNpemUpO1xuICAgICAgICAgICAgb25XaW5kb3dSZXNpemUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaW5kb3cgcmVzaXplIGV2ZW50IGhhbmRsZXIuXG4gICAgICAgICAqL1xuICAgICAgICBvbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc3RhdGljQ2FudmFzLndpZHRoID0gcm9vdEVsLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgc3RhdGljQ2FudmFzLmhlaWdodCA9IHJvb3RFbC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICBkeW5hbWljQ2FudmFzLndpZHRoID0gcm9vdEVsLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgZHluYW1pY0NhbnZhcy5oZWlnaHQgPSByb290RWwuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgbXkuY2FudmFzUmVjdCA9IGR5bmFtaWNDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBteS5yZXNpemVDb25uZWN0aW9ucygpO1xuICAgICAgICAgICAgbWFya0RpcnR5KCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2VwYXJhdGUgY2xpY2sgYW5kIGRvdWJsZWNsaWNrLlxuICAgICAgICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjMzMDQzMS9qcXVlcnktYmluZC1kb3VibGUtY2xpY2stYW5kLXNpbmdsZS1jbGljay1zZXBhcmF0ZWx5XG4gICAgICAgICAqL1xuICAgICAgICBvbkNsaWNrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgLy8gc2VwYXJhdGUgY2xpY2sgZnJvbSBkb3VibGVjbGlja1xuICAgICAgICAgICAgZG91YmxlQ2xpY2tDb3VudGVyICsrO1xuICAgICAgICAgICAgaWYgKGRvdWJsZUNsaWNrQ291bnRlciA9PSAxKSB7XG4gICAgICAgICAgICAgICAgZG91YmxlQ2xpY2tUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvdWJsZUNsaWNrQ291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIC8vIGltcGxlbWVudCBzaW5nbGUgY2xpY2sgYmVoYXZpb3VyIGhlcmVcbiAgICAgICAgICAgICAgICB9LCBkb3VibGVDbGlja0RlbGF5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRvdWJsZUNsaWNrVGltZXIpO1xuICAgICAgICAgICAgICAgIGRvdWJsZUNsaWNrQ291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgLy8gaW1wbGVtZW50IGRvdWJsZSBjbGljayBiZWhhdmlvdXIgaGVyZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlbGVjdCB0aGUgb2JqZWN0IHVuZGVyIHRoZSBtb3VzZS5cbiAgICAgICAgICogU3RhcnQgZHJhZ2dpbmcgdGhlIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIG9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGxldCBjYW52YXNYID0gZS5jbGllbnRYIC0gbXkuY2FudmFzUmVjdC5sZWZ0ICsgd2luZG93LnNjcm9sbFgsXG4gICAgICAgICAgICAgICAgY2FudmFzWSA9IGUuY2xpZW50WSAtIG15LmNhbnZhc1JlY3QudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChteS5pc0Nvbm5lY3RNb2RlICYmIG15LmludGVyc2VjdHNDYWJsZUhhbmRsZShjYW52YXNYLCBjYW52YXNZKSkge1xuICAgICAgICAgICAgICAgIGRyYWdPYmplY3RUeXBlID0gJ2NhYmxlaGFuZGxlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobXkuaXNDb25uZWN0TW9kZSAmJiBteS5pbnRlcnNlY3RzQ29ubmVjdG9yKGNhbnZhc1gsIGNhbnZhc1ksIGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGRyYWdPYmplY3RUeXBlID0gJ2Nvbm5lY3Rpb24nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChteS5pbnRlcnNlY3RzUHJvY2Vzc29yKGNhbnZhc1gsIGNhbnZhc1kpKSB7XG4gICAgICAgICAgICAgICAgZHJhZ09iamVjdFR5cGUgPSAncHJvY2Vzc29yJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHJhZ09iamVjdFR5cGUgPSAnYmFja2dyb3VuZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogRHJhZyBhIHZpZXcuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZSBFdmVudC5cbiAgICAgICAgICovXG4gICAgICAgIGRyYWdNb3ZlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKGRyYWdPYmplY3RUeXBlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbnZhc1ggPSBlLmNsaWVudFggLSBteS5jYW52YXNSZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzWSA9IGUuY2xpZW50WSAtIG15LmNhbnZhc1JlY3QudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3dpdGNoIChkcmFnT2JqZWN0VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb25uZWN0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG15LmRyYWdNb3ZlQ29ubmVjdGlvbihjYW52YXNYLCBjYW52YXNZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9jZXNzb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgbXkuZHJhZ1NlbGVjdGVkUHJvY2Vzc29yKGNhbnZhc1gsIGNhbnZhc1kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tncm91bmQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbXkuZHJhZ0FsbFByb2Nlc3NvcnMoY2FudmFzWCwgY2FudmFzWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogRHJhZ2dpbmcgM0Qgb2JqZWN0IGVuZGVkLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGUgRXZlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBkcmFnRW5kID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZHJhZ09iamVjdFR5cGUpIHtcbiAgICAgICAgICAgICAgICBkcmFnTW92ZShlKTtcbiAgICAgICAgICAgICAgICBsZXQgY2FudmFzWCA9IGUuY2xpZW50WCAtIG15LmNhbnZhc1JlY3QubGVmdCArIHdpbmRvdy5zY3JvbGxYLFxuICAgICAgICAgICAgICAgICAgICBjYW52YXNZID0gZS5jbGllbnRZIC0gbXkuY2FudmFzUmVjdC50b3AgKyB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGRyYWdPYmplY3RUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgbXkuaW50ZXJzZWN0c0Nvbm5lY3RvcihjYW52YXNYLCBjYW52YXNZLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15LmRyYWdFbmRDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvY2Vzc29yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdiYWNrZ3JvdW5kJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdjYWJsZWhhbmRsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uSUQgPSBteS5pbnRlcnNlY3RzQ2FibGVIYW5kbGUoY2FudmFzWCwgY2FudmFzWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbklEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmUuZGlzcGF0Y2goc3RvcmUuZ2V0QWN0aW9ucygpLmRpc2Nvbm5lY3RQcm9jZXNzb3JzKGNvbm5lY3Rpb25JRCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRyYWdPYmplY3RUeXBlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgYSBmbGFnIHRvIGluZGljYXRlIHRoZSBzdGF0aWMgY2FudmFzIHNob3VsZCBiZSByZWRyYXduLlxuICAgICAgICAgKi9cbiAgICAgICAgbWFya0RpcnR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpc0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgYW55IHR3ZWVuIGFuaW1hdGlvbnMgdGhhdCBhcmUgZ29pbmcgb24gYW5kXG4gICAgICAgICAqIHJlZHJhdyB0aGUgY2FudmFzZXMgaWYgbmVlZGVkLlxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gVHJhbnNwb3J0IHBsYXliYWNrIHBvc2l0aW9uIGluIHRpY2tzLlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9jZXNzb3JFdmVudHMgQXJyYXkgdG8gcHJvY2Vzc29yIGdlbmVyYXRlZCBldmVudHMgdG8gZGlzcGxheWluIHRoZSB2aWV3LlxuICAgICAgICAgKi9cbiAgICAgICAgZHJhdyA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBwcm9jZXNzb3JFdmVudHMpIHtcbiAgICAgICAgICAgIGxldCBpLFxuICAgICAgICAgICAgICAgIHZpZXdzID0gbXkuZ2V0UHJvY2Vzc29yVmlld3MoKSxcbiAgICAgICAgICAgICAgICBuID0gdmlld3MubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIHZpZXdzW2ldLmRyYXcocG9zaXRpb24sIHByb2Nlc3NvckV2ZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNEaXJ0eSkge1xuICAgICAgICAgICAgICAgIGlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdGF0aWNDdHguY2xlYXJSZWN0KDAsIDAsIHN0YXRpY0NhbnZhcy53aWR0aCwgc3RhdGljQ2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgZHluYW1pY0N0eC5jbGVhclJlY3QoMCwgMCwgc3RhdGljQ2FudmFzLndpZHRoLCBzdGF0aWNDYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBteS5hZGRDb25uZWN0aW9uc1RvQ2FudmFzKHN0YXRpY0N0eCk7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2aWV3c1tpXS5hZGRUb1N0YXRpY1ZpZXcoc3RhdGljQ3R4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2aWV3c1tpXS5jbGVhckZyb21EeW5hbWljVmlldyhkeW5hbWljQ3R4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2aWV3c1tpXS5hZGRUb0R5bmFtaWNWaWV3KGR5bmFtaWNDdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnRoZW1lO1xuICAgIG15LmNhbnZhc1JlY3QsXG4gICAgbXkubWFya0RpcnR5ID0gbWFya0RpcnR5O1xuICAgIFxuICAgIHRoYXQgPSBhZGRXaW5kb3dSZXNpemUoc3BlY3MsIG15KTtcbiAgICB0aGF0ID0gY3JlYXRlQ2FudmFzUHJvY2Vzc29yVmlld3Moc3BlY3MsIG15KTtcbiAgICB0aGF0ID0gY3JlYXRlQ2FudmFzQ29ubmVjdGlvbnNWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHRoYXQuZHJhdyA9IGRyYXc7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9jYW52YXMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorViews;\n\nvar _selectors = __webpack_require__(1);\n\n/**\n * Manages the canvas views of the processors in the network.\n * - Processor view lifecycle.\n * - Processor view user interaction, itersection with (mouse) point.\n * - Processor view dragging.\n * - Processor view theme changes.\n */\nfunction createCanvasProcessorViews(specs, my) {\n    var that,\n        store = specs.store,\n        views = [],\n        dragOffsetX,\n        dragOffsetY,\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    setProcessorViews(e.detail.state);\n                    selectProcessorView(e.detail.state);\n                    my.markDirty();\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createProcessorViews(e.detail.state);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteProcessorView(e.detail.action.id);\n                    selectProcessorView(e.detail.state);\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                    selectProcessorView(e.detail.state);\n                    break;\n\n                case e.detail.actions.SET_THEME:\n                    setTheme();\n                    break;\n            }\n        });\n    },\n        setTheme = function setTheme() {\n        var themeColors = (0, _selectors.getThemeColors)();\n        views.forEach(function (view) {\n            if (view.setTheme instanceof Function) {\n                view.setTheme(themeColors);\n            }\n        });\n    },\n        setProcessorViews = function setProcessorViews(newProcessors) {\n        clearProcessorViews();\n        createProcessorViews(newProcessors);\n    },\n        clearProcessorViews = function clearProcessorViews() {\n        var n = views.length;\n        while (--n >= 0) {\n            deleteProcessorView(views[n].getID());\n        }\n    },\n\n\n    /**\n     * Create canvas 2D object if it exists for the type.\n     * @param  {Array} data Array of current processors' state.\n     */\n    createProcessorViews = function createProcessorViews(state) {\n        state.processors.allIds.forEach(function (id, i) {\n            var processorData = state.processors.byId[id];\n            if (!views[i] || id !== views[i].getID()) {\n                var moduleSpecifier = '../processors/' + processorData.type + '/graphic.js';\n                new Promise(function (resolve) {\n                    __webpack_require__.e/* require.ensure */(0).then((function (require) {\n                        resolve(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n                    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n                }).then(function (module) {\n                    var view = module.createGraphic({\n                        data: processorData,\n                        store: store,\n                        canvasDirtyCallback: my.markDirty,\n                        theme: (0, _selectors.getThemeColors)()\n                    });\n                    views.splice(i, 0, view);\n                });\n            }\n        });\n    },\n        selectProcessorView = function selectProcessorView(state) {\n        views.forEach(function (view) {\n            if (typeof view.setSelected === 'function') {\n                view.setSelected(view.getID() === state.selectedID, state);\n            }\n        });\n    },\n\n\n    /**\n     * Delete canvas 2D object when the processor is deleted.\n     * @param  {Object} processor MIDI processor for which the 3D object will be a view.\n     */\n    deleteProcessorView = function deleteProcessorView(id) {\n        var i = views.length;\n        while (--i >= 0) {\n            if (views[i].getID() === id) {\n                views[i].terminate();\n                views[i].terminateBase();\n                views.splice(i, 1);\n                my.markDirty();\n                return;\n            }\n        }\n    },\n\n\n    /**\n     * Check and handle intersection of point with view.\n     * @param  {Number} x Canvas X coordinate.\n     * @param  {Number} y Canvas Y coordinate.\n     * @return {Boolean} True if intersects.\n     */\n    intersectsProcessor = function intersectsProcessor(x, y) {\n        var isIntersect = false;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        for (var i = views.length - 1; i >= 0; i--) {\n            if (views[i].intersectsWithPoint(x, y)) {\n                isIntersect = true;\n                store.dispatch(store.getActions().selectProcessor(views[i].getID()));\n                // start dragging the view's graphic\n                var pos2d = views[i].getPosition2d();\n                dragOffsetX = x - pos2d.x;\n                dragOffsetY = y - pos2d.y;\n                break;\n            }\n        }\n        return isIntersect;\n    },\n        dragSelectedProcessor = function dragSelectedProcessor(x, y) {\n        store.dispatch(store.getActions().dragSelectedProcessor(x - dragOffsetX, y - dragOffsetY));\n    },\n        dragAllProcessors = function dragAllProcessors(x, y) {\n        var newX = x - dragOffsetX,\n            newY = y - dragOffsetY;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        store.dispatch(store.getActions().dragAllProcessors(newX, newY));\n    },\n        getProcessorViews = function getProcessorViews() {\n        return views;\n    };\n\n    my = my || {};\n    my.intersectsProcessor = intersectsProcessor;\n    my.dragSelectedProcessor = dragSelectedProcessor;\n    my.dragAllProcessors = dragAllProcessors;\n    my.getProcessorViews = getProcessorViews;\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasConnectionsView;\n\nvar _selectors = __webpack_require__(1);\n\n/**\n * Canvas processor connector input and output points,\n * cables between the processor connectors,\n * Delete circles halfway the cables.\n * \n * OFFLINE CANVAS\n * All connection lines are drawn on the offline canvas,\n * This happens when processors are created, deleted or moved,\n * or when Connect Mode is entered or exited.\n * \n * The offline context is drawn on the static canvas.\n * It's the first thing that's drawn on the static canvas,\n * so that the connection lines appear behind the processors.\n * \n * CONNECT CANVAS\n * All input and output connector circles are drawn on the connect canvas.\n * The currently dragged cable is also drawn on the canvas.\n * \n * The connect canvas appears in front of the processors.\n */\nfunction createCanvasConnectionsView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl,\n        connectorsCanvas,\n        connectorsCtx,\n        cablesCanvas,\n        cablesCtx,\n        activeCableCanvas,\n        activeCableCtx,\n        connectorCanvas,\n        connectorCtx,\n        cableData = {\n        byId: {},\n        allIds: []\n    },\n        cableHandleRadius = 10,\n        cableHandleCross = 4,\n        connectorRadius = 12,\n        sourceProcessorID,\n        sourceConnectorID,\n        dragData = {\n        isDragging: false,\n        startPoint: { x: 0, y: 0 },\n        endPoint: { x: 0, y: 0 },\n        lineWidth: 1,\n        lineWidthActive: 2\n    },\n        init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        connectorsCanvas = document.querySelector('.canvas-connect');\n        connectorsCtx = connectorsCanvas.getContext('2d');\n        cablesCanvas = document.createElement('canvas');\n        cablesCtx = cablesCanvas.getContext('2d');\n        activeCableCanvas = document.createElement('canvas');\n        activeCableCtx = activeCableCanvas.getContext('2d');\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.TOGGLE_CONNECT_MODE:\n                    toggleConnectMode(e.detail.state.connectModeActive);\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                case e.detail.actions.DELETE_PROCESSOR:\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                case e.detail.actions.CONNECT_PROCESSORS:\n                case e.detail.actions.DISCONNECT_PROCESSORS:\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n\n                case e.detail.actions.CREATE_PROJECT:\n                case e.detail.actions.SET_THEME:\n                    createConnectorGraphic();\n                    toggleConnectMode(e.detail.state.connectModeActive);\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n            }\n        });\n    },\n        resizeConnections = function resizeConnections() {\n        connectorsCanvas.width = rootEl.clientWidth;\n        connectorsCanvas.height = rootEl.clientHeight;\n        cablesCanvas.width = rootEl.clientWidth;\n        cablesCanvas.height = rootEl.clientHeight;\n        activeCableCanvas.width = rootEl.clientWidth;\n        activeCableCanvas.height = rootEl.clientHeight;\n\n        var state = store.getState();\n        drawConnectCanvas(state);\n        drawCablesCanvas(state);\n    },\n\n\n    /**\n     * Create the connector canvas once and use it for all \n     * processor input and output connectors.\n     */\n    createConnectorGraphic = function createConnectorGraphic() {\n        var lineWidth = 2,\n            size = (connectorRadius + lineWidth) * 2,\n            themeColors = (0, _selectors.getThemeColors)();\n\n        connectorCanvas = document.createElement('canvas');\n        connectorCanvas.width = size;\n        connectorCanvas.height = size;\n\n        connectorCtx = connectorCanvas.getContext('2d');\n        connectorCtx.lineWidth = lineWidth;\n        connectorCtx.strokeStyle = themeColors.colorHigh;\n        connectorCtx.setLineDash([4, 4]);\n\n        connectorCtx.save();\n        connectorCtx.translate(size / 2, size / 2);\n        connectorCtx.arc(0, 0, size / 2, 0, Math.PI * 2, true);\n        connectorCtx.stroke();\n        connectorCtx.restore();\n    },\n\n\n    /**\n     * Enter or leave application connect mode.\n     * @param {Boolean} isEnabled True to enable connect mode.\n     */\n    toggleConnectMode = function toggleConnectMode(isEnabled) {\n        my.isConnectMode = isEnabled;\n\n        // show the canvas\n        connectorsCanvas.dataset.show = isEnabled;\n        my.markDirty();\n    },\n        dragStartConnection = function dragStartConnection(startX, startY, x, y) {\n        dragData.isDragging = true;\n        dragData.startPoint = { x: startX, y: startY };\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragMoveConnection = function dragMoveConnection(x, y) {\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragEndConnection = function dragEndConnection() {\n        dragData.isDragging = false;\n        drawActiveCableCanvas();\n    },\n        intersectsConnector = function intersectsConnector(x, y, isInput) {\n        var isIntersect = false,\n            isFound = false;\n        store.getState().processors.allIds.forEach(function (id) {\n            var processor = store.getState().processors.byId[id];\n            var connectorData = processor[isInput ? 'inputs' : 'outputs'];\n            connectorData.allIds.forEach(function (id) {\n                if (!isFound) {\n                    var connectorX = processor.positionX + connectorData.byId[id].x,\n                        connectorY = processor.positionY + connectorData.byId[id].y,\n                        distance = Math.sqrt(Math.pow(x - connectorX, 2) + Math.pow(y - connectorY, 2));\n                    isIntersect = distance <= connectorRadius;\n                    if (isIntersect) {\n                        isFound = true;\n                        if (isInput) {\n                            store.dispatch(store.getActions().connectProcessors({\n                                sourceProcessorID: sourceProcessorID,\n                                sourceConnectorID: sourceConnectorID,\n                                destinationProcessorID: processor.id,\n                                destinationConnectorID: id\n                            }));\n                            sourceProcessorID = null;\n                        } else {\n                            sourceProcessorID = processor.id;\n                            sourceConnectorID = id;\n                            dragStartConnection(connectorX, connectorY, x, y);\n                        }\n                    }\n                }\n            });\n        });\n        return isIntersect;\n    },\n        intersectsCableHandle = function intersectsCableHandle(x, y) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = cableData.allIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var id = _step.value;\n\n                var data = cableData.byId[id],\n                    distance = Math.sqrt(Math.pow(x - data.handleX, 2) + Math.pow(y - data.handleY, 2));\n                if (distance <= cableHandleRadius) {\n                    return id;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        ;\n        return null;\n    },\n\n\n    /**\n     * All connection lines are drawn on the offline canvas,\n     * This happens when processors are created, deleted or moved,\n     * or when Connect Mode is entered or exited.\n     */\n    drawCablesCanvas = function drawCablesCanvas(state) {\n        var themeColors = (0, _selectors.getThemeColors)();\n\n        cableData.byId = {};\n        cableData.allIds = [];\n        cablesCtx.clearRect(0, 0, cablesCanvas.width, cablesCanvas.height);\n\n        state.connections.allIds.forEach(function (connectionID) {\n            var connection = state.connections.byId[connectionID];\n            var sourceProcessor = state.processors.byId[connection.sourceProcessorID],\n                destinationProcessor = state.processors.byId[connection.destinationProcessorID];\n\n            if (sourceProcessor && destinationProcessor) {\n                var sourceConnector = sourceProcessor.outputs.byId[connection.sourceConnectorID],\n                    destinationConnector = destinationProcessor.inputs.byId[connection.destinationConnectorID];\n                var handlePosition = drawCable(cablesCtx, {\n                    x: sourceProcessor.positionX + sourceConnector.x,\n                    y: sourceProcessor.positionY + sourceConnector.y\n                }, {\n                    x: destinationProcessor.positionX + destinationConnector.x,\n                    y: destinationProcessor.positionY + destinationConnector.y\n                }, (0, _selectors.getThemeColors)().colorMid, (0, _selectors.getThemeColors)().colorHigh, 1);\n\n                cableData.byId[connectionID] = {\n                    handleX: handlePosition.x,\n                    handleY: handlePosition.y\n                };\n                cableData.allIds.push(connectionID);\n            }\n        });\n    },\n\n\n    /**\n     * Draw connector circles and currently dragged line on connectorsCanvas.\n     */\n    drawConnectCanvas = function drawConnectCanvas(state) {\n        connectorsCtx.clearRect(0, 0, connectorsCanvas.width, connectorsCanvas.height);\n\n        if (state.connectModeActive) {\n            state.processors.allIds.forEach(function (id) {\n                var processor = state.processors.byId[id];\n                processor.inputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.inputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.inputs.byId[id].y - connectorCanvas.height / 2);\n                });\n                processor.outputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.outputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.outputs.byId[id].y - connectorCanvas.height / 2);\n                });\n            });\n            my.markDirty();\n        }\n    },\n        drawActiveCableCanvas = function drawActiveCableCanvas() {\n        activeCableCtx.clearRect(0, 0, activeCableCanvas.width, activeCableCanvas.height);\n        if (dragData.isDragging) {\n            drawCable(activeCableCtx, dragData.startPoint, dragData.endPoint, (0, _selectors.getThemeColors)().colorHigh, (0, _selectors.getThemeColors)().colorHigh, 2);\n        }\n        my.markDirty();\n    },\n\n\n    /**\n     * Draw a processor connection cable.\n     * @param  {Object} context Canvas context.\n     * @param  {Object} startPoint {x, y} start coordinate.\n     * @param  {Object} endPoint   {x, y} end coordinate.\n     * @param  {String} cableStrokeColor Hex color for the cable.\n     * @param  {String} btnStrokeColor Hex color for the remove button halfway the cable.\n     * @param  {Number} cableWidth Cable line width.\n     */\n    drawCable = function drawCable(context, startPoint, endPoint, cableStrokeColor, btnStrokeColor, cableWidth) {\n        // line\n        var distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2)),\n            tension = distance / 2,\n            cp1x = startPoint.x,\n            cp1y = startPoint.y + tension,\n            cp2x = endPoint.x,\n            cp2y = endPoint.y + tension;\n\n        context.strokeStyle = cableStrokeColor;\n        context.lineWidth = cableWidth;\n        context.beginPath();\n        context.moveTo(startPoint.x, startPoint.y);\n        context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y);\n\n        // endpoint\n        var radius = 5;\n        context.moveTo(endPoint.x + radius, endPoint.y);\n        context.arc(endPoint.x, endPoint.y, radius, 0, Math.PI * 2, true);\n        context.stroke();\n\n        return drawCableHandle(context, startPoint.x, startPoint.y, cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y, btnStrokeColor);\n    },\n\n\n    /**\n     * Draw select button halfway the bezier curved cable.\n     * @see https://stackoverflow.com/questions/15397596/find-all-the-points-of-a-cubic-bezier-curve-in-javascript\n     * @param  {Object} context The canvas context to draw on.\n     * @param  {[type]} ax [description]\n     * @param  {[type]} ay [description]\n     * @param  {[type]} bx [description]\n     * @param  {[type]} by [description]\n     * @param  {[type]} cx [description]\n     * @param  {[type]} cy [description]\n     * @param  {[type]} dx [description]\n     * @param  {[type]} dy [description]\n     * @param  {String} btnStrokeColor Hex color for the remove button halfway the cable.\n     * @return {Object}    Canvas x, y coordinate.\n     */\n    drawCableHandle = function drawCableHandle(context, ax, ay, bx, by, cx, cy, dx, dy, btnStrokeColor) {\n        var t = 0.5,\n            // halfway the cable\n        b0t = Math.pow(1 - t, 3),\n            b1t = 3 * t * Math.pow(1 - t, 2),\n            b2t = 3 * Math.pow(t, 2) * (1 - t),\n            b3t = Math.pow(t, 3),\n            pxt = b0t * ax + b1t * bx + b2t * cx + b3t * dx,\n            pyt = b0t * ay + b1t * by + b2t * cy + b3t * dy;\n\n        if (my.isConnectMode) {\n            context.strokeStyle = btnStrokeColor;\n            context.lineWidth = 2;\n            context.beginPath();\n            context.moveTo(pxt + cableHandleRadius, pyt);\n            // circle\n            context.arc(pxt, pyt, cableHandleRadius, 0, Math.PI * 2, true);\n            // cross\n            context.moveTo(pxt - cableHandleCross, pyt - cableHandleCross);\n            context.lineTo(pxt + cableHandleCross, pyt + cableHandleCross);\n            context.moveTo(pxt + cableHandleCross, pyt - cableHandleCross);\n            context.lineTo(pxt - cableHandleCross, pyt + cableHandleCross);\n            context.stroke();\n        }\n\n        return { x: pxt, y: pyt };\n    },\n        addConnectionsToCanvas = function addConnectionsToCanvas(ctx) {\n        ctx.drawImage(cablesCanvas, 0, 0);\n        if (my.isConnectMode) {\n            ctx.drawImage(connectorsCanvas, 0, 0);\n            ctx.drawImage(activeCableCanvas, 0, 0);\n        }\n    };\n\n    my = my || {};\n    my.isConnectMode = false, my.resizeConnections = resizeConnections;\n    my.dragMoveConnection = dragMoveConnection;\n    my.dragEndConnection = dragEndConnection;\n    my.intersectsConnector = intersectsConnector;\n    my.intersectsCableHandle = intersectsCableHandle;\n    my.addConnectionsToCanvas = addConnectionsToCanvas;\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createLibraryView;\n/**\n * Library for all processor types.\n */\nfunction createLibraryView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.library__list'),\n        draggedType,\n        init = function init() {\n        document.addEventListener('drop', onDrop);\n        document.addEventListener('dragenter', onDragEnter);\n        document.addEventListener('dragover', onDragOver);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.RESCAN_TYPES:\n                    populateLibrary(e.detail.state.types);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Populate the library with all available processor types.\n     * Processor types are not shown in the libray \n     * if they have the flag excludedFromLibrary = true\n     * in their config.json file.\n     */\n    populateLibrary = function populateLibrary(typesTable) {\n        var template = document.querySelector('#template-library-item');\n\n        typesTable.allIds.forEach(function (id) {\n            var type = typesTable.byId[id];\n            var clone = template.content.cloneNode(true);\n            var el = clone.firstElementChild;\n            listEl.appendChild(el);\n\n            el.querySelector('.library__item-label').innerHTML = type.name;\n            el.dataset.type = id;\n            el.addEventListener('dragstart', onDragStart);\n        });\n    },\n\n\n    /**\n     * Store type of processor when drag starts.\n     */\n    onDragStart = function onDragStart(e) {\n        draggedType = e.target.dataset.type;\n    },\n\n\n    /**\n     * Create a new processor when the type is dropped on the canvas.\n     */\n    onDrop = function onDrop(e) {\n        e.preventDefault();\n\n        var dynamicCanvas = document.querySelector('.canvas-dynamic');\n        var connectorsCanvas = document.querySelector('.canvas-connect');\n        var canvas = connectorsCanvas.offsetWidth > 0 ? connectorsCanvas : dynamicCanvas;\n\n        if (e.target === canvas) {\n            var canvasRect = canvas.getBoundingClientRect();\n\n            // create a new processor\n            store.dispatch(store.getActions().createProcessor({\n                type: draggedType,\n                positionX: e.clientX - canvasRect.left + window.scrollX,\n                positionY: e.clientY - canvasRect.top + window.scrollY\n            }));\n        }\n\n        draggedType = null;\n    },\n        onDragEnter = function onDragEnter(e) {\n        e.preventDefault();\n    },\n        onDragOver = function onDragOver(e) {\n        e.preventDefault();\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9saWJyYXJ5LmpzP2M1YjEiXSwibmFtZXMiOlsiY3JlYXRlTGlicmFyeVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInN0b3JlIiwibGlzdEVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZHJhZ2dlZFR5cGUiLCJpbml0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uRHJvcCIsIm9uRHJhZ0VudGVyIiwib25EcmFnT3ZlciIsIlNUQVRFX0NIQU5HRSIsImUiLCJkZXRhaWwiLCJhY3Rpb24iLCJ0eXBlIiwiYWN0aW9ucyIsIlJFU0NBTl9UWVBFUyIsInBvcHVsYXRlTGlicmFyeSIsInN0YXRlIiwidHlwZXMiLCJ0eXBlc1RhYmxlIiwidGVtcGxhdGUiLCJhbGxJZHMiLCJmb3JFYWNoIiwiYnlJZCIsImlkIiwiY2xvbmUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZWwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwibmFtZSIsImRhdGFzZXQiLCJvbkRyYWdTdGFydCIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiZHluYW1pY0NhbnZhcyIsImNvbm5lY3RvcnNDYW52YXMiLCJjYW52YXMiLCJvZmZzZXRXaWR0aCIsImNhbnZhc1JlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjcmVhdGVQcm9jZXNzb3IiLCJwb3NpdGlvblgiLCJjbGllbnRYIiwibGVmdCIsIndpbmRvdyIsInNjcm9sbFgiLCJwb3NpdGlvblkiLCJjbGllbnRZIiwidG9wIiwic2Nyb2xsWSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBR3dCQSxpQjtBQUh4Qjs7O0FBR2UsU0FBU0EsaUJBQVQsQ0FBMkJDLEtBQTNCLEVBQWtDQyxFQUFsQyxFQUFzQztBQUNqRCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsUUFBUUgsTUFBTUcsS0FEbEI7QUFBQSxRQUVJ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LE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQU07O0FBRUEsV0FBT04sSUFBUDtBQUNIIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWJyYXJ5IGZvciBhbGwgcHJvY2Vzc29yIHR5cGVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVMaWJyYXJ5VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgbGlzdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpYnJhcnlfX2xpc3QnKSxcbiAgICAgICAgZHJhZ2dlZFR5cGUsXG5cbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIG9uRHJvcCk7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBvbkRyYWdFbnRlcik7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRHJhZ092ZXIpO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHN0b3JlLlNUQVRFX0NIQU5HRSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuZGV0YWlsLmFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5SRVNDQU5fVFlQRVM6XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUxpYnJhcnkoZS5kZXRhaWwuc3RhdGUudHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUG9wdWxhdGUgdGhlIGxpYnJhcnkgd2l0aCBhbGwgYXZhaWxhYmxlIHByb2Nlc3NvciB0eXBlcy5cbiAgICAgICAgICogUHJvY2Vzc29yIHR5cGVzIGFyZSBub3Qgc2hvd24gaW4gdGhlIGxpYnJheSBcbiAgICAgICAgICogaWYgdGhleSBoYXZlIHRoZSBmbGFnIGV4Y2x1ZGVkRnJvbUxpYnJhcnkgPSB0cnVlXG4gICAgICAgICAqIGluIHRoZWlyIGNvbmZpZy5qc29uIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBwb3B1bGF0ZUxpYnJhcnkgPSBmdW5jdGlvbih0eXBlc1RhYmxlKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1saWJyYXJ5LWl0ZW0nKTtcblxuICAgICAgICAgICAgdHlwZXNUYWJsZS5hbGxJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVzVGFibGUuYnlJZFtpZF07XG4gICAgICAgICAgICAgICAgY29uc3QgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGNsb25lLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICAgICAgICAgIGxpc3RFbC5hcHBlbmRDaGlsZChlbCk7XG5cbiAgICAgICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcubGlicmFyeV9faXRlbS1sYWJlbCcpLmlubmVySFRNTCA9IHR5cGUubmFtZTtcbiAgICAgICAgICAgICAgICBlbC5kYXRhc2V0LnR5cGUgPSBpZDtcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBvbkRyYWdTdGFydCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZSB0eXBlIG9mIHByb2Nlc3NvciB3aGVuIGRyYWcgc3RhcnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgb25EcmFnU3RhcnQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBkcmFnZ2VkVHlwZSA9IGUudGFyZ2V0LmRhdGFzZXQudHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBuZXcgcHJvY2Vzc29yIHdoZW4gdGhlIHR5cGUgaXMgZHJvcHBlZCBvbiB0aGUgY2FudmFzLlxuICAgICAgICAgKi9cbiAgICAgICAgb25Ecm9wID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljQ2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1keW5hbWljJyk7XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0b3JzQ2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb25uZWN0Jyk7XG4gICAgICAgICAgICBjb25zdCBjYW52YXMgPSBjb25uZWN0b3JzQ2FudmFzLm9mZnNldFdpZHRoID4gMCA/IGNvbm5lY3RvcnNDYW52YXMgOiBkeW5hbWljQ2FudmFzO1xuXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IGNhbnZhcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHByb2Nlc3NvclxuICAgICAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3JlLmdldEFjdGlvbnMoKS5jcmVhdGVQcm9jZXNzb3Ioe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBkcmFnZ2VkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25YOiBlLmNsaWVudFggLSBjYW52YXNSZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25ZOiBlLmNsaWVudFkgLSBjYW52YXNSZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBkcmFnZ2VkVHlwZSA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBvbkRyYWdFbnRlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uRHJhZ092ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9saWJyYXJ5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDINetwork;\n/**\n * Manages the graph of midi processors.\n */\nfunction createMIDINetwork(specs, my) {\n    var that,\n        store = specs.store,\n        processors = [],\n        numProcessors = 0,\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.CREATE_PROJECT:\n                    disconnectProcessors(e.detail.state.connections);\n                    deleteProcessors(e.detail.state.processors);\n                    createProcessors(e.detail.state.processors);\n                    connectProcessors(e.detail.state.connections);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    disconnectProcessors(e.detail.state.connections);\n                    deleteProcessors(e.detail.state.processors);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.CONNECT_PROCESSORS:\n                    connectProcessors(e.detail.state.connections);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DISCONNECT_PROCESSORS:\n                    disconnectProcessors(e.detail.state.connections);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n            }\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 83:\n                    // s\n                    console.log('    ++++    ');\n                    processors.forEach(function (processor) {\n                        console.log('network processor', processor.getID());\n                    });\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Create a new processor in the network.\n     * @param {Object} state State processors table.\n     */\n    createProcessors = function createProcessors(procsState) {\n        procsState.allIds.forEach(function (id, i) {\n            var processorData = procsState.byId[id];\n            var exists = false;\n            processors.forEach(function (processor) {\n                if (processor.getID() === id) {\n                    exists = true;\n                }\n            });\n            if (!exists) {\n                var moduleSpecifier = '../processors/' + processorData.type + '/processor.js';\n                new Promise(function (resolve) {\n                    __webpack_require__.e/* require.ensure */(1).then((function (require) {\n                        resolve(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n                    }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\n                }).then(function (module) {\n                    var processor = module.createProcessor({\n                        that: {},\n                        data: processorData,\n                        store: store\n                    });\n                    processors.splice(i, 0, processor);\n                    numProcessors = processors.length;\n                });\n            }\n        });\n    },\n\n\n    /**\n     * Delete a processor.\n     * @param {Object} state State processors table.\n     */\n    deleteProcessors = function deleteProcessors(procsState) {\n        var _loop = function _loop(i, n) {\n            // search for the processor in the state\n            var exists = false;\n            procsState.allIds.forEach(function (processorID) {\n                if (processorID === processors[i].getID()) {\n                    exists = true;\n                }\n            });\n\n            // remove processor if it doesn't exist in the state\n            if (!exists) {\n                var processor = processors[i];\n                if (processor.terminate instanceof Function) {\n                    processor.terminate();\n                }\n                processors.splice(i, 1);\n            }\n        };\n\n        for (var i = processors.length - 1, n = 0; i >= n; i--) {\n            _loop(i, n);\n        }\n        numProcessors = processors.length;\n    },\n\n\n    /**\n     * Go through all connection data and create the connections \n     * that don't yet exist.\n     */\n    connectProcessors = function connectProcessors(connections) {\n        connections.allIds.forEach(function (connectionID) {\n            var connection = connections.byId[connectionID];\n            processors.forEach(function (sourceProcessor) {\n                if (sourceProcessor.getID() === connection.sourceProcessorID) {\n                    var _exists = false;\n                    sourceProcessor.getDestinations().forEach(function (destinationProcessor) {\n                        if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                            _exists = true;\n                        }\n                    });\n                    if (!_exists) {\n                        processors.forEach(function (destinationProcessor) {\n                            if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                                sourceProcessor.connect(destinationProcessor);\n                            }\n                        });\n                    }\n                }\n            });\n        });\n    },\n\n\n    /**\n     * Go through all processor outputs and check if \n     * they still exist in the state. If not, disconnect them.\n     * \n     * TODO: allow for processors with multiple inputs or outputs.\n     */\n    disconnectProcessors = function disconnectProcessors(connections) {\n        processors.forEach(function (sourceProcessor) {\n            if (sourceProcessor.getDestinations instanceof Function) {\n                var destinationProcessors = sourceProcessor.getDestinations();\n                destinationProcessors.forEach(function (destinationProcessor) {\n                    var exists = false;\n                    connections.allIds.forEach(function (connectionID) {\n                        var connection = connections.byId[connectionID];\n                        if (connection.sourceProcessorID === sourceProcessor.getID() && connection.destinationProcessorID === destinationProcessor.getID()) {\n                            exists = true;\n                        }\n                    });\n                    if (!exists) {\n                        sourceProcessor.disconnect(destinationProcessor);\n                    }\n                });\n            }\n        });\n    },\n\n\n    /**\n     * Reorder the processors according to their order in the state.\n     * @param {Object} State processor table.\n     */\n    orderProcessors = function orderProcessors(processorsState) {\n        var orderedProcessors = [];\n        processorsState.allIds.forEach(function (processorID) {\n            processors.forEach(function (processor) {\n                if (processor.getID() === processorID) {\n                    orderedProcessors.push(processor);\n                }\n            });\n        });\n        processors = orderedProcessors;\n    },\n\n\n    /**\n     * Let all processors process their data.\n     * @param {Number} start Start time in ticks of timespan to process.\n     * @param {Number} end End time in ticks of timespan to process.\n     * @param {Number} nowToScanStart Duration from now until start time in ticks.\n     * @param {Number} ticksToMsMultiplier Ticks to ms. conversion multiplier.\n     * @param {Number} offset Position of transport playhead in ticks.\n     * @param {Object} processorEvents Object to collect processor generated events to displayin the view.\n     */\n    process = function process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n        for (var i = 0; i < numProcessors; i++) {\n            processors[i].process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents);\n        }\n    };\n\n    my = my || {};\n\n    that = specs.that;\n\n    init();\n\n    that.process = process;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createPreferencesView;\n\nvar _midi_input = __webpack_require__(27);\n\nvar _midi_input2 = _interopRequireDefault(_midi_input);\n\nvar _midi_output = __webpack_require__(28);\n\nvar _midi_output2 = _interopRequireDefault(_midi_output);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Preferences settings view.\n */\nfunction createPreferencesView(specs) {\n    var that,\n        store = specs.store,\n        preferencesEl = document.querySelector('.prefs'),\n        midiInputsEl = document.querySelector('.prefs__inputs'),\n        midiOutputsEl = document.querySelector('.prefs__outputs'),\n        midiPortViews = [],\n        controls = {\n        darkTheme: {\n            type: 'checkbox',\n            input: document.querySelector('.prefs__dark-theme')\n        }\n    },\n        init = function init() {\n        controls.darkTheme.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTheme(e.target.checked));\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_THEME:\n                    updateControl('dark-theme', e.detail.state.theme === 'dark');\n                    break;\n\n                case e.detail.actions.CREATE_MIDI_PORT:\n                case e.detail.actions.UPDATE_MIDI_PORT:\n                case e.detail.actions.MIDI_PORT_CHANGE:\n                    updateMIDIPortViews(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Callback function to update one of the controls after if the\n     * preference's state changed.\n     * @param {String} key Key that indicates the control.\n     * @param {Boolean} value Value of the control.\n     */\n    updateControl = function updateControl(key, value) {\n        switch (key) {\n            case 'dark-theme':\n                controls.darkTheme.input.checked = value;\n                break;\n        }\n    },\n\n\n    /**\n     * Update lists of ports after a change.\n     * @param {Array} ports MIDI port objects.\n     */\n    updateMIDIPortViews = function updateMIDIPortViews(ports) {\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            var view = midiPortViews.find(function (view) {\n                return port.id === view.getID();\n            });\n            if (view && port.state === 'disconnected') {\n                view.terminate();\n                midiPortViews.splice(midiPortViews.findIndex(function (view) {\n                    return port.id === view.getID();\n                }), 1);\n            }\n            if (!view && port.state === 'connected') {\n                var createFunction = void 0,\n                    parentEl = void 0;\n                if (port.type === 'input') {\n                    createFunction = _midi_input2.default;\n                    parentEl = midiInputsEl;\n                } else {\n                    createFunction = _midi_output2.default;\n                    parentEl = midiOutputsEl;\n                }\n                midiPortViews.push(createFunction({\n                    store: store,\n                    id: port.id,\n                    name: port.name,\n                    parentEl: parentEl,\n                    isInput: port.type === 'input',\n                    syncEnabled: port.syncEnabled,\n                    remoteEnabled: port.remoteEnabled,\n                    networkEnabled: port.networkEnabled\n                }));\n            }\n        });\n    };\n\n    that = specs.that;\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIInputView;\n\nvar _midi_base = __webpack_require__(7);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Input processor view.\n */\nfunction createMIDIInputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.networkEl.dataset.disabled = 'true';\n        my.networkEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX2lucHV0LmpzPzdjZTUiXSwibmFtZXMiOlsiY3JlYXRlTUlESUlucHV0VmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwiaW5pdCIsIm5ldHdvcmtFbCIsImRhdGFzZXQiLCJkaXNhYmxlZCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUt3QkEsbUI7O0FBTHhCOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxFQUFwQyxFQUF3QztBQUNuRCxRQUFJQyxJQUFKOzs7QUFFSTs7OztBQUlBQyxXQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixXQUFHRyxTQUFILENBQWFDLE9BQWIsQ0FBcUJDLFFBQXJCLEdBQWdDLE1BQWhDO0FBQ0FMLFdBQUdHLFNBQUgsQ0FBYUcsYUFBYixDQUEyQixPQUEzQixFQUFvQ0MsWUFBcEMsQ0FBaUQsVUFBakQsRUFBNkQsVUFBN0Q7QUFDSCxLQVRMOztBQVdBUCxTQUFLQSxNQUFNLEVBQVg7O0FBRUFDLFdBQU8seUJBQW1CRixLQUFuQixFQUEwQkMsRUFBMUIsQ0FBUDs7QUFFQUU7O0FBRUEsV0FBT0QsSUFBUDtBQUNIIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU1JRElCYXNlVmlldyBmcm9tICcuL21pZGlfYmFzZS5qcyc7XG5cbi8qKlxuICogTUlESSBJbnB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUlucHV0VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGluaXQgZnVuY3Rpb24gaXMgY2FsbGVkIGFmdGVyIHRoZSBiYXNlIHZpZXcncyBpbml0aWFsaXNlIGZ1bmN0aW9uLFxuICAgICAgICAgKiBzbyBwcm9wZXJ0aWVzIG9mIG9uICdteScgYXJlIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG15Lm5ldHdvcmtFbC5kYXRhc2V0LmRpc2FibGVkID0gJ3RydWUnO1xuICAgICAgICAgICAgbXkubmV0d29ya0VsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jykuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVNSURJQmFzZVZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG5cbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L21pZGlfaW5wdXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIOutputView;\n\nvar _midi_base = __webpack_require__(7);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Output processor view.\n */\nfunction createMIDIOutputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.syncEl.dataset.disabled = 'true';\n        my.syncEl.querySelector('input').setAttribute('disabled', 'disabled');\n        my.remoteEl.dataset.disabled = 'true';\n        my.remoteEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcz83Nzk4Il0sIm5hbWVzIjpbImNyZWF0ZU1JRElPdXRwdXRWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJpbml0Iiwic3luY0VsIiwiZGF0YXNldCIsImRpc2FibGVkIiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsInJlbW90ZUVsIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLG9COztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLG9CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsRUFBckMsRUFBeUM7QUFDcEQsUUFBSUMsSUFBSjs7O0FBRUk7Ozs7QUFJQUMsV0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEYsV0FBR0csTUFBSCxDQUFVQyxPQUFWLENBQWtCQyxRQUFsQixHQUE2QixNQUE3QjtBQUNBTCxXQUFHRyxNQUFILENBQVVHLGFBQVYsQ0FBd0IsT0FBeEIsRUFBaUNDLFlBQWpDLENBQThDLFVBQTlDLEVBQTBELFVBQTFEO0FBQ0FQLFdBQUdRLFFBQUgsQ0FBWUosT0FBWixDQUFvQkMsUUFBcEIsR0FBK0IsTUFBL0I7QUFDQUwsV0FBR1EsUUFBSCxDQUFZRixhQUFaLENBQTBCLE9BQTFCLEVBQW1DQyxZQUFuQyxDQUFnRCxVQUFoRCxFQUE0RCxVQUE1RDtBQUNILEtBWEw7O0FBYUFQLFNBQUtBLE1BQU0sRUFBWDs7QUFFQUMsV0FBTyx5QkFBbUJGLEtBQW5CLEVBQTBCQyxFQUExQixDQUFQOztBQUVBRTs7QUFFQSxXQUFPRCxJQUFQO0FBQ0giLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTUlESUJhc2VWaWV3IGZyb20gJy4vbWlkaV9iYXNlLmpzJztcblxuLyoqXG4gKiBNSURJIE91dHB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESU91dHB1dFZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpbml0IGZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciB0aGUgYmFzZSB2aWV3J3MgaW5pdGlhbGlzZSBmdW5jdGlvbixcbiAgICAgICAgICogc28gcHJvcGVydGllcyBvZiBvbiAnbXknIGFyZSBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBteS5zeW5jRWwuZGF0YXNldC5kaXNhYmxlZCA9ICd0cnVlJztcbiAgICAgICAgICAgIG15LnN5bmNFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIG15LnJlbW90ZUVsLmRhdGFzZXQuZGlzYWJsZWQgPSAndHJ1ZSc7XG4gICAgICAgICAgICBteS5yZW1vdGVFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlTUlESUJhc2VWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteView;\n\nvar _remote_group = __webpack_require__(30);\n\nvar _remote_group2 = _interopRequireDefault(_remote_group);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Overview list of all assigned MIDI controller assignments.\n */\nfunction createRemoteView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.remote__list'),\n        groupViews = {\n        byId: {},\n        allIds: []\n    },\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    createRemoteGroups(e.detail.state);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createRemoteGroup(e.detail.state.processors.byId[e.detail.action.data.id]);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteRemoteGroups(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n                    if (e.detail.state.learnTargetProcessorID) {\n                        var _groupView = groupViews.byId[e.detail.state.learnTargetProcessorID],\n                            _processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                        if (!_groupView) {\n                            createRemoteGroups(e.detail.state);\n                        } else {\n                            _groupView.updateViews(e.detail.state);\n                        }\n                    }\n                    break;\n\n                case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                    var groupView = groupViews.byId[e.detail.action.processorID],\n                        processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                    if (groupView && processor) {\n                        groupView.updateViews(e.detail.state);\n                    }\n                    break;\n            }\n        });\n    },\n        createRemoteGroups = function createRemoteGroups(state) {\n        state.assignments.allIds.forEach(function (assignID) {\n            var assignment = state.assignments.byId[assignID];\n            if (!groupViews.byId[assignment.processorID]) {\n                createRemoteGroup(state.processors.byId[assignment.processorID]);\n            }\n        });\n\n        // processors.allIds.forEach(id => {\n        //     if (!groupViews.byId[id]) {\n        //         const processor = processors.byId[id];\n        //         let hasAssignment = false;\n        //         processor.params.allIds.forEach(id => {\n        //             const param = processor.params.byId[id];\n        //             if (param.isMidiControllable && param.remoteChannel && param.remoteCC != null) {\n        //                 hasAssignment = true;\n        //             }\n        //         });\n        //         if (hasAssignment) {\n        //             createRemoteGroup(processor);\n        //         }\n        //     }\n        // });\n    },\n\n\n    /**\n     * Create a container view to hold assigned parameter views.\n     * @param {Array} processors Processor list.\n     */\n    createRemoteGroup = function createRemoteGroup(processor) {\n        if (!groupViews.byId[processor.id]) {\n            groupViews.allIds.push(processor.id);\n            groupViews.byId[processor.id] = (0, _remote_group2.default)({\n                store: store,\n                processorID: processor.id,\n                parentEl: listEl\n            });\n        }\n    },\n\n\n    /**\n     * Delete a container view to hold assigned parameter views.\n     * @param {Object} processor Processor with assignable parameters.\n     */\n    deleteRemoteGroups = function deleteRemoteGroups(processors) {\n        var n = groupViews.allIds.length;\n        for (var i = groupViews.allIds.length - 1; i >= 0; i--) {\n            var id = groupViews.allIds[i];\n            if (!processors.byId[id]) {\n                groupViews.allIds.splice(i, 1);\n                groupViews.byId[id].terminate();\n                delete groupViews.byId[id];\n            }\n        }\n    },\n        that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9yZW1vdGUuanM/MWRiYiJdLCJuYW1lcyI6WyJjcmVhdGVSZW1vdGVWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJzdG9yZSIsImxpc3RFbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImdyb3VwVmlld3MiLCJieUlkIiwiYWxsSWRzIiwiaW5pdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJTVEFURV9DSEFOR0UiLCJlIiwiZGV0YWlsIiwiYWN0aW9uIiwidHlwZSIsImFjdGlvbnMiLCJDUkVBVEVfUFJPSkVDVCIsImNyZWF0ZVJlbW90ZUdyb3VwcyIsInN0YXRlIiwiQUREX1BST0NFU1NPUiIsImNyZWF0ZVJlbW90ZUdyb3VwIiwicHJvY2Vzc29ycyIsImRhdGEiLCJpZCIsIkRFTEVURV9QUk9DRVNTT1IiLCJkZWxldGVSZW1vdGVHcm91cHMiLCJBU1NJR05fRVhURVJOQUxfQ09OVFJPTCIsImxlYXJuVGFyZ2V0UHJvY2Vzc29ySUQiLCJncm91cFZpZXciLCJwcm9jZXNzb3IiLCJ1cGRhdGVWaWV3cyIsIlVOQVNTSUdOX0VYVEVSTkFMX0NPTlRST0wiLCJwcm9jZXNzb3JJRCIsImFzc2lnbm1lbnRzIiwiZm9yRWFjaCIsImFzc2lnbm1lbnQiLCJhc3NpZ25JRCIsInB1c2giLCJwYXJlbnRFbCIsIm4iLCJsZW5ndGgiLCJpIiwic3BsaWNlIiwidGVybWluYXRlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLGdCOztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsRUFBakMsRUFBcUM7QUFDaEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLFFBQVFILE1BQU1HLEtBRGxCO0FBQUEsUUFFSUMsU0FBU0MsU0FBU0MsYUFBVCxDQUF1QixlQUF2QixDQUZiO0FBQUEsUUFHSUMsYUFBYTtBQUNUQyxjQUFNLEVBREc7QUFFVEMsZ0JBQVE7QUFGQyxLQUhqQjtBQUFB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LEVBQTFCLENBQUwsRUFBb0M7QUFDaENsQix1QkFBV0UsTUFBWCxDQUFrQjhCLElBQWxCLENBQXVCUixVQUFVTixFQUFqQztBQUNBbEIsdUJBQVdDLElBQVgsQ0FBZ0J1QixVQUFVTixFQUExQixJQUFnQyw0QkFBc0I7QUFDbER0Qix1QkFBT0EsS0FEMkM7QUFFbEQrQiw2QkFBYUgsVUFBVU4sRUFGMkI7QUFHbERlLDBCQUFVcEM7QUFId0MsYUFBdEIsQ0FBaEM7QUFLSDtBQUNKLEtBckZMOzs7QUF1Rkk7Ozs7QUFJQXVCLHlCQUFxQixTQUFyQkEsa0JBQXFCLENBQVNKLFVBQVQsRUFBcUI7QUFDdEMsWUFBSWtCLElBQUlsQyxXQUFXRSxNQUFYLENBQWtCaUMsTUFBMUI7QUFDQSxhQUFLLElBQUlDLElBQUlwQyxXQUFXRSxNQUFYLENBQWtCaUMsTUFBbEIsR0FBMkIsQ0FBeEMsRUFBMkNDLEtBQUssQ0FBaEQsRUFBbURBLEdBQW5ELEVBQXdEO0FBQ3BELGdCQUFNbEIsS0FBS2xCLFdBQVdFLE1BQVgsQ0FBa0JrQyxDQUFsQixDQUFYO0FBQ0EsZ0JBQUksQ0FBQ3BCLFdBQVdmLElBQVgsQ0FBZ0JpQixFQUFoQixDQUFMLEVBQTBCO0FBQ3RCbEIsMkJBQVdFLE1BQVgsQ0FBa0JtQyxNQUFsQixDQUF5QkQsQ0FBekIsRUFBNEIsQ0FBNUI7QUFDQXBDLDJCQUFXQyxJQUFYLENBQWdCaUIsRUFBaEIsRUFBb0JvQixTQUFwQjtBQUNBLHVCQUFPdEMsV0FBV0MsSUFBWCxDQUFnQmlCLEVBQWhCLENBQVA7QUFDSDtBQUNKO0FBQ0osS0FyR0w7QUFBQSxRQXVHQXZCLE9BQU9GLE1BQU1FLElBQU4sSUFBYyxFQXZHckI7O0FBeUdBUTs7QUFFQSxXQUFPUixJQUFQO0FBQ0giLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlUmVtb3RlR3JvdXBWaWV3IGZyb20gJy4vcmVtb3RlX2dyb3VwLmpzJztcblxuLyoqXG4gKiBPdmVydmlldyBsaXN0IG9mIGFsbCBhc3NpZ25lZCBNSURJIGNvbnRyb2xsZXIgYXNzaWdubWVudHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVJlbW90ZVZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHN0b3JlID0gc3BlY3Muc3RvcmUsXG4gICAgICAgIGxpc3RFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2xpc3QnKSxcbiAgICAgICAgZ3JvdXBWaWV3cyA9IHtcbiAgICAgICAgICAgIGJ5SWQ6IHt9LFxuICAgICAgICAgICAgYWxsSWRzOiBbXVxuICAgICAgICB9LFxuXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoc3RvcmUuU1RBVEVfQ0hBTkdFLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5kZXRhaWwuYWN0aW9uLnR5cGUpIHtcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIGUuZGV0YWlsLmFjdGlvbnMuQ1JFQVRFX1BST0pFQ1Q6XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVSZW1vdGVHcm91cHMoZS5kZXRhaWwuc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLkFERF9QUk9DRVNTT1I6XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVSZW1vdGVHcm91cChlLmRldGFpbC5zdGF0ZS5wcm9jZXNzb3JzLmJ5SWRbZS5kZXRhaWwuYWN0aW9uLmRhdGEuaWRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5ERUxFVEVfUFJPQ0VTU09SOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtb3RlR3JvdXBzKGUuZGV0YWlsLnN0YXRlLnByb2Nlc3NvcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlIGUuZGV0YWlsLmFjdGlvbnMuQVNTSUdOX0VYVEVSTkFMX0NPTlRST0w6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5kZXRhaWwuc3RhdGUubGVhcm5UYXJnZXRQcm9jZXNzb3JJRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwVmlldyA9IGdyb3VwVmlld3MuYnlJZFtlLmRldGFpbC5zdGF0ZS5sZWFyblRhcmdldFByb2Nlc3NvcklEXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yID0gZS5kZXRhaWwuc3RhdGUucHJvY2Vzc29ycy5ieUlkW2UuZGV0YWlsLnN0YXRlLmxlYXJuVGFyZ2V0UHJvY2Vzc29ySURdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZ3JvdXBWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVJlbW90ZUdyb3VwcyhlLmRldGFpbC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBWaWV3LnVwZGF0ZVZpZXdzKGUuZGV0YWlsLnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5VTkFTU0lHTl9FWFRFUk5BTF9DT05UUk9MOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBWaWV3ID0gZ3JvdXBWaWV3cy5ieUlkW2UuZGV0YWlsLmFjdGlvbi5wcm9jZXNzb3JJRF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yID0gZS5kZXRhaWwuc3RhdGUucHJvY2Vzc29ycy5ieUlkW2UuZGV0YWlsLnN0YXRlLmxlYXJuVGFyZ2V0UHJvY2Vzc29ySURdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncm91cFZpZXcgJiYgcHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwVmlldy51cGRhdGVWaWV3cyhlLmRldGFpbC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlUmVtb3RlR3JvdXBzID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgICAgIHN0YXRlLmFzc2lnbm1lbnRzLmFsbElkcy5mb3JFYWNoKGFzc2lnbklEID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhc3NpZ25tZW50ID0gc3RhdGUuYXNzaWdubWVudHMuYnlJZFthc3NpZ25JRF07XG4gICAgICAgICAgICAgICAgaWYgKCFncm91cFZpZXdzLmJ5SWRbYXNzaWdubWVudC5wcm9jZXNzb3JJRF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlUmVtb3RlR3JvdXAoc3RhdGUucHJvY2Vzc29ycy5ieUlkW2Fzc2lnbm1lbnQucHJvY2Vzc29ySURdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gcHJvY2Vzc29ycy5hbGxJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICAvLyAgICAgaWYgKCFncm91cFZpZXdzLmJ5SWRbaWRdKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGNvbnN0IHByb2Nlc3NvciA9IHByb2Nlc3NvcnMuYnlJZFtpZF07XG4gICAgICAgICAgICAvLyAgICAgICAgIGxldCBoYXNBc3NpZ25tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAvLyAgICAgICAgIHByb2Nlc3Nvci5wYXJhbXMuYWxsSWRzLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgY29uc3QgcGFyYW0gPSBwcm9jZXNzb3IucGFyYW1zLmJ5SWRbaWRdO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgaWYgKHBhcmFtLmlzTWlkaUNvbnRyb2xsYWJsZSAmJiBwYXJhbS5yZW1vdGVDaGFubmVsICYmIHBhcmFtLnJlbW90ZUNDICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBoYXNBc3NpZ25tZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyAgICAgICAgIGlmIChoYXNBc3NpZ25tZW50KSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBjcmVhdGVSZW1vdGVHcm91cChwcm9jZXNzb3IpO1xuICAgICAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlIGEgY29udGFpbmVyIHZpZXcgdG8gaG9sZCBhc3NpZ25lZCBwYXJhbWV0ZXIgdmlld3MuXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb2Nlc3NvcnMgUHJvY2Vzc29yIGxpc3QuXG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVSZW1vdGVHcm91cCA9IGZ1bmN0aW9uKHByb2Nlc3Nvcikge1xuICAgICAgICAgICAgaWYgKCFncm91cFZpZXdzLmJ5SWRbcHJvY2Vzc29yLmlkXSkge1xuICAgICAgICAgICAgICAgIGdyb3VwVmlld3MuYWxsSWRzLnB1c2gocHJvY2Vzc29yLmlkKTtcbiAgICAgICAgICAgICAgICBncm91cFZpZXdzLmJ5SWRbcHJvY2Vzc29yLmlkXSA9IGNyZWF0ZVJlbW90ZUdyb3VwVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29ySUQ6IHByb2Nlc3Nvci5pZCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50RWw6IGxpc3RFbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlbGV0ZSBhIGNvbnRhaW5lciB2aWV3IHRvIGhvbGQgYXNzaWduZWQgcGFyYW1ldGVyIHZpZXdzLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvY2Vzc29yIFByb2Nlc3NvciB3aXRoIGFzc2lnbmFibGUgcGFyYW1ldGVycy5cbiAgICAgICAgICovXG4gICAgICAgIGRlbGV0ZVJlbW90ZUdyb3VwcyA9IGZ1bmN0aW9uKHByb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIGxldCBuID0gZ3JvdXBWaWV3cy5hbGxJZHMubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGdyb3VwVmlld3MuYWxsSWRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBncm91cFZpZXdzLmFsbElkc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXByb2Nlc3NvcnMuYnlJZFtpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBWaWV3cy5hbGxJZHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBncm91cFZpZXdzLmJ5SWRbaWRdLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ3JvdXBWaWV3cy5ieUlkW2lkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9yZW1vdGUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteGroupView;\n\nvar _remote_item = __webpack_require__(31);\n\nvar _remote_item2 = _interopRequireDefault(_remote_item);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Group within overview list of all assigned MIDI controller assignments.\n * The items are grouped by processor.\n */\nfunction createRemoteGroupView(specs, my) {\n    var that,\n        store = specs.store,\n        processorID = specs.processorID,\n        parentEl = specs.parentEl,\n        el,\n        listEl,\n        nameParam,\n        views = {\n        byId: {},\n        allIds: []\n    },\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-group');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        parentEl.appendChild(el);\n\n        listEl = el.querySelector('.remote__group-list');\n\n        var state = store.getState();\n        setName(state.processors.byId[processorID].params.byId.name.value);\n        updateViews(state);\n\n        document.addEventListener(store.STATE_CHANGE, handleStateChange);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChange);\n\n        views.allIds.forEach(function (id) {\n            views.byId[id].terminate();\n        });\n\n        parentEl.removeChild(el);\n        views = null;\n        parentEl = null;\n    },\n        handleStateChange = function handleStateChange(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === processorID && e.detail.action.paramKey === 'name') {\n                    setName(e.detail.state.processors.byId[processorID].params.byId.name.value);\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Update list to contain all assignments.\n     */\n    updateViews = function updateViews(state) {\n        state.processors.byId[processorID].params.allIds.forEach(function (paramKey) {\n\n            // search assignment for this parameter\n            var assignment = void 0;\n            state.assignments.allIds.forEach(function (assignID) {\n                var assign = state.assignments.byId[assignID];\n                if (assign.processorID === processorID && assign.paramKey === paramKey) {\n                    assignment = assign;\n                }\n            });\n\n            // create or delete the parameter's view\n            var view = views.byId[paramKey];\n            if (assignment && !view) {\n                var param = state.processors.byId[processorID].params.byId[paramKey];\n                addView(paramKey, param.label, assignment.remoteChannel, assignment.remoteCC);\n            } else if (!assignment && view) {\n                removeView(paramKey);\n            }\n        });\n\n        // show group if there are assignments\n        el.dataset.hasAssignments = views.allIds.length > 0;\n    },\n        addView = function addView(paramKey, paramLabel, remoteChannel, remoteCC) {\n        views.byId[paramKey] = (0, _remote_item2.default)({\n            store: store,\n            paramKey: paramKey,\n            paramLabel: paramLabel,\n            processorID: processorID,\n            remoteChannel: remoteChannel,\n            remoteCC: remoteCC,\n            parentEl: listEl\n        });\n        views.allIds.push(paramKey);\n    },\n        removeView = function removeView(paramKey) {\n        views.byId[paramKey].terminate();\n        delete views.byId[paramKey];\n        views.allIds.splice(views.allIds.indexOf(paramKey), 1);\n    },\n\n\n    /**\n     * If a group has no assignments its header is hidden.\n     */\n    updateGroupVisibility = function updateGroupVisibility() {\n        el.dataset.hasAssignments = itemViews.length > 0;\n    },\n\n\n    /**\n     * Set the group's header to the processor's name.\n     * @param {String} name Processor's name.\n     */\n    setName = function setName(name) {\n        el.querySelector('.remote__group-header-label').innerHTML = name;\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.updateViews = updateViews;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfZ3JvdXAuanM/OThlNCJdLCJuYW1lcyI6WyJjcmVhdGVSZW1vdGVHcm91cFZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInN0b3JlIiwicHJvY2Vzc29ySUQiLCJwYXJlbnRFbCIsImVsIiwibGlzdEVsIiwibmFtZVBhcmFtIiwidmlld3MiLCJieUlkIiwiYWxsSWRzIiwiaW5pdGlhbGl6ZSIsInRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xvbmUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJhcHBlbmRDaGlsZCIsInN0YXRlIiwiZ2V0U3RhdGUiLCJzZXROYW1lIiwicHJvY2Vzc29ycyIsInBhcmFtcyIsIm5hbWUiLCJ2YWx1ZSIsInVwZGF0ZVZpZXdzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlNUQVRFX0NIQU5HRSIsImhhbmRsZVN0YXRlQ2hhbmdlIiwidGVybWluYXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZvckVhY2giLCJpZCIsInJlbW92ZUNoaWxkIiwiZSIsImRldGFpbCIsImFjdGlvbiIsInR5cGUiLCJhY3Rpb25zIiwiQ0hBTkdFX1BBUkFNRVRFUiIsInBhcmFtS2V5IiwiYXNzaWdubWVudCIsImFzc2lnbm1lbnRzIiwiYXNzaWduIiwiYXNzaWduSUQiLCJ2aWV3IiwicGFyYW0iLCJhZGRWaWV3IiwibGFiZWwiLCJyZW1vdGVDaGFubmVsIiwicmVtb3RlQ0MiLCJyZW1vdmVWaWV3IiwiZGF0YXNldCIsImhhc0Fzc2lnbm1lbnRzIiwibGVuZ3RoIiwicGFyYW1MYWJlbCIsInB1c2giLCJzcGxpY2UiLCJpbmRleE9mIiwidXBkYXRlR3JvdXBWaXNpYmlsaXR5IiwiaXRlbVZpZXdzIiwiaW5uZXJIVE1MIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHFCOztBQU54Qjs7Ozs7O0FBRUE7Ozs7QUFJZSxTQUFTQSxxQkFB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TUFBYixDQUFvQm5ELE1BQU1FLE1BQU4sQ0FBYWtELE9BQWIsQ0FBcUJsQixRQUFyQixDQUFwQixFQUFvRCxDQUFwRDtBQUNILEtBcEdMOzs7QUFzR0k7OztBQUdBbUIsNEJBQXdCLFNBQXhCQSxxQkFBd0IsR0FBVztBQUMvQnhELFdBQUdpRCxPQUFILENBQVdDLGNBQVgsR0FBNkJPLFVBQVVOLE1BQVYsR0FBbUIsQ0FBaEQ7QUFDSCxLQTNHTDs7O0FBNkdJOzs7O0FBSUFsQyxjQUFVLFNBQVZBLE9BQVUsQ0FBU0csSUFBVCxFQUFlO0FBQ3JCcEIsV0FBR1MsYUFBSCxDQUFpQiw2QkFBakIsRUFBZ0RpRCxTQUFoRCxHQUE0RHRDLElBQTVEO0FBQ0gsS0FuSEw7O0FBcUhBeEIsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBVTs7QUFFQVYsU0FBSzhCLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0E5QixTQUFLMEIsV0FBTCxHQUFtQkEsV0FBbkI7QUFDQSxXQUFPMUIsSUFBUDtBQUNIIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVJlbW90ZUl0ZW1WaWV3IGZyb20gJy4vcmVtb3RlX2l0ZW0uanMnO1xuXG4vKipcbiAqIEdyb3VwIHdpdGhpbiBvdmVydmlldyBsaXN0IG9mIGFsbCBhc3NpZ25lZCBNSURJIGNvbnRyb2xsZXIgYXNzaWdubWVudHMuXG4gKiBUaGUgaXRlbXMgYXJlIGdyb3VwZWQgYnkgcHJvY2Vzc29yLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZW1vdGVHcm91cFZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHN0b3JlID0gc3BlY3Muc3RvcmUsXG4gICAgICAgIHByb2Nlc3NvcklEID0gc3BlY3MucHJvY2Vzc29ySUQsXG4gICAgICAgIHBhcmVudEVsID0gc3BlY3MucGFyZW50RWwsXG4gICAgICAgIGVsLFxuICAgICAgICBsaXN0RWwsXG4gICAgICAgIG5hbWVQYXJhbSxcbiAgICAgICAgdmlld3MgPSB7XG4gICAgICAgICAgICBieUlkOiB7fSxcbiAgICAgICAgICAgIGFsbElkczogW11cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQuXG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtcmVtb3RlLWdyb3VwJyk7XG4gICAgICAgICAgICBsZXQgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgIGVsID0gY2xvbmUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxpc3RFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2dyb3VwLWxpc3QnKTtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgc2V0TmFtZShzdGF0ZS5wcm9jZXNzb3JzLmJ5SWRbcHJvY2Vzc29ySURdLnBhcmFtcy5ieUlkLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgdXBkYXRlVmlld3Moc3RhdGUpO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHN0b3JlLlNUQVRFX0NIQU5HRSwgaGFuZGxlU3RhdGVDaGFuZ2UpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCBiZWZvcmUgdGhpcyB2aWV3IGlzIGRlbGV0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0ZXJtaW5hdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoc3RvcmUuU1RBVEVfQ0hBTkdFLCBoYW5kbGVTdGF0ZUNoYW5nZSk7XG5cbiAgICAgICAgICAgIHZpZXdzLmFsbElkcy5mb3JFYWNoKGlkID0+IHtcbiAgICAgICAgICAgICAgICB2aWV3cy5ieUlkW2lkXS50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwYXJlbnRFbC5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgICAgICB2aWV3cyA9IG51bGw7XG4gICAgICAgICAgICBwYXJlbnRFbCA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFuZGxlU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGUuZGV0YWlsLmFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLkNIQU5HRV9QQVJBTUVURVI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmRldGFpbC5hY3Rpb24ucHJvY2Vzc29ySUQgPT09IHByb2Nlc3NvcklEICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgZS5kZXRhaWwuYWN0aW9uLnBhcmFtS2V5ID09PSAnbmFtZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE5hbWUoZS5kZXRhaWwuc3RhdGUucHJvY2Vzc29ycy5ieUlkW3Byb2Nlc3NvcklEXS5wYXJhbXMuYnlJZC5uYW1lLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIGxpc3QgdG8gY29udGFpbiBhbGwgYXNzaWdubWVudHMuXG4gICAgICAgICAqL1xuICAgICAgICB1cGRhdGVWaWV3cyA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgICAgICBzdGF0ZS5wcm9jZXNzb3JzLmJ5SWRbcHJvY2Vzc29ySURdLnBhcmFtcy5hbGxJZHMuZm9yRWFjaChwYXJhbUtleSA9PiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gc2VhcmNoIGFzc2lnbm1lbnQgZm9yIHRoaXMgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgbGV0IGFzc2lnbm1lbnQ7XG4gICAgICAgICAgICAgICAgc3RhdGUuYXNzaWdubWVudHMuYWxsSWRzLmZvckVhY2goYXNzaWduSUQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc3NpZ24gPSBzdGF0ZS5hc3NpZ25tZW50cy5ieUlkW2Fzc2lnbklEXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2lnbi5wcm9jZXNzb3JJRCA9PT0gcHJvY2Vzc29ySUQgJiYgYXNzaWduLnBhcmFtS2V5ID09PSBwYXJhbUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWdubWVudCA9IGFzc2lnbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIG9yIGRlbGV0ZSB0aGUgcGFyYW1ldGVyJ3Mgdmlld1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3cy5ieUlkW3BhcmFtS2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoYXNzaWdubWVudCAmJiAhdmlldykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbSA9IHN0YXRlLnByb2Nlc3NvcnMuYnlJZFtwcm9jZXNzb3JJRF0ucGFyYW1zLmJ5SWRbcGFyYW1LZXldO1xuICAgICAgICAgICAgICAgICAgICBhZGRWaWV3KHBhcmFtS2V5LCBwYXJhbS5sYWJlbCwgYXNzaWdubWVudC5yZW1vdGVDaGFubmVsLCBhc3NpZ25tZW50LnJlbW90ZUNDKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFhc3NpZ25tZW50ICYmIHZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVmlldyhwYXJhbUtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHNob3cgZ3JvdXAgaWYgdGhlcmUgYXJlIGFzc2lnbm1lbnRzXG4gICAgICAgICAgICBlbC5kYXRhc2V0Lmhhc0Fzc2lnbm1lbnRzID0gKHZpZXdzLmFsbElkcy5sZW5ndGggPiAwKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRWaWV3ID0gZnVuY3Rpb24ocGFyYW1LZXksIHBhcmFtTGFiZWwsIHJlbW90ZUNoYW5uZWwsIHJlbW90ZUNDKSB7XG4gICAgICAgICAgICB2aWV3cy5ieUlkW3BhcmFtS2V5XSA9IGNyZWF0ZVJlbW90ZUl0ZW1WaWV3KHtcbiAgICAgICAgICAgICAgICBzdG9yZSxcbiAgICAgICAgICAgICAgICBwYXJhbUtleSxcbiAgICAgICAgICAgICAgICBwYXJhbUxhYmVsLFxuICAgICAgICAgICAgICAgIHByb2Nlc3NvcklELFxuICAgICAgICAgICAgICAgIHJlbW90ZUNoYW5uZWwsXG4gICAgICAgICAgICAgICAgcmVtb3RlQ0MsXG4gICAgICAgICAgICAgICAgcGFyZW50RWw6IGxpc3RFbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2aWV3cy5hbGxJZHMucHVzaChwYXJhbUtleSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlVmlldyA9IGZ1bmN0aW9uKHBhcmFtS2V5KSB7XG4gICAgICAgICAgICB2aWV3cy5ieUlkW3BhcmFtS2V5XS50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB2aWV3cy5ieUlkW3BhcmFtS2V5XTtcbiAgICAgICAgICAgIHZpZXdzLmFsbElkcy5zcGxpY2Uodmlld3MuYWxsSWRzLmluZGV4T2YocGFyYW1LZXkpLCAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhIGdyb3VwIGhhcyBubyBhc3NpZ25tZW50cyBpdHMgaGVhZGVyIGlzIGhpZGRlbi5cbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZUdyb3VwVmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWwuZGF0YXNldC5oYXNBc3NpZ25tZW50cyA9IChpdGVtVmlld3MubGVuZ3RoID4gMCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IHRoZSBncm91cCdzIGhlYWRlciB0byB0aGUgcHJvY2Vzc29yJ3MgbmFtZS5cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgUHJvY2Vzc29yJ3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIHNldE5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19ncm91cC1oZWFkZXItbGFiZWwnKS5pbm5lckhUTUwgPSBuYW1lO1xuICAgICAgICB9O1xuICAgIFxuICAgIHRoYXQgPSBzcGVjcy50aGF0IHx8IHt9O1xuICAgIFxuICAgIGluaXRpYWxpemUoKTtcbiAgICBcbiAgICB0aGF0LnRlcm1pbmF0ZSA9IHRlcm1pbmF0ZTtcbiAgICB0aGF0LnVwZGF0ZVZpZXdzID0gdXBkYXRlVmlld3M7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfZ3JvdXAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteItemView;\n/**\n * View for a parameter that's linked to a remote MIDI controller.\n * The items are grouped by processor.\n */\nfunction createRemoteItemView(specs, my) {\n    var that,\n        store = specs.store,\n        paramKey = specs.paramKey,\n        paramLabel = specs.paramLabel,\n        processorID = specs.processorID,\n        remoteChannel = specs.remoteChannel,\n        remoteCC = specs.remoteCC,\n        parentEl = specs.parentEl,\n        el,\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-item');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        el.querySelector('.remote__item-label').innerHTML = paramLabel;\n        el.querySelector('.remote__item-channel').innerHTML = remoteChannel;\n        el.querySelector('.remote__item-control').innerHTML = remoteCC;\n        parentEl.appendChild(el);\n\n        // add DOM event listeners\n        el.querySelector('.remote__item-delete').addEventListener('click', onUnregisterClick);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        el.querySelector('.remote__item-delete').removeEventListener('click', onUnregisterClick);\n        parentEl.removeChild(el);\n        parentEl = null;\n    },\n\n\n    /**\n     * Unassign button click handler.\n     * @param  {Object} e Click event object.\n     */\n    onUnregisterClick = function onUnregisterClick(e) {\n        store.dispatch(store.getActions().unassignExternalControl(processorID, paramKey));\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     * @param {Function} callback Not used here.\n     */\n    changeRemoteState = function changeRemoteState(state, callback) {\n        switch (state) {\n            case 'assigned':\n                // TODO: normale tekst\n                break;\n            case 'inactive':\n                // TODO: tekst grijs of zoiets\n                break;\n        }\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcz82ZWZmIl0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZUl0ZW1WaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJzdG9yZSIsInBhcmFtS2V5IiwicGFyYW1MYWJlbCIsInByb2Nlc3NvcklEIiwicmVtb3RlQ2hhbm5lbCIsInJlbW90ZUNDIiwicGFyZW50RWwiLCJlbCIsImluaXRpYWxpemUiLCJ0ZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lIiwiY29udGVudCIsImNsb25lTm9kZSIsImZpcnN0RWxlbWVudENoaWxkIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwib25VbnJlZ2lzdGVyQ2xpY2siLCJ0ZXJtaW5hdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwidW5hc3NpZ25FeHRlcm5hbENvbnRyb2wiLCJjaGFuZ2VSZW1vdGVTdGF0ZSIsInN0YXRlIiwiY2FsbGJhY2siXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUl3QkEsb0I7QUFKeEI7Ozs7QUFJZSxTQUFTQSxvQkFBVCxDQUE4QkMsS0FBOUIsRUFBcUNDLEVBQXJDLEVBQXlDO0FBQ3BELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxRQUFRSCxNQUFNRyxLQURsQjtBQUFBLFFBRUlDLFdBQVdKLE1BQU1JLFFBRnJCO0FBQUEsUUFHSUMsYUFBYUwsTUFBTUssVUFIdkI7QUFBQSxRQUlJQyxjQUFjTixNQUFNTSxXQUp4QjtBQUFBLFFBS0lDLGdCQUFnQlAsTUFBTU8sYUFMMUI7QUFBQSxRQU1JQyxXQUFXUixNQUFNUSxRQU5yQjtBQUFBLFFBT0lDLFdBQVdULE1BQU1TLFFBUHJCO0FBQUEsUUFRSUMsRUFSSjtBQUFBLFFBVUlDLGFBQWEsU0FBYkEsVUFBYSxHQUFXO0FBQ3BCO0FBQ0EsWUFBSUMsV0FBV0MsU0FBU0MsYUFBVCxDQUF1Qix1QkFBdkIsQ0FBZjtBQUNBLFlBQUlDLFFBQVFILFNBQVNJLE9BQVQsQ0FBaUJDLFNBQWpCLENBQTJCLElBQTNCLENBQVo7QUFDQVAsYUFBS0ssTUFBTUcsaUJBQVg7QUFDQVIsV0FBR0ksYUFBSCxDQUFpQixxQkFBakIsRUFBd0NLLFNBQXhDLEdBQW9EZCxVQUFwRDtBQUNBSyxXQUFHSSxhQUFILENBQWlCLHVCQUFqQixFQUEwQ0ssU0FBMUMsR0FBc0RaLGFBQXREO0FBQ0FHLFdBQUdJLGFBQUgsQ0FBaUIsdUJBQWpCLEVBQTBDSyxTQUExQyxHQUFzRFgsUUFBdEQ7QUFDQUMsaUJBQVNXLFdBQVQsQ0FBcUJWLEVBQXJCOztBQUVBO0FBQ0FBLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDTyxnQkFBekMsQ0FBMEQsT0FBMUQsRUFBbUVDLGlCQUFuRTtBQUNILEtBdEJMOzs7QUF3Qkk7OztBQUdBQyxnQkFBWSxTQUFaQSxTQUFZLEdBQVc7QUFDbkJiLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDVSxtQkFBekMsQ0FBNkQsT0FBN0QsRUFBc0VGLGlCQUF0RTtBQUNBYixpQkFBU2dCLFdBQVQsQ0FBcUJmLEVBQXJCO0FBQ0FELG1CQUFXLElBQVg7QUFDSCxLQS9CTDs7O0FBaUNJOzs7O0FBSUFhLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNJLENBQVQsRUFBWTtBQUM1QnZCLGNBQU13QixRQUFOLENBQWV4QixNQUFNeUIsVUFBTixHQUFtQkMsdUJBQW5CLENBQTJDdkIsV0FBM0MsRUFBd0RGLFFBQXhELENBQWY7QUFDSCxLQXZDTDs7O0FBeUNJOzs7Ozs7QUFNQTBCLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNDLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQTBCO0FBQzFDLGdCQUFRRCxLQUFSO0FBQ0ksaUJBQUssVUFBTDtBQUNJO0FBQ0E7QUFDSixpQkFBSyxVQUFMO0FBQ0k7QUFDQTtBQU5SO0FBUUgsS0F4REw7O0FBMERBN0IsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBUzs7QUFFQVQsU0FBS3FCLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsV0FBT3JCLElBQVA7QUFDSCIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmlldyBmb3IgYSBwYXJhbWV0ZXIgdGhhdCdzIGxpbmtlZCB0byBhIHJlbW90ZSBNSURJIGNvbnRyb2xsZXIuXG4gKiBUaGUgaXRlbXMgYXJlIGdyb3VwZWQgYnkgcHJvY2Vzc29yLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZW1vdGVJdGVtVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgcGFyYW1LZXkgPSBzcGVjcy5wYXJhbUtleSxcbiAgICAgICAgcGFyYW1MYWJlbCA9IHNwZWNzLnBhcmFtTGFiZWwsXG4gICAgICAgIHByb2Nlc3NvcklEID0gc3BlY3MucHJvY2Vzc29ySUQsXG4gICAgICAgIHJlbW90ZUNoYW5uZWwgPSBzcGVjcy5yZW1vdGVDaGFubmVsLFxuICAgICAgICByZW1vdGVDQyA9IHNwZWNzLnJlbW90ZUNDLFxuICAgICAgICBwYXJlbnRFbCA9IHNwZWNzLnBhcmVudEVsLFxuICAgICAgICBlbCxcbiAgICAgICAgXG4gICAgICAgIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQuXG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtcmVtb3RlLWl0ZW0nKTtcbiAgICAgICAgICAgIGxldCBjbG9uZSA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgZWwgPSBjbG9uZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2l0ZW0tbGFiZWwnKS5pbm5lckhUTUwgPSBwYXJhbUxhYmVsO1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1jaGFubmVsJykuaW5uZXJIVE1MID0gcmVtb3RlQ2hhbm5lbDtcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2l0ZW0tY29udHJvbCcpLmlubmVySFRNTCA9IHJlbW90ZUNDO1xuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhZGQgRE9NIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1kZWxldGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uVW5yZWdpc3RlckNsaWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgYmVmb3JlIHRoaXMgdmlldyBpcyBkZWxldGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGVybWluYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWRlbGV0ZScpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25VbnJlZ2lzdGVyQ2xpY2spO1xuICAgICAgICAgICAgcGFyZW50RWwucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgcGFyZW50RWwgPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuYXNzaWduIGJ1dHRvbiBjbGljayBoYW5kbGVyLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGUgQ2xpY2sgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgb25VbnJlZ2lzdGVyQ2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzdG9yZS5nZXRBY3Rpb25zKCkudW5hc3NpZ25FeHRlcm5hbENvbnRyb2wocHJvY2Vzc29ySUQsIHBhcmFtS2V5KSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RhdGUgb2YgdGhlIHBhcmFtZXRlciBpbiB0aGUgYXNzaWdubWVudCBwcm9jZXNzIGNoYW5nZWQsXG4gICAgICAgICAqIHRoZSBlbGVtZW50IHdpbGwgc2hvdyB0aGlzIHZpc3VhbGx5LlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgTmV3IHN0YXRlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIE5vdCB1c2VkIGhlcmUuXG4gICAgICAgICAqL1xuICAgICAgICBjaGFuZ2VSZW1vdGVTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Fzc2lnbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogbm9ybWFsZSB0ZWtzdFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdpbmFjdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHRla3N0IGdyaWpzIG9mIHpvaWV0c1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgaW5pdGlhbGl6ZSgpO1xuXG4gICAgdGhhdC50ZXJtaW5hdGUgPSB0ZXJtaW5hdGU7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createSequencer = createSequencer;\nexports.default = createTransport;\n/**\n * Timing, transport and sequencing functionality.\n * Divided in two sets of functionality, Transport and Sequencer.\n * \n * Unix epoch,                page    AudioContext   Transport        now,\n * 01-01-1970 00:00:00 UTC    load    created        start            the present\n *  |                          |       |              |                | \n *  |--------------------------|-------|-------//-----|--------//------|\n *  \n *  |------------------------------------------------------------------> Date.now()\n *                             |---------------------------------------> performance.now()\n *                                     |-------------------------------> AudioContext.currentTime\n */\n\n/**\n * @description Creates sequencer functionality.\n * Takes time from transport to get music events from arrangement and\n * drives components that process music events.\n * @param {Object} specs External specifications.\n * @param {Object} my Internally shared properties.\n */\nfunction createSequencer(specs, my) {\n    var that,\n        canvasView = specs.canvasView,\n        midiNetwork = specs.midiNetwork,\n        ppqn = 480,\n        bpm = 120,\n        lastBpm = bpm,\n        tickInMilliseconds,\n        audioContextOffset = 0,\n        timelineOffset = 0,\n        playbackQueue = [],\n        renderThrottleCounter = 0,\n        processorEvents = {},\n\n\n    /**\n     * Scan the arrangement for events and send them to concerned components.\n     * @param {Number} scanStart Start in ms of timespan to scan.\n     * @param {Number} scanEnd End in ms of timespan to scan.\n     * @param {Number} nowToScanStart Duration from now until start time in ms.\n     * @param {Number} offset Position of transport playhead in ms.\n     */\n    scanEvents = function scanEvents(scanStart, scanEnd, nowToScanStart, offset) {\n        midiNetwork.process(msec2tick(scanStart), msec2tick(scanEnd), msec2tick(nowToScanStart), tickInMilliseconds, msec2tick(offset), processorEvents);\n    },\n\n\n    /**\n     * Use Timing's requestAnimationFrame as clock for view updates.\n     * @param {Number} position Timing position, equal to performance.now(). \n     */\n    updateView = function updateView(position) {\n        if (renderThrottleCounter % 2 === 0) {\n            canvasView.draw(msec2tick(position), processorEvents);\n            Object.keys(processorEvents).forEach(function (v) {\n                return processorEvents[v] = [];\n            });\n        }\n        renderThrottleCounter++;\n    },\n\n\n    /**\n     * Convert milliseconds to ticks.\n     */\n    msec2tick = function msec2tick(sec) {\n        return sec / tickInMilliseconds;\n    },\n\n\n    /**\n     * Convert ticks to milliseconds.\n     */\n    tick2msec = function tick2msec(tick) {\n        return tick * tickInMilliseconds;\n    },\n\n\n    /**\n     * Set Beats Per Minute.\n     * @param {Number} newBpm New value for BPM.\n     */\n    setBPM = function setBPM() {\n        var newBpm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 120;\n\n        bpm = newBpm;\n        var beatInMilliseconds = 60000.0 / bpm;\n        tickInMilliseconds = beatInMilliseconds / ppqn;\n        // calculate change factor\n        var factor = lastBpm / bpm;\n        my.setLoopByFactor(factor);\n    },\n\n\n    /**\n     * Get Beats Per Minute of the project.\n     * @return [Number] Beats Per Minute.\n     */\n    getBPM = function getBPM() {\n        return bpm;\n    },\n\n\n    /**\n     * Set difference between AudioContext.currentTime and performance.now.\n     * Used to convert timing for AudioContext playback.\n     * @param {Number} acCurrentTime Timestamp in seconds.\n     */\n    setAudioContextOffset = function setAudioContextOffset(acCurrentTime) {\n        audioContextOffset = performance.now() - acCurrentTime * 1000;\n    };\n\n    my = my || {};\n    my.setBPM = setBPM;\n    my.store = specs.store;\n    my.scanEvents = scanEvents;\n    my.updateView = updateView;\n\n    that = specs.that || {};\n\n    that.setBPM = setBPM;\n    that.getBPM = getBPM;\n    that.setAudioContextOffset = setAudioContextOffset;\n    return that;\n}\n\n/**\n * Functionality to add synchronisation to external MIDI clock.\n * MIDI clock sends clock events at 24 ppqn.\n * @see https://en.wikipedia.org/wiki/MIDI_beat_clock\n * \n * The MIDI 'start' and 'stop' events just start and stop the transport.\n * The MIDI 'clock' event adjusts the BPM tempo.\n * \n * BPM is calculated with the time difference between clock event timestamps.\n */\nfunction createExternalClock(specs, my) {\n    var that,\n        isEnabled = false,\n        midiInput,\n        prevBPM = 0,\n        prevTimestamp = 0,\n        updateTimeout,\n\n\n    /**\n     * Enable synchronisation to external MIDI clock.\n     * @param {Boolean} isEnabled True to synchronise to external MIDI clock.\n     * @param {Object} midiInputPort MIDI input port.\n     */\n    setExternalClockEnabled = function setExternalClockEnabled(isEnabled, midiInputPort) {\n        if (isEnabled) {\n            midiInput = midiInputPort;\n            midiInput.addListener('start', 1, onStart);\n            midiInput.addListener('stop', 1, onStop);\n            midiInput.addListener('clock', 1, onClock);\n        } else {\n            if (midiInput) {\n                midiInput.removeListener('start', onStart);\n                midiInput.removeListener('stop', onStop);\n                midiInput.removeListener('clock', onClock);\n            }\n            midiInput = null;\n        }\n    },\n\n\n    /**\n     * Start transport.\n     */\n    onStart = function onStart() {\n        that.start();\n    },\n\n\n    /**\n     * Stop transport.\n     */\n    onStop = function onStop() {\n        that.pause();\n        that.rewind();\n    },\n\n\n    /**\n     * Convert events at 24 ppqn to BPM, suppress jitter from unstable clocks.\n     * @param {Object} e Event from WebMIDI.js.\n     */\n    onClock = function onClock(e) {\n        if (prevTimestamp > 0) {\n            var newBPM = 60000 / ((e.timestamp - prevTimestamp) * 24);\n            var bpm = prevBPM ? (prevBPM * 23 + newBPM) / 24 : newBPM;\n            prevBPM = bpm;\n            bpm = bpm.toFixed(1);\n            if (bpm != that.getBPM()) {\n                updateTempo(bpm);\n            }\n        }\n        prevTimestamp = e.timestamp;\n    },\n\n\n    /**\n     * Update tempo no more than once every 500ms.\n     * @param {Number} bpm The new changed BPM.\n     */\n    updateTempo = function updateTempo(bpm) {\n        if (!updateTimeout) {\n            that.setBPM(bpm);\n            updateTimeout = setTimeout(function () {\n                updateTimeout = 0;\n            }, 500);\n        }\n    };\n\n    that = specs.that || {};\n\n    that.setExternalClockEnabled = setExternalClockEnabled;\n    return that;\n}\n\n/**\n * @description Creates transport timing functionality.\n * Time is always measured in milliseconds since document load.\n * The timer can be started, stopped, rewound to zero and looped.\n * It defines a scan range that is just ahead of the play position\n * and that is meant to be used to scan for events to play.\n * @param {Object} specs Options.\n * @param {Object} my Properties shared between the functionalities of the object.\n */\nfunction createTransport(specs, my) {\n    var that,\n        position = 0,\n        origin = 0,\n        scanStart = 0,\n        scanEnd = 0,\n        lookAhead = 200,\n        loopStart = 0,\n        loopEnd = 0,\n        isRunning = false,\n        isLooping = false,\n        needsScan = false,\n        init = function init() {\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_TRANSPORT:\n                    switch (e.detail.state.transport) {\n                        case 'pause':\n                            pause();\n                            break;\n                        case 'play':\n                            rewind();\n                            start();\n                            break;\n                        case 'stop':\n                            pause();\n                            rewind();\n                            break;\n                    }\n                    break;\n\n                case e.detail.actions.CREATE_PROJECT:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n            }\n        });\n\n        my.setBPM();\n    },\n\n\n    /**\n     * Set the scan range.\n     * @param {Number} start Start timestamp of scan range.\n     */\n    setScanRange = function setScanRange(start) {\n        scanStart = start;\n        scanEnd = scanStart + lookAhead;\n        needsScan = true;\n    },\n\n\n    /**\n     * Updated the playhead position by adjusting the timeline origin.\n     * @param {Number} newOrigin Timeline origin timestamp.\n     */\n    setOrigin = function setOrigin(newOrigin) {\n        loopStart = loopStart - origin + newOrigin;\n        loopEnd = loopEnd - origin + newOrigin;\n        origin = newOrigin;\n    },\n\n\n    /**\n     * Timer using requestAnimationFrame that updates the transport timing.\n     */\n    run = function run() {\n        if (isRunning) {\n            position = performance.now();\n            if (isLooping && position < loopEnd && scanStart < loopEnd && scanEnd > loopEnd) {\n                setOrigin(origin + (loopEnd - loopStart));\n            }\n            if (scanEnd - position < 16.7) {\n                setScanRange(scanEnd);\n            }\n            if (needsScan) {\n                needsScan = false;\n                my.scanEvents(scanStart - origin, scanEnd - origin, scanStart - position, position - origin);\n            }\n        }\n        my.updateView(position - origin);\n        requestAnimationFrame(run);\n    },\n\n\n    /**\n     * Start the timer.\n     */\n    start = function start() {\n        var offset = position - origin;\n        position = performance.now();\n        setOrigin(position - offset);\n        setScanRange(position);\n        isRunning = true;\n    },\n\n\n    /**\n     * Pause the timer.\n     */\n    pause = function pause() {\n        isRunning = false;\n    },\n\n\n    /**\n     * Rewind the timer to timeline start.\n     */\n    rewind = function rewind() {\n        position = performance.now();\n        setOrigin(position);\n        setScanRange(position);\n    },\n\n\n    /**\n     * Toggle between stop and play.\n     */\n    toggleStartStop = function toggleStartStop() {\n        if (isRunning) {\n            pause();\n        } else {\n            rewind();\n            start();\n        }\n    },\n\n\n    /**\n     * Set loop startpoint.\n     * @param {Number} position Loop start timestamp.\n     */\n    setLoopStart = function setLoopStart(position) {\n        loopStart = origin + position;\n    },\n\n\n    /**\n     * Set loop endpoint.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoopEnd = function setLoopEnd(position) {\n        loopEnd = origin + position;\n    },\n\n\n    /**\n     * Set loop mode.\n     * @param {Boolean} isEnabled True to enable looping.\n     * @param {Number} position Loop start timestamp.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoop = function setLoop(isEnabled, startPosition, endPosition) {\n        isLooping = isEnabled;\n    },\n\n\n    /**\n     * Change loop points by a factor if the tempo changes.\n     * @param {number} factor Time points multiplier.\n     */\n    setLoopByFactor = function setLoopByFactor(factor) {\n        setLoopStart(loopStart * factor);\n        setLoopEnd(loopEnd * factor);\n    };\n\n    my = my || {};\n    my.setLoopByFactor = setLoopByFactor;\n\n    that = createSequencer(specs, my);\n    that = createExternalClock(specs, my);\n\n    init();\n\n    that.run = run;\n\n    return that;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ })
/******/ ]);