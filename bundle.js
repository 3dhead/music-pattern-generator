/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getConfig = getConfig;\nexports.setConfig = setConfig;\n/**\n * Unchangeable application configuration settings.\n * \n * Config saves the ports settings off all ports \n * that have ever been connected.\n */\nvar PPQN = exports.PPQN = 480;\n\nvar name = 'config';\n\nfunction getConfig() {\n    var data = localStorage.getItem(name);\n    return data ? JSON.parse(data) : {};\n}\n\nfunction setConfig(state) {\n\n    var config = getConfig();\n    var data = {\n        theme: state.theme\n    };\n\n    if (config && config.ports) {\n\n        // update the existing config with new data from the current state\n        var ports = config.ports;\n        state.ports.allIds.forEach(function (statePortID) {\n            var portExistsInConfig = false;\n            config.ports.allIds.forEach(function (configPortID) {\n                if (configPortID === statePortID) {\n                    portExistsInConfig = true;\n\n                    // update port if it exists\n                    var configPort = config.ports.byId[configPortID];\n                    var statePort = state.ports.byId[statePortID];\n                    configPort.syncEnabled = statePort.syncEnabled;\n                    configPort.remoteEnabled = statePort.remoteEnabled;\n                    configPort.networkEnabled = statePort.networkEnabled;\n                }\n            });\n\n            // add port if it doesn't exist yet\n            if (!portExistsInConfig) {\n                config.ports.allIds.push(statePortID);\n                config.ports.byId[statePortID] = state.ports.byId[statePortID];\n            }\n        });\n        data.ports = config.ports;\n    } else {\n        data.ports = state.ports;\n    }\n\n    localStorage.setItem(name, JSON.stringify(data));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS9jb25maWcuanM/ZDg1NiJdLCJuYW1lcyI6WyJnZXRDb25maWciLCJzZXRDb25maWciLCJQUFFOIiwibmFtZSIsImRhdGEiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwic3RhdGUiLCJjb25maWciLCJ0aGVtZSIsInBvcnRzIiwiYWxsSWRzIiwiZm9yRWFjaCIsInBvcnRFeGlzdHNJbkNvbmZpZyIsImNvbmZpZ1BvcnRJRCIsInN0YXRlUG9ydElEIiwiY29uZmlnUG9ydCIsImJ5SWQiLCJzdGF0ZVBvcnQiLCJzeW5jRW5hYmxlZCIsInJlbW90ZUVuYWJsZWQiLCJuZXR3b3JrRW5hYmxlZCIsInB1c2giLCJzZXRJdGVtIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7OztRQVVnQkEsUyxHQUFBQSxTO1FBS0FDLFMsR0FBQUEsUztBQWZoQjs7Ozs7O0FBTU8sSUFBTUMsc0JBQU8sR0FBYjs7QUFFUCxJQUFNQyxPQUFPLFFBQWI7O0FBRU8sU0FBU0gsU0FBVCxHQUFxQjtBQUN4QixRQUFNSSxPQUFPQyxhQUFhQyxPQUFiLENBQXFCSCxJQUFyQixDQUFiO0FBQ0EsV0FBT0MsT0FBT0csS0FBS0MsS0FBTCxDQUFXSixJQUFYLENBQVAsR0FBMEIsRUFBakM7QUFDSDs7QUFFTSxTQUFTSCxTQUFULENBQW1CUSxLQUFuQixFQUEwQjs7QUFFN0IsUUFBTUMsU0FBU1YsV0FBZjtBQUNBLFFBQUlJLE9BQU87QUFDUE8sZUFBT0YsTUFBTUU7QUFETixLQUFYOztBQUlBLFFBQUlELFVBQVVBLE9BQU9FLEtBQXJCLEVBQTRCOztBQUV4QjtBQUNBLFlBQU1BLFFBQVFGLE9BQU9FLEtBQXJCO0FBQ0FILGNBQU1HLEtBQU4sQ0FBWUMsTUFBWixDQUFtQkMsT0FBbkIsQ0FBMkIsdUJBQWU7QUFDdEMsZ0JBQUlDLHFCQUFxQixLQUF6QjtBQUNBTCxtQkFBT0UsS0FBUCxDQUFhQyxNQUFiLENBQW9CQyxPQUFwQixDQUE0Qix3QkFBZ0I7QUFDeEMsb0JBQUlFLGlCQUFpQkMsV0FBckIsRUFBa0M7QUFDOUJGLHlDQUFxQixJQUFyQjs7QUFFQTtBQUNBLHdCQUFNRyxhQUFhUixPQUFPRSxLQUFQLENBQWFPLElBQWIsQ0FBa0JILFlBQWxCLENBQW5CO0FBQ0Esd0JBQU1JLFlBQVlYLE1BQU1HLEtBQU4sQ0FBWU8sSUFBWixDQUFpQkYsV0FBakIsQ0FBbEI7QUFDQUMsK0JBQVdHLFdBQVgsR0FBeUJELFVBQVVDLFdBQW5DO0FBQ0FILCtCQUFXSSxhQUFYLEdBQTJCRixVQUFVRSxhQUFyQztBQUNBSiwrQkFBV0ssY0FBWCxHQUE0QkgsVUFBVUcsY0FBdEM7QUFDSDtBQUNKLGFBWEQ7O0FBYUE7QUFDQSxnQkFBSSxDQUFDUixrQkFBTCxFQUF5QjtBQUNyQkwsdUJBQU9FLEtBQVAsQ0FBYUMsTUFBYixDQUFvQlcsSUFBcEIsQ0FBeUJQLFdBQXpCO0FBQ0FQLHVCQUFPRSxLQUFQLENBQWFPLElBQWIsQ0FBa0JGLFdBQWxCLElBQWlDUixNQUFNRyxLQUFOLENBQVlPLElBQVosQ0FBaUJGLFdBQWpCLENBQWpDO0FBQ0g7QUFDSixTQXBCRDtBQXFCQWIsYUFBS1EsS0FBTCxHQUFhRixPQUFPRSxLQUFwQjtBQUNILEtBMUJELE1BMEJPO0FBQ0hSLGFBQUtRLEtBQUwsR0FBYUgsTUFBTUcsS0FBbkI7QUFDSDs7QUFFRFAsaUJBQWFvQixPQUFiLENBQXFCdEIsSUFBckIsRUFBMkJJLEtBQUttQixTQUFMLENBQWV0QixJQUFmLENBQTNCO0FBQ0giLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVW5jaGFuZ2VhYmxlIGFwcGxpY2F0aW9uIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MuXG4gKiBcbiAqIENvbmZpZyBzYXZlcyB0aGUgcG9ydHMgc2V0dGluZ3Mgb2ZmIGFsbCBwb3J0cyBcbiAqIHRoYXQgaGF2ZSBldmVyIGJlZW4gY29ubmVjdGVkLlxuICovXG5leHBvcnQgY29uc3QgUFBRTiA9IDQ4MDtcblxuY29uc3QgbmFtZSA9ICdjb25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlnKCkge1xuICAgIGNvbnN0IGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKVxuICAgIHJldHVybiBkYXRhID8gSlNPTi5wYXJzZShkYXRhKSA6IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29uZmlnKHN0YXRlKSB7XG4gICAgXG4gICAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG4gICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIHRoZW1lOiBzdGF0ZS50aGVtZVxuICAgIH07XG5cbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5wb3J0cykge1xuICAgICAgICBcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBleGlzdGluZyBjb25maWcgd2l0aCBuZXcgZGF0YSBmcm9tIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICAgIGNvbnN0IHBvcnRzID0gY29uZmlnLnBvcnRzO1xuICAgICAgICBzdGF0ZS5wb3J0cy5hbGxJZHMuZm9yRWFjaChzdGF0ZVBvcnRJRCA9PiB7XG4gICAgICAgICAgICBsZXQgcG9ydEV4aXN0c0luQ29uZmlnID0gZmFsc2U7XG4gICAgICAgICAgICBjb25maWcucG9ydHMuYWxsSWRzLmZvckVhY2goY29uZmlnUG9ydElEID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnUG9ydElEID09PSBzdGF0ZVBvcnRJRCkge1xuICAgICAgICAgICAgICAgICAgICBwb3J0RXhpc3RzSW5Db25maWcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBwb3J0IGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWdQb3J0ID0gY29uZmlnLnBvcnRzLmJ5SWRbY29uZmlnUG9ydElEXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVQb3J0ID0gc3RhdGUucG9ydHMuYnlJZFtzdGF0ZVBvcnRJRF07XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1BvcnQuc3luY0VuYWJsZWQgPSBzdGF0ZVBvcnQuc3luY0VuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1BvcnQucmVtb3RlRW5hYmxlZCA9IHN0YXRlUG9ydC5yZW1vdGVFbmFibGVkO1xuICAgICAgICAgICAgICAgICAgICBjb25maWdQb3J0Lm5ldHdvcmtFbmFibGVkID0gc3RhdGVQb3J0Lm5ldHdvcmtFbmFibGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBhZGQgcG9ydCBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgICAgaWYgKCFwb3J0RXhpc3RzSW5Db25maWcpIHtcbiAgICAgICAgICAgICAgICBjb25maWcucG9ydHMuYWxsSWRzLnB1c2goc3RhdGVQb3J0SUQpO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5wb3J0cy5ieUlkW3N0YXRlUG9ydElEXSA9IHN0YXRlLnBvcnRzLmJ5SWRbc3RhdGVQb3J0SURdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkYXRhLnBvcnRzID0gY29uZmlnLnBvcnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEucG9ydHMgPSBzdGF0ZS5wb3J0cztcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShuYW1lLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG59IFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9jb3JlL2NvbmZpZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.memoize = memoize;\nexports.getThemeColors = getThemeColors;\nvar themeColors = {};\n\nfunction memoize(state) {\n    var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var actions = arguments[2];\n\n    switch (action.type) {\n\n        case actions.CREATE_PROJECT:\n        case actions.SET_THEME:\n            document.querySelector('#app').dataset.theme = state.theme;\n            var themeStyles = window.getComputedStyle(document.querySelector('[data-theme]'));\n            themeColors.colorHigh = themeStyles.getPropertyValue('--text-color');\n            themeColors.colorMid = themeStyles.getPropertyValue('--border-color');\n            themeColors.colorLow = themeStyles.getPropertyValue('--panel-bg-color');\n            break;\n    }\n}\n\n/**\n * Memoised selector to access processors by id as object key.\n * Recreates the memoised data each time a processor is created or deleted.\n */\nfunction getThemeColors() {\n    return themeColors;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc2VsZWN0b3JzLmpzPzFmY2MiXSwibmFtZXMiOlsibWVtb2l6ZSIsImdldFRoZW1lQ29sb3JzIiwidGhlbWVDb2xvcnMiLCJzdGF0ZSIsImFjdGlvbiIsImFjdGlvbnMiLCJ0eXBlIiwiQ1JFQVRFX1BST0pFQ1QiLCJTRVRfVEhFTUUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhc2V0IiwidGhlbWUiLCJ0aGVtZVN0eWxlcyIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJjb2xvckhpZ2giLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY29sb3JNaWQiLCJjb2xvckxvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFFZ0JBLE8sR0FBQUEsTztRQWtCQUMsYyxHQUFBQSxjO0FBcEJoQixJQUFNQyxjQUFjLEVBQXBCOztBQUVPLFNBQVNGLE9BQVQsQ0FBaUJHLEtBQWpCLEVBQThDO0FBQUEsUUFBdEJDLE1BQXNCLHVFQUFiLEVBQWE7QUFBQSxRQUFUQyxPQUFTOztBQUNqRCxZQUFRRCxPQUFPRSxJQUFmOztBQUVJLGFBQUtELFFBQVFFLGNBQWI7QUFDQSxhQUFLRixRQUFRRyxTQUFiO0FBQ0lDLHFCQUFTQyxhQUFULENBQXVCLE1BQXZCLEVBQStCQyxPQUEvQixDQUF1Q0MsS0FBdkMsR0FBK0NULE1BQU1TLEtBQXJEO0FBQ0EsZ0JBQU1DLGNBQWNDLE9BQU9DLGdCQUFQLENBQXdCTixTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBQXhCLENBQXBCO0FBQ0FSLHdCQUFZYyxTQUFaLEdBQXdCSCxZQUFZSSxnQkFBWixDQUE2QixjQUE3QixDQUF4QjtBQUNBZix3QkFBWWdCLFFBQVosR0FBdUJMLFlBQVlJLGdCQUFaLENBQTZCLGdCQUE3QixDQUF2QjtBQUNBZix3QkFBWWlCLFFBQVosR0FBdUJOLFlBQVlJLGdCQUFaLENBQTZCLGtCQUE3QixDQUF2QjtBQUNBO0FBVFI7QUFXSDs7QUFFRDs7OztBQUlPLFNBQVNoQixjQUFULEdBQTBCO0FBQzdCLFdBQU9DLFdBQVA7QUFDSCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGhlbWVDb2xvcnMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemUoc3RhdGUsIGFjdGlvbiA9IHt9LCBhY3Rpb25zKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuXG4gICAgICAgIGNhc2UgYWN0aW9ucy5DUkVBVEVfUFJPSkVDVDpcbiAgICAgICAgY2FzZSBhY3Rpb25zLlNFVF9USEVNRTpcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhcHAnKS5kYXRhc2V0LnRoZW1lID0gc3RhdGUudGhlbWU7XG4gICAgICAgICAgICBjb25zdCB0aGVtZVN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRoZW1lXScpKTtcbiAgICAgICAgICAgIHRoZW1lQ29sb3JzLmNvbG9ySGlnaCA9IHRoZW1lU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJy0tdGV4dC1jb2xvcicpO1xuICAgICAgICAgICAgdGhlbWVDb2xvcnMuY29sb3JNaWQgPSB0aGVtZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLWJvcmRlci1jb2xvcicpO1xuICAgICAgICAgICAgdGhlbWVDb2xvcnMuY29sb3JMb3cgPSB0aGVtZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCctLXBhbmVsLWJnLWNvbG9yJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbi8qKlxuICogTWVtb2lzZWQgc2VsZWN0b3IgdG8gYWNjZXNzIHByb2Nlc3NvcnMgYnkgaWQgYXMgb2JqZWN0IGtleS5cbiAqIFJlY3JlYXRlcyB0aGUgbWVtb2lzZWQgZGF0YSBlYWNoIHRpbWUgYSBwcm9jZXNzb3IgaXMgY3JlYXRlZCBvciBkZWxldGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhlbWVDb2xvcnMoKSB7XG4gICAgcmV0dXJuIHRoZW1lQ29sb3JzO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3N0YXRlL3NlbGVjdG9ycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBaseSettingView;\n\nvar _remote = __webpack_require__(30);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createBaseSettingView(specs, my) {\n    var that,\n        initialise = function initialise() {\n        // find template, add clone to settings panel\n        var template = document.querySelector('#template-setting-' + my.data.type);\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        specs.parentEl.appendChild(my.el);\n\n        // show label\n        my.el.querySelector('.setting__label').innerHTML = my.data.label;\n\n        if (my.data.isMidiControllable) {\n            my.changeRemoteState(specs.store.getState());\n        }\n\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.setValue(e.detail.state.processors.byId[my.processorID].params.byId[my.key].value);\n                }\n                break;\n\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.processorID && e.detail.action.paramKey === my.key) {\n                    my.data = e.detail.state.processors.byId[my.processorID].params.byId[my.key];\n                    my.initData();\n                    my.setValue(e.detail.state.processors.byId[my.processorID].params.byId[my.key].value);\n                }\n                break;\n\n            case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n            case e.detail.actions.TOGGLE_MIDI_LEARN_TARGET:\n            case e.detail.actions.SELECT_PROCESSOR:\n            case e.detail.actions.DELETE_PROCESSOR:\n            case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n            case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                if (my.data.isMidiControllable) {\n                    my.changeRemoteState(e.detail.state);\n                }\n                break;\n        }\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.key = specs.key;\n    my.data = specs.data;\n    my.processorID = specs.processorID;\n    my.el;\n\n    that = that || {};\n    if (my.data.isMidiControllable) {\n        that = (0, _remote2.default)(specs, my);\n    }\n\n    initialise();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDI;\nexports.getMIDIPortByID = getMIDIPortByID;\nexports.getAllMIDIPorts = getAllMIDIPorts;\nvar midiAccess = void 0;\n\nfunction createMIDI(specs) {\n    var that,\n        store = specs.store,\n        syncListeners = [],\n        remoteListeners = [],\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n\n                case e.detail.actions.CREATE_MIDI_PORT:\n                case e.detail.actions.UPDATE_MIDI_PORT:\n                    updateMIDISyncListeners(e.detail.state.ports);\n                    updateMIDIRemoteListeners(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n        connect = function connect() {\n        return new Promise(function (resolve, reject) {\n            requestAccess(resolve, reject, false);\n        });\n    },\n\n\n    /**\n     * Request system for access to MIDI ports.\n     * @param {function} successCallback\n     * @param {function} failureCallback\n     * @param {boolean} sysex True if sysex data must be included.\n     */\n    requestAccess = function requestAccess(successCallback, failureCallback, sysex) {\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess({\n                sysex: !!sysex\n            }).then(function (_midiAccess) {\n                if (!_midiAccess.inputs.size && !_midiAccess.outputs.size) {\n                    onAccessFailure('No MIDI devices found on this system.');\n                } else {\n                    onAccessSuccess(_midiAccess);\n                    successCallback();\n                }\n            }, function () {\n                failureCallback('Request for MIDI access failed.');\n            });\n        } else {\n            failureCallback('Web MIDI API not available.');\n        }\n    },\n\n\n    /**\n     * MIDI access request failed.\n     * @param {String} errorMessage\n     */\n    onAccessFailure = function onAccessFailure(errorMessage) {\n        console.log(errorMessage);\n    },\n\n\n    /**\n     * MIDI access request succeeded.\n     * @param {Object} midiAccessObj MidiAccess object.\n     */\n    onAccessSuccess = function onAccessSuccess(_midiAccess) {\n        console.log('MIDI enabled.');\n        midiAccess = _midiAccess;\n\n        var inputs = midiAccess.inputs.values();\n        var outputs = midiAccess.outputs.values();\n\n        for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n            port.value.onmidimessage = onMIDIMessage;\n        }\n\n        midiAccess.onstatechange = onAccessStateChange;\n    },\n\n\n    /**\n     * MIDIAccess object statechange handler.\n     * If the change is the addition of a new port, create a port module.\n     * This handles MIDI devices that are connected after the app initialisation.\n     * Disconnected or reconnected ports are handled by the port modules.\n     * \n     * If this is\n     * @param {Object} e MIDIConnectionEvent object.\n     */\n    onAccessStateChange = function onAccessStateChange(e) {\n        store.dispatch(store.getActions().midiAccessChange(e.port));\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDISyncListeners = function updateMIDISyncListeners(ports) {\n        syncListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.syncEnabled) {\n                syncListeners.push(port.id);\n            }\n        });\n    },\n\n\n    /**\n     * Listen to enabled MIDI input ports.\n     */\n    updateMIDIRemoteListeners = function updateMIDIRemoteListeners(ports) {\n        remoteListeners = [];\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            if (port.remoteEnabled) {\n                remoteListeners.push(port.id);\n            }\n        });\n    },\n        onMIDIMessage = function onMIDIMessage(e) {\n        // console.log(e.data[0] & 0xf0, e.data[0] & 0x0f, e.target.id, e.data[0], e.data[1], e.data[2]);\n        switch (e.data[0] & 0xf0) {\n            case 240:\n                onSystemRealtimeMessage(e);\n                break;\n            case 176:\n                // CC\n                onControlChangeMessage(e);\n                break;\n            case 144: // note on\n            case 128:\n                // note off\n                // onNoteMessage(e);\n                break;\n        }\n    },\n\n\n    /**\n     * Eventlistener for incoming MIDI messages.\n     * data[1] and data[2] are undefined,\n     * for e.data[0] & 0xf:\n     * 8 = clock, 248 (11110000 | 00000100)\n     * 10 = start\n     * 11 = continue\n     * 12 = stop\n     * @see https://www.w3.org/TR/webmidi/#idl-def-MIDIMessageEvent\n     * @see https://www.midi.org/specifications/item/table-1-summary-of-midi-message\n     * @param  {Object} e MIDIMessageEvent event.\n     */\n    onSystemRealtimeMessage = function onSystemRealtimeMessage(e) {\n        if (syncListeners.indexOf(e.target.id) > -1) {\n            switch (e.data[0]) {\n                case 248:\n                    // clock\n                    break;\n                case 250:\n                    // start\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 251:\n                    // continue\n                    store.dispatch(store.getActions().setTransport('play'));\n                    break;\n                case 252:\n                    // stop\n                    store.dispatch(store.getActions().setTransport('pause'));\n                    break;\n            }\n        }\n    },\n        onControlChangeMessage = function onControlChangeMessage(e) {\n        if (remoteListeners.indexOf(e.target.id) > -1) {\n            store.dispatch(store.getActions().receiveMIDIControlChange(e.data));\n        }\n    };\n\n    that = specs.that;\n\n    init();\n\n    that.connect = connect;\n    return that;\n}\n\nfunction getMIDIPortByID(id) {\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        if (port.value.id === id) {\n            return port.value;\n        }\n    }\n\n    for (var _port = outputs.next(); _port && !_port.done; _port = outputs.next()) {\n        if (_port.value.id === id) {\n            return _port.value;\n        }\n    }\n}\n\n/**\n * Get all MIDI input and output ports.\n * @returns {Array} Array of all ports.\n */\nfunction getAllMIDIPorts() {\n    var allPorts = [];\n    var inputs = midiAccess.inputs.values();\n    var outputs = midiAccess.outputs.values();\n\n    for (var port = inputs.next(); port && !port.done; port = inputs.next()) {\n        allPorts.push(port.value);\n    }\n\n    for (var _port2 = outputs.next(); _port2 && !_port2.done; _port2 = outputs.next()) {\n        allPorts.push(_port2.value);\n    }\n\n    return allPorts;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIProcessorBase;\n\nvar _connectorin = __webpack_require__(22);\n\nvar _connectorin2 = _interopRequireDefault(_connectorin);\n\nvar _connectorout = __webpack_require__(23);\n\nvar _connectorout2 = _interopRequireDefault(_connectorout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base functionality for all MIDI processors.\n */\nfunction createMIDIProcessorBase(specs, my) {\n    var that,\n        getType = function getType() {\n        return my.type;\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.type = specs.data.type;\n    my.id = specs.data.id;\n\n    that = specs.that || {};\n    if (specs.data.inputs.allIds.length >= 1) {\n        that = (0, _connectorin2.default)(specs, my);\n    }\n    if (specs.data.outputs.allIds.length >= 1) {\n        that = (0, _connectorout2.default)(specs, my);\n    }\n    that.getType = getType;\n    that.getID = getID;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9wcm9jZXNzb3JiYXNlLmpzP2I3YmUiXSwibmFtZXMiOlsiY3JlYXRlTUlESVByb2Nlc3NvckJhc2UiLCJzcGVjcyIsIm15IiwidGhhdCIsImdldFR5cGUiLCJ0eXBlIiwiZ2V0SUQiLCJpZCIsImRhdGEiLCJpbnB1dHMiLCJhbGxJZHMiLCJsZW5ndGgiLCJvdXRwdXRzIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHVCOztBQU54Qjs7OztBQUNBOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsdUJBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDQyxFQUF4QyxFQUE0QztBQUN2RCxRQUFJQyxJQUFKO0FBQUEsUUFFSUMsVUFBVSxTQUFWQSxPQUFVLEdBQVc7QUFDakIsZUFBT0YsR0FBR0csSUFBVjtBQUNILEtBSkw7QUFBQSxRQU1JQyxRQUFRLFNBQVJBLEtBQVEsR0FBVztBQUNmLGVBQU9KLEdBQUdLLEVBQVY7QUFDSCxLQVJMOztBQVVBTCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0csSUFBSCxHQUFVSixNQUFNTyxJQUFOLENBQVdILElBQXJCO0FBQ0FILE9BQUdLLEVBQUgsR0FBUU4sTUFBTU8sSUFBTixDQUFXRCxFQUFuQjs7QUFFQUosV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCO0FBQ0EsUUFBSUYsTUFBTU8sSUFBTixDQUFXQyxNQUFYLENBQWtCQyxNQUFsQixDQUF5QkMsTUFBekIsSUFBbUMsQ0FBdkMsRUFBMEM7QUFDdENSLGVBQU8sMkJBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDtBQUNIO0FBQ0QsUUFBSUQsTUFBTU8sSUFBTixDQUFXSSxPQUFYLENBQW1CRixNQUFuQixDQUEwQkMsTUFBMUIsSUFBb0MsQ0FBeEMsRUFBMkM7QUFDdkNSLGVBQU8sNEJBQXVCRixLQUF2QixFQUE4QkMsRUFBOUIsQ0FBUDtBQUNIO0FBQ0RDLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNBRCxTQUFLRyxLQUFMLEdBQWFBLEtBQWI7O0FBRUEsV0FBT0gsSUFBUDtBQUNIIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTUlESUNvbm5lY3RvckluIGZyb20gJy4vY29ubmVjdG9yaW4nO1xuaW1wb3J0IGNyZWF0ZU1JRElDb25uZWN0b3JPdXQgZnJvbSAnLi9jb25uZWN0b3JvdXQnO1xuXG4vKipcbiAqIEJhc2UgZnVuY3Rpb25hbGl0eSBmb3IgYWxsIE1JREkgcHJvY2Vzc29ycy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESVByb2Nlc3NvckJhc2Uoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICBnZXRUeXBlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbXkudHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGdldElEID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbXkuaWQ7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS50eXBlID0gc3BlY3MuZGF0YS50eXBlO1xuICAgIG15LmlkID0gc3BlY3MuZGF0YS5pZDtcbiAgICBcbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICBpZiAoc3BlY3MuZGF0YS5pbnB1dHMuYWxsSWRzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIHRoYXQgPSBjcmVhdGVNSURJQ29ubmVjdG9ySW4oc3BlY3MsIG15KTtcbiAgICB9XG4gICAgaWYgKHNwZWNzLmRhdGEub3V0cHV0cy5hbGxJZHMubGVuZ3RoID49IDEpIHtcbiAgICAgICAgdGhhdCA9IGNyZWF0ZU1JRElDb25uZWN0b3JPdXQoc3BlY3MsIG15KTtcbiAgICB9XG4gICAgdGhhdC5nZXRUeXBlID0gZ2V0VHlwZTtcbiAgICB0aGF0LmdldElEID0gZ2V0SUQ7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvbWlkaS9wcm9jZXNzb3JiYXNlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorBaseView;\nfunction createCanvasProcessorBaseView(specs, my) {\n    var that,\n        initialiseBase = function initialiseBase() {},\n        terminateBase = function terminateBase() {},\n        getPosition2d = function getPosition2d() {\n        return { x: my.positionX, y: my.positionY };\n    },\n        getType = function getType() {\n        return my.type;\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.params = specs.data.params.byId;\n    my.store = specs.store;\n    my.type = specs.data.type;\n    my.id = specs.data.id;\n    my.positionX = specs.data.positionX;\n    my.positionY = specs.data.positionY;\n    my.colorHigh = '#cccccc';\n    my.colorMid = '#dddddd';\n    my.colorLow = '#eeeeee';\n\n    that = specs.that || {};\n\n    initialiseBase();\n\n    that.terminateBase = terminateBase;\n    that.getPosition2d = getPosition2d;\n    that.getID = getID;\n    that.getType = getType;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9jYW52YXNwcm9jZXNzb3JiYXNlLmpzP2VjMjkiXSwibmFtZXMiOlsiY3JlYXRlQ2FudmFzUHJvY2Vzc29yQmFzZVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImluaXRpYWxpc2VCYXNlIiwidGVybWluYXRlQmFzZSIsImdldFBvc2l0aW9uMmQiLCJ4IiwicG9zaXRpb25YIiwieSIsInBvc2l0aW9uWSIsImdldFR5cGUiLCJ0eXBlIiwiZ2V0SUQiLCJpZCIsInBhcmFtcyIsImRhdGEiLCJieUlkIiwic3RvcmUiLCJjb2xvckhpZ2giLCJjb2xvck1pZCIsImNvbG9yTG93Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFBd0JBLDZCO0FBQVQsU0FBU0EsNkJBQVQsQ0FBdUNDLEtBQXZDLEVBQThDQyxFQUE5QyxFQUFrRDtBQUM3RCxRQUFJQyxJQUFKO0FBQUEsUUFFSUMsaUJBQWlCLFNBQWpCQSxjQUFpQixHQUFXLENBQzNCLENBSEw7QUFBQSxRQUtJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVcsQ0FDMUIsQ0FOTDtBQUFBLFFBUUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPLEVBQUVDLEdBQUdMLEdBQUdNLFNBQVIsRUFBbUJDLEdBQUdQLEdBQUdRLFNBQXpCLEVBQVA7QUFDSCxLQVZMO0FBQUEsUUFZSUMsVUFBVSxTQUFWQSxPQUFVLEdBQVc7QUFDakIsZUFBT1QsR0FBR1UsSUFBVjtBQUNILEtBZEw7QUFBQSxRQWdCSUMsUUFBUSxTQUFSQSxLQUFRLEdBQVc7QUFDZixlQUFPWCxHQUFHWSxFQUFWO0FBQ0gsS0FsQkw7O0FBb0JBWixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR2EsTUFBSCxHQUFZZCxNQUFNZSxJQUFOLENBQVdELE1BQVgsQ0FBa0JFLElBQTlCO0FBQ0FmLE9BQUdnQixLQUFILEdBQVdqQixNQUFNaUIsS0FBakI7QUFDQWhCLE9BQUdVLElBQUgsR0FBVVgsTUFBTWUsSUFBTixDQUFXSixJQUFyQjtBQUNBVixPQUFHWSxFQUFILEdBQVFiLE1BQU1lLElBQU4sQ0FBV0YsRUFBbkI7QUFDQVosT0FBR00sU0FBSCxHQUFlUCxNQUFNZSxJQUFOLENBQVdSLFNBQTFCO0FBQ0FOLE9BQUdRLFNBQUgsR0FBZVQsTUFBTWUsSUFBTixDQUFXTixTQUExQjtBQUNBUixPQUFHaUIsU0FBSCxHQUFlLFNBQWY7QUFDQWpCLE9BQUdrQixRQUFILEdBQWMsU0FBZDtBQUNBbEIsT0FBR21CLFFBQUgsR0FBYyxTQUFkOztBQUVBbEIsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBQzs7QUFFQUQsU0FBS0UsYUFBTCxHQUFxQkEsYUFBckI7QUFDQUYsU0FBS0csYUFBTCxHQUFxQkEsYUFBckI7QUFDQUgsU0FBS1UsS0FBTCxHQUFhQSxLQUFiO0FBQ0FWLFNBQUtRLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFdBQU9SLElBQVA7QUFDSCIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzUHJvY2Vzc29yQmFzZVZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG5cbiAgICAgICAgaW5pdGlhbGlzZUJhc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgfSxcblxuICAgICAgICB0ZXJtaW5hdGVCYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBnZXRQb3NpdGlvbjJkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4geyB4OiBteS5wb3NpdGlvblgsIHk6IG15LnBvc2l0aW9uWSB9O1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG15LnR5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBnZXRJRCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG15LmlkO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkucGFyYW1zID0gc3BlY3MuZGF0YS5wYXJhbXMuYnlJZDtcbiAgICBteS5zdG9yZSA9IHNwZWNzLnN0b3JlO1xuICAgIG15LnR5cGUgPSBzcGVjcy5kYXRhLnR5cGU7XG4gICAgbXkuaWQgPSBzcGVjcy5kYXRhLmlkO1xuICAgIG15LnBvc2l0aW9uWCA9IHNwZWNzLmRhdGEucG9zaXRpb25YO1xuICAgIG15LnBvc2l0aW9uWSA9IHNwZWNzLmRhdGEucG9zaXRpb25ZO1xuICAgIG15LmNvbG9ySGlnaCA9ICcjY2NjY2NjJztcbiAgICBteS5jb2xvck1pZCA9ICcjZGRkZGRkJztcbiAgICBteS5jb2xvckxvdyA9ICcjZWVlZWVlJztcbiAgICBcbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcblxuICAgIGluaXRpYWxpc2VCYXNlKCk7XG4gICAgXG4gICAgdGhhdC50ZXJtaW5hdGVCYXNlID0gdGVybWluYXRlQmFzZTtcbiAgICB0aGF0LmdldFBvc2l0aW9uMmQgPSBnZXRQb3NpdGlvbjJkO1xuICAgIHRoYXQuZ2V0SUQgPSBnZXRJRDtcbiAgICB0aGF0LmdldFR5cGUgPSBnZXRUeXBlO1xuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvY2FudmFzcHJvY2Vzc29yYmFzZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createUUID = createUUID;\n/**\n * Utilities\n * Mouse or touch event detection.\n */\nvar util = exports.util = function () {\n    var isTouchDevice = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch;\n\n    /**\n     * Type of events to use, touch or mouse\n     * @type {String}\n     */\n    var eventType = {\n        start: isTouchDevice ? 'touchstart' : 'mousedown',\n        end: isTouchDevice ? 'touchend' : 'mouseup',\n        click: isTouchDevice ? 'touchend' : 'click',\n        move: isTouchDevice ? 'touchmove' : 'mousemove'\n    };\n\n    return {\n        isTouchDevice: isTouchDevice,\n        eventType: eventType\n    };\n}();\n\n/**\n * Create a fairly unique ID.\n * @see https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\nfunction createUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvY29yZS91dGlsLmpzPzg5OWEiXSwibmFtZXMiOlsiY3JlYXRlVVVJRCIsInV0aWwiLCJpc1RvdWNoRGV2aWNlIiwid2luZG93IiwiRG9jdW1lbnRUb3VjaCIsImRvY3VtZW50IiwiZXZlbnRUeXBlIiwic3RhcnQiLCJlbmQiLCJjbGljayIsIm1vdmUiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwidiIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7OztRQTRCZ0JBLFUsR0FBQUEsVTtBQTVCaEI7Ozs7QUFJTyxJQUFNQyxzQkFBUyxZQUFXO0FBQzdCLFFBQU1DLGdCQUFnQixrQkFBa0JDLE1BQWxCLElBQTRCQSxPQUFPQyxhQUFQLElBQXdCQyxvQkFBb0JELGFBQTlGOztBQUVBOzs7O0FBSUEsUUFBTUUsWUFBWTtBQUNkQyxlQUFPTCxnQkFBZ0IsWUFBaEIsR0FBK0IsV0FEeEI7QUFFZE0sYUFBS04sZ0JBQWdCLFVBQWhCLEdBQTZCLFNBRnBCO0FBR2RPLGVBQU9QLGdCQUFnQixVQUFoQixHQUE2QixPQUh0QjtBQUlkUSxjQUFNUixnQkFBZ0IsV0FBaEIsR0FBOEI7QUFKdEIsS0FBbEI7O0FBT0EsV0FBTztBQUNIQSx1QkFBZUEsYUFEWjtBQUVISSxtQkFBV0E7QUFGUixLQUFQO0FBSUgsQ0FsQm1CLEVBQWI7O0FBb0JQOzs7O0FBSU8sU0FBU04sVUFBVCxHQUFzQjtBQUN6QixXQUFPLHVDQUF1Q1csT0FBdkMsQ0FBK0MsT0FBL0MsRUFBd0QsVUFBU0MsQ0FBVCxFQUFZO0FBQ3ZFLFlBQUlDLElBQUlDLEtBQUtDLE1BQUwsS0FBZ0IsRUFBaEIsR0FBcUIsQ0FBN0I7QUFBQSxZQUFnQ0MsSUFBSUosS0FBSyxHQUFMLEdBQVdDLENBQVgsR0FBZ0JBLElBQUksR0FBSixHQUFVLEdBQTlEO0FBQ0EsZUFBT0csRUFBRUMsUUFBRixDQUFXLEVBQVgsQ0FBUDtBQUNILEtBSE0sQ0FBUDtBQUlIIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllc1xuICogTW91c2Ugb3IgdG91Y2ggZXZlbnQgZGV0ZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgdXRpbCA9ICggZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgaXNUb3VjaERldmljZSA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIERvY3VtZW50VG91Y2g7XG4gICAgXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBldmVudHMgdG8gdXNlLCB0b3VjaCBvciBtb3VzZVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICovXG4gICAgY29uc3QgZXZlbnRUeXBlID0ge1xuICAgICAgICBzdGFydDogaXNUb3VjaERldmljZSA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLFxuICAgICAgICBlbmQ6IGlzVG91Y2hEZXZpY2UgPyAndG91Y2hlbmQnIDogJ21vdXNldXAnLFxuICAgICAgICBjbGljazogaXNUb3VjaERldmljZSA/ICd0b3VjaGVuZCcgOiAnY2xpY2snLFxuICAgICAgICBtb3ZlOiBpc1RvdWNoRGV2aWNlID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJyxcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIGlzVG91Y2hEZXZpY2U6IGlzVG91Y2hEZXZpY2UsXG4gICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlXG4gICAgfVxufSkoKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmYWlybHkgdW5pcXVlIElELlxuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvY3JlYXRlLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvY29yZS91dGlsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/config.json\": 18,\n\t\"./euclidfx/config.json\": 19,\n\t\"./output/config.json\": 20\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 7;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciBeXFwuXFwvLipcXC9jb25maWdcXC5qc29uJD83Yjc5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvY29uZmlnLmpzb25cIjogMTgsXG5cdFwiLi9ldWNsaWRmeC9jb25maWcuanNvblwiOiAxOSxcblx0XCIuL291dHB1dC9jb25maWcuanNvblwiOiAyMFxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciBeXFwuXFwvLipcXC9jb25maWdcXC5qc29uJFxuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(4);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _config = __webpack_require__(0);\n\nvar _euclid = __webpack_require__(9);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        position = 0,\n        duration = 0,\n        noteDuration = void 0,\n        params = {},\n        euclidPattern = [],\n        pulsesOnly = [];\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChanges);\n        updateAllParams(specs.data.params.byId);\n        updatePattern(true);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updatePulsesAndRotation();\n                            updatePattern(true);\n                            break;\n                        case 'pulses':\n                        case 'rotation':\n                            updatePattern(true);\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                        case 'note_length':\n                            updatePattern();\n                            break;\n                        case 'is_mute':\n                            break;\n                    }\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice.\n     * timeline start        now      scanStart     scanEnd\n     * |----------------------|-----------|------------|\n     *                        |-----------| \n     *                        nowToScanStart\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart, in ticks.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     * @param {Array} processorEvents Array to collect processor generated events to displaying the view.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n\n        // clear the output event stack\n        my.clearOutputData();\n\n        // abort if the processor is muted\n        if (params.is_mute) {\n            return;\n        }\n\n        // if the pattern loops during this timespan.\n        var localScanStart = scanStart % duration,\n            localScanEnd = scanEnd % duration,\n            localScanStart2 = false,\n            localScanEnd2;\n        if (localScanStart > localScanEnd) {\n            localScanStart2 = 0, localScanEnd2 = localScanEnd;\n            localScanEnd = duration;\n        }\n\n        // check if notes occur during the current timespan\n        var n = pulsesOnly.length;\n        for (var i = 0; i < n; i++) {\n            var pulseStartTime = pulsesOnly[i].startTime,\n                scanStartToNoteStart = pulseStartTime - localScanStart,\n                isOn = localScanStart <= pulseStartTime && pulseStartTime < localScanEnd;\n\n            // if pattern looped back to the start\n            if (localScanStart2 !== false) {\n                scanStartToNoteStart = pulseStartTime - localScanStart + duration;\n                isOn = isOn || localScanStart2 <= pulseStartTime && pulseStartTime < localScanEnd2;\n            }\n\n            // if a note should play\n            if (isOn) {\n                var channel = params.channel_out,\n                    pitch = params.pitch_out,\n                    velocity = params.velocity_out,\n                    pulseStartTimestamp = scanStart + scanStartToNoteStart;\n\n                // send the Note On message\n                my.setOutputData({\n                    timestampTicks: pulseStartTimestamp,\n                    durationTicks: noteDuration,\n                    channel: channel,\n                    type: 'note',\n                    pitch: pitch,\n                    velocity: velocity\n                });\n\n                // add events to processorEvents for the canvas to show them\n                if (!processorEvents[my.id]) {\n                    processorEvents[my.id] = [];\n                }\n\n                var delayFromNowToNoteStart = (nowToScanStart + scanStartToNoteStart) * ticksToMsMultiplier;\n                processorEvents[my.id].push({\n                    stepIndex: pulsesOnly[i].stepIndex,\n                    delayFromNowToNoteStart: delayFromNowToNoteStart,\n                    delayFromNowToNoteEnd: delayFromNowToNoteStart + noteDuration * ticksToMsMultiplier\n                });\n            }\n        }\n\n        if (localScanStart2 !== false) {\n            localScanStart = localScanStart2;\n        }\n    },\n        updateAllParams = function updateAllParams(parameters) {\n        params.steps = parameters.steps.value;\n        params.pulses = parameters.pulses.value;\n        params.rotation = parameters.rotation.value;\n        params.isTriplets = parameters.is_triplets.value;\n        params.rate = parameters.rate.value;\n        params.note_length = parameters.note_length.value;\n        params.is_mute = parameters.is_mute.value;\n        params.channel_out = parameters.channel_out.value;\n        params.pitch_out = parameters.pitch_out.value;\n        params.velocity_out = parameters.velocity_out.value;\n    },\n\n\n    /**\n     * After a change of the steps parameter update the pulses and rotation parameters.\n     */\n    updatePulsesAndRotation = function updatePulsesAndRotation() {\n        store.dispatch(store.getActions().recreateParameter(my.id, 'pulses', { max: params.steps }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'rotation', { max: params.steps - 1 }));\n        store.dispatch(store.getActions().changeParameter(my.id, 'pulses', params.pulses));\n        store.dispatch(store.getActions().changeParameter(my.id, 'rotation', params.rotation));\n    },\n\n\n    /**\n     * Update all pattern properties.\n     * @param {Boolean} isEuclidChange Steps, pulses or rotation change.\n     */\n    updatePattern = function updatePattern(isEuclidChange) {\n        // euclidean pattern properties, changes in steps, pulses, rotation\n        if (isEuclidChange) {\n            euclidPattern = (0, _euclid.getEuclidPattern)(params.steps, params.pulses);\n            euclidPattern = (0, _euclid.rotateEuclidPattern)(euclidPattern, params.rotation);\n        }\n\n        // playback properties, changes in isTriplets, rate, noteLength\n        var rate = params.is_triplets ? params.rate * (2 / 3) : params.rate,\n            stepDuration = rate * _config.PPQN;\n        noteDuration = params.note_length * _config.PPQN;\n        duration = params.steps * stepDuration;\n        position = position % duration;\n\n        // create array of note start times in ticks\n        pulsesOnly.length = 0;\n        var n = euclidPattern.length;\n        for (var i = 0; i < n; i++) {\n            if (euclidPattern[i]) {\n                pulsesOnly.push({\n                    startTime: i * stepDuration,\n                    stepIndex: i\n                });\n            }\n        }\n    };\n\n    my = my || {};\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvZXVjbGlkLmpzP2ZlMDAiXSwibmFtZXMiOlsiZ2V0RXVjbGlkUGF0dGVybiIsInJvdGF0ZUV1Y2xpZFBhdHRlcm4iLCJjYWNoZSIsInN0ZXBzIiwicHVsc2VzIiwiTWF0aCIsIm1pbiIsImNhY2hlS2V5IiwiY3JlYXRlQmpvcmtsdW5kIiwic2xpY2UiLCJwYXR0ZXJuIiwicm90YXRpb24iLCJlbGVtZW50c1RvU2hpZnQiLCJzcGxpY2UiLCJjb25jYXQiLCJmaXJzdCIsIkFycmF5IiwiZmlsbCIsInNlY29uZCIsImZpcnN0TGVuZ3RoIiwibGVuZ3RoIiwibWluTGVuZ3RoIiwibG9vcFRocmVzaG9sZCIsIngiLCJwcm90b3R5cGUiLCJjYWxsIiwiZm9yRWFjaCIsImYiLCJzIl0sIm1hcHBpbmdzIjoiOzs7OztRQVNnQkEsZ0IsR0FBQUEsZ0I7UUFTQUMsbUIsR0FBQUEsbUI7QUFsQmhCOzs7Ozs7O0FBT0EsSUFBTUMsUUFBUSxFQUFkOztBQUVPLFNBQVNGLGdCQUFULENBQTBCRyxLQUExQixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDNUNBLGFBQVNDLEtBQUtDLEdBQUwsQ0FBU0gsS0FBVCxFQUFnQkMsTUFBaEIsQ0FBVDtBQUNBLFFBQU1HLFdBQWNKLEtBQWQsU0FBdUJDLE1BQTdCO0FBQ0EsUUFBSSxDQUFDRixNQUFNSyxRQUFOLENBQUwsRUFBc0I7QUFDbEJMLGNBQU1LLFFBQU4sSUFBa0JDLGdCQUFnQkwsS0FBaEIsRUFBdUJDLE1BQXZCLENBQWxCO0FBQ0g7QUFDRCxXQUFPRixNQUFNSyxRQUFOLEVBQWdCRSxLQUFoQixDQUFzQixDQUF0QixDQUFQO0FBQ0g7O0FBRU0sU0FBU1IsbUJBQVQsQ0FBNkJTLE9BQTdCLEVBQXNDQyxRQUF0QyxFQUFnRDtBQUNuRCxRQUFNQyxrQkFBa0JGLFFBQVFHLE1BQVIsQ0FBZUYsUUFBZixDQUF4QjtBQUNBLFdBQU9DLGdCQUFnQkUsTUFBaEIsQ0FBdUJKLE9BQXZCLENBQVA7QUFDSDs7QUFFRDs7Ozs7O0FBTUEsU0FBU0YsZUFBVCxDQUF5QkwsS0FBekIsRUFBZ0NDLE1BQWhDLEVBQXdDO0FBQ3BDLFFBQUlBLFNBQVMsQ0FBVCxJQUFjRCxRQUFRLENBQXRCLElBQTJCQSxRQUFRQyxNQUF2QyxFQUErQztBQUMzQyxlQUFPLEVBQVA7QUFDSDs7QUFFRDtBQUNBLFFBQUlXLFFBQVEsSUFBSUMsS0FBSixDQUFVWixNQUFWLEVBQWtCYSxJQUFsQixDQUF1QixDQUFDLENBQUQsQ0FBdkIsQ0FBWjtBQUNBLFFBQUlDLFNBQVMsSUFBSUYsS0FBSixDQUFVYixRQUFRQyxNQUFsQixFQUEwQmEsSUFBMUIsQ0FBK0IsQ0FBQyxDQUFELENBQS9CLENBQWI7O0FBRUEsUUFBSUUsY0FBY0osTUFBTUssTUFBeEI7QUFDQSxRQUFJQyxZQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFoQjs7QUFFQSxRQUFJRSxnQkFBZ0IsQ0FBcEI7QUFDQTtBQUNBLFdBQU9ELFlBQVlDLGFBQW5CLEVBQWtDOztBQUU5QjtBQUNBLFlBQUlBLGtCQUFrQixDQUF0QixFQUF5QjtBQUNyQkEsNEJBQWdCLENBQWhCO0FBQ0g7O0FBRUQ7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsU0FBcEIsRUFBK0JFLEdBQS9CLEVBQW9DO0FBQ2hDUixrQkFBTVEsQ0FBTixJQUFXUCxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJWLE1BQU1RLENBQU4sQ0FBNUIsRUFBc0NMLE9BQU9LLENBQVAsQ0FBdEMsQ0FBWDtBQUNIOztBQUVEO0FBQ0EsWUFBSUYsY0FBY0YsV0FBbEIsRUFBK0I7QUFDM0JELHFCQUFTRixNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCUCxNQUEzQixFQUFtQ0csU0FBbkMsQ0FBVDtBQUNIO0FBQ0Q7QUFDQTtBQUpBLGFBS0s7QUFDREgseUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDTSxTQUFsQyxDQUFUO0FBQ0FOLHdCQUFRQyxNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCVixLQUEzQixFQUFrQyxDQUFsQyxFQUFxQ00sU0FBckMsQ0FBUjtBQUNIO0FBQ0RGLHNCQUFjSixNQUFNSyxNQUFwQjtBQUNBQyxvQkFBWWhCLEtBQUtDLEdBQUwsQ0FBU2EsV0FBVCxFQUFzQkQsT0FBT0UsTUFBN0IsQ0FBWjtBQUNIOztBQUVEO0FBQ0EsUUFBSVYsVUFBVSxFQUFkO0FBQ0FLLFVBQU1XLE9BQU4sQ0FBYyxhQUFLO0FBQ2ZoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2lCLENBQXJDLENBQVY7QUFDSCxLQUZEO0FBR0FULFdBQU9RLE9BQVAsQ0FBZSxhQUFLO0FBQ2hCaEIsa0JBQVVNLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QmYsT0FBNUIsRUFBcUNrQixDQUFyQyxDQUFWO0FBQ0gsS0FGRDs7QUFJQSxXQUFPbEIsT0FBUDtBQUNIIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV1Y2xpZGVhbiBwYXR0ZXJuIGNhbGN1bGF0aW9uIGJ5IE1pY2hhZWwgS29udG9naWFubmlzOlxuICogaHR0cHM6Ly9naXRodWIuY29tL21rb250b2dpYW5uaXMvZXVjbGlkZWFuLXJoeXRobXNcbiAqIGJhc2VkIG9uIGEgUHl0aG9uIHNjcmlwdCBmcm9tIGRpc2FwcGVhcmVkIHdlYnNpdGUgXG4gKiBodHRwOi8vd3d3LmF0b25hbG1pY3Jvc2hvcmVzLmNvbS9cbiAqL1xuXG5jb25zdCBjYWNoZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXVjbGlkUGF0dGVybihzdGVwcywgcHVsc2VzKSB7XG4gICAgcHVsc2VzID0gTWF0aC5taW4oc3RlcHMsIHB1bHNlcyk7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtzdGVwc31fJHtwdWxzZXN9YDtcbiAgICBpZiAoIWNhY2hlW2NhY2hlS2V5XSkge1xuICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBjcmVhdGVCam9ya2x1bmQoc3RlcHMsIHB1bHNlcyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV0uc2xpY2UoMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVFdWNsaWRQYXR0ZXJuKHBhdHRlcm4sIHJvdGF0aW9uKSB7XG4gICAgY29uc3QgZWxlbWVudHNUb1NoaWZ0ID0gcGF0dGVybi5zcGxpY2Uocm90YXRpb24pO1xuICAgIHJldHVybiBlbGVtZW50c1RvU2hpZnQuY29uY2F0KHBhdHRlcm4pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBFdWNsaWRlYW4gcmh5dGhtIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gc3RlcHMgVG90YWwgYW1vdW50IG9mIHRzdGVwcyBpbiB0aGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwdWxzZXMgUHVsc2VzIHRvIHNwcmVhZCBvdmVyIHRoZSBwYXR0ZXJuLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIEJvb2xlYW5zIHRoYXQgZm9ybSB0aGUgcGF0dGVybi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpIHtcbiAgICBpZiAocHVsc2VzIDwgMCB8fCBzdGVwcyA8IDAgfHwgc3RlcHMgPCBwdWxzZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgXG4gICAgLy8gQ3JlYXRlIHRoZSB0d28gYXJyYXlzXG4gICAgbGV0IGZpcnN0ID0gbmV3IEFycmF5KHB1bHNlcykuZmlsbChbMV0pO1xuICAgIGxldCBzZWNvbmQgPSBuZXcgQXJyYXkoc3RlcHMgLSBwdWxzZXMpLmZpbGwoWzBdKTtcbiAgXG4gICAgbGV0IGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gIFxuICAgIGxldCBsb29wVGhyZXNob2xkID0gMDtcbiAgICAvLyBMb29wIHVudGlsIGF0IGxlYXN0IG9uZSBhcnJheSBoYXMgbGVuZ3RoIGd0IDIgKDEgZm9yIGZpcnN0IGxvb3ApXG4gICAgd2hpbGUgKG1pbkxlbmd0aCA+IGxvb3BUaHJlc2hvbGQpIHtcblxuICAgICAgICAvLyBBbGxvdyBvbmx5IGxvb3BUaHJlc2hvbGQgdG8gYmUgemVybyBvbiB0aGUgZmlyc3QgbG9vcFxuICAgICAgICBpZiAobG9vcFRocmVzaG9sZCA9PT0gMCkge1xuICAgICAgICAgICAgbG9vcFRocmVzaG9sZCA9IDE7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIEZvciB0aGUgbWluaW11bSBhcnJheSBsb29wIGFuZCBjb25jYXRcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBtaW5MZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgZmlyc3RbeF0gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoZmlyc3RbeF0sIHNlY29uZFt4XSk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIGlmIHRoZSBzZWNvbmQgd2FzIHRoZSBiaWdnZXIgYXJyYXksIHNsaWNlIHRoZSByZW1haW5pbmcgZWxlbWVudHMvYXJyYXlzIGFuZCB1cGRhdGVcbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gZmlyc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIHNlY29uZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlY29uZCwgbWluTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UgdXBkYXRlIHRoZSBzZWNvbmQgKHNtYWxsZXN0IGFycmF5KSB3aXRoIHRoZSByZW1haW5kZXJzIG9mIHRoZSBmaXJzdFxuICAgICAgICAvLyBhbmQgdXBkYXRlIHRoZSBmaXJzdCBhcnJheSB0byBpbmNsdWRlIG9ubHQgdGhlIGV4dGVuZGVkIHN1Yi1hcnJheXNcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaXJzdCwgbWluTGVuZ3RoKTtcbiAgICAgICAgICAgIGZpcnN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIDAsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RMZW5ndGggPSBmaXJzdC5sZW5ndGg7XG4gICAgICAgIG1pbkxlbmd0aCA9IE1hdGgubWluKGZpcnN0TGVuZ3RoLCBzZWNvbmQubGVuZ3RoKTtcbiAgICB9XG4gIFxuICAgIC8vIEJ1aWxkIHRoZSBmaW5hbCBhcnJheVxuICAgIGxldCBwYXR0ZXJuID0gW107XG4gICAgZmlyc3QuZm9yRWFjaChmID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBmKTtcbiAgICB9KTtcbiAgICBzZWNvbmQuZm9yRWFjaChzID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBzKTtcbiAgICB9KTtcbiAgXG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvZXVjbGlkLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(4);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _config = __webpack_require__(0);\n\nvar _euclid = __webpack_require__(11);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        position = 0,\n        duration = 0,\n        stepDuration = 0,\n        euclidPattern = [],\n        params = {},\n        delayedEvents = [];\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChanges);\n        updateAllParams(specs.data.params.byId);\n        updatePattern(true);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updatePulsesAndRotation();\n                            updatePattern(true);\n                            break;\n                        case 'pulses':\n                        case 'rotation':\n                            updatePattern(true);\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                            updatePattern();\n                            break;\n                        case 'target':\n                        case 'mode':\n                            updateEffectSettings();\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice. This will\n     * - Get events waiting at the input\n     * - Process them according to the current parameter settings.\n     * - Send the processed events to the output.\n     * - Add the events to the processorEvents parameter for display in the view.\n     * \n     * Events are plain objects with properties:\n     * @param {String} type 'note'\n     * @param {Number} timestampTicks Event start time, measured from timeline start\n     * @param {Number} durationTicks\n     * @param {Number} channel 1 - 16\n     * @param {Number} velocity 0 - 127\n     * @param {Number} pitch 0 - 127\n     * \n     * This method's parameters:\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart, in ticks\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     * @param {Array} processorEvents Array to collect processor generated events to display in the view.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n\n        // clear the output event stack\n        my.clearOutputData();\n\n        // retrieve events waiting at the processor's input\n        var inputData = my.getInputData();\n\n        // abort if there's nothing to process\n        if (inputData.length === 0) {\n            processDelayedEvents(scanStart, scanEnd);\n            return;\n        }\n\n        // calculate the processed timespan's position within the pattern, \n        // taking into account the pattern looping during this timespan.\n        var localScanStart = scanStart % duration,\n            localScanEnd = scanEnd % duration,\n            localScanStart2 = false,\n            localScanEnd2;\n        if (localScanStart > localScanEnd) {\n            localScanStart2 = 0, localScanEnd2 = localScanEnd;\n            localScanEnd = duration;\n        }\n\n        for (var i = 0, n = inputData.length; i < n; i++) {\n            var event = inputData[i];\n\n            var isDelayed = false;\n\n            // handle only MIDI Note events\n            if (event.type === 'note') {\n\n                // calculate the state of the effect at the event's time within the pattern\n                var stepIndex = Math.floor(event.timestampTicks % duration / stepDuration),\n                    state = euclidPattern[stepIndex],\n                    effectValue = state ? params.high : params.low;\n                console.log('note ', event);\n                // apply the effect to the event's target parameter\n                switch (params.target) {\n                    case 'velocity':\n                        event.velocity = params.isRelative ? event.velocity + effectValue : effectValue;\n                        event.velocity = Math.max(0, Math.min(event.velocity, 127));\n                        break;\n                    case 'pitch':\n                        event.pitch = params.isRelative ? event.pitch + effectValue : effectValue;\n                        event.pitch = Math.max(0, Math.min(event.pitch, 127));\n                        break;\n                    case 'channel':\n                        event.channel = params.isRelative ? event.channel + effectValue : effectValue;\n                        event.channel = Math.max(1, Math.min(event.channel, 16));\n                        break;\n                    case 'length':\n                        var valueInTicks = effectValue / 32 * _config.PPQN * 4; // max 32 == 1 measure == PPQN * 4\n                        event.durationTicks = params.isRelative ? event.durationTicks + valueInTicks : valueInTicks;\n                        event.durationTicks = Math.max(1, event.durationTicks);\n                        break;\n                    case 'delay':\n                        if (effectValue > 0) {\n                            var delayInTicks = Math.max(0, effectValue / 32 * _config.PPQN * 0.25); // 32 == 1 beat == PPQN\n\n                            // store note if delayed start time falls outside of the current scan range\n                            if (event.timestampTicks + delayInTicks > scanEnd) {\n                                delayedEvents.push(_extends({}, event, {\n                                    timestampTicks: event.timestampTicks + delayInTicks\n                                }));\n                                isDelayed = true;\n                            } else {\n                                event.timestampTicks = event.timestampTicks + delayInTicks;\n                            }\n                        }\n                        break;\n                    case 'output':\n                        // v2.2\n                        break;\n                }\n\n                // add events to processorEvents for the canvas to show them\n                if (!processorEvents[my.id]) {\n                    processorEvents[my.id] = [];\n                }\n\n                var delayFromNowToNoteStart = (event.timestampTicks - scanStart) * ticksToMsMultiplier;\n                processorEvents[my.id].push({\n                    stepIndex: stepIndex,\n                    delayFromNowToNoteStart: delayFromNowToNoteStart,\n                    delayFromNowToNoteEnd: delayFromNowToNoteStart + event.durationTicks * ticksToMsMultiplier\n                });\n\n                // push the event to the processor's output\n                if (!isDelayed) {\n                    my.setOutputData(event);\n                }\n            }\n        }\n\n        processDelayedEvents(scanStart, scanEnd);\n    },\n\n\n    /**\n     * Check if stored delayed events \n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     */\n    processDelayedEvents = function processDelayedEvents(scanStart, scanEnd) {\n        var i = delayedEvents.length;\n        while (--i > -1) {\n            var timestampTicks = delayedEvents[i].timestampTicks;\n            if (scanStart <= timestampTicks && scanEnd > timestampTicks) {\n                my.setOutputData(delayedEvents.splice(i, 1)[0]);\n            }\n        }\n    },\n\n\n    /**\n     * After a change of the steps parameter update the pulses and rotation parameters.\n     */\n    updatePulsesAndRotation = function updatePulsesAndRotation() {\n        store.dispatch(store.getActions().recreateParameter(my.id, 'pulses', { max: params.steps }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'rotation', { max: params.steps - 1 }));\n        store.dispatch(store.getActions().changeParameter(my.id, 'pulses', params.pulses));\n        store.dispatch(store.getActions().changeParameter(my.id, 'rotation', params.rotation));\n    },\n\n\n    /**\n     * Update all pattern properties.\n     * @param {Boolean} isEuclidChange Steps, pulses or rotation change.\n     */\n    updatePattern = function updatePattern(isEuclidChange) {\n        // euclidean pattern properties, changes in steps, pulses, rotation\n        if (isEuclidChange) {\n            euclidPattern = (0, _euclid.getEuclidPattern)(params.steps, params.pulses);\n            euclidPattern = (0, _euclid.rotateEuclidPattern)(euclidPattern, params.rotation);\n        }\n\n        // playback properties, changes in isTriplets and rate\n        var rate = params.isTriplets ? params.rate * (2 / 3) : params.rate;\n        stepDuration = rate * _config.PPQN;\n        duration = params.steps * stepDuration;\n    },\n        updateAllParams = function updateAllParams(parameters) {\n        params.steps = parameters.steps.value;\n        params.pulses = parameters.pulses.value;\n        params.rotation = parameters.rotation.value;\n        params.isTriplets = parameters.is_triplets.value;\n        params.rate = parameters.rate.value;\n        params.high = parameters.high.value;\n        params.low = parameters.low.value;\n        params.target = parameters.target.value;\n        params.isRelative = parameters.mode.value !== parameters.mode.default;\n    },\n        updateEffectSettings = function updateEffectSettings() {\n        var min = void 0,\n            max = void 0,\n            lowValue = void 0,\n            highValue = void 0;\n\n        // set minimum and maximum value according to target type\n        switch (params.target) {\n            case 'velocity':\n                min = params.isRelative ? -127 : 0;\n                max = 127;\n                lowValue = params.isRelative ? 0 : 50;\n                highValue = params.isRelative ? 0 : 100;\n                break;\n            case 'pitch':\n                min = params.isRelative ? -127 : 0;\n                max = 127;\n                lowValue = params.isRelative ? 0 : 58;\n                highValue = params.isRelative ? 0 : 60;\n                break;\n            case 'channel':\n                min = params.isRelative ? -16 : 1;\n                max = 16;\n                lowValue = params.isRelative ? 0 : 1;\n                highValue = params.isRelative ? 0 : 2;\n                break;\n            case 'length':\n                min = params.isRelative ? -32 : 0;\n                max = 32;\n                lowValue = params.isRelative ? 0 : 4;\n                highValue = params.isRelative ? 0 : 8;\n                break;\n            case 'delay':\n                min = params.isRelative ? 0 : 0;\n                max = 32;\n                lowValue = params.isRelative ? 0 : 0;\n                highValue = params.isRelative ? 0 : 2;\n                break;\n            case 'output':\n                min = 1;\n                max = 2;\n                lowValue = 1;\n                highValue = 2;\n                break;\n        }\n\n        // clamp parameter's value between minimum and maximum value\n        lowValue = Math.max(min, Math.min(lowValue, max));\n        highValue = Math.max(min, Math.min(highValue, max));\n\n        // apply all new settings to the effect parameters \n        store.dispatch(store.getActions().recreateParameter(my.id, 'low', { min: min, max: max, value: lowValue }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'high', { min: min, max: max, value: highValue }));\n    };\n\n    my = my || {};\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanM/MDRkNSJdLCJuYW1lcyI6WyJnZXRFdWNsaWRQYXR0ZXJuIiwicm90YXRlRXVjbGlkUGF0dGVybiIsImNhY2hlIiwic3RlcHMiLCJwdWxzZXMiLCJNYXRoIiwibWluIiwiY2FjaGVLZXkiLCJjcmVhdGVCam9ya2x1bmQiLCJzbGljZSIsInBhdHRlcm4iLCJyb3RhdGlvbiIsImVsZW1lbnRzVG9TaGlmdCIsInNwbGljZSIsImNvbmNhdCIsImZpcnN0IiwiQXJyYXkiLCJmaWxsIiwic2Vjb25kIiwiZmlyc3RMZW5ndGgiLCJsZW5ndGgiLCJtaW5MZW5ndGgiLCJsb29wVGhyZXNob2xkIiwieCIsInByb3RvdHlwZSIsImNhbGwiLCJmb3JFYWNoIiwiZiIsInMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBU2dCQSxnQixHQUFBQSxnQjtRQVNBQyxtQixHQUFBQSxtQjtBQWxCaEI7Ozs7Ozs7QUFPQSxJQUFNQyxRQUFRLEVBQWQ7O0FBRU8sU0FBU0YsZ0JBQVQsQ0FBMEJHLEtBQTFCLEVBQWlDQyxNQUFqQyxFQUF5QztBQUM1Q0EsYUFBU0MsS0FBS0MsR0FBTCxDQUFTSCxLQUFULEVBQWdCQyxNQUFoQixDQUFUO0FBQ0EsUUFBTUcsV0FBY0osS0FBZCxTQUF1QkMsTUFBN0I7QUFDQSxRQUFJLENBQUNGLE1BQU1LLFFBQU4sQ0FBTCxFQUFzQjtBQUNsQkwsY0FBTUssUUFBTixJQUFrQkMsZ0JBQWdCTCxLQUFoQixFQUF1QkMsTUFBdkIsQ0FBbEI7QUFDSDtBQUNELFdBQU9GLE1BQU1LLFFBQU4sRUFBZ0JFLEtBQWhCLENBQXNCLENBQXRCLENBQVA7QUFDSDs7QUFFTSxTQUFTUixtQkFBVCxDQUE2QlMsT0FBN0IsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQ25ELFFBQU1DLGtCQUFrQkYsUUFBUUcsTUFBUixDQUFlRixRQUFmLENBQXhCO0FBQ0EsV0FBT0MsZ0JBQWdCRSxNQUFoQixDQUF1QkosT0FBdkIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixlQUFULENBQXlCTCxLQUF6QixFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDcEMsUUFBSUEsU0FBUyxDQUFULElBQWNELFFBQVEsQ0FBdEIsSUFBMkJBLFFBQVFDLE1BQXZDLEVBQStDO0FBQzNDLGVBQU8sRUFBUDtBQUNIOztBQUVEO0FBQ0EsUUFBSVcsUUFBUSxJQUFJQyxLQUFKLENBQVVaLE1BQVYsRUFBa0JhLElBQWxCLENBQXVCLENBQUMsQ0FBRCxDQUF2QixDQUFaO0FBQ0EsUUFBSUMsU0FBUyxJQUFJRixLQUFKLENBQVViLFFBQVFDLE1BQWxCLEVBQTBCYSxJQUExQixDQUErQixDQUFDLENBQUQsQ0FBL0IsQ0FBYjs7QUFFQSxRQUFJRSxjQUFjSixNQUFNSyxNQUF4QjtBQUNBLFFBQUlDLFlBQVloQixLQUFLQyxHQUFMLENBQVNhLFdBQVQsRUFBc0JELE9BQU9FLE1BQTdCLENBQWhCOztBQUVBLFFBQUlFLGdCQUFnQixDQUFwQjtBQUNBO0FBQ0EsV0FBT0QsWUFBWUMsYUFBbkIsRUFBa0M7O0FBRTlCO0FBQ0EsWUFBSUEsa0JBQWtCLENBQXRCLEVBQXlCO0FBQ3JCQSw0QkFBZ0IsQ0FBaEI7QUFDSDs7QUFFRDtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixTQUFwQixFQUErQkUsR0FBL0IsRUFBb0M7QUFDaENSLGtCQUFNUSxDQUFOLElBQVdQLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QlYsTUFBTVEsQ0FBTixDQUE1QixFQUFzQ0wsT0FBT0ssQ0FBUCxDQUF0QyxDQUFYO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJRixjQUFjRixXQUFsQixFQUErQjtBQUMzQkQscUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJQLE1BQTNCLEVBQW1DRyxTQUFuQyxDQUFUO0FBQ0g7QUFDRDtBQUNBO0FBSkEsYUFLSztBQUNESCx5QkFBU0YsTUFBTVEsU0FBTixDQUFnQmYsS0FBaEIsQ0FBc0JnQixJQUF0QixDQUEyQlYsS0FBM0IsRUFBa0NNLFNBQWxDLENBQVQ7QUFDQU4sd0JBQVFDLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDLENBQWxDLEVBQXFDTSxTQUFyQyxDQUFSO0FBQ0g7QUFDREYsc0JBQWNKLE1BQU1LLE1BQXBCO0FBQ0FDLG9CQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFaO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJVixVQUFVLEVBQWQ7QUFDQUssVUFBTVcsT0FBTixDQUFjLGFBQUs7QUFDZmhCLGtCQUFVTSxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJmLE9BQTVCLEVBQXFDaUIsQ0FBckMsQ0FBVjtBQUNILEtBRkQ7QUFHQVQsV0FBT1EsT0FBUCxDQUFlLGFBQUs7QUFDaEJoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2tCLENBQXJDLENBQVY7QUFDSCxLQUZEOztBQUlBLFdBQU9sQixPQUFQO0FBQ0giLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV1Y2xpZGVhbiBwYXR0ZXJuIGNhbGN1bGF0aW9uIGJ5IE1pY2hhZWwgS29udG9naWFubmlzOlxuICogaHR0cHM6Ly9naXRodWIuY29tL21rb250b2dpYW5uaXMvZXVjbGlkZWFuLXJoeXRobXNcbiAqIGJhc2VkIG9uIGEgUHl0aG9uIHNjcmlwdCBmcm9tIGRpc2FwcGVhcmVkIHdlYnNpdGUgXG4gKiBodHRwOi8vd3d3LmF0b25hbG1pY3Jvc2hvcmVzLmNvbS9cbiAqL1xuXG5jb25zdCBjYWNoZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXVjbGlkUGF0dGVybihzdGVwcywgcHVsc2VzKSB7XG4gICAgcHVsc2VzID0gTWF0aC5taW4oc3RlcHMsIHB1bHNlcyk7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtzdGVwc31fJHtwdWxzZXN9YDtcbiAgICBpZiAoIWNhY2hlW2NhY2hlS2V5XSkge1xuICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBjcmVhdGVCam9ya2x1bmQoc3RlcHMsIHB1bHNlcyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV0uc2xpY2UoMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVFdWNsaWRQYXR0ZXJuKHBhdHRlcm4sIHJvdGF0aW9uKSB7XG4gICAgY29uc3QgZWxlbWVudHNUb1NoaWZ0ID0gcGF0dGVybi5zcGxpY2Uocm90YXRpb24pO1xuICAgIHJldHVybiBlbGVtZW50c1RvU2hpZnQuY29uY2F0KHBhdHRlcm4pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBFdWNsaWRlYW4gcmh5dGhtIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gc3RlcHMgVG90YWwgYW1vdW50IG9mIHRzdGVwcyBpbiB0aGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwdWxzZXMgUHVsc2VzIHRvIHNwcmVhZCBvdmVyIHRoZSBwYXR0ZXJuLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIEJvb2xlYW5zIHRoYXQgZm9ybSB0aGUgcGF0dGVybi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpIHtcbiAgICBpZiAocHVsc2VzIDwgMCB8fCBzdGVwcyA8IDAgfHwgc3RlcHMgPCBwdWxzZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgXG4gICAgLy8gQ3JlYXRlIHRoZSB0d28gYXJyYXlzXG4gICAgbGV0IGZpcnN0ID0gbmV3IEFycmF5KHB1bHNlcykuZmlsbChbMV0pO1xuICAgIGxldCBzZWNvbmQgPSBuZXcgQXJyYXkoc3RlcHMgLSBwdWxzZXMpLmZpbGwoWzBdKTtcbiAgXG4gICAgbGV0IGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gIFxuICAgIGxldCBsb29wVGhyZXNob2xkID0gMDtcbiAgICAvLyBMb29wIHVudGlsIGF0IGxlYXN0IG9uZSBhcnJheSBoYXMgbGVuZ3RoIGd0IDIgKDEgZm9yIGZpcnN0IGxvb3ApXG4gICAgd2hpbGUgKG1pbkxlbmd0aCA+IGxvb3BUaHJlc2hvbGQpIHtcblxuICAgICAgICAvLyBBbGxvdyBvbmx5IGxvb3BUaHJlc2hvbGQgdG8gYmUgemVybyBvbiB0aGUgZmlyc3QgbG9vcFxuICAgICAgICBpZiAobG9vcFRocmVzaG9sZCA9PT0gMCkge1xuICAgICAgICAgICAgbG9vcFRocmVzaG9sZCA9IDE7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIEZvciB0aGUgbWluaW11bSBhcnJheSBsb29wIGFuZCBjb25jYXRcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBtaW5MZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgZmlyc3RbeF0gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoZmlyc3RbeF0sIHNlY29uZFt4XSk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIGlmIHRoZSBzZWNvbmQgd2FzIHRoZSBiaWdnZXIgYXJyYXksIHNsaWNlIHRoZSByZW1haW5pbmcgZWxlbWVudHMvYXJyYXlzIGFuZCB1cGRhdGVcbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gZmlyc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIHNlY29uZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlY29uZCwgbWluTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UgdXBkYXRlIHRoZSBzZWNvbmQgKHNtYWxsZXN0IGFycmF5KSB3aXRoIHRoZSByZW1haW5kZXJzIG9mIHRoZSBmaXJzdFxuICAgICAgICAvLyBhbmQgdXBkYXRlIHRoZSBmaXJzdCBhcnJheSB0byBpbmNsdWRlIG9ubHQgdGhlIGV4dGVuZGVkIHN1Yi1hcnJheXNcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaXJzdCwgbWluTGVuZ3RoKTtcbiAgICAgICAgICAgIGZpcnN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIDAsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RMZW5ndGggPSBmaXJzdC5sZW5ndGg7XG4gICAgICAgIG1pbkxlbmd0aCA9IE1hdGgubWluKGZpcnN0TGVuZ3RoLCBzZWNvbmQubGVuZ3RoKTtcbiAgICB9XG4gIFxuICAgIC8vIEJ1aWxkIHRoZSBmaW5hbCBhcnJheVxuICAgIGxldCBwYXR0ZXJuID0gW107XG4gICAgZmlyc3QuZm9yRWFjaChmID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBmKTtcbiAgICB9KTtcbiAgICBzZWNvbmQuZm9yRWFjaChzID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBzKTtcbiAgICB9KTtcbiAgXG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(4);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _midi = __webpack_require__(3);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output port processor.\n */\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        midiOutput = void 0,\n        params = {};\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChange);\n        updatePortsParameter(store.getState());\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChange);\n    },\n        handleStateChange = function handleStateChange(e) {\n        switch (e.detail.action.type) {\n\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                    switch (e.detail.action.paramKey) {\n                        case 'port':\n                            updateMIDIPort();\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.CREATE_MIDI_PORT:\n            case e.detail.actions.UPDATE_MIDI_PORT:\n            case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                updatePortsParameter(e.detail.state);\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice.\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset) {\n\n        // retrieve events waiting at the processor's input\n        var inputData = my.getInputData(),\n            origin = performance.now() - offset * ticksToMsMultiplier,\n            n = inputData.length;\n\n        if (midiOutput && midiOutput.state === 'connected') {\n            for (var i = 0; i < n; i++) {\n                var item = inputData[i],\n\n\n                // item.timestampTicks is time since transport play started\n                timestamp = origin + item.timestampTicks * ticksToMsMultiplier,\n                    duration = item.durationTicks * ticksToMsMultiplier;\n\n                switch (item.type) {\n                    case 'note':\n                        console.log('output timestamp ', timestamp, Math.round(performance.now()));\n                        midiOutput.send([0x90 + (item.channel - 1), item.pitch, item.velocity], timestamp);\n                        midiOutput.send([0x80 + (item.channel - 1), item.pitch, 0], timestamp + duration);\n                        break;\n                }\n            }\n        }\n    },\n        updateAllParams = function updateAllParams(parameters) {\n        params.port = parameters.port.value;\n        params.portName = parameters.port.model.find(function (element) {\n            return element.value === params.port;\n        }).label;\n    },\n\n\n    /**\n     * Retrieve the MIDI port the MIDI notes are sent to.\n     * After a port parameter change.\n     */\n    updateMIDIPort = function updateMIDIPort() {\n        midiOutput = (0, _midi.getMIDIPortByID)(params.port);\n\n        // update the processor's name parameter\n        store.dispatch(store.getActions().changeParameter(my.id, 'name', params.portName));\n    },\n\n\n    /**\n     * Update the ports parameter with the current available ports.\n     */\n    updatePortsParameter = function updatePortsParameter(state) {\n\n        // rebuild the parameter's model and recreate the parameter\n        var portsModel = [{ label: 'No output', value: 'none' }];\n        state.ports.allIds.forEach(function (portID) {\n            var port = state.ports.byId[portID];\n            if (port.type === 'output' && port.networkEnabled && port.state === 'connected') {\n                portsModel.push({ label: port.name, value: port.id });\n            }\n        });\n        store.dispatch(store.getActions().recreateParameter(my.id, 'port', { model: portsModel }));\n\n        // set the parameter's value\n        var recreatedState = store.getState(),\n            portParam = recreatedState.processors.byId[my.id].params.byId.port,\n            value = portParam.value,\n            model = portParam.model;\n        var item = model.find(function (element) {\n            return element.value === value;\n        });\n        item = item || model.find(function (element) {\n            return element.value === 'none';\n        });\n\n        store.dispatch(store.getActions().changeParameter(my.id, 'port', item.value));\n        store.dispatch(store.getActions().changeParameter(my.id, 'name', item.label));\n    },\n        setEnabled = function setEnabled(isEnabled) {\n        my.isEnabled = isEnabled;\n    },\n        getMIDIPortID = function getMIDIPortID() {\n        return portID;\n    };\n\n    my = my || {};\n    my.isEnabled = true;\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    that.setEnabled = setEnabled;\n    that.getMIDIPortID = getMIDIPortID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = addWindowResize;\n/**\n * Window resize listener functionality.\n * Add callback functions that will be called on window resize,\n * but debounced to not be called more that every so many milliseconds.\n */\nvar debouncedFunction,\n    callbacks = [],\n    delay = 250,\n\n\n/**\n * Returns a function, that, as long as it continues to be invoked, \n * will not be triggered. The function will be called after it \n * stops being called for N milliseconds. If `immediate` is passed, \n * trigger the function on the leading edge, instead of the trailing.\n * @see https://davidwalsh.name/javascript-debounce-function\n * @param  {Function} func Function to call after delay.\n * @param  {Number} wait Milliseconds to wait before next call.\n * @param  {Boolean} immediate True to not wait.\n */\ndebounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function () {\n        var context = this,\n            args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\n\nfunction addWindowResize(specs, my) {\n    var that,\n\n\n    /**\n     * Add callback function to be called on debounced resize.\n     * @param  {Function} callback Callback function.\n     */\n    addWindowResizeCallback = function addWindowResizeCallback(callback) {\n        callbacks.push(callback);\n        if (!debouncedFunction) {\n            debouncedFunction = debounce(function () {\n                callbacks.forEach(function (callbackFunction) {\n                    callbackFunction();\n                });\n            }, delay);\n            window.addEventListener('resize', debouncedFunction);\n        }\n    };\n\n    my = my || {};\n    my.addWindowResizeCallback = addWindowResizeCallback;\n\n    that = specs.that || {};\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy93aW5kb3dyZXNpemUuanM/OTM1MiJdLCJuYW1lcyI6WyJhZGRXaW5kb3dSZXNpemUiLCJkZWJvdW5jZWRGdW5jdGlvbiIsImNhbGxiYWNrcyIsImRlbGF5IiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVvdXQiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImxhdGVyIiwiYXBwbHkiLCJjYWxsTm93IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInNwZWNzIiwibXkiLCJ0aGF0IiwiYWRkV2luZG93UmVzaXplQ2FsbGJhY2siLCJjYWxsYmFjayIsInB1c2giLCJmb3JFYWNoIiwiY2FsbGJhY2tGdW5jdGlvbiIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQW9Dd0JBLGU7QUFwQ3hCOzs7OztBQUtBLElBQUlDLGlCQUFKO0FBQUEsSUFDSUMsWUFBWSxFQURoQjtBQUFBLElBRUlDLFFBQVEsR0FGWjs7O0FBSUk7Ozs7Ozs7Ozs7QUFVQUMsV0FBVyxTQUFYQSxRQUFXLENBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFxQkMsU0FBckIsRUFBZ0M7QUFDdkMsUUFBSUMsT0FBSjtBQUNBLFdBQU8sWUFBVztBQUNkLFlBQUlDLFVBQVUsSUFBZDtBQUFBLFlBQW9CQyxPQUFPQyxTQUEzQjtBQUNBLFlBQUlDLFFBQVEsU0FBUkEsS0FBUSxHQUFXO0FBQ25CSixzQkFBVSxJQUFWO0FBQ0EsZ0JBQUksQ0FBQ0QsU0FBTCxFQUFnQjtBQUNaRixxQkFBS1EsS0FBTCxDQUFXSixPQUFYLEVBQW9CQyxJQUFwQjtBQUNIO0FBQ0osU0FMRDtBQU1BLFlBQUlJLFVBQVVQLGFBQWEsQ0FBQ0MsT0FBNUI7QUFDQU8scUJBQWFQLE9BQWI7QUFDQUEsa0JBQVVRLFdBQVdKLEtBQVgsRUFBa0JOLElBQWxCLENBQVY7QUFDQSxZQUFJUSxPQUFKLEVBQWFULEtBQUtRLEtBQUwsQ0FBV0osT0FBWCxFQUFvQkMsSUFBcEI7QUFDaEIsS0FaRDtBQWFILENBN0JMOztBQStCZSxTQUFTVixlQUFULENBQXlCaUIsS0FBekIsRUFBZ0NDLEVBQWhDLEVBQW9DO0FBQy9DLFFBQUlDLElBQUo7OztBQUVJOzs7O0FBSUFDLDhCQUEwQixTQUExQkEsdUJBQTBCLENBQVNDLFFBQVQsRUFBbUI7QUFDekNuQixrQkFBVW9CLElBQVYsQ0FBZUQsUUFBZjtBQUNBLFlBQUksQ0FBQ3BCLGlCQUFMLEVBQXdCO0FBQ3BCQSxnQ0FBb0JHLFNBQVMsWUFBVztBQUNwQ0YsMEJBQVVxQixPQUFWLENBQWtCLFVBQVNDLGdCQUFULEVBQTJCO0FBQ3pDQTtBQUNILGlCQUZEO0FBR0gsYUFKbUIsRUFJakJyQixLQUppQixDQUFwQjtBQUtBc0IsbUJBQU9DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDekIsaUJBQWxDO0FBQ0g7QUFDSixLQWhCTDs7QUFrQkFpQixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0UsdUJBQUgsR0FBNkJBLHVCQUE3Qjs7QUFFQUQsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBLFdBQU9BLElBQVA7QUFDSCIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2luZG93IHJlc2l6ZSBsaXN0ZW5lciBmdW5jdGlvbmFsaXR5LlxuICogQWRkIGNhbGxiYWNrIGZ1bmN0aW9ucyB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uIHdpbmRvdyByZXNpemUsXG4gKiBidXQgZGVib3VuY2VkIHRvIG5vdCBiZSBjYWxsZWQgbW9yZSB0aGF0IGV2ZXJ5IHNvIG1hbnkgbWlsbGlzZWNvbmRzLlxuICovXG52YXIgZGVib3VuY2VkRnVuY3Rpb24sXG4gICAgY2FsbGJhY2tzID0gW10sXG4gICAgZGVsYXkgPSAyNTAsXG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCBhcyBsb25nIGFzIGl0IGNvbnRpbnVlcyB0byBiZSBpbnZva2VkLCBcbiAgICAgKiB3aWxsIG5vdCBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBcbiAgICAgKiBzdG9wcyBiZWluZyBjYWxsZWQgZm9yIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIFxuICAgICAqIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2UsIGluc3RlYWQgb2YgdGhlIHRyYWlsaW5nLlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kYXZpZHdhbHNoLm5hbWUvamF2YXNjcmlwdC1kZWJvdW5jZS1mdW5jdGlvblxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmdW5jIEZ1bmN0aW9uIHRvIGNhbGwgYWZ0ZXIgZGVsYXkuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSB3YWl0IE1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBuZXh0IGNhbGwuXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW1tZWRpYXRlIFRydWUgdG8gbm90IHdhaXQuXG4gICAgICovXG4gICAgZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICAgICAgdmFyIHRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjYWxsTm93ID0gaW1tZWRpYXRlICYmICF0aW1lb3V0O1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgICAgICAgaWYgKGNhbGxOb3cpIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkV2luZG93UmVzaXplKHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gZGVib3VuY2VkIHJlc2l6ZS5cbiAgICAgICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkV2luZG93UmVzaXplQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKCFkZWJvdW5jZWRGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGRlYm91bmNlZEZ1bmN0aW9uID0gZGVib3VuY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrRnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZWRGdW5jdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5hZGRXaW5kb3dSZXNpemVDYWxsYmFjayA9IGFkZFdpbmRvd1Jlc2l6ZUNhbGxiYWNrO1xuICAgIFxuICAgIHRoYXQgPSBzcGVjcy50aGF0IHx8IHt9O1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvd2luZG93cmVzaXplLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\n\nvar TWEEN = TWEEN || function () {\n\n\tvar _tweens = [];\n\n\treturn {\n\n\t\tgetAll: function getAll() {\n\n\t\t\treturn _tweens;\n\t\t},\n\n\t\tremoveAll: function removeAll() {\n\n\t\t\t_tweens = [];\n\t\t},\n\n\t\tadd: function add(tween) {\n\n\t\t\t_tweens.push(tween);\n\t\t},\n\n\t\tremove: function remove(tween) {\n\n\t\t\tvar i = _tweens.indexOf(tween);\n\n\t\t\tif (i !== -1) {\n\t\t\t\t_tweens.splice(i, 1);\n\t\t\t}\n\t\t},\n\n\t\tupdate: function update(time, preserve) {\n\n\t\t\tif (_tweens.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar i = 0;\n\n\t\t\ttime = time !== undefined ? time : TWEEN.now();\n\n\t\t\twhile (i < _tweens.length) {\n\n\t\t\t\tif (_tweens[i].update(time) || preserve) {\n\t\t\t\t\ti++;\n\t\t\t\t} else {\n\t\t\t\t\t_tweens.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t};\n}();\n\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\nif (typeof window === 'undefined' && typeof process !== 'undefined') {\n\tTWEEN.now = function () {\n\t\tvar time = process.hrtime();\n\n\t\t// Convert [seconds, nanoseconds] to milliseconds.\n\t\treturn time[0] * 1000 + time[1] / 1000000;\n\t};\n}\n// In a browser, use window.performance.now if it is available.\nelse if (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {\n\t\t// This must be bound, because directly assigning this function\n\t\t// leads to an invocation exception in Chrome.\n\t\tTWEEN.now = window.performance.now.bind(window.performance);\n\t}\n\t// Use Date.now if it is available.\n\telse if (Date.now !== undefined) {\n\t\t\tTWEEN.now = Date.now;\n\t\t}\n\t\t// Otherwise, use 'new Date().getTime()'.\n\t\telse {\n\t\t\t\tTWEEN.now = function () {\n\t\t\t\t\treturn new Date().getTime();\n\t\t\t\t};\n\t\t\t}\n\nTWEEN.Tween = function (object) {\n\n\tvar _object = object;\n\tvar _valuesStart = {};\n\tvar _valuesEnd = {};\n\tvar _valuesStartRepeat = {};\n\tvar _duration = 1000;\n\tvar _repeat = 0;\n\tvar _repeatDelayTime;\n\tvar _yoyo = false;\n\tvar _isPlaying = false;\n\tvar _reversed = false;\n\tvar _delayTime = 0;\n\tvar _startTime = null;\n\tvar _easingFunction = TWEEN.Easing.Linear.None;\n\tvar _interpolationFunction = TWEEN.Interpolation.Linear;\n\tvar _chainedTweens = [];\n\tvar _onStartCallback = null;\n\tvar _onStartCallbackFired = false;\n\tvar _onUpdateCallback = null;\n\tvar _onCompleteCallback = null;\n\tvar _onStopCallback = null;\n\n\tthis.to = function (properties, duration) {\n\n\t\t_valuesEnd = properties;\n\n\t\tif (duration !== undefined) {\n\t\t\t_duration = duration;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.start = function (time) {\n\n\t\tTWEEN.add(this);\n\n\t\t_isPlaying = true;\n\n\t\t_onStartCallbackFired = false;\n\n\t\t_startTime = time !== undefined ? time : TWEEN.now();\n\t\t_startTime += _delayTime;\n\n\t\tfor (var property in _valuesEnd) {\n\n\t\t\t// Check if an Array was provided as property value\n\t\t\tif (_valuesEnd[property] instanceof Array) {\n\n\t\t\t\tif (_valuesEnd[property].length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create a local copy of the Array with the start value at the front\n\t\t\t\t_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);\n\t\t\t}\n\n\t\t\t// If `to()` specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (_object[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Save the starting value.\n\t\t\t_valuesStart[property] = _object[property];\n\n\t\t\tif (_valuesStart[property] instanceof Array === false) {\n\t\t\t\t_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n\t\t\t}\n\n\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\t\t}\n\n\t\treturn this;\n\t};\n\n\tthis.stop = function () {\n\n\t\tif (!_isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tTWEEN.remove(this);\n\t\t_isPlaying = false;\n\n\t\tif (_onStopCallback !== null) {\n\t\t\t_onStopCallback.call(_object, _object);\n\t\t}\n\n\t\tthis.stopChainedTweens();\n\t\treturn this;\n\t};\n\n\tthis.end = function () {\n\n\t\tthis.update(_startTime + _duration);\n\t\treturn this;\n\t};\n\n\tthis.stopChainedTweens = function () {\n\n\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t_chainedTweens[i].stop();\n\t\t}\n\t};\n\n\tthis.delay = function (amount) {\n\n\t\t_delayTime = amount;\n\t\treturn this;\n\t};\n\n\tthis.repeat = function (times) {\n\n\t\t_repeat = times;\n\t\treturn this;\n\t};\n\n\tthis.repeatDelay = function (amount) {\n\n\t\t_repeatDelayTime = amount;\n\t\treturn this;\n\t};\n\n\tthis.yoyo = function (yoyo) {\n\n\t\t_yoyo = yoyo;\n\t\treturn this;\n\t};\n\n\tthis.easing = function (easing) {\n\n\t\t_easingFunction = easing;\n\t\treturn this;\n\t};\n\n\tthis.interpolation = function (interpolation) {\n\n\t\t_interpolationFunction = interpolation;\n\t\treturn this;\n\t};\n\n\tthis.chain = function () {\n\n\t\t_chainedTweens = arguments;\n\t\treturn this;\n\t};\n\n\tthis.onStart = function (callback) {\n\n\t\t_onStartCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onUpdate = function (callback) {\n\n\t\t_onUpdateCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onComplete = function (callback) {\n\n\t\t_onCompleteCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.onStop = function (callback) {\n\n\t\t_onStopCallback = callback;\n\t\treturn this;\n\t};\n\n\tthis.update = function (time) {\n\n\t\tvar property;\n\t\tvar elapsed;\n\t\tvar value;\n\n\t\tif (time < _startTime) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (_onStartCallbackFired === false) {\n\n\t\t\tif (_onStartCallback !== null) {\n\t\t\t\t_onStartCallback.call(_object, _object);\n\t\t\t}\n\n\t\t\t_onStartCallbackFired = true;\n\t\t}\n\n\t\telapsed = (time - _startTime) / _duration;\n\t\telapsed = elapsed > 1 ? 1 : elapsed;\n\n\t\tvalue = _easingFunction(elapsed);\n\n\t\tfor (property in _valuesEnd) {\n\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (_valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar start = _valuesStart[property] || 0;\n\t\t\tvar end = _valuesEnd[property];\n\n\t\t\tif (end instanceof Array) {\n\n\t\t\t\t_object[property] = _interpolationFunction(end, value);\n\t\t\t} else {\n\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tif (typeof end === 'string') {\n\n\t\t\t\t\tif (end.charAt(0) === '+' || end.charAt(0) === '-') {\n\t\t\t\t\t\tend = start + parseFloat(end);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tend = parseFloat(end);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof end === 'number') {\n\t\t\t\t\t_object[property] = start + (end - start) * value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (_onUpdateCallback !== null) {\n\t\t\t_onUpdateCallback.call(_object, value);\n\t\t}\n\n\t\tif (elapsed === 1) {\n\n\t\t\tif (_repeat > 0) {\n\n\t\t\t\tif (isFinite(_repeat)) {\n\t\t\t\t\t_repeat--;\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values, restart by making startTime = now\n\t\t\t\tfor (property in _valuesStartRepeat) {\n\n\t\t\t\t\tif (typeof _valuesEnd[property] === 'string') {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_yoyo) {\n\t\t\t\t\t\tvar tmp = _valuesStartRepeat[property];\n\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\t_valuesStart[property] = _valuesStartRepeat[property];\n\t\t\t\t}\n\n\t\t\t\tif (_yoyo) {\n\t\t\t\t\t_reversed = !_reversed;\n\t\t\t\t}\n\n\t\t\t\tif (_repeatDelayTime !== undefined) {\n\t\t\t\t\t_startTime = time + _repeatDelayTime;\n\t\t\t\t} else {\n\t\t\t\t\t_startTime = time + _delayTime;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t} else {\n\n\t\t\t\tif (_onCompleteCallback !== null) {\n\n\t\t\t\t\t_onCompleteCallback.call(_object, _object);\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t\t// even if the `update()` method was called way past the duration of the tween\n\t\t\t\t\t_chainedTweens[i].start(_startTime + _duration);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n};\n\nTWEEN.Easing = {\n\n\tLinear: {\n\n\t\tNone: function None(k) {\n\n\t\t\treturn k;\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn k * (2 - k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn -0.5 * (--k * (k - 2) - 1);\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn --k * k * k + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn 1 - --k * k * k * k;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn -0.5 * ((k -= 2) * k * k * k - 2);\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k * k * k * k * k;\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\treturn Math.sqrt(1 - --k * k);\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn -0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function In(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tk *= 2;\n\n\t\t\tif (k < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function In(k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function In(k) {\n\n\t\t\treturn 1 - TWEEN.Easing.Bounce.Out(1 - k);\n\t\t},\n\n\t\tOut: function Out(k) {\n\n\t\t\tif (k < 1 / 2.75) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < 2 / 2.75) {\n\t\t\t\treturn 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n\t\t\t} else if (k < 2.5 / 2.75) {\n\t\t\t\treturn 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n\t\t\t}\n\t\t},\n\n\t\tInOut: function InOut(k) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\t\t}\n\n\t}\n\n};\n\nTWEEN.Interpolation = {\n\n\tLinear: function Linear(v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.Linear;\n\n\t\tif (k < 0) {\n\t\t\treturn fn(v[0], v[1], f);\n\t\t}\n\n\t\tif (k > 1) {\n\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t}\n\n\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t},\n\n\tBezier: function Bezier(v, k) {\n\n\t\tvar b = 0;\n\t\tvar n = v.length - 1;\n\t\tvar pw = Math.pow;\n\t\tvar bn = TWEEN.Interpolation.Utils.Bernstein;\n\n\t\tfor (var i = 0; i <= n; i++) {\n\t\t\tb += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n\t\t}\n\n\t\treturn b;\n\t},\n\n\tCatmullRom: function CatmullRom(v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.CatmullRom;\n\n\t\tif (v[0] === v[m]) {\n\n\t\t\tif (k < 0) {\n\t\t\t\ti = Math.floor(f = m * (1 + k));\n\t\t\t}\n\n\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\t\t} else {\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\t\t}\n\t},\n\n\tUtils: {\n\n\t\tLinear: function Linear(p0, p1, t) {\n\n\t\t\treturn (p1 - p0) * t + p0;\n\t\t},\n\n\t\tBernstein: function Bernstein(n, i) {\n\n\t\t\tvar fc = TWEEN.Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\t\t},\n\n\t\tFactorial: function () {\n\n\t\t\tvar a = [1];\n\n\t\t\treturn function (n) {\n\n\t\t\t\tvar s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (var i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\t\t\t\treturn s;\n\t\t\t};\n\t\t}(),\n\n\t\tCatmullRom: function CatmullRom(p0, p1, p2, p3, t) {\n\n\t\t\tvar v0 = (p2 - p0) * 0.5;\n\t\t\tvar v1 = (p3 - p1) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t\t}\n\n\t}\n\n};\n\n// UMD (Universal Module Definition)\n(function (root) {\n\n\tif (true) {\n\n\t\t// AMD\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn TWEEN;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module !== 'undefined' && (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n\n\t\t// Node.js\n\t\tmodule.exports = TWEEN;\n\t} else if (root !== undefined) {\n\n\t\t// Global variable\n\t\troot.TWEEN = TWEEN;\n\t}\n})(undefined);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(42)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR3ZWVuanMvdHdlZW4uanMvc3JjL1R3ZWVuLmpzP2E1NzIiXSwibmFtZXMiOlsiVFdFRU4iLCJfdHdlZW5zIiwiZ2V0QWxsIiwicmVtb3ZlQWxsIiwiYWRkIiwidHdlZW4iLCJwdXNoIiwicmVtb3ZlIiwiaSIsImluZGV4T2YiLCJzcGxpY2UiLCJ1cGRhdGUiLCJ0aW1lIiwicHJlc2VydmUiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJub3ciLCJ3aW5kb3ciLCJwcm9jZXNzIiwiaHJ0aW1lIiwicGVyZm9ybWFuY2UiLCJiaW5kIiwiRGF0ZSIsImdldFRpbWUiLCJUd2VlbiIsIm9iamVjdCIsIl9vYmplY3QiLCJfdmFsdWVzU3RhcnQiLCJfdmFsdWVzRW5kIiwiX3ZhbHVlc1N0YXJ0UmVwZWF0IiwiX2R1cmF0aW9uIiwiX3JlcGVhdCIsIl9yZXBlYXREZWxheVRpbWUiLCJfeW95byIsIl9pc1BsYXlpbmciLCJfcmV2ZXJzZWQiLCJfZGVsYXlUaW1lIiwiX3N0YXJ0VGltZSIsIl9lYXNpbmdGdW5jdGlvbiIsIkVhc2luZyIsIkxpbmVhciIsIk5vbmUiLCJfaW50ZXJwb2xhdGlvbkZ1bmN0aW9uIiwiSW50ZXJwb2xhdGlvbiIsIl9jaGFpbmVkVHdlZW5zIiwiX29uU3RhcnRDYWxsYmFjayIsIl9vblN0YXJ0Q2FsbGJhY2tGaXJlZCIsIl9vblVwZGF0ZUNhbGxiYWNrIiwiX29uQ29tcGxldGVDYWxsYmFjayIsIl9vblN0b3BDYWxsYmFjayIsInRvIiwicHJvcGVydGllcyIsImR1cmF0aW9uIiwic3RhcnQiLCJwcm9wZXJ0eSIsIkFycmF5IiwiY29uY2F0Iiwic3RvcCIsImNhbGwiLCJzdG9wQ2hhaW5lZFR3ZWVucyIsImVuZCIsIm51bUNoYWluZWRUd2VlbnMiLCJkZWxheSIsImFtb3VudCIsInJlcGVhdCIsInRpbWVzIiwicmVwZWF0RGVsYXkiLCJ5b3lvIiwiZWFzaW5nIiwiaW50ZXJwb2xhdGlvbiIsImNoYWluIiwiYXJndW1lbnRzIiwib25TdGFydCIsImNhbGxiYWNrIiwib25VcGRhdGUiLCJvbkNvbXBsZXRlIiwib25TdG9wIiwiZWxhcHNlZCIsInZhbHVlIiwiY2hhckF0IiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwidG1wIiwiayIsIlF1YWRyYXRpYyIsIkluIiwiT3V0IiwiSW5PdXQiLCJDdWJpYyIsIlF1YXJ0aWMiLCJRdWludGljIiwiU2ludXNvaWRhbCIsIk1hdGgiLCJjb3MiLCJQSSIsInNpbiIsIkV4cG9uZW50aWFsIiwicG93IiwiQ2lyY3VsYXIiLCJzcXJ0IiwiRWxhc3RpYyIsIkJhY2siLCJzIiwiQm91bmNlIiwidiIsIm0iLCJmIiwiZmxvb3IiLCJmbiIsIlV0aWxzIiwiQmV6aWVyIiwiYiIsIm4iLCJwdyIsImJuIiwiQmVybnN0ZWluIiwiQ2F0bXVsbFJvbSIsInAwIiwicDEiLCJ0IiwiZmMiLCJGYWN0b3JpYWwiLCJhIiwicDIiLCJwMyIsInYwIiwidjEiLCJ0MiIsInQzIiwicm9vdCIsImRlZmluZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7O0FBU0EsSUFBSUEsUUFBUUEsU0FBVSxZQUFZOztBQUVqQyxLQUFJQyxVQUFVLEVBQWQ7O0FBRUEsUUFBTzs7QUFFTkMsVUFBUSxrQkFBWTs7QUFFbkIsVUFBT0QsT0FBUDtBQUVBLEdBTks7O0FBUU5FLGFBQVcscUJBQVk7O0FBRXRCRixhQUFVLEVBQVY7QUFFQSxHQVpLOztBQWNORyxPQUFLLGFBQVVDLEtBQVYsRUFBaUI7O0FBRXJCSixXQUFRSyxJQUFSLENBQWFELEtBQWI7QUFFQSxHQWxCSzs7QUFvQk5FLFVBQVEsZ0JBQVVGLEtBQVYsRUFBaUI7O0FBRXhCLE9BQUlHLElBQUlQLFFBQVFRLE9BQVIsQ0FBZ0JKLEtBQWhCLENBQVI7O0FBRUEsT0FBSUcsTUFBTSxDQUFDLENBQVgsRUFBYztBQUNiUCxZQUFRUyxNQUFSLENBQWVGLENBQWYsRUFBa0IsQ0FBbEI7QUFDQTtBQUVELEdBNUJLOztB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LElBQVYsRUFBZ0I7O0FBRWhCLEtBQUksSUFBSixFQUFnRDs7QUFFL0M7QUFDQUMsRUFBQSxpQ0FBTyxFQUFQLG1DQUFXLFlBQVk7QUFDdEIsVUFBT2xJLEtBQVA7QUFDQSxHQUZEO0FBQUE7QUFJQSxFQVBELE1BT08sSUFBSSxPQUFPbUksTUFBUCxLQUFrQixXQUFsQixJQUFpQyxRQUFPQyxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXhELEVBQWtFOztBQUV4RTtBQUNBRCxTQUFPQyxPQUFQLEdBQWlCcEksS0FBakI7QUFFQSxFQUxNLE1BS0EsSUFBSWlJLFNBQVNsSCxTQUFiLEVBQXdCOztBQUU5QjtBQUNBa0gsT0FBS2pJLEtBQUwsR0FBYUEsS0FBYjtBQUVBO0FBRUQsQ0FyQkQsYSIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHdlZW4uanMgLSBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90d2VlbmpzL3R3ZWVuLmpzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2VlbmpzL3R3ZWVuLmpzL2dyYXBocy9jb250cmlidXRvcnMgZm9yIHRoZSBmdWxsIGxpc3Qgb2YgY29udHJpYnV0b3JzLlxuICogVGhhbmsgeW91IGFsbCwgeW91J3JlIGF3ZXNvbWUhXG4gKi9cblxudmFyIFRXRUVOID0gVFdFRU4gfHwgKGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgX3R3ZWVucyA9IFtdO1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXRBbGw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF90d2VlbnM7XG5cblx0XHR9LFxuXG5cdFx0cmVtb3ZlQWxsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdF90d2VlbnMgPSBbXTtcblxuXHRcdH0sXG5cblx0XHRhZGQ6IGZ1bmN0aW9uICh0d2Vlbikge1xuXG5cdFx0XHRfdHdlZW5zLnB1c2godHdlZW4pO1xuXG5cdFx0fSxcblxuXHRcdHJlbW92ZTogZnVuY3Rpb24gKHR3ZWVuKSB7XG5cblx0XHRcdHZhciBpID0gX3R3ZWVucy5pbmRleE9mKHR3ZWVuKTtcblxuXHRcdFx0aWYgKGkgIT09IC0xKSB7XG5cdFx0XHRcdF90d2VlbnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24gKHRpbWUsIHByZXNlcnZlKSB7XG5cblx0XHRcdGlmIChfdHdlZW5zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0dGltZSA9IHRpbWUgIT09IHVuZGVmaW5lZCA/IHRpbWUgOiBUV0VFTi5ub3coKTtcblxuXHRcdFx0d2hpbGUgKGkgPCBfdHdlZW5zLmxlbmd0aCkge1xuXG5cdFx0XHRcdGlmIChfdHdlZW5zW2ldLnVwZGF0ZSh0aW1lKSB8fCBwcmVzZXJ2ZSkge1xuXHRcdFx0XHRcdGkrKztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfdHdlZW5zLnNwbGljZShpLCAxKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXHR9O1xuXG59KSgpO1xuXG5cbi8vIEluY2x1ZGUgYSBwZXJmb3JtYW5jZS5ub3cgcG9seWZpbGwuXG4vLyBJbiBub2RlLmpzLCB1c2UgcHJvY2Vzcy5ocnRpbWUuXG5pZiAodHlwZW9mICh3aW5kb3cpID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgKHByb2Nlc3MpICE9PSAndW5kZWZpbmVkJykge1xuXHRUV0VFTi5ub3cgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZSgpO1xuXG5cdFx0Ly8gQ29udmVydCBbc2Vjb25kcywgbmFub3NlY29uZHNdIHRvIG1pbGxpc2Vjb25kcy5cblx0XHRyZXR1cm4gdGltZVswXSAqIDEwMDAgKyB0aW1lWzFdIC8gMTAwMDAwMDtcblx0fTtcbn1cbi8vIEluIGEgYnJvd3NlciwgdXNlIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgaWYgaXQgaXMgYXZhaWxhYmxlLlxuZWxzZSBpZiAodHlwZW9mICh3aW5kb3cpICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgd2luZG93LnBlcmZvcm1hbmNlICE9PSB1bmRlZmluZWQgJiZcblx0XHQgd2luZG93LnBlcmZvcm1hbmNlLm5vdyAhPT0gdW5kZWZpbmVkKSB7XG5cdC8vIFRoaXMgbXVzdCBiZSBib3VuZCwgYmVjYXVzZSBkaXJlY3RseSBhc3NpZ25pbmcgdGhpcyBmdW5jdGlvblxuXHQvLyBsZWFkcyB0byBhbiBpbnZvY2F0aW9uIGV4Y2VwdGlvbiBpbiBDaHJvbWUuXG5cdFRXRUVOLm5vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3aW5kb3cucGVyZm9ybWFuY2UpO1xufVxuLy8gVXNlIERhdGUubm93IGlmIGl0IGlzIGF2YWlsYWJsZS5cbmVsc2UgaWYgKERhdGUubm93ICE9PSB1bmRlZmluZWQpIHtcblx0VFdFRU4ubm93ID0gRGF0ZS5ub3c7XG59XG4vLyBPdGhlcndpc2UsIHVzZSAnbmV3IERhdGUoKS5nZXRUaW1lKCknLlxuZWxzZSB7XG5cdFRXRUVOLm5vdyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdH07XG59XG5cblxuVFdFRU4uVHdlZW4gPSBmdW5jdGlvbiAob2JqZWN0KSB7XG5cblx0dmFyIF9vYmplY3QgPSBvYmplY3Q7XG5cdHZhciBfdmFsdWVzU3RhcnQgPSB7fTtcblx0dmFyIF92YWx1ZXNFbmQgPSB7fTtcblx0dmFyIF92YWx1ZXNTdGFydFJlcGVhdCA9IHt9O1xuXHR2YXIgX2R1cmF0aW9uID0gMTAwMDtcblx0dmFyIF9yZXBlYXQgPSAwO1xuXHR2YXIgX3JlcGVhdERlbGF5VGltZTtcblx0dmFyIF95b3lvID0gZmFsc2U7XG5cdHZhciBfaXNQbGF5aW5nID0gZmFsc2U7XG5cdHZhciBfcmV2ZXJzZWQgPSBmYWxzZTtcblx0dmFyIF9kZWxheVRpbWUgPSAwO1xuXHR2YXIgX3N0YXJ0VGltZSA9IG51bGw7XG5cdHZhciBfZWFzaW5nRnVuY3Rpb24gPSBUV0VFTi5FYXNpbmcuTGluZWFyLk5vbmU7XG5cdHZhciBfaW50ZXJwb2xhdGlvbkZ1bmN0aW9uID0gVFdFRU4uSW50ZXJwb2xhdGlvbi5MaW5lYXI7XG5cdHZhciBfY2hhaW5lZFR3ZWVucyA9IFtdO1xuXHR2YXIgX29uU3RhcnRDYWxsYmFjayA9IG51bGw7XG5cdHZhciBfb25TdGFydENhbGxiYWNrRmlyZWQgPSBmYWxzZTtcblx0dmFyIF9vblVwZGF0ZUNhbGxiYWNrID0gbnVsbDtcblx0dmFyIF9vbkNvbXBsZXRlQ2FsbGJhY2sgPSBudWxsO1xuXHR2YXIgX29uU3RvcENhbGxiYWNrID0gbnVsbDtcblxuXHR0aGlzLnRvID0gZnVuY3Rpb24gKHByb3BlcnRpZXMsIGR1cmF0aW9uKSB7XG5cblx0XHRfdmFsdWVzRW5kID0gcHJvcGVydGllcztcblxuXHRcdGlmIChkdXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfZHVyYXRpb24gPSBkdXJhdGlvbjtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAodGltZSkge1xuXG5cdFx0VFdFRU4uYWRkKHRoaXMpO1xuXG5cdFx0X2lzUGxheWluZyA9IHRydWU7XG5cblx0XHRfb25TdGFydENhbGxiYWNrRmlyZWQgPSBmYWxzZTtcblxuXHRcdF9zdGFydFRpbWUgPSB0aW1lICE9PSB1bmRlZmluZWQgPyB0aW1lIDogVFdFRU4ubm93KCk7XG5cdFx0X3N0YXJ0VGltZSArPSBfZGVsYXlUaW1lO1xuXG5cdFx0Zm9yICh2YXIgcHJvcGVydHkgaW4gX3ZhbHVlc0VuZCkge1xuXG5cdFx0XHQvLyBDaGVjayBpZiBhbiBBcnJheSB3YXMgcHJvdmlkZWQgYXMgcHJvcGVydHkgdmFsdWVcblx0XHRcdGlmIChfdmFsdWVzRW5kW3Byb3BlcnR5XSBpbnN0YW5jZW9mIEFycmF5KSB7XG5cblx0XHRcdFx0aWYgKF92YWx1ZXNFbmRbcHJvcGVydHldLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIGEgbG9jYWwgY29weSBvZiB0aGUgQXJyYXkgd2l0aCB0aGUgc3RhcnQgdmFsdWUgYXQgdGhlIGZyb250XG5cdFx0XHRcdF92YWx1ZXNFbmRbcHJvcGVydHldID0gW19vYmplY3RbcHJvcGVydHldXS5jb25jYXQoX3ZhbHVlc0VuZFtwcm9wZXJ0eV0pO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGB0bygpYCBzcGVjaWZpZXMgYSBwcm9wZXJ0eSB0aGF0IGRvZXNuJ3QgZXhpc3QgaW4gdGhlIHNvdXJjZSBvYmplY3QsXG5cdFx0XHQvLyB3ZSBzaG91bGQgbm90IHNldCB0aGF0IHByb3BlcnR5IGluIHRoZSBvYmplY3Rcblx0XHRcdGlmIChfb2JqZWN0W3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIHRoZSBzdGFydGluZyB2YWx1ZS5cblx0XHRcdF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPSBfb2JqZWN0W3Byb3BlcnR5XTtcblxuXHRcdFx0aWYgKChfdmFsdWVzU3RhcnRbcHJvcGVydHldIGluc3RhbmNlb2YgQXJyYXkpID09PSBmYWxzZSkge1xuXHRcdFx0XHRfdmFsdWVzU3RhcnRbcHJvcGVydHldICo9IDEuMDsgLy8gRW5zdXJlcyB3ZSdyZSB1c2luZyBudW1iZXJzLCBub3Qgc3RyaW5nc1xuXHRcdFx0fVxuXG5cdFx0XHRfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldID0gX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSB8fCAwO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIV9pc1BsYXlpbmcpIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdFRXRUVOLnJlbW92ZSh0aGlzKTtcblx0XHRfaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHRpZiAoX29uU3RvcENhbGxiYWNrICE9PSBudWxsKSB7XG5cdFx0XHRfb25TdG9wQ2FsbGJhY2suY2FsbChfb2JqZWN0LCBfb2JqZWN0KTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BDaGFpbmVkVHdlZW5zKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLmVuZCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMudXBkYXRlKF9zdGFydFRpbWUgKyBfZHVyYXRpb24pO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5zdG9wQ2hhaW5lZFR3ZWVucyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZvciAodmFyIGkgPSAwLCBudW1DaGFpbmVkVHdlZW5zID0gX2NoYWluZWRUd2VlbnMubGVuZ3RoOyBpIDwgbnVtQ2hhaW5lZFR3ZWVuczsgaSsrKSB7XG5cdFx0XHRfY2hhaW5lZFR3ZWVuc1tpXS5zdG9wKCk7XG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5kZWxheSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcblxuXHRcdF9kZWxheVRpbWUgPSBhbW91bnQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLnJlcGVhdCA9IGZ1bmN0aW9uICh0aW1lcykge1xuXG5cdFx0X3JlcGVhdCA9IHRpbWVzO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcblxuXHRcdF9yZXBlYXREZWxheVRpbWUgPSBhbW91bnQ7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fTtcblxuXHR0aGlzLnlveW8gPSBmdW5jdGlvbiAoeW95bykge1xuXG5cdFx0X3lveW8gPSB5b3lvO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblxuXHR0aGlzLmVhc2luZyA9IGZ1bmN0aW9uIChlYXNpbmcpIHtcblxuXHRcdF9lYXNpbmdGdW5jdGlvbiA9IGVhc2luZztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMuaW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChpbnRlcnBvbGF0aW9uKSB7XG5cblx0XHRfaW50ZXJwb2xhdGlvbkZ1bmN0aW9uID0gaW50ZXJwb2xhdGlvbjtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMuY2hhaW4gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRfY2hhaW5lZFR3ZWVucyA9IGFyZ3VtZW50cztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMub25TdGFydCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXG5cdFx0X29uU3RhcnRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5vblVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXG5cdFx0X29uVXBkYXRlQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMub25Db21wbGV0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXG5cdFx0X29uQ29tcGxldGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5vblN0b3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblxuXHRcdF9vblN0b3BDYWxsYmFjayA9IGNhbGxiYWNrO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAodGltZSkge1xuXG5cdFx0dmFyIHByb3BlcnR5O1xuXHRcdHZhciBlbGFwc2VkO1xuXHRcdHZhciB2YWx1ZTtcblxuXHRcdGlmICh0aW1lIDwgX3N0YXJ0VGltZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKF9vblN0YXJ0Q2FsbGJhY2tGaXJlZCA9PT0gZmFsc2UpIHtcblxuXHRcdFx0aWYgKF9vblN0YXJ0Q2FsbGJhY2sgIT09IG51bGwpIHtcblx0XHRcdFx0X29uU3RhcnRDYWxsYmFjay5jYWxsKF9vYmplY3QsIF9vYmplY3QpO1xuXHRcdFx0fVxuXG5cdFx0XHRfb25TdGFydENhbGxiYWNrRmlyZWQgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGVsYXBzZWQgPSAodGltZSAtIF9zdGFydFRpbWUpIC8gX2R1cmF0aW9uO1xuXHRcdGVsYXBzZWQgPSBlbGFwc2VkID4gMSA/IDEgOiBlbGFwc2VkO1xuXG5cdFx0dmFsdWUgPSBfZWFzaW5nRnVuY3Rpb24oZWxhcHNlZCk7XG5cblx0XHRmb3IgKHByb3BlcnR5IGluIF92YWx1ZXNFbmQpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgdXBkYXRlIHByb3BlcnRpZXMgdGhhdCBkbyBub3QgZXhpc3QgaW4gdGhlIHNvdXJjZSBvYmplY3Rcblx0XHRcdGlmIChfdmFsdWVzU3RhcnRbcHJvcGVydHldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzdGFydCA9IF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gfHwgMDtcblx0XHRcdHZhciBlbmQgPSBfdmFsdWVzRW5kW3Byb3BlcnR5XTtcblxuXHRcdFx0aWYgKGVuZCBpbnN0YW5jZW9mIEFycmF5KSB7XG5cblx0XHRcdFx0X29iamVjdFtwcm9wZXJ0eV0gPSBfaW50ZXJwb2xhdGlvbkZ1bmN0aW9uKGVuZCwgdmFsdWUpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFBhcnNlcyByZWxhdGl2ZSBlbmQgdmFsdWVzIHdpdGggc3RhcnQgYXMgYmFzZSAoZS5nLjogKzEwLCAtMylcblx0XHRcdFx0aWYgKHR5cGVvZiAoZW5kKSA9PT0gJ3N0cmluZycpIHtcblxuXHRcdFx0XHRcdGlmIChlbmQuY2hhckF0KDApID09PSAnKycgfHwgZW5kLmNoYXJBdCgwKSA9PT0gJy0nKSB7XG5cdFx0XHRcdFx0XHRlbmQgPSBzdGFydCArIHBhcnNlRmxvYXQoZW5kKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZW5kID0gcGFyc2VGbG9hdChlbmQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3RlY3QgYWdhaW5zdCBub24gbnVtZXJpYyBwcm9wZXJ0aWVzLlxuXHRcdFx0XHRpZiAodHlwZW9mIChlbmQpID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRcdF9vYmplY3RbcHJvcGVydHldID0gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKF9vblVwZGF0ZUNhbGxiYWNrICE9PSBudWxsKSB7XG5cdFx0XHRfb25VcGRhdGVDYWxsYmFjay5jYWxsKF9vYmplY3QsIHZhbHVlKTtcblx0XHR9XG5cblx0XHRpZiAoZWxhcHNlZCA9PT0gMSkge1xuXG5cdFx0XHRpZiAoX3JlcGVhdCA+IDApIHtcblxuXHRcdFx0XHRpZiAoaXNGaW5pdGUoX3JlcGVhdCkpIHtcblx0XHRcdFx0XHRfcmVwZWF0LS07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWFzc2lnbiBzdGFydGluZyB2YWx1ZXMsIHJlc3RhcnQgYnkgbWFraW5nIHN0YXJ0VGltZSA9IG5vd1xuXHRcdFx0XHRmb3IgKHByb3BlcnR5IGluIF92YWx1ZXNTdGFydFJlcGVhdCkge1xuXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiAoX3ZhbHVlc0VuZFtwcm9wZXJ0eV0pID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0X3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IF92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gKyBwYXJzZUZsb2F0KF92YWx1ZXNFbmRbcHJvcGVydHldKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoX3lveW8pIHtcblx0XHRcdFx0XHRcdHZhciB0bXAgPSBfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldO1xuXG5cdFx0XHRcdFx0XHRfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldID0gX3ZhbHVlc0VuZFtwcm9wZXJ0eV07XG5cdFx0XHRcdFx0XHRfdmFsdWVzRW5kW3Byb3BlcnR5XSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfdmFsdWVzU3RhcnRbcHJvcGVydHldID0gX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKF95b3lvKSB7XG5cdFx0XHRcdFx0X3JldmVyc2VkID0gIV9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChfcmVwZWF0RGVsYXlUaW1lICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRfc3RhcnRUaW1lID0gdGltZSArIF9yZXBlYXREZWxheVRpbWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3N0YXJ0VGltZSA9IHRpbWUgKyBfZGVsYXlUaW1lO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKF9vbkNvbXBsZXRlQ2FsbGJhY2sgIT09IG51bGwpIHtcblxuXHRcdFx0XHRcdF9vbkNvbXBsZXRlQ2FsbGJhY2suY2FsbChfb2JqZWN0LCBfb2JqZWN0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBudW1DaGFpbmVkVHdlZW5zID0gX2NoYWluZWRUd2VlbnMubGVuZ3RoOyBpIDwgbnVtQ2hhaW5lZFR3ZWVuczsgaSsrKSB7XG5cdFx0XHRcdFx0Ly8gTWFrZSB0aGUgY2hhaW5lZCB0d2VlbnMgc3RhcnQgZXhhY3RseSBhdCB0aGUgdGltZSB0aGV5IHNob3VsZCxcblx0XHRcdFx0XHQvLyBldmVuIGlmIHRoZSBgdXBkYXRlKClgIG1ldGhvZCB3YXMgY2FsbGVkIHdheSBwYXN0IHRoZSBkdXJhdGlvbiBvZiB0aGUgdHdlZW5cblx0XHRcdFx0XHRfY2hhaW5lZFR3ZWVuc1tpXS5zdGFydChfc3RhcnRUaW1lICsgX2R1cmF0aW9uKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fTtcblxufTtcblxuXG5UV0VFTi5FYXNpbmcgPSB7XG5cblx0TGluZWFyOiB7XG5cblx0XHROb25lOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gaztcblxuXHRcdH1cblxuXHR9LFxuXG5cdFF1YWRyYXRpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogaztcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogKDIgLSBrKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAtIDAuNSAqICgtLWsgKiAoayAtIDIpIC0gMSk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRDdWJpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogayAqIGs7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gLS1rICogayAqIGsgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAwLjUgKiBrICogayAqIGs7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoKGsgLT0gMikgKiBrICogayArIDIpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0UXVhcnRpYzoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBrICogayAqIGsgKiBrO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSAoLS1rICogayAqIGsgKiBrKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogayAqIGsgKiBrICogaztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIC0gMC41ICogKChrIC09IDIpICogayAqIGsgKiBrIC0gMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRRdWludGljOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGsgKiBrICogayAqIGsgKiBrO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIC0tayAqIGsgKiBrICogayAqIGsgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAwLjUgKiBrICogayAqIGsgKiBrICogaztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDAuNSAqICgoayAtPSAyKSAqIGsgKiBrICogayAqIGsgKyAyKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdFNpbnVzb2lkYWw6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gMSAtIE1hdGguY29zKGsgKiBNYXRoLlBJIC8gMik7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5zaW4oayAqIE1hdGguUEkgLyAyKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdEV4cG9uZW50aWFsOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGsgPT09IDAgPyAwIDogTWF0aC5wb3coMTAyNCwgayAtIDEpO1xuXG5cdFx0fSxcblxuXHRcdE91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIGsgPT09IDEgPyAxIDogMSAtIE1hdGgucG93KDIsIC0gMTAgKiBrKTtcblxuXHRcdH0sXG5cblx0XHRJbk91dDogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKGsgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID09PSAxKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoKGsgKj0gMikgPCAxKSB7XG5cdFx0XHRcdHJldHVybiAwLjUgKiBNYXRoLnBvdygxMDI0LCBrIC0gMSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoLSBNYXRoLnBvdygyLCAtIDEwICogKGsgLSAxKSkgKyAyKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdENpcmN1bGFyOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0cmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIGsgKiBrKTtcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLnNxcnQoMSAtICgtLWsgKiBrKSk7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmICgoayAqPSAyKSA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIC0gMC41ICogKE1hdGguc3FydCgxIC0gayAqIGspIC0gMSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAoayAtPSAyKSAqIGspICsgMSk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRFbGFzdGljOiB7XG5cblx0XHRJbjogZnVuY3Rpb24gKGspIHtcblxuXHRcdFx0aWYgKGsgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrID09PSAxKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gLU1hdGgucG93KDIsIDEwICogKGsgLSAxKSkgKiBNYXRoLnNpbigoayAtIDEuMSkgKiA1ICogTWF0aC5QSSk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRpZiAoayA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGsgPT09IDEpIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBNYXRoLnBvdygyLCAtMTAgKiBrKSAqIE1hdGguc2luKChrIC0gMC4xKSAqIDUgKiBNYXRoLlBJKSArIDE7XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoayA9PT0gMSkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0ayAqPSAyO1xuXG5cdFx0XHRpZiAoayA8IDEpIHtcblx0XHRcdFx0cmV0dXJuIC0wLjUgKiBNYXRoLnBvdygyLCAxMCAqIChrIC0gMSkpICogTWF0aC5zaW4oKGsgLSAxLjEpICogNSAqIE1hdGguUEkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogTWF0aC5wb3coMiwgLTEwICogKGsgLSAxKSkgKiBNYXRoLnNpbigoayAtIDEuMSkgKiA1ICogTWF0aC5QSSkgKyAxO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0QmFjazoge1xuXG5cdFx0SW46IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdHZhciBzID0gMS43MDE1ODtcblxuXHRcdFx0cmV0dXJuIGsgKiBrICogKChzICsgMSkgKiBrIC0gcyk7XG5cblx0XHR9LFxuXG5cdFx0T3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cblx0XHRcdHJldHVybiAtLWsgKiBrICogKChzICsgMSkgKiBrICsgcykgKyAxO1xuXG5cdFx0fSxcblxuXHRcdEluT3V0OiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHR2YXIgcyA9IDEuNzAxNTggKiAxLjUyNTtcblxuXHRcdFx0aWYgKChrICo9IDIpIDwgMSkge1xuXHRcdFx0XHRyZXR1cm4gMC41ICogKGsgKiBrICogKChzICsgMSkgKiBrIC0gcykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMC41ICogKChrIC09IDIpICogayAqICgocyArIDEpICogayArIHMpICsgMik7XG5cblx0XHR9XG5cblx0fSxcblxuXHRCb3VuY2U6IHtcblxuXHRcdEluOiBmdW5jdGlvbiAoaykge1xuXG5cdFx0XHRyZXR1cm4gMSAtIFRXRUVOLkVhc2luZy5Cb3VuY2UuT3V0KDEgLSBrKTtcblxuXHRcdH0sXG5cblx0XHRPdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrIDwgKDEgLyAyLjc1KSkge1xuXHRcdFx0XHRyZXR1cm4gNy41NjI1ICogayAqIGs7XG5cdFx0XHR9IGVsc2UgaWYgKGsgPCAoMiAvIDIuNzUpKSB7XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAoayAtPSAoMS41IC8gMi43NSkpICogayArIDAuNzU7XG5cdFx0XHR9IGVsc2UgaWYgKGsgPCAoMi41IC8gMi43NSkpIHtcblx0XHRcdFx0cmV0dXJuIDcuNTYyNSAqIChrIC09ICgyLjI1IC8gMi43NSkpICogayArIDAuOTM3NTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAoayAtPSAoMi42MjUgLyAyLjc1KSkgKiBrICsgMC45ODQzNzU7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0SW5PdXQ6IGZ1bmN0aW9uIChrKSB7XG5cblx0XHRcdGlmIChrIDwgMC41KSB7XG5cdFx0XHRcdHJldHVybiBUV0VFTi5FYXNpbmcuQm91bmNlLkluKGsgKiAyKSAqIDAuNTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFRXRUVOLkVhc2luZy5Cb3VuY2UuT3V0KGsgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XG5cblx0XHR9XG5cblx0fVxuXG59O1xuXG5UV0VFTi5JbnRlcnBvbGF0aW9uID0ge1xuXG5cdExpbmVhcjogZnVuY3Rpb24gKHYsIGspIHtcblxuXHRcdHZhciBtID0gdi5sZW5ndGggLSAxO1xuXHRcdHZhciBmID0gbSAqIGs7XG5cdFx0dmFyIGkgPSBNYXRoLmZsb29yKGYpO1xuXHRcdHZhciBmbiA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuTGluZWFyO1xuXG5cdFx0aWYgKGsgPCAwKSB7XG5cdFx0XHRyZXR1cm4gZm4odlswXSwgdlsxXSwgZik7XG5cdFx0fVxuXG5cdFx0aWYgKGsgPiAxKSB7XG5cdFx0XHRyZXR1cm4gZm4odlttXSwgdlttIC0gMV0sIG0gLSBmKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZm4odltpXSwgdltpICsgMSA+IG0gPyBtIDogaSArIDFdLCBmIC0gaSk7XG5cblx0fSxcblxuXHRCZXppZXI6IGZ1bmN0aW9uICh2LCBrKSB7XG5cblx0XHR2YXIgYiA9IDA7XG5cdFx0dmFyIG4gPSB2Lmxlbmd0aCAtIDE7XG5cdFx0dmFyIHB3ID0gTWF0aC5wb3c7XG5cdFx0dmFyIGJuID0gVFdFRU4uSW50ZXJwb2xhdGlvbi5VdGlscy5CZXJuc3RlaW47XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBuOyBpKyspIHtcblx0XHRcdGIgKz0gcHcoMSAtIGssIG4gLSBpKSAqIHB3KGssIGkpICogdltpXSAqIGJuKG4sIGkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBiO1xuXG5cdH0sXG5cblx0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKHYsIGspIHtcblxuXHRcdHZhciBtID0gdi5sZW5ndGggLSAxO1xuXHRcdHZhciBmID0gbSAqIGs7XG5cdFx0dmFyIGkgPSBNYXRoLmZsb29yKGYpO1xuXHRcdHZhciBmbiA9IFRXRUVOLkludGVycG9sYXRpb24uVXRpbHMuQ2F0bXVsbFJvbTtcblxuXHRcdGlmICh2WzBdID09PSB2W21dKSB7XG5cblx0XHRcdGlmIChrIDwgMCkge1xuXHRcdFx0XHRpID0gTWF0aC5mbG9vcihmID0gbSAqICgxICsgaykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm4odlsoaSAtIDEgKyBtKSAlIG1dLCB2W2ldLCB2WyhpICsgMSkgJSBtXSwgdlsoaSArIDIpICUgbV0sIGYgLSBpKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmIChrIDwgMCkge1xuXHRcdFx0XHRyZXR1cm4gdlswXSAtIChmbih2WzBdLCB2WzBdLCB2WzFdLCB2WzFdLCAtZikgLSB2WzBdKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGsgPiAxKSB7XG5cdFx0XHRcdHJldHVybiB2W21dIC0gKGZuKHZbbV0sIHZbbV0sIHZbbSAtIDFdLCB2W20gLSAxXSwgZiAtIG0pIC0gdlttXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbih2W2kgPyBpIC0gMSA6IDBdLCB2W2ldLCB2W20gPCBpICsgMSA/IG0gOiBpICsgMV0sIHZbbSA8IGkgKyAyID8gbSA6IGkgKyAyXSwgZiAtIGkpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0VXRpbHM6IHtcblxuXHRcdExpbmVhcjogZnVuY3Rpb24gKHAwLCBwMSwgdCkge1xuXG5cdFx0XHRyZXR1cm4gKHAxIC0gcDApICogdCArIHAwO1xuXG5cdFx0fSxcblxuXHRcdEJlcm5zdGVpbjogZnVuY3Rpb24gKG4sIGkpIHtcblxuXHRcdFx0dmFyIGZjID0gVFdFRU4uSW50ZXJwb2xhdGlvbi5VdGlscy5GYWN0b3JpYWw7XG5cblx0XHRcdHJldHVybiBmYyhuKSAvIGZjKGkpIC8gZmMobiAtIGkpO1xuXG5cdFx0fSxcblxuXHRcdEZhY3RvcmlhbDogKGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIGEgPSBbMV07XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiAobikge1xuXG5cdFx0XHRcdHZhciBzID0gMTtcblxuXHRcdFx0XHRpZiAoYVtuXSkge1xuXHRcdFx0XHRcdHJldHVybiBhW25dO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IG47IGkgPiAxOyBpLS0pIHtcblx0XHRcdFx0XHRzICo9IGk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhW25dID0gcztcblx0XHRcdFx0cmV0dXJuIHM7XG5cblx0XHRcdH07XG5cblx0XHR9KSgpLFxuXG5cdFx0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKHAwLCBwMSwgcDIsIHAzLCB0KSB7XG5cblx0XHRcdHZhciB2MCA9IChwMiAtIHAwKSAqIDAuNTtcblx0XHRcdHZhciB2MSA9IChwMyAtIHAxKSAqIDAuNTtcblx0XHRcdHZhciB0MiA9IHQgKiB0O1xuXHRcdFx0dmFyIHQzID0gdCAqIHQyO1xuXG5cdFx0XHRyZXR1cm4gKDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEpICogdDMgKyAoLSAzICogcDEgKyAzICogcDIgLSAyICogdjAgLSB2MSkgKiB0MiArIHYwICogdCArIHAxO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuLy8gVU1EIChVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24pXG4oZnVuY3Rpb24gKHJvb3QpIHtcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBUV0VFTjtcblx0XHR9KTtcblxuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXG5cdFx0Ly8gTm9kZS5qc1xuXHRcdG1vZHVsZS5leHBvcnRzID0gVFdFRU47XG5cblx0fSBlbHNlIGlmIChyb290ICE9PSB1bmRlZmluZWQpIHtcblxuXHRcdC8vIEdsb2JhbCB2YXJpYWJsZVxuXHRcdHJvb3QuVFdFRU4gPSBUV0VFTjtcblxuXHR9XG5cbn0pKHRoaXMpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0B0d2VlbmpzL3R3ZWVuLmpzL3NyYy9Ud2Vlbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIBaseView;\n/**\n * MIDI input or output port processor view.\n */\nfunction createMIDIBaseView(specs, my) {\n    var that,\n        parentEl = specs.parentEl,\n        port = specs.port,\n        initialize = function initialize() {\n        // find template, add clone to midi ports list\n        var template = document.querySelector('#template-midi-port');\n        var clone = template.content.cloneNode(true);\n        my.el = clone.firstElementChild;\n        parentEl.appendChild(my.el);\n\n        // set data-connected=\"true\" to make the element visible\n        my.el.dataset.connected = true;\n\n        // show label\n        my.el.querySelector('.midi-port__label').innerHTML = specs.name;\n\n        // find checkboxes\n        my.networkEl = my.el.querySelector('.midi-port__network');\n        my.syncEl = my.el.querySelector('.midi-port__sync');\n        my.remoteEl = my.el.querySelector('.midi-port__remote');\n\n        // set checkboxes\n        my.networkEl.querySelector('[type=checkbox]').checked = specs.networkEnabled;\n        my.syncEl.querySelector('[type=checkbox]').checked = specs.syncEnabled;\n        my.remoteEl.querySelector('[type=checkbox]').checked = specs.remoteEnabled;\n\n        // add DOM event listeners\n        my.networkEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'networkEnabled'));\n            }\n        });\n        my.syncEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'syncEnabled'));\n            }\n        });\n        my.remoteEl.addEventListener('change', function (e) {\n            if (!e.currentTarget.dataset.disabled) {\n                my.store.dispatch(my.store.getActions().toggleMIDIPreference(my.id, 'remoteEnabled'));\n            }\n        });\n\n        // listen to state updates\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                case e.detail.actions.CREATE_PROJECT:\n                    var _port = e.detail.state.ports.byId[my.id];\n                    if (_port) {\n                        my.networkEl.querySelector('[type=checkbox]').checked = _port.networkEnabled;\n                        my.syncEl.querySelector('[type=checkbox]').checked = _port.syncEnabled;\n                        my.remoteEl.querySelector('[type=checkbox]').checked = _port.remoteEnabled;\n                    } else {\n                        console.log('MIDI port with id ' + my.id + ' not found.');\n                    }\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (my.el && parentEl) {\n            parentEl.removeChild(my.el);\n        }\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.store = specs.store;\n    my.isInput = specs.isInput;\n    my.id = specs.id;\n    my.el;\n    my.networkEl;\n    my.syncEl;\n    my.remoteEl;\n\n    that = that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _actions = __webpack_require__(17);\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nvar _reducers = __webpack_require__(24);\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nvar _store = __webpack_require__(26);\n\nvar _store2 = _interopRequireDefault(_store);\n\nvar _app = __webpack_require__(27);\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _canvas = __webpack_require__(38);\n\nvar _canvas2 = _interopRequireDefault(_canvas);\n\nvar _dialog = __webpack_require__(46);\n\nvar _dialog2 = _interopRequireDefault(_dialog);\n\nvar _library = __webpack_require__(47);\n\nvar _library2 = _interopRequireDefault(_library);\n\nvar _midi = __webpack_require__(3);\n\nvar _midi2 = _interopRequireDefault(_midi);\n\nvar _network = __webpack_require__(48);\n\nvar _network2 = _interopRequireDefault(_network);\n\nvar _preferences = __webpack_require__(50);\n\nvar _preferences2 = _interopRequireDefault(_preferences);\n\nvar _remote = __webpack_require__(53);\n\nvar _remote2 = _interopRequireDefault(_remote);\n\nvar _transport = __webpack_require__(56);\n\nvar _transport2 = _interopRequireDefault(_transport);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Application startup.\n */\ndocument.addEventListener('DOMContentLoaded', function (e) {\n\n    // Create all objects that will be the modules of the app.\n    var appView = {},\n        canvasView = {},\n        dialog = {},\n        libraryView = {},\n        midi = {},\n        midiNetwork = {},\n        preferencesView = {},\n        remoteView = {},\n        transport = {};\n\n    var store = (0, _store2.default)({\n        actions: (0, _actions2.default)(),\n        reducers: (0, _reducers2.default)()\n    });\n\n    // Add functionality to the modules and inject dependencies.\n    (0, _app2.default)({\n        that: appView,\n        store: store\n    });\n    (0, _canvas2.default)({\n        that: canvasView,\n        store: store\n    });\n    (0, _dialog2.default)({\n        that: dialog\n    });\n    (0, _library2.default)({\n        that: libraryView,\n        store: store\n    });\n    (0, _midi2.default)({\n        that: midi,\n        store: store\n    });\n    (0, _network2.default)({\n        that: midiNetwork,\n        store: store\n    });\n    (0, _preferences2.default)({\n        that: preferencesView,\n        store: store\n    });\n    (0, _remote2.default)({\n        that: remoteView,\n        store: store\n    });\n    (0, _transport2.default)({\n        that: transport,\n        store: store,\n        canvasView: canvasView,\n        midiNetwork: midiNetwork\n    });\n\n    // scan installed processors\n    store.dispatch(store.getActions().rescanTypes());\n\n    // initialise\n    midi.connect().then(function () {\n        store.persist();\n        transport.run();\n    }).catch(function (errorMsg) {\n        (0, _dialog.showDialog)('MIDI access failure', 'The app can\\'t initialise because it failed to access the computer\\'s MIDI ports. If you view the app in a browser, please check if it supports the Web MIDI API.<br>Error message: ' + errorMsg);\n    });\n}); /**\n        Euclidean Pattern Generator\n        Copyright (C) 2017, 2018  Wouter Hisschemoller\n    \n        This program is free software: you can redistribute it and/or modify\n        it under the terms of the GNU General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version.\n    \n        This program is distributed in the hope that it will be useful,\n        but WITHOUT ANY WARRANTY; without even the implied warranty of\n        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n        GNU General Public License for more details.\n    \n        You should have received a copy of the GNU General Public License\n        along with this program.  If not, see <http://www.gnu.org/licenses/>.\n     *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz9jNDViIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJhcHBWaWV3IiwiY2FudmFzVmlldyIsImRpYWxvZyIsImxpYnJhcnlWaWV3IiwibWlkaSIsIm1pZGlOZXR3b3JrIiwicHJlZmVyZW5jZXNWaWV3IiwicmVtb3RlVmlldyIsInRyYW5zcG9ydCIsInN0b3JlIiwiYWN0aW9ucyIsInJlZHVjZXJzIiwidGhhdCIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsInJlc2NhblR5cGVzIiwiY29ubmVjdCIsInRoZW4iLCJwZXJzaXN0IiwicnVuIiwiY2F0Y2giLCJlcnJvck1zZyJdLCJtYXBwaW5ncyI6Ijs7QUFrQkE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFLQTs7O0FBR0FBLFNBQVNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxVQUFTQyxDQUFULEVBQVk7O0FBRXREO0FBQ0EsUUFBSUMsVUFBVSxFQUFkO0FBQUEsUUFDSUMsYUFBYSxFQURqQjtBQUFBLFFBRUlDLFNBQVMsRUFGYjtBQUFBLFFBR0lDLGNBQWMsRUFIbEI7QUFBQSxRQUlJQyxPQUFPLEVBSlg7QUFBQSxRQUtJQyxjQUFjLEVBTGxCO0FBQUEsUUFNSUMsa0JBQWtCLEVBTnRCO0FBQUEsUUFPSUMsYUFBYSxFQVBqQjtBQUFBLFFBUUlDLFlBQVksRUFSaEI7O0FBVUEsUUFBTUMsUUFBUSxxQkFBWTtBQUN0QkMsaUJBQVMsd0JBRGE7QUFFdEJDLGtCQUFVO0FBRlksS0FBWixDQUFkOztBQUtBO0FBQ0EsdUJBQWM7QUFDVkMsY0FBTVosT0FESTtBQUVWUztBQUZVLEtBQWQ7QUFJQSwwQkFBaUI7QUFDYkcsY0FBTVgsVUFETztBQUViUTtBQUZhLEtBQWpCO0FBSUEsMEJBQWE7QUFDVEcsY0FBTVY7QUFERyxLQUFiO0FBR0EsMkJBQWtCO0FBQ2RVLGNBQU1ULFdBRFE7QUFFZE07QUFGYyxLQUFsQjtBQUlBLHdCQUFXO0FBQ1BHLGNBQU1SLElBREM7QUFFUEs7QUFGTyxLQUFYO0FBSUEsMkJBQWtCO0FBQ2RHLGNBQU1QLFdBRFE7QUFFZEk7QUFGYyxLQUFsQjtBQUlBLCtCQUFzQjtBQUNsQkcsY0FBTU4sZUFEWTtBQUVsQkc7QUFGa0IsS0FBdEI7QUFJQSwwQkFBaUI7QUFDYkcsY0FBTUwsVUFETztBQUViRTtBQUZhLEtBQWpCO0FBSUEsNkJBQWdCO0FBQ1pHLGNBQU1KLFNBRE07QUFFWkMsb0JBRlk7QUFHWlIsOEJBSFk7QUFJWkk7QUFKWSxLQUFoQjs7QUFPQTtBQUNBSSxVQUFNSSxRQUFOLENBQWVKLE1BQU1LLFVBQU4sR0FBbUJDLFdBQW5CLEVBQWY7O0FBRUE7QUFDQVgsU0FBS1ksT0FBTCxHQUNLQyxJQURMLENBQ1UsWUFBTTtBQUNSUixjQUFNUyxPQUFOO0FBQ0FWLGtCQUFVVyxHQUFWO0FBQ0gsS0FKTCxFQUtLQyxLQUxMLENBS1csb0JBQVk7QUFDZixnQ0FBVyxxQkFBWCwyTEFBdU5DLFFBQXZOO0FBQ0gsS0FQTDtBQVFILENBckVELEUsQ0F0Q0EiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAgICBFdWNsaWRlYW4gUGF0dGVybiBHZW5lcmF0b3JcbiAgICBDb3B5cmlnaHQgKEMpIDIwMTcsIDIwMTggIFdvdXRlciBIaXNzY2hlbW9sbGVyXG5cbiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKi9cblxuaW1wb3J0IGNyZWF0ZUFjdGlvbnMgZnJvbSAnLi93aC9zdGF0ZS9hY3Rpb25zJztcbmltcG9ydCBjcmVhdGVSZWR1Y2VycyBmcm9tICcuL3doL3N0YXRlL3JlZHVjZXJzJztcbmltcG9ydCBjcmVhdGVTdG9yZSBmcm9tICcuL3doL3N0YXRlL3N0b3JlJztcblxuaW1wb3J0IGNyZWF0ZUFwcFZpZXcgZnJvbSAnLi93aC92aWV3L2FwcCc7XG5pbXBvcnQgY3JlYXRlQ2FudmFzVmlldyBmcm9tICcuL3doL3ZpZXcvY2FudmFzJztcbmltcG9ydCBjcmVhdGVEaWFsb2cgZnJvbSAnLi93aC92aWV3L2RpYWxvZyc7XG5pbXBvcnQgY3JlYXRlTGlicmFyeVZpZXcgZnJvbSAnLi93aC92aWV3L2xpYnJhcnknO1xuaW1wb3J0IGNyZWF0ZU1JREkgZnJvbSAnLi93aC9taWRpL21pZGknO1xuaW1wb3J0IGNyZWF0ZU1JRElOZXR3b3JrIGZyb20gJy4vd2gvbWlkaS9uZXR3b3JrJztcbmltcG9ydCBjcmVhdGVQcmVmZXJlbmNlc1ZpZXcgZnJvbSAnLi93aC92aWV3L3ByZWZlcmVuY2VzJztcbmltcG9ydCBjcmVhdGVSZW1vdGVWaWV3IGZyb20gJy4vd2gvdmlldy9yZW1vdGUnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zcG9ydCBmcm9tICcuL3doL2NvcmUvdHJhbnNwb3J0JztcblxuaW1wb3J0IHsgc2hvd0RpYWxvZyB9IGZyb20gJy4vd2gvdmlldy9kaWFsb2cnO1xuXG5cbi8qKlxuICogQXBwbGljYXRpb24gc3RhcnR1cC5cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGUpIHtcblxuICAgIC8vIENyZWF0ZSBhbGwgb2JqZWN0cyB0aGF0IHdpbGwgYmUgdGhlIG1vZHVsZXMgb2YgdGhlIGFwcC5cbiAgICB2YXIgYXBwVmlldyA9IHt9LFxuICAgICAgICBjYW52YXNWaWV3ID0ge30sXG4gICAgICAgIGRpYWxvZyA9IHt9LFxuICAgICAgICBsaWJyYXJ5VmlldyA9IHt9LFxuICAgICAgICBtaWRpID0ge30sXG4gICAgICAgIG1pZGlOZXR3b3JrID0ge30sXG4gICAgICAgIHByZWZlcmVuY2VzVmlldyA9IHt9LFxuICAgICAgICByZW1vdGVWaWV3ID0ge30sXG4gICAgICAgIHRyYW5zcG9ydCA9IHt9O1xuICAgIFxuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoe1xuICAgICAgICBhY3Rpb25zOiBjcmVhdGVBY3Rpb25zKCksXG4gICAgICAgIHJlZHVjZXJzOiBjcmVhdGVSZWR1Y2VycygpXG4gICAgfSk7XG5cbiAgICAvLyBBZGQgZnVuY3Rpb25hbGl0eSB0byB0aGUgbW9kdWxlcyBhbmQgaW5qZWN0IGRlcGVuZGVuY2llcy5cbiAgICBjcmVhdGVBcHBWaWV3KHsgXG4gICAgICAgIHRoYXQ6IGFwcFZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVDYW52YXNWaWV3KHsgXG4gICAgICAgIHRoYXQ6IGNhbnZhc1ZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVEaWFsb2coe1xuICAgICAgICB0aGF0OiBkaWFsb2csXG4gICAgfSk7XG4gICAgY3JlYXRlTGlicmFyeVZpZXcoeyBcbiAgICAgICAgdGhhdDogbGlicmFyeVZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJKHsgXG4gICAgICAgIHRoYXQ6IG1pZGksIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVNSURJTmV0d29yayh7XG4gICAgICAgIHRoYXQ6IG1pZGlOZXR3b3JrLFxuICAgICAgICBzdG9yZVxuICAgIH0pO1xuICAgIGNyZWF0ZVByZWZlcmVuY2VzVmlldyh7IFxuICAgICAgICB0aGF0OiBwcmVmZXJlbmNlc1ZpZXcsIFxuICAgICAgICBzdG9yZSBcbiAgICB9KTtcbiAgICBjcmVhdGVSZW1vdGVWaWV3KHtcbiAgICAgICAgdGhhdDogcmVtb3RlVmlldyxcbiAgICAgICAgc3RvcmVcbiAgICB9KTtcbiAgICBjcmVhdGVUcmFuc3BvcnQoeyBcbiAgICAgICAgdGhhdDogdHJhbnNwb3J0LCBcbiAgICAgICAgc3RvcmUsIFxuICAgICAgICBjYW52YXNWaWV3LCBcbiAgICAgICAgbWlkaU5ldHdvcmsgXG4gICAgfSk7XG5cbiAgICAvLyBzY2FuIGluc3RhbGxlZCBwcm9jZXNzb3JzXG4gICAgc3RvcmUuZGlzcGF0Y2goc3RvcmUuZ2V0QWN0aW9ucygpLnJlc2NhblR5cGVzKCkpO1xuXG4gICAgLy8gaW5pdGlhbGlzZVxuICAgIG1pZGkuY29ubmVjdCgpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHN0b3JlLnBlcnNpc3QoKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC5ydW4oKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yTXNnID0+IHtcbiAgICAgICAgICAgIHNob3dEaWFsb2coJ01JREkgYWNjZXNzIGZhaWx1cmUnLCBgVGhlIGFwcCBjYW4ndCBpbml0aWFsaXNlIGJlY2F1c2UgaXQgZmFpbGVkIHRvIGFjY2VzcyB0aGUgY29tcHV0ZXIncyBNSURJIHBvcnRzLiBJZiB5b3UgdmlldyB0aGUgYXBwIGluIGEgYnJvd3NlciwgcGxlYXNlIGNoZWNrIGlmIGl0IHN1cHBvcnRzIHRoZSBXZWIgTUlESSBBUEkuPGJyPkVycm9yIG1lc3NhZ2U6ICR7ZXJyb3JNc2d9YCk7XG4gICAgICAgIH0pO1xufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createActions;\n\nvar _util = __webpack_require__(6);\n\nvar _config = __webpack_require__(0);\n\nvar _midi = __webpack_require__(3);\n\nvar _selectors = __webpack_require__(1);\n\nfunction createActions() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var RESCAN_TYPES = 'RESCAN_TYPES',\n        CREATE_PROJECT = 'CREATE_PROJECT',\n        SET_THEME = 'SET_THEME',\n        CREATE_PROCESSOR = 'CREATE_PROCESSOR',\n        ADD_PROCESSOR = 'ADD_PROCESSOR',\n        DELETE_PROCESSOR = 'DELETE_PROCESSOR',\n        SELECT_PROCESSOR = 'SELECT_PROCESSOR',\n        DRAG_SELECTED_PROCESSOR = 'DRAG_SELECTED_PROCESSOR',\n        DRAG_ALL_PROCESSORS = 'DRAG_ALL_PROCESSORS',\n        CHANGE_PARAMETER = 'CHANGE_PARAMETER',\n        RECREATE_PARAMETER = 'RECREATE_PARAMETER',\n        SET_TEMPO = 'SET_TEMPO',\n        CREATE_MIDI_PORT = 'CREATE_MIDI_PORT',\n        UPDATE_MIDI_PORT = 'UPDATE_MIDI_PORT',\n        TOGGLE_MIDI_PREFERENCE = 'TOGGLE_MIDI_PREFERENCE',\n        TOGGLE_MIDI_LEARN_MODE = 'TOGGLE_MIDI_LEARN_MODE',\n        TOGGLE_MIDI_LEARN_TARGET = 'TOGGLE_MIDI_LEARN_TARGET',\n        SET_TRANSPORT = 'SET_TRANSPORT',\n        RECEIVE_MIDI_CC = 'RECEIVE_MIDI_CC',\n        ASSIGN_EXTERNAL_CONTROL = 'ASSIGN_EXTERNAL_CONTROL',\n        UNASSIGN_EXTERNAL_CONTROL = 'UNASSIGN_EXTERNAL_CONTROL',\n        TOGGLE_PANEL = 'TOGGLE_PANEL',\n        TOGGLE_CONNECT_MODE = 'TOGGLE_CONNECT_MODE',\n        CONNECT_PROCESSORS = 'CONNECT_PROCESSORS',\n        DISCONNECT_PROCESSORS = 'DISCONNECT_PROCESSORS';\n\n    return {\n\n        importProject: function importProject(file) {\n            return function (dispatch, getState, getActions) {\n                var fileReader = new FileReader();\n\n                // closure to capture the file information\n                fileReader.onload = function (f) {\n                    return function (e) {\n                        var isJSON = true;\n                        try {\n                            var data = JSON.parse(e.target.result);\n                            if (data) {\n                                dispatch(getActions().setProject(data));\n                            }\n                        } catch (errorMessage) {\n                            console.log(errorMessage);\n                            isJSON = false;\n                        }\n                        if (!isJSON) {\n\n                            // try if it's a legacy xml file\n                            var legacyData = my.convertLegacyFile(e.target.result);\n                            if (legacyData) {\n                                dispatch(getActions().setProject(legacyData));\n                            }\n                        }\n                    };\n                }(file);\n                fileReader.readAsText(file);\n            };\n        },\n\n        exportProject: function exportProject() {\n            return function (dispatch, getState, getActions) {\n                var jsonString = JSON.stringify(getState()),\n                    blob = new Blob([jsonString], { type: 'application/json' }),\n                    a = document.createElement('a');\n                a.download = 'epg.json';\n                a.href = URL.createObjectURL(blob);\n                a.click();\n            };\n        },\n\n        newProject: function newProject() {\n            return function (dispatch, getState, getActions) {\n\n                // create an empty initial state\n                dispatch(getActions().createProject());\n\n                // add the existing MIDI ports\n                var existingMIDIPorts = (0, _midi.getAllMIDIPorts)();\n                existingMIDIPorts.forEach(function (port) {\n                    dispatch(getActions().midiAccessChange(port));\n                });\n\n                // recreate the state with the existing ports\n                dispatch(getActions().createProject(getState()));\n            };\n        },\n\n        setProject: function setProject(data) {\n            return function (dispatch, getState, getActions) {\n\n                // create an empty initial state\n                dispatch(getActions().createProject());\n\n                // add the existing MIDI ports\n                var existingMIDIPorts = (0, _midi.getAllMIDIPorts)();\n                existingMIDIPorts.forEach(function (port) {\n                    dispatch(getActions().midiAccessChange(port));\n                });\n\n                // copy the port settings of existing ports\n                var existingPorts = _extends({}, getState().ports);\n\n                // copy the port settings defined in the project\n                var projectPorts = _extends({}, data.ports);\n\n                // clear the project's port settings\n                data.ports.allIds = [];\n                data.ports.byId = {};\n\n                // add all existing ports to the project data\n                existingPorts.allIds.forEach(function (existingPortID) {\n                    data.ports.allIds.push(existingPortID);\n                    data.ports.byId[existingPortID] = existingPorts.byId[existingPortID];\n                });\n\n                // set the existing ports to the project's settings,\n                // and create ports that do not exist\n                projectPorts.allIds.forEach(function (projectPortID) {\n                    var projectPort = projectPorts.byId[projectPortID];\n                    var portExists = false;\n                    existingPorts.allIds.forEach(function (existingPortID) {\n                        if (existingPortID === projectPortID) {\n\n                            portExists = true;\n\n                            // project port's settings exists, update the settings\n                            var existingPort = existingPorts.byId[existingPortID];\n                            existingPort.syncEnabled = projectPort.syncEnabled;\n                            existingPort.remoteEnabled = projectPort.remoteEnabled;\n                            existingPort.networkEnabled = projectPort.networkEnabled;\n                        }\n                    });\n\n                    // port settings object doesn't exist, so create it, but disabled\n                    if (!portExists) {\n                        data.ports.allIds.push(projectPortID);\n                        data.ports.byId[projectPortID] = {\n                            id: projectPortID,\n                            type: projectPort.type,\n                            name: projectPort.name,\n                            connection: 'closed', // closed | open | pending\n                            state: 'disconnected', // disconnected | connected\n                            syncEnabled: projectPort.syncEnabled,\n                            remoteEnabled: projectPort.remoteEnabled,\n                            networkEnabled: projectPort.networkEnabled\n                        };\n                    }\n                });\n\n                // create the project with the merged ports\n                dispatch(getActions().createProject(data));\n            };\n        },\n\n        CREATE_PROJECT: CREATE_PROJECT,\n        createProject: function createProject(data) {\n            return { type: CREATE_PROJECT, data: data };\n        },\n\n        SET_THEME: SET_THEME,\n        setTheme: function setTheme(themeName) {\n            return { type: SET_THEME, themeName: themeName };\n        },\n\n        CREATE_PROCESSOR: CREATE_PROCESSOR,\n        createProcessor: function createProcessor(data) {\n            return function (dispatch, getState, getActions) {\n                var dataTemplate = __webpack_require__(7)(\"./\" + data.type + '/config.json');\n                var fullData = JSON.parse(JSON.stringify(dataTemplate));\n                var id = data.id || data.type + '_' + (0, _util.createUUID)();\n                fullData = Object.assign(fullData, data);\n                fullData.id = id;\n                fullData.positionX = data.positionX;\n                fullData.positionY = data.positionY;\n                fullData.params.byId.name.value = data.name || getProcessorDefaultName(getState().processors);\n                dispatch(getActions().addProcessor(fullData));\n                dispatch(getActions().selectProcessor(id));\n            };\n        },\n\n        ADD_PROCESSOR: ADD_PROCESSOR,\n        addProcessor: function addProcessor(data) {\n            return { type: ADD_PROCESSOR, data: data };\n        },\n\n        DELETE_PROCESSOR: DELETE_PROCESSOR,\n        deleteProcessor: function deleteProcessor(id) {\n            return { type: DELETE_PROCESSOR, id: id };\n        },\n\n        SELECT_PROCESSOR: SELECT_PROCESSOR,\n        selectProcessor: function selectProcessor(id) {\n            return { type: SELECT_PROCESSOR, id: id };\n        },\n\n        DRAG_SELECTED_PROCESSOR: DRAG_SELECTED_PROCESSOR,\n        dragSelectedProcessor: function dragSelectedProcessor(x, y) {\n            return { type: DRAG_SELECTED_PROCESSOR, x: x, y: y };\n        },\n\n        DRAG_ALL_PROCESSORS: DRAG_ALL_PROCESSORS,\n        dragAllProcessors: function dragAllProcessors(x, y) {\n            return { type: DRAG_ALL_PROCESSORS, x: x, y: y };\n        },\n\n        CHANGE_PARAMETER: CHANGE_PARAMETER,\n        changeParameter: function changeParameter(processorID, paramKey, paramValue) {\n            return { type: CHANGE_PARAMETER, processorID: processorID, paramKey: paramKey, paramValue: paramValue };\n        },\n\n        RECREATE_PARAMETER: RECREATE_PARAMETER,\n        recreateParameter: function recreateParameter(processorID, paramKey, paramObj) {\n            return { type: RECREATE_PARAMETER, processorID: processorID, paramKey: paramKey, paramObj: paramObj };\n        },\n\n        SET_TEMPO: SET_TEMPO,\n        setTempo: function setTempo(value) {\n            return { type: SET_TEMPO, value: value };\n        },\n\n        CREATE_MIDI_PORT: CREATE_MIDI_PORT,\n        createMIDIPort: function createMIDIPort(portID, data) {\n            return { type: CREATE_MIDI_PORT, portID: portID, data: data };\n        },\n\n        UPDATE_MIDI_PORT: UPDATE_MIDI_PORT,\n        updateMIDIPort: function updateMIDIPort(portID, data) {\n            return { type: UPDATE_MIDI_PORT, portID: portID, data: data };\n        },\n\n        midiAccessChange: function midiAccessChange(midiPort) {\n            return function (dispatch, getState, getActions) {\n\n                // check if the port already exists\n                var state = getState();\n                var portExists = state.ports.allIds.indexOf(midiPort.id) > -1;\n\n                // create port or update existing\n                if (portExists) {\n\n                    // update existing port\n                    dispatch(getActions().updateMIDIPort(midiPort.id, {\n                        connection: midiPort.connection,\n                        state: midiPort.state\n                    }));\n                } else {\n\n                    // restore settings from config\n                    var config = (0, _config.getConfig)();\n                    var configPort = config.ports && config.ports.byId ? config.ports.byId[midiPort.id] : null;\n\n                    if (!configPort && config.ports && config.ports.allIds) {\n                        for (var i = config.ports.allIds.length - 1; i >= 0; i--) {\n                            var port = config.ports.byId[config.ports.allIds[i]];\n                            if (port.name === midiPort.name && port.type === midiPort.type) {\n                                configPort = port;\n                                break;\n                            }\n                        }\n                    }\n\n                    // create port\n                    dispatch(getActions().createMIDIPort(midiPort.id, {\n                        id: midiPort.id,\n                        type: midiPort.type,\n                        name: midiPort.name,\n                        connection: midiPort.connection,\n                        state: midiPort.state,\n                        networkEnabled: configPort ? configPort.networkEnabled : false,\n                        syncEnabled: configPort ? configPort.syncEnabled : false,\n                        remoteEnabled: configPort ? configPort.remoteEnabled : false\n                    }));\n                }\n\n                // store the changes in configuration\n                (0, _config.setConfig)(getState());\n            };\n        },\n\n        TOGGLE_MIDI_PREFERENCE: TOGGLE_MIDI_PREFERENCE,\n        toggleMIDIPreference: function toggleMIDIPreference(id, preferenceName, isEnabled) {\n            return { type: TOGGLE_MIDI_PREFERENCE, id: id, preferenceName: preferenceName, isEnabled: isEnabled };\n        },\n\n        TOGGLE_MIDI_LEARN_MODE: TOGGLE_MIDI_LEARN_MODE,\n        toggleMIDILearnMode: function toggleMIDILearnMode() {\n            return { type: TOGGLE_MIDI_LEARN_MODE };\n        },\n\n        TOGGLE_MIDI_LEARN_TARGET: TOGGLE_MIDI_LEARN_TARGET,\n        toggleMIDILearnTarget: function toggleMIDILearnTarget(processorID, parameterKey) {\n            return { type: TOGGLE_MIDI_LEARN_TARGET, processorID: processorID, parameterKey: parameterKey };\n        },\n\n        SET_TRANSPORT: SET_TRANSPORT,\n        setTransport: function setTransport(command) {\n            return { type: SET_TRANSPORT, command: command };\n        },\n\n        RECEIVE_MIDI_CC: RECEIVE_MIDI_CC,\n        receiveMIDIControlChange: function receiveMIDIControlChange(data) {\n            return function (dispatch, getState, getActions) {\n                var state = getState();\n                var remoteChannel = (data[0] & 0xf) + 1;\n                var remoteCC = data[1];\n\n                if (state.learnModeActive) {\n                    dispatch(getActions().unassignExternalControl(state.learnTargetProcessorID, state.learnTargetParameterKey));\n                    dispatch(getActions().assignExternalControl('assign_' + (0, _util.createUUID)(), state.learnTargetProcessorID, state.learnTargetParameterKey, remoteChannel, remoteCC));\n                } else {\n                    state.assignments.allIds.forEach(function (assignID) {\n                        var assignment = state.assignments.byId[assignID];\n                        if (assignment.remoteChannel === remoteChannel && assignment.remoteCC === remoteCC) {\n                            var param = state.processors.byId[assignment.processorID].params.byId[assignment.paramKey];\n                            var paramValue = midiControlToParameterValue(param, data[2]);\n                            dispatch(getActions().changeParameter(assignment.processorID, assignment.paramKey, paramValue));\n                        }\n                    });\n                }\n            };\n        },\n\n        ASSIGN_EXTERNAL_CONTROL: ASSIGN_EXTERNAL_CONTROL,\n        assignExternalControl: function assignExternalControl(assignID, processorID, paramKey, remoteChannel, remoteCC) {\n            return { type: ASSIGN_EXTERNAL_CONTROL, assignID: assignID, processorID: processorID, paramKey: paramKey, remoteChannel: remoteChannel, remoteCC: remoteCC };\n        },\n\n        UNASSIGN_EXTERNAL_CONTROL: UNASSIGN_EXTERNAL_CONTROL,\n        unassignExternalControl: function unassignExternalControl(processorID, paramKey) {\n            return { type: UNASSIGN_EXTERNAL_CONTROL, processorID: processorID, paramKey: paramKey };\n        },\n\n        TOGGLE_PANEL: TOGGLE_PANEL,\n        togglePanel: function togglePanel(panelName) {\n            return { type: TOGGLE_PANEL, panelName: panelName };\n        },\n\n        TOGGLE_CONNECT_MODE: TOGGLE_CONNECT_MODE,\n        toggleConnectMode: function toggleConnectMode() {\n            return { type: TOGGLE_CONNECT_MODE };\n        },\n\n        CONNECT_PROCESSORS: CONNECT_PROCESSORS,\n        connectProcessors: function connectProcessors(payload) {\n            return { type: CONNECT_PROCESSORS, payload: payload, id: 'conn_' + (0, _util.createUUID)() };\n        },\n\n        DISCONNECT_PROCESSORS: DISCONNECT_PROCESSORS,\n        disconnectProcessors2: function disconnectProcessors2(id) {\n            return { type: DISCONNECT_PROCESSORS, id: id };\n        },\n\n        disconnectProcessors: function disconnectProcessors(id) {\n            return function (dispatch, getState, getActions) {\n                var state = getState();\n                var connection = state.connections.byId[id];\n                var sourceProcessor = state.processors.byId[connection.sourceProcessorID];\n                var destinationProcessor = state.processors.byId[connection.destinationProcessorID];\n\n                // disconnect the processors\n                dispatch(getActions().disconnectProcessors2(id));\n            };\n        },\n\n        RESCAN_TYPES: RESCAN_TYPES,\n        rescanTypes: function rescanTypes() {\n            var req = __webpack_require__(21);\n            var types = {};\n            req.keys().forEach(function (key) {\n                var type = key.substring(2, key.indexOf('/', 2));\n                var typeData = __webpack_require__(7)(\"./\" + type + '/config.json');\n                if (!typeData.excludedFromLibrary) {\n                    types[type] = {\n                        name: typeData.name\n                    };\n                }\n            });\n            return { type: RESCAN_TYPES, types: types };\n        }\n    };\n}\n\n/**\n * Convert a MIDI control value to a parameter value, depending on the parameter type.\n * @param {Object} param Processor parameter.\n * @param {Number} controllerValue MIDI controller value in the range 0 to 127.\n */\nfunction midiControlToParameterValue(param, controllerValue) {\n    var normalizedValue = controllerValue / 127;\n    switch (param.type) {\n        case 'integer':\n            return Math.round(param.min + (param.max - param.min) * normalizedValue);\n        case 'boolean':\n            return normalizedValue > .5;\n        case 'itemized':\n            if (normalizedValue === 1) {\n                return param.model[param.model.length - 1].value;\n            }\n            return param.model[Math.floor(normalizedValue * param.model.length)].value;\n        case 'string':\n        case 'position':\n        default:\n            return param.value;\n    }\n}\n\n/**\n * Provide a default processor name.\n * @param {Object} processor Processor to name.\n * @return {String} Name for a newly created processor.\n */\nfunction getProcessorDefaultName(processors) {\n    var name = void 0,\n        number = void 0,\n        spaceIndex = void 0,\n        highestNumber = 0,\n        staticName = 'Processor';\n    processors.allIds.forEach(function (id) {\n        name = processors.byId[id].params.byId.name.value;\n        if (name && name.indexOf(staticName) == 0) {\n            spaceIndex = name.lastIndexOf(' ');\n            if (spaceIndex != -1) {\n                number = parseInt(name.substr(spaceIndex), 10);\n                if (!isNaN(number)) {\n                    highestNumber = Math.max(highestNumber, number);\n                }\n            }\n        }\n    });\n    return staticName + ' ' + (highestNumber + 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Euclidean\",\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{},\"allIds\":[]},\"outputs\":{\"byId\":{\"out\":{\"x\":0,\"y\":50}},\"allIds\":[\"out\"]},\"params\":{\"byId\":{\"steps\":{\"label\":\"Steps\",\"type\":\"integer\",\"default\":16,\"value\":16,\"min\":1,\"max\":64,\"isMidiControllable\":true},\"pulses\":{\"label\":\"Pulses\",\"type\":\"integer\",\"default\":4,\"value\":4,\"min\":0,\"max\":16,\"isMidiControllable\":true},\"rotation\":{\"label\":\"Rotation\",\"type\":\"integer\",\"default\":0,\"value\":0,\"min\":0,\"max\":15,\"isMidiControllable\":true},\"channel_out\":{\"label\":\"Channel\",\"type\":\"integer\",\"default\":1,\"value\":1,\"min\":1,\"max\":16},\"pitch_out\":{\"label\":\"Pitch\",\"type\":\"integer\",\"default\":60,\"value\":60,\"min\":0,\"max\":127},\"velocity_out\":{\"label\":\"Velocity\",\"type\":\"integer\",\"default\":100,\"value\":100,\"min\":0,\"max\":127},\"rate\":{\"label\":\"Rate\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}]},\"is_triplets\":{\"label\":\"Triplets\",\"type\":\"boolean\",\"default\":false,\"value\":false},\"note_length\":{\"label\":\"Note length\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}]},\"is_mute\":{\"label\":\"Mute\",\"type\":\"boolean\",\"default\":false,\"value\":false,\"isMidiControllable\":true},\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\"}},\"allIds\":[\"steps\",\"pulses\",\"rotation\",\"channel_out\",\"pitch_out\",\"velocity_out\",\"rate\",\"note_length\",\"is_triplets\",\"is_mute\",\"name\"]}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvY29uZmlnLmpzb24/NmI0MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IseURBQXlELFNBQVMsYUFBYSxZQUFZLFFBQVEsT0FBTyxjQUFjLGtCQUFrQixXQUFXLFFBQVEsU0FBUyxvR0FBb0csV0FBVyxtR0FBbUcsYUFBYSxxR0FBcUcsZ0JBQWdCLDBFQUEwRSxjQUFjLDJFQUEyRSxpQkFBaUIsZ0ZBQWdGLFNBQVMsdUVBQXVFLHNCQUFzQixFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLDBCQUEwQixFQUFFLDRCQUE0QixFQUFFLDZCQUE2QixFQUFFLGdCQUFnQixrRUFBa0UsZ0JBQWdCLDhFQUE4RSxzQkFBc0IsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSw0QkFBNEIsRUFBRSw2QkFBNkIsRUFBRSxZQUFZLHdGQUF3RixTQUFTLHNFQUFzRSIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1wibmFtZVwiOlwiRXVjbGlkZWFuXCIsXCJwb3NpdGlvblhcIjowLFwicG9zaXRpb25ZXCI6MCxcImlucHV0c1wiOntcImJ5SWRcIjp7fSxcImFsbElkc1wiOltdfSxcIm91dHB1dHNcIjp7XCJieUlkXCI6e1wib3V0XCI6e1wieFwiOjAsXCJ5XCI6NTB9fSxcImFsbElkc1wiOltcIm91dFwiXX0sXCJwYXJhbXNcIjp7XCJieUlkXCI6e1wic3RlcHNcIjp7XCJsYWJlbFwiOlwiU3RlcHNcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjoxNixcInZhbHVlXCI6MTYsXCJtaW5cIjoxLFwibWF4XCI6NjQsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlfSxcInB1bHNlc1wiOntcImxhYmVsXCI6XCJQdWxzZXNcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjo0LFwidmFsdWVcIjo0LFwibWluXCI6MCxcIm1heFwiOjE2LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZX0sXCJyb3RhdGlvblwiOntcImxhYmVsXCI6XCJSb3RhdGlvblwiLFwidHlwZVwiOlwiaW50ZWdlclwiLFwiZGVmYXVsdFwiOjAsXCJ2YWx1ZVwiOjAsXCJtaW5cIjowLFwibWF4XCI6MTUsXCJpc01pZGlDb250cm9sbGFibGVcIjp0cnVlfSxcImNoYW5uZWxfb3V0XCI6e1wibGFiZWxcIjpcIkNoYW5uZWxcIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjoxLFwidmFsdWVcIjoxLFwibWluXCI6MSxcIm1heFwiOjE2fSxcInBpdGNoX291dFwiOntcImxhYmVsXCI6XCJQaXRjaFwiLFwidHlwZVwiOlwiaW50ZWdlclwiLFwiZGVmYXVsdFwiOjYwLFwidmFsdWVcIjo2MCxcIm1pblwiOjAsXCJtYXhcIjoxMjd9LFwidmVsb2NpdHlfb3V0XCI6e1wibGFiZWxcIjpcIlZlbG9jaXR5XCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6MTAwLFwidmFsdWVcIjoxMDAsXCJtaW5cIjowLFwibWF4XCI6MTI3fSxcInJhdGVcIjp7XCJsYWJlbFwiOlwiUmF0ZVwiLFwidHlwZVwiOlwiaXRlbWl6ZWRcIixcImRlZmF1bHRcIjowLjI1LFwidmFsdWVcIjowLjI1LFwibW9kZWxcIjpbe1wibGFiZWxcIjpcIjFcIixcInZhbHVlXCI6NH0se1wibGFiZWxcIjpcIjEvMlwiLFwidmFsdWVcIjoyfSx7XCJsYWJlbFwiOlwiMS80XCIsXCJ2YWx1ZVwiOjF9LHtcImxhYmVsXCI6XCIxLzhcIixcInZhbHVlXCI6MC41fSx7XCJsYWJlbFwiOlwiMS8xNlwiLFwidmFsdWVcIjowLjI1fSx7XCJsYWJlbFwiOlwiMS8zMlwiLFwidmFsdWVcIjowLjEyNX1dfSxcImlzX3RyaXBsZXRzXCI6e1wibGFiZWxcIjpcIlRyaXBsZXRzXCIsXCJ0eXBlXCI6XCJib29sZWFuXCIsXCJkZWZhdWx0XCI6ZmFsc2UsXCJ2YWx1ZVwiOmZhbHNlfSxcIm5vdGVfbGVuZ3RoXCI6e1wibGFiZWxcIjpcIk5vdGUgbGVuZ3RoXCIsXCJ0eXBlXCI6XCJpdGVtaXplZFwiLFwiZGVmYXVsdFwiOjAuMjUsXCJ2YWx1ZVwiOjAuMjUsXCJtb2RlbFwiOlt7XCJsYWJlbFwiOlwiMVwiLFwidmFsdWVcIjo0fSx7XCJsYWJlbFwiOlwiMS8yXCIsXCJ2YWx1ZVwiOjJ9LHtcImxhYmVsXCI6XCIxLzRcIixcInZhbHVlXCI6MX0se1wibGFiZWxcIjpcIjEvOFwiLFwidmFsdWVcIjowLjV9LHtcImxhYmVsXCI6XCIxLzE2XCIsXCJ2YWx1ZVwiOjAuMjV9LHtcImxhYmVsXCI6XCIxLzMyXCIsXCJ2YWx1ZVwiOjAuMTI1fV19LFwiaXNfbXV0ZVwiOntcImxhYmVsXCI6XCJNdXRlXCIsXCJ0eXBlXCI6XCJib29sZWFuXCIsXCJkZWZhdWx0XCI6ZmFsc2UsXCJ2YWx1ZVwiOmZhbHNlLFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZX0sXCJuYW1lXCI6e1wibGFiZWxcIjpcIk5hbWVcIixcInR5cGVcIjpcInN0cmluZ1wiLFwiZGVmYXVsdFwiOlwiVW5uYW1lZFwiLFwidmFsdWVcIjpcIlVubmFtZWRcIn19LFwiYWxsSWRzXCI6W1wic3RlcHNcIixcInB1bHNlc1wiLFwicm90YXRpb25cIixcImNoYW5uZWxfb3V0XCIsXCJwaXRjaF9vdXRcIixcInZlbG9jaXR5X291dFwiLFwicmF0ZVwiLFwibm90ZV9sZW5ndGhcIixcImlzX3RyaXBsZXRzXCIsXCJpc19tdXRlXCIsXCJuYW1lXCJdfX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL2VwZy9jb25maWcuanNvblxuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Euclid FX\",\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{\"in\":{\"x\":0,\"y\":-50}},\"allIds\":[\"in\"]},\"outputs\":{\"byId\":{\"out\":{\"x\":0,\"y\":50}},\"allIds\":[\"out\"]},\"params\":{\"byId\":{\"steps\":{\"label\":\"Steps\",\"type\":\"integer\",\"default\":16,\"value\":16,\"min\":1,\"max\":64,\"isMidiControllable\":true},\"pulses\":{\"label\":\"Pulses\",\"type\":\"integer\",\"default\":4,\"value\":4,\"min\":0,\"max\":16,\"isMidiControllable\":true},\"rotation\":{\"label\":\"Rotation\",\"type\":\"integer\",\"default\":0,\"value\":0,\"min\":0,\"max\":15,\"isMidiControllable\":true},\"rate\":{\"label\":\"Rate\",\"type\":\"itemized\",\"default\":0.25,\"value\":0.25,\"model\":[{\"label\":\"1\",\"value\":4},{\"label\":\"1/2\",\"value\":2},{\"label\":\"1/4\",\"value\":1},{\"label\":\"1/8\",\"value\":0.5},{\"label\":\"1/16\",\"value\":0.25},{\"label\":\"1/32\",\"value\":0.125}]},\"is_triplets\":{\"label\":\"Triplets\",\"type\":\"boolean\",\"default\":false,\"value\":false},\"target\":{\"label\":\"Target\",\"type\":\"itemized\",\"default\":\"velocity\",\"value\":\"velocity\",\"model\":[{\"label\":\"Velocity\",\"value\":\"velocity\"},{\"label\":\"Pitch\",\"value\":\"pitch\"},{\"label\":\"Channel\",\"value\":\"channel\"},{\"label\":\"Note length\",\"value\":\"length\"},{\"label\":\"Note delay\",\"value\":\"delay\"}]},\"low\":{\"label\":\"Low value\",\"type\":\"integer\",\"default\":50,\"value\":50,\"min\":0,\"max\":127,\"isMidiControllable\":true},\"high\":{\"label\":\"High value\",\"type\":\"integer\",\"default\":100,\"value\":100,\"min\":0,\"max\":127,\"isMidiControllable\":true},\"mode\":{\"label\":\"Mode\",\"type\":\"itemized\",\"default\":\"absolute\",\"value\":\"absolute\",\"model\":[{\"label\":\"Absolute\",\"value\":\"absolute\"},{\"label\":\"Relative\",\"value\":\"relative\"}]},\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\"}},\"allIds\":[\"steps\",\"pulses\",\"rotation\",\"rate\",\"is_triplets\",\"target\",\"low\",\"high\",\"mode\",\"name\"]}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9jb25maWcuanNvbj9hZmZkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQix5REFBeUQsUUFBUSxNQUFNLGVBQWUsaUJBQWlCLFlBQVksUUFBUSxPQUFPLGNBQWMsa0JBQWtCLFdBQVcsUUFBUSxTQUFTLG9HQUFvRyxXQUFXLG1HQUFtRyxhQUFhLHFHQUFxRyxTQUFTLHVFQUF1RSxzQkFBc0IsRUFBRSx3QkFBd0IsRUFBRSx3QkFBd0IsRUFBRSwwQkFBMEIsRUFBRSw0QkFBNEIsRUFBRSw2QkFBNkIsRUFBRSxnQkFBZ0Isa0VBQWtFLFdBQVcscUZBQXFGLHNDQUFzQyxFQUFFLGdDQUFnQyxFQUFFLG9DQUFvQyxFQUFFLHVDQUF1QyxFQUFFLHFDQUFxQyxFQUFFLFFBQVEseUdBQXlHLFNBQVMsNEdBQTRHLFNBQVMsbUZBQW1GLHNDQUFzQyxFQUFFLHNDQUFzQyxFQUFFLFNBQVMsc0VBQXNFIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XCJuYW1lXCI6XCJFdWNsaWQgRlhcIixcInBvc2l0aW9uWFwiOjAsXCJwb3NpdGlvbllcIjowLFwiaW5wdXRzXCI6e1wiYnlJZFwiOntcImluXCI6e1wieFwiOjAsXCJ5XCI6LTUwfX0sXCJhbGxJZHNcIjpbXCJpblwiXX0sXCJvdXRwdXRzXCI6e1wiYnlJZFwiOntcIm91dFwiOntcInhcIjowLFwieVwiOjUwfX0sXCJhbGxJZHNcIjpbXCJvdXRcIl19LFwicGFyYW1zXCI6e1wiYnlJZFwiOntcInN0ZXBzXCI6e1wibGFiZWxcIjpcIlN0ZXBzXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6MTYsXCJ2YWx1ZVwiOjE2LFwibWluXCI6MSxcIm1heFwiOjY0LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZX0sXCJwdWxzZXNcIjp7XCJsYWJlbFwiOlwiUHVsc2VzXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6NCxcInZhbHVlXCI6NCxcIm1pblwiOjAsXCJtYXhcIjoxNixcImlzTWlkaUNvbnRyb2xsYWJsZVwiOnRydWV9LFwicm90YXRpb25cIjp7XCJsYWJlbFwiOlwiUm90YXRpb25cIixcInR5cGVcIjpcImludGVnZXJcIixcImRlZmF1bHRcIjowLFwidmFsdWVcIjowLFwibWluXCI6MCxcIm1heFwiOjE1LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZX0sXCJyYXRlXCI6e1wibGFiZWxcIjpcIlJhdGVcIixcInR5cGVcIjpcIml0ZW1pemVkXCIsXCJkZWZhdWx0XCI6MC4yNSxcInZhbHVlXCI6MC4yNSxcIm1vZGVsXCI6W3tcImxhYmVsXCI6XCIxXCIsXCJ2YWx1ZVwiOjR9LHtcImxhYmVsXCI6XCIxLzJcIixcInZhbHVlXCI6Mn0se1wibGFiZWxcIjpcIjEvNFwiLFwidmFsdWVcIjoxfSx7XCJsYWJlbFwiOlwiMS84XCIsXCJ2YWx1ZVwiOjAuNX0se1wibGFiZWxcIjpcIjEvMTZcIixcInZhbHVlXCI6MC4yNX0se1wibGFiZWxcIjpcIjEvMzJcIixcInZhbHVlXCI6MC4xMjV9XX0sXCJpc190cmlwbGV0c1wiOntcImxhYmVsXCI6XCJUcmlwbGV0c1wiLFwidHlwZVwiOlwiYm9vbGVhblwiLFwiZGVmYXVsdFwiOmZhbHNlLFwidmFsdWVcIjpmYWxzZX0sXCJ0YXJnZXRcIjp7XCJsYWJlbFwiOlwiVGFyZ2V0XCIsXCJ0eXBlXCI6XCJpdGVtaXplZFwiLFwiZGVmYXVsdFwiOlwidmVsb2NpdHlcIixcInZhbHVlXCI6XCJ2ZWxvY2l0eVwiLFwibW9kZWxcIjpbe1wibGFiZWxcIjpcIlZlbG9jaXR5XCIsXCJ2YWx1ZVwiOlwidmVsb2NpdHlcIn0se1wibGFiZWxcIjpcIlBpdGNoXCIsXCJ2YWx1ZVwiOlwicGl0Y2hcIn0se1wibGFiZWxcIjpcIkNoYW5uZWxcIixcInZhbHVlXCI6XCJjaGFubmVsXCJ9LHtcImxhYmVsXCI6XCJOb3RlIGxlbmd0aFwiLFwidmFsdWVcIjpcImxlbmd0aFwifSx7XCJsYWJlbFwiOlwiTm90ZSBkZWxheVwiLFwidmFsdWVcIjpcImRlbGF5XCJ9XX0sXCJsb3dcIjp7XCJsYWJlbFwiOlwiTG93IHZhbHVlXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6NTAsXCJ2YWx1ZVwiOjUwLFwibWluXCI6MCxcIm1heFwiOjEyNyxcImlzTWlkaUNvbnRyb2xsYWJsZVwiOnRydWV9LFwiaGlnaFwiOntcImxhYmVsXCI6XCJIaWdoIHZhbHVlXCIsXCJ0eXBlXCI6XCJpbnRlZ2VyXCIsXCJkZWZhdWx0XCI6MTAwLFwidmFsdWVcIjoxMDAsXCJtaW5cIjowLFwibWF4XCI6MTI3LFwiaXNNaWRpQ29udHJvbGxhYmxlXCI6dHJ1ZX0sXCJtb2RlXCI6e1wibGFiZWxcIjpcIk1vZGVcIixcInR5cGVcIjpcIml0ZW1pemVkXCIsXCJkZWZhdWx0XCI6XCJhYnNvbHV0ZVwiLFwidmFsdWVcIjpcImFic29sdXRlXCIsXCJtb2RlbFwiOlt7XCJsYWJlbFwiOlwiQWJzb2x1dGVcIixcInZhbHVlXCI6XCJhYnNvbHV0ZVwifSx7XCJsYWJlbFwiOlwiUmVsYXRpdmVcIixcInZhbHVlXCI6XCJyZWxhdGl2ZVwifV19LFwibmFtZVwiOntcImxhYmVsXCI6XCJOYW1lXCIsXCJ0eXBlXCI6XCJzdHJpbmdcIixcImRlZmF1bHRcIjpcIlVubmFtZWRcIixcInZhbHVlXCI6XCJVbm5hbWVkXCJ9fSxcImFsbElkc1wiOltcInN0ZXBzXCIsXCJwdWxzZXNcIixcInJvdGF0aW9uXCIsXCJyYXRlXCIsXCJpc190cmlwbGV0c1wiLFwidGFyZ2V0XCIsXCJsb3dcIixcImhpZ2hcIixcIm1vZGVcIixcIm5hbWVcIl19fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2pzb24tbG9hZGVyIS4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXVjbGlkZngvY29uZmlnLmpzb25cbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"Output\",\"positionX\":0,\"positionY\":0,\"inputs\":{\"byId\":{\"in\":{\"x\":0,\"y\":-50}},\"allIds\":[\"in\"]},\"outputs\":{\"byId\":{},\"allIds\":[]},\"params\":{\"byId\":{\"port\":{\"label\":\"MIDI port\",\"type\":\"itemized\",\"default\":\"none\",\"value\":\"none\",\"model\":[{\"label\":\"No output\",\"value\":\"none\"}]},\"name\":{\"label\":\"Name\",\"type\":\"string\",\"default\":\"Unnamed\",\"value\":\"Unnamed\"}},\"allIds\":[\"port\",\"name\"]}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvY29uZmlnLmpzb24/N2FjNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0Isc0RBQXNELFFBQVEsTUFBTSxlQUFlLGlCQUFpQixZQUFZLFNBQVMsYUFBYSxXQUFXLFFBQVEsUUFBUSxnRkFBZ0YsbUNBQW1DLEVBQUUsU0FBUyxzRUFBc0UiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcIk91dHB1dFwiLFwicG9zaXRpb25YXCI6MCxcInBvc2l0aW9uWVwiOjAsXCJpbnB1dHNcIjp7XCJieUlkXCI6e1wiaW5cIjp7XCJ4XCI6MCxcInlcIjotNTB9fSxcImFsbElkc1wiOltcImluXCJdfSxcIm91dHB1dHNcIjp7XCJieUlkXCI6e30sXCJhbGxJZHNcIjpbXX0sXCJwYXJhbXNcIjp7XCJieUlkXCI6e1wicG9ydFwiOntcImxhYmVsXCI6XCJNSURJIHBvcnRcIixcInR5cGVcIjpcIml0ZW1pemVkXCIsXCJkZWZhdWx0XCI6XCJub25lXCIsXCJ2YWx1ZVwiOlwibm9uZVwiLFwibW9kZWxcIjpbe1wibGFiZWxcIjpcIk5vIG91dHB1dFwiLFwidmFsdWVcIjpcIm5vbmVcIn1dfSxcIm5hbWVcIjp7XCJsYWJlbFwiOlwiTmFtZVwiLFwidHlwZVwiOlwic3RyaW5nXCIsXCJkZWZhdWx0XCI6XCJVbm5hbWVkXCIsXCJ2YWx1ZVwiOlwiVW5uYW1lZFwifX0sXCJhbGxJZHNcIjpbXCJwb3J0XCIsXCJuYW1lXCJdfX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9qc29uLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL291dHB1dC9jb25maWcuanNvblxuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/processor.js\": 8,\n\t\"./euclidfx/processor.js\": 10,\n\t\"./output/processor.js\": 12\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 21;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBcXHByb2Nlc3Nvci5qcyQ/MDY4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2VwZy9wcm9jZXNzb3IuanNcIjogOCxcblx0XCIuL2V1Y2xpZGZ4L3Byb2Nlc3Nvci5qc1wiOiAxMCxcblx0XCIuL291dHB1dC9wcm9jZXNzb3IuanNcIjogMTJcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyMTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy93aC9wcm9jZXNzb3JzIFxccHJvY2Vzc29yLmpzJFxuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createMIDIConnectorIn;\n/**\n * MIDI network processor in connector.\n */\nfunction createMIDIConnectorIn(specs, my) {\n    var that,\n        sources = [],\n        numSources = 0,\n        outputData = [],\n        data,\n\n\n    /**\n     * Collects data from all processors this input is connected to.\n     * @return {Array} MIDI event data from all connected processors.\n     */\n    getInputData = function getInputData() {\n        outputData.length = 0;\n\n        for (var i = 0; i < numSources; i++) {\n            data = sources[i].getOutputData();\n            for (var j = 0, p = data.length; j < p; j++) {\n                outputData.push(_extends({}, data[j]));\n            }\n        }\n        return outputData;\n    },\n\n\n    /**\n     * Connect a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    addConnection = function addConnection(processor) {\n        sources.push(processor);\n        numSources = sources.length;\n    },\n\n\n    /**\n     * Remove a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    removeConnection = function removeConnection(processor) {\n        var n = numSources;\n        while (--n >= 0) {\n            if (processor === sources[n]) {\n                sources.splice(n, 1);\n                numSources = sources.length;\n                break;\n            }\n        }\n    },\n\n\n    /**\n     * Get number of connections.\n     * Used by the output port module to determine if \n     * @return {Number} Number of connections to this output processor.\n     */\n    hasInputConnections = function hasInputConnections() {\n        return numSources > 0;\n    };\n\n    my = my || {};\n    my.getInputData = getInputData;\n\n    that = specs.that || {};\n    that.addConnection = addConnection;\n    that.removeConnection = removeConnection;\n    that.hasInputConnections = hasInputConnections;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3Jpbi5qcz9mZDIwIl0sIm5hbWVzIjpbImNyZWF0ZU1JRElDb25uZWN0b3JJbiIsInNwZWNzIiwibXkiLCJ0aGF0Iiwic291cmNlcyIsIm51bVNvdXJjZXMiLCJvdXRwdXREYXRhIiwiZGF0YSIsImdldElucHV0RGF0YSIsImxlbmd0aCIsImkiLCJnZXRPdXRwdXREYXRhIiwiaiIsInAiLCJwdXNoIiwiYWRkQ29ubmVjdGlvbiIsInByb2Nlc3NvciIsInJlbW92ZUNvbm5lY3Rpb24iLCJuIiwic3BsaWNlIiwiaGFzSW5wdXRDb25uZWN0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBR3dCQSxxQjtBQUh4Qjs7O0FBR2UsU0FBU0EscUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNDQyxFQUF0QyxFQUEwQztBQUNyRCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsVUFBVSxFQURkO0FBQUEsUUFFSUMsYUFBYSxDQUZqQjtBQUFBLFFBR0lDLGFBQWEsRUFIakI7QUFBQSxRQUlJQyxJQUpKOzs7QUFNSTs7OztBQUlBQyxtQkFBZSxTQUFmQSxZQUFlLEdBQVc7QUFDdEJGLG1CQUFXRyxNQUFYLEdBQW9CLENBQXBCOztBQUVBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxVQUFwQixFQUFnQ0ssR0FBaEMsRUFBcUM7QUFDakNILG1CQUFPSCxRQUFRTSxDQUFSLEVBQVdDLGFBQVgsRUFBUDtBQUNBLGlCQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxJQUFJTixLQUFLRSxNQUF6QixFQUFpQ0csSUFBSUMsQ0FBckMsRUFBd0NELEdBQXhDLEVBQTZDO0FBQ3pDTiwyQkFBV1EsSUFBWCxjQUFxQlAsS0FBS0ssQ0FBTCxDQUFyQjtBQUNIO0FBQ0o7QUFDRCxlQUFPTixVQUFQO0FBQ0gsS0FwQkw7OztBQXNCSTs7OztBQUlBUyxvQkFBZ0IsU0FBaEJBLGFBQWdCLENBQVNDLFNBQVQsRUFBb0I7QUFDaENaLGdCQUFRVSxJQUFSLENBQWFFLFNBQWI7QUFDQVgscUJBQWFELFFBQVFLLE1BQXJCO0FBQ0gsS0E3Qkw7OztBQStCSTs7OztBQUlBUSx1QkFBbUIsU0FBbkJBLGdCQUFtQixDQUFTRCxTQUFULEVBQW9CO0FBQ25DLFlBQUlFLElBQUliLFVBQVI7QUFDQSxlQUFPLEVBQUVhLENBQUYsSUFBTyxDQUFkLEVBQWlCO0FBQ2IsZ0JBQUlGLGNBQWNaLFFBQVFjLENBQVIsQ0FBbEIsRUFBOEI7QUFDMUJkLHdCQUFRZSxNQUFSLENBQWVELENBQWYsRUFBa0IsQ0FBbEI7QUFDQWIsNkJBQWFELFFBQVFLLE1BQXJCO0FBQ0E7QUFDSDtBQUNKO0FBQ0osS0E1Q0w7OztBQThDSTs7Ozs7QUFLQVcsMEJBQXNCLFNBQXRCQSxtQkFBc0IsR0FBVztBQUM3QixlQUFPZixhQUFhLENBQXBCO0FBQ0gsS0FyREw7O0FBdURBSCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR00sWUFBSCxHQUFrQkEsWUFBbEI7O0FBRUFMLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjtBQUNBQSxTQUFLWSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBWixTQUFLYyxnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBQ0FkLFNBQUtpQixtQkFBTCxHQUEyQkEsbUJBQTNCO0FBQ0EsV0FBT2pCLElBQVA7QUFDSCIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTUlESSBuZXR3b3JrIHByb2Nlc3NvciBpbiBjb25uZWN0b3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1JRElDb25uZWN0b3JJbihzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc291cmNlcyA9IFtdLFxuICAgICAgICBudW1Tb3VyY2VzID0gMCxcbiAgICAgICAgb3V0cHV0RGF0YSA9IFtdLFxuICAgICAgICBkYXRhLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbGxlY3RzIGRhdGEgZnJvbSBhbGwgcHJvY2Vzc29ycyB0aGlzIGlucHV0IGlzIGNvbm5lY3RlZCB0by5cbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IE1JREkgZXZlbnQgZGF0YSBmcm9tIGFsbCBjb25uZWN0ZWQgcHJvY2Vzc29ycy5cbiAgICAgICAgICovXG4gICAgICAgIGdldElucHV0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgb3V0cHV0RGF0YS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNvdXJjZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBzb3VyY2VzW2ldLmdldE91dHB1dERhdGEoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgcCA9IGRhdGEubGVuZ3RoOyBqIDwgcDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dERhdGEucHVzaCh7IC4uLmRhdGFbal0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dERhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ29ubmVjdCBhIHByb2Nlc3NvciBhcyBzb3VyY2UgZm9yIHRoaXMgcHJvY2Vzc29yLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHByb2Nlc3NvciBOZXR3b3JrIE1JREkgcHJvY2Vzc29yLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHByb2Nlc3Nvcikge1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKHByb2Nlc3Nvcik7XG4gICAgICAgICAgICBudW1Tb3VyY2VzID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGEgcHJvY2Vzc29yIGFzIHNvdXJjZSBmb3IgdGhpcyBwcm9jZXNzb3IuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIE5ldHdvcmsgTUlESSBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVDb25uZWN0aW9uID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgbiA9IG51bVNvdXJjZXM7XG4gICAgICAgICAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc29yID09PSBzb3VyY2VzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXMuc3BsaWNlKG4sIDEpO1xuICAgICAgICAgICAgICAgICAgICBudW1Tb3VyY2VzID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgbnVtYmVyIG9mIGNvbm5lY3Rpb25zLlxuICAgICAgICAgKiBVc2VkIGJ5IHRoZSBvdXRwdXQgcG9ydCBtb2R1bGUgdG8gZGV0ZXJtaW5lIGlmIFxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE51bWJlciBvZiBjb25uZWN0aW9ucyB0byB0aGlzIG91dHB1dCBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICBoYXNJbnB1dENvbm5lY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtU291cmNlcyA+IDA7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5nZXRJbnB1dERhdGEgPSBnZXRJbnB1dERhdGE7XG5cbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICB0aGF0LmFkZENvbm5lY3Rpb24gPSBhZGRDb25uZWN0aW9uO1xuICAgIHRoYXQucmVtb3ZlQ29ubmVjdGlvbiA9IHJlbW92ZUNvbm5lY3Rpb247XG4gICAgdGhhdC5oYXNJbnB1dENvbm5lY3Rpb25zID0gaGFzSW5wdXRDb25uZWN0aW9ucztcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9taWRpL2Nvbm5lY3RvcmluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIConnectorOut;\n/**\n * MIDI network processor out connector.\n */\nfunction createMIDIConnectorOut(specs, my) {\n    var that,\n        outputData = [],\n        destinations = [],\n\n\n    /**\n     * Clear the output stack when event processing starts.\n     */\n    clearOutputData = function clearOutputData() {\n        outputData.length = 0;\n    },\n\n\n    /**\n     * Set output data that is the result of this processor's processing.\n     * It will be collected by the processors attached to this output.\n     * @param {Object} eventData MIDI event data.\n     */\n    setOutputData = function setOutputData(eventData) {\n        outputData.push(eventData);\n    },\n\n\n    /**\n     * Public function for processors connected to this output to\n     * collect the data this processor's process function has produced.\n     * @return {Object} MIDI event data.\n     */\n    getOutputData = function getOutputData() {\n        return outputData;\n    },\n\n\n    /**\n     * Connect this processor's output to another processor's input.\n     * @param  {Object} processor Processor to connect to.\n     */\n    connect = function connect(processor) {\n        var isConnected = false,\n            n = destinations.length;\n        for (var i = 0; i < n; i++) {\n            if (processor === destinations[i]) {\n                isConnected = true;\n                break;\n            }\n        }\n        if (!isConnected) {\n            processor.addConnection(that);\n            destinations.push(processor);\n        }\n    },\n\n\n    /**\n     * Disconnect this processor's output from another processor's input.\n     * @param  {Object} processor Processor to disconnect from, or undefined to remove all.\n     */\n    disconnect = function disconnect(processor) {\n        var n = destinations.length;\n        while (--n >= 0) {\n            if (!processor || processor && processor === destinations[n]) {\n                destinations[n].removeConnection(that);\n                destinations.splice(n, 1);\n            }\n        }\n    },\n\n\n    /**\n     * Get destination processors.\n     * Used to draw the connection cables on canvas.\n     * @return {Array} Processors this output connects to.\n     */\n    getDestinations = function getDestinations() {\n        return destinations;\n    };\n\n    my = my || {};\n    my.clearOutputData = clearOutputData;\n    my.setOutputData = setOutputData;\n\n    that = specs.that || {};\n\n    that.getDestinations = getDestinations;\n    that.getOutputData = getOutputData;\n    that.connect = connect;\n    that.disconnect = disconnect;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3JvdXQuanM/ZTZlMiJdLCJuYW1lcyI6WyJjcmVhdGVNSURJQ29ubmVjdG9yT3V0Iiwic3BlY3MiLCJteSIsInRoYXQiLCJvdXRwdXREYXRhIiwiZGVzdGluYXRpb25zIiwiY2xlYXJPdXRwdXREYXRhIiwibGVuZ3RoIiwic2V0T3V0cHV0RGF0YSIsImV2ZW50RGF0YSIsInB1c2giLCJnZXRPdXRwdXREYXRhIiwiY29ubmVjdCIsInByb2Nlc3NvciIsImlzQ29ubmVjdGVkIiwibiIsImkiLCJhZGRDb25uZWN0aW9uIiwiZGlzY29ubmVjdCIsInJlbW92ZUNvbm5lY3Rpb24iLCJzcGxpY2UiLCJnZXREZXN0aW5hdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUd3QkEsc0I7QUFIeEI7OztBQUdlLFNBQVNBLHNCQUFULENBQWdDQyxLQUFoQyxFQUF1Q0MsRUFBdkMsRUFBMkM7QUFDdEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLGFBQWEsRUFEakI7QUFBQSxRQUVJQyxlQUFlLEVBRm5COzs7QUFJSTs7O0FBR0FDLHNCQUFrQixTQUFsQkEsZUFBa0IsR0FBVztBQUN6QkYsbUJBQVdHLE1BQVgsR0FBb0IsQ0FBcEI7QUFDSCxLQVRMOzs7QUFXSTs7Ozs7QUFLQUMsb0JBQWdCLFNBQWhCQSxhQUFnQixDQUFTQyxTQUFULEVBQW9CO0FBQ2hDTCxtQkFBV00sSUFBWCxDQUFnQkQsU0FBaEI7QUFDSCxLQWxCTDs7O0FBb0JJOzs7OztBQUtBRSxvQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDdkIsZUFBT1AsVUFBUDtBQUNILEtBM0JMOzs7QUE2Qkk7Ozs7QUFJQVEsY0FBVSxTQUFWQSxPQUFVLENBQVNDLFNBQVQsRUFBb0I7QUFDMUIsWUFBSUMsY0FBYyxLQUFsQjtBQUFBLFlBQ0lDLElBQUlWLGFBQWFFLE1BRHJCO0FBRUEsYUFBSyxJQUFJUyxJQUFJLENBQWIsRUFBZ0JBLElBQUlELENBQXBCLEVBQXVCQyxHQUF2QixFQUE0QjtBQUN4QixnQkFBSUgsY0FBY1IsYUFBYVcsQ0FBYixDQUFsQixFQUFtQztBQUMvQkYsOEJBQWMsSUFBZDtBQUNBO0FBQ0g7QUFDSjtBQUNELFlBQUksQ0FBQ0EsV0FBTCxFQUFrQjtBQUNkRCxzQkFBVUksYUFBVixDQUF3QmQsSUFBeEI7QUFDQUUseUJBQWFLLElBQWIsQ0FBa0JHLFNBQWxCO0FBQ0g7QUFDSixLQTlDTDs7O0FBZ0RJOzs7O0FBSUFLLGlCQUFhLFNBQWJBLFVBQWEsQ0FBU0wsU0FBVCxFQUFvQjtBQUM3QixZQUFJRSxJQUFJVixhQUFhRSxNQUFyQjtBQUNBLGVBQU8sRUFBRVEsQ0FBRixJQUFPLENBQWQsRUFBaUI7QUFDYixnQkFBSSxDQUFDRixTQUFELElBQWVBLGFBQWFBLGNBQWNSLGFBQWFVLENBQWIsQ0FBOUMsRUFBZ0U7QUFDNURWLDZCQUFhVSxDQUFiLEVBQWdCSSxnQkFBaEIsQ0FBaUNoQixJQUFqQztBQUNBRSw2QkFBYWUsTUFBYixDQUFvQkwsQ0FBcEIsRUFBdUIsQ0FBdkI7QUFDSDtBQUNKO0FBQ0osS0E1REw7OztBQThESTs7Ozs7QUFLQU0sc0JBQWtCLFNBQWxCQSxlQUFrQixHQUFXO0FBQ3pCLGVBQU9oQixZQUFQO0FBQ0gsS0FyRUw7O0FBdUVBSCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0ksZUFBSCxHQUFxQkEsZUFBckI7QUFDQUosT0FBR00sYUFBSCxHQUFtQkEsYUFBbkI7O0FBRUFMLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQUEsU0FBS2tCLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0FsQixTQUFLUSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBUixTQUFLUyxPQUFMLEdBQWVBLE9BQWY7QUFDQVQsU0FBS2UsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxXQUFPZixJQUFQO0FBQ0giLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1JREkgbmV0d29yayBwcm9jZXNzb3Igb3V0IGNvbm5lY3Rvci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUNvbm5lY3Rvck91dChzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgb3V0cHV0RGF0YSA9IFtdLFxuICAgICAgICBkZXN0aW5hdGlvbnMgPSBbXSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYXIgdGhlIG91dHB1dCBzdGFjayB3aGVuIGV2ZW50IHByb2Nlc3Npbmcgc3RhcnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXJPdXRwdXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvdXRwdXREYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IG91dHB1dCBkYXRhIHRoYXQgaXMgdGhlIHJlc3VsdCBvZiB0aGlzIHByb2Nlc3NvcidzIHByb2Nlc3NpbmcuXG4gICAgICAgICAqIEl0IHdpbGwgYmUgY29sbGVjdGVkIGJ5IHRoZSBwcm9jZXNzb3JzIGF0dGFjaGVkIHRvIHRoaXMgb3V0cHV0LlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnREYXRhIE1JREkgZXZlbnQgZGF0YS5cbiAgICAgICAgICovXG4gICAgICAgIHNldE91dHB1dERhdGEgPSBmdW5jdGlvbihldmVudERhdGEpIHtcbiAgICAgICAgICAgIG91dHB1dERhdGEucHVzaChldmVudERhdGEpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFB1YmxpYyBmdW5jdGlvbiBmb3IgcHJvY2Vzc29ycyBjb25uZWN0ZWQgdG8gdGhpcyBvdXRwdXQgdG9cbiAgICAgICAgICogY29sbGVjdCB0aGUgZGF0YSB0aGlzIHByb2Nlc3NvcidzIHByb2Nlc3MgZnVuY3Rpb24gaGFzIHByb2R1Y2VkLlxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE1JREkgZXZlbnQgZGF0YS5cbiAgICAgICAgICovXG4gICAgICAgIGdldE91dHB1dERhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXREYXRhO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbm5lY3QgdGhpcyBwcm9jZXNzb3IncyBvdXRwdXQgdG8gYW5vdGhlciBwcm9jZXNzb3IncyBpbnB1dC5cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBwcm9jZXNzb3IgUHJvY2Vzc29yIHRvIGNvbm5lY3QgdG8uXG4gICAgICAgICAqL1xuICAgICAgICBjb25uZWN0ID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgaXNDb25uZWN0ZWQgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBuID0gZGVzdGluYXRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NvciA9PT0gZGVzdGluYXRpb25zW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Nvci5hZGRDb25uZWN0aW9uKHRoYXQpO1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9ucy5wdXNoKHByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogRGlzY29ubmVjdCB0aGlzIHByb2Nlc3NvcidzIG91dHB1dCBmcm9tIGFub3RoZXIgcHJvY2Vzc29yJ3MgaW5wdXQuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIFByb2Nlc3NvciB0byBkaXNjb25uZWN0IGZyb20sIG9yIHVuZGVmaW5lZCB0byByZW1vdmUgYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgZGlzY29ubmVjdCA9IGZ1bmN0aW9uKHByb2Nlc3Nvcikge1xuICAgICAgICAgICAgdmFyIG4gPSBkZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9jZXNzb3IgfHwgKHByb2Nlc3NvciAmJiBwcm9jZXNzb3IgPT09IGRlc3RpbmF0aW9uc1tuXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25zW25dLnJlbW92ZUNvbm5lY3Rpb24odGhhdCk7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9ucy5zcGxpY2UobiwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXN0aW5hdGlvbiBwcm9jZXNzb3JzLlxuICAgICAgICAgKiBVc2VkIHRvIGRyYXcgdGhlIGNvbm5lY3Rpb24gY2FibGVzIG9uIGNhbnZhcy5cbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IFByb2Nlc3NvcnMgdGhpcyBvdXRwdXQgY29ubmVjdHMgdG8uXG4gICAgICAgICAqL1xuICAgICAgICBnZXREZXN0aW5hdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbnM7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5jbGVhck91dHB1dERhdGEgPSBjbGVhck91dHB1dERhdGE7XG4gICAgbXkuc2V0T3V0cHV0RGF0YSA9IHNldE91dHB1dERhdGE7XG5cbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICBcbiAgICB0aGF0LmdldERlc3RpbmF0aW9ucyA9IGdldERlc3RpbmF0aW9ucztcbiAgICB0aGF0LmdldE91dHB1dERhdGEgPSBnZXRPdXRwdXREYXRhO1xuICAgIHRoYXQuY29ubmVjdCA9IGNvbm5lY3Q7XG4gICAgdGhhdC5kaXNjb25uZWN0ID0gZGlzY29ubmVjdDtcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9taWRpL2Nvbm5lY3Rvcm91dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createReducers;\n\nvar _network_ordering = __webpack_require__(25);\n\nvar _network_ordering2 = _interopRequireDefault(_network_ordering);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction createReducers() {\n\n    var initialState = {\n        processors: {\n            byId: {},\n            allIds: []\n        },\n        connections: {\n            byId: {},\n            allIds: []\n        },\n        ports: {\n            byId: {},\n            allIds: []\n        },\n        types: {\n            byId: {},\n            allIds: []\n        },\n        assignments: {\n            byId: {},\n            allIds: []\n        },\n        bpm: 120,\n        selectedID: null,\n        theme: 'dev', // 'light|dark' \n        transport: 'stop', // 'play|pause|stop'\n        connectModeActive: false,\n        learnModeActive: false,\n        learnTargetProcessorID: null,\n        learnTargetParameterKey: null,\n        showHelpPanel: false,\n        showLibraryPanel: true,\n        showPreferencesPanel: false,\n        showSettingsPanel: false\n    },\n        reduce = function reduce() {\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var newState = void 0;\n        switch (action.type) {\n\n            case actions.CREATE_PROJECT:\n                return _extends({}, initialState, action.data || {}, {\n                    transport: initialState.transport });\n\n            case actions.SET_THEME:\n                return _extends({}, state, { theme: state.theme === 'light' ? 'dark' : 'light' });\n\n            case actions.ADD_PROCESSOR:\n                newState = _extends({}, state, {\n                    showSettingsPanel: true,\n                    processors: {\n                        byId: _extends({}, state.processors.byId, _defineProperty({}, action.data.id, action.data)),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // array index depends on processor type\n                var numInputProcessors = newState.processors.allIds.filter(function (id) {\n                    newState.processors.byId[id].type === 'input';\n                }).length;\n                switch (action.data.type) {\n                    case 'input':\n                        newState.processors.allIds.unshift(action.data.id);\n                        numInputProcessors++;\n                        break;\n                    case 'output':\n                        newState.processors.allIds.push(action.data.id);\n                        break;\n                    default:\n                        newState.processors.allIds.splice(numInputProcessors, 0, action.data.id);\n                }\n\n                return newState;\n\n            case actions.DELETE_PROCESSOR:\n                var index = state.processors.allIds.indexOf(action.id);\n\n                // delete the processor\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: state.processors.allIds.filter(function (id) {\n                            return id !== action.id;\n                        })\n                    } });\n                delete newState.processors.byId[action.id];\n\n                // delete all connections to and from the deleted processor\n                newState.connections = {\n                    byId: _extends({}, state.connections.byId),\n                    allIds: [].concat(_toConsumableArray(state.connections.allIds))\n                };\n                for (var i = newState.connections.allIds.length - 1, n = 0; i >= n; i--) {\n                    var connectionID = newState.connections.allIds[i];\n                    var connection = newState.connections.byId[connectionID];\n                    if (connection.sourceProcessorID === action.id || connection.destinationProcessorID === action.id) {\n                        newState.connections.allIds.splice(i, 1);\n                        delete newState.connections.byId[connectionID];\n                    }\n                }\n\n                // select the next processor, if any, or a previous one\n                var newIndex = void 0;\n                if (newState.selectedID === action.id && newState.processors.allIds.length) {\n                    if (newState.processors.allIds[index]) {\n                        newIndex = index;\n                    } else if (index > 0) {\n                        newIndex = index - 1;\n                    } else {\n                        newIndex = 0;\n                    }\n                    newState.selectedID = newState.processors.allIds[newIndex];\n                }\n                return newState;\n\n            case actions.SELECT_PROCESSOR:\n                return _extends({}, state, { selectedID: action.id });\n\n            case actions.DRAG_SELECTED_PROCESSOR:\n                return _extends({}, state, {\n                    processors: {\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                        byId: Object.values(state.processors.byId).reduce(function (accumulator, processor) {\n                            if (processor.id === state.selectedID) {\n                                accumulator[processor.id] = _extends({}, processor, { positionX: action.x, positionY: action.y });\n                            } else {\n                                accumulator[processor.id] = _extends({}, processor);\n                            }\n                            return accumulator;\n                        }, {})\n                    } });\n\n            case actions.DRAG_ALL_PROCESSORS:\n                return _extends({}, state, {\n                    processors: {\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds)),\n                        byId: Object.values(state.processors.byId).reduce(function (accumulator, processor) {\n                            accumulator[processor.id] = _extends({}, processor, {\n                                positionX: processor.positionX + action.x,\n                                positionY: processor.positionY + action.y });\n                            return accumulator;\n                        }, {})\n                    } });\n\n            case actions.CHANGE_PARAMETER:\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n                var param = newState.processors.byId[action.processorID].params.byId[action.paramKey];\n                switch (param.type) {\n                    case 'integer':\n                        param.value = Math.max(param.min, Math.min(action.paramValue, param.max));\n                        break;\n                    case 'boolean':\n                        param.value = !!action.paramValue;\n                        break;\n                    case 'itemized':\n                        param.value = action.paramValue;\n                        break;\n                    case 'string':\n                        param.value = action.paramValue;\n                        break;\n                }\n                return newState;\n\n            // return {\n            //     ...state,\n            //     processors: {\n            //         allIds: [ ...state.processors.allIds ],\n            //         byId: Object.values(state.processors.byId).reduce((accumulator, processor) => {\n            //             if (processor.id === state.selectedID) {\n            //                 accumulator[processor.id] = { \n            //                     ...processor, \n            //                     params: {\n            //                         allIds: [ ...processor.params.allIds ],\n            //                         byId: Object.values(processor.params.byId).reduce((acc, param) => {\n            //                             if (action.paramKey === param.id) {\n            //                                 acc[param.id] = { \n            //                                     ...param,\n            //                                     value\n            //                                 }\n            //                             } else {\n            //                                 acc[param.id] = { ...param };\n            //                             }\n            //                         })\n            //                     } };\n            //             } else {\n            //                 accumulator[processor.id] = { ...processor };\n            //             }\n            //             return accumulator;\n            //         })\n            //     }\n            // };\n\n            case actions.RECREATE_PARAMETER:\n                // clone state\n                newState = _extends({}, state, {\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    } });\n\n                // clone parameter, overwrite with new settings.\n                newState.processors.byId[action.processorID].params.byId[action.paramKey] = _extends({}, newState.processors.byId[action.processorID].params.byId[action.paramKey], action.paramObj);\n\n                return newState;\n\n            case actions.SET_TEMPO:\n                return _extends({}, state, { bpm: action.value });\n\n            case actions.CREATE_MIDI_PORT:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds), [action.portID]),\n                        byId: _extends({}, state.ports.byId, _defineProperty({}, action.portID, action.data))\n                    }\n                });\n\n            case actions.UPDATE_MIDI_PORT:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds)),\n                        byId: Object.values(state.ports.byId).reduce(function (returnObject, port) {\n                            if (port.id === action.portID) {\n                                returnObject[port.id] = _extends({}, port, action.data);\n                            } else {\n                                returnObject[port.id] = _extends({}, port);\n                            }\n                            return returnObject;\n                        }, {})\n                    }\n                });\n\n            case actions.TOGGLE_MIDI_PREFERENCE:\n                return _extends({}, state, {\n                    ports: {\n                        allIds: [].concat(_toConsumableArray(state.ports.allIds)),\n                        byId: Object.values(state.ports.allIds).reduce(function (accumulator, portID) {\n                            if (portID === action.id) {\n                                accumulator[portID] = _extends({}, state.ports.byId[portID], _defineProperty({}, action.preferenceName, typeof action.isEnabled === 'boolean' ? isEnabled : !state.ports.byId[action.id][action.preferenceName]));\n                            } else {\n                                accumulator[portID] = _extends({}, state.ports.byId[portID]);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n            case actions.TOGGLE_MIDI_LEARN_MODE:\n                return _extends({}, state, { learnModeActive: !state.learnModeActive });\n\n            case actions.TOGGLE_MIDI_LEARN_TARGET:\n                return _extends({}, state, {\n                    learnTargetProcessorID: action.processorID,\n                    learnTargetParameterKey: action.parameterKey\n                });\n\n            case actions.SET_TRANSPORT:\n                var value = action.command;\n                if (action.command === 'toggle') {\n                    value = state.transport === 'play' ? 'pause' : 'play';\n                }\n                return Object.assign({}, state, {\n                    transport: value\n                });\n\n            case actions.ASSIGN_EXTERNAL_CONTROL:\n                return _extends({}, state, {\n                    assignments: {\n                        allIds: [].concat(_toConsumableArray(state.assignments.allIds), [action.assignID]),\n                        byId: _extends({}, state.assignments.byId, _defineProperty({}, action.assignID, {\n                            remoteChannel: action.remoteChannel,\n                            remoteCC: action.remoteCC,\n                            processorID: action.processorID,\n                            paramKey: action.paramKey\n                        }))\n                    }\n                });\n\n            case actions.UNASSIGN_EXTERNAL_CONTROL:\n                return _extends({}, state, {\n                    assignments: {\n                        allIds: state.assignments.allIds.reduce(function (accumulator, assignID) {\n                            var assignment = state.assignments.byId[assignID];\n                            if (assignment.processorID !== action.processorID || assignment.paramKey !== action.paramKey) {\n                                accumulator.push(assignID);\n                            }\n                            return accumulator;\n                        }, []),\n                        byId: state.assignments.allIds.reduce(function (accumulator, assignID) {\n                            var assignment = state.assignments.byId[assignID];\n                            if (assignment.processorID !== action.processorID || assignment.paramKey !== action.paramKey) {\n                                accumulator[assignID] = _extends({}, assignment);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n            // case actions.ASSIGN_EXTERNAL_CONTROL:\n            // case actions.UNASSIGN_EXTERNAL_CONTROL:\n            //     return {\n            //         ...state,\n            //         processors: {\n            //             allIds: [...state.processors.allIds],\n            //             byId: state.processors.allIds.reduce((accumulator, processorID) => {\n            //                 const processor = state.processors.byId[processorID];\n            //                 if (action.processorID === processorID) {\n            //                     accumulator[processorID] = {\n            //                         ...processor,\n            //                         params: {\n            //                             allIds: [...processor.params.allIds],\n            //                             byId: processor.params.allIds.reduce((pAccumulator, paramKey) => {\n            //                                 const param = processor.params.byId[paramKey];\n            //                                 if (action.paramKey === paramKey) {\n            //                                     const isAssign = action.type === actions.ASSIGN_EXTERNAL_CONTROL;\n            //                                     pAccumulator[paramKey] = {\n            //                                         ...param,\n            //                                         remoteChannel: isAssign ? action.remoteChannel : null,\n            //                                         remoteCC: isAssign ? action.remoteCC : null\n            //                                     }\n            //                                 } else {\n            //                                     pAccumulator[paramKey] = {...param}\n            //                                 }\n            //                                 return pAccumulator;\n            //                             }, {})\n            //                         }\n            //                     }\n            //                 } else {\n            //                     accumulator[processorID] = {...processor}\n            //                 }\n            //                 return accumulator;\n            //             }, {})\n            //         }\n            //     };\n\n            case actions.TOGGLE_PANEL:\n                return _extends({}, state, {\n                    showHelpPanel: action.panelName === 'help' ? !state.showHelpPanel : state.showHelpPanel,\n                    showPreferencesPanel: action.panelName === 'preferences' ? !state.showPreferencesPanel : state.showPreferencesPanel,\n                    showSettingsPanel: action.panelName === 'settings' ? !state.showSettingsPanel : state.showSettingsPanel,\n                    showLibraryPanel: action.panelName === 'library' ? !state.showLibraryPanel : state.showLibraryPanel\n                });\n\n            case actions.TOGGLE_CONNECT_MODE:\n                return _extends({}, state, {\n                    connectModeActive: !state.connectModeActive\n                });\n\n            case actions.CONNECT_PROCESSORS:\n\n                // abort if the connection already exists\n                for (var _i = 0, _n = state.connections.allIds.length; _i < _n; _i++) {\n                    var _connection = state.connections.byId[state.connections.allIds[_i]];\n                    if (_connection.sourceProcessorID === action.payload.sourceProcessorID && _connection.sourceConnectorID === action.payload.sourceConnectorID && _connection.destinationProcessorID === action.payload.destinationProcessorID && _connection.destinationConnectorID === action.payload.destinationConnectorID) {\n                        return state;\n                    }\n                }\n\n                // add new connection\n                newState = _extends({}, state, {\n                    connections: {\n                        byId: _extends({}, state.connections.byId, _defineProperty({}, action.id, action.payload)),\n                        allIds: [].concat(_toConsumableArray(state.connections.allIds), [action.id])\n                    },\n                    processors: {\n                        byId: _extends({}, state.processors.byId),\n                        allIds: [].concat(_toConsumableArray(state.processors.allIds))\n                    }\n                });\n\n                // reorder the processors\n                (0, _network_ordering2.default)(newState);\n                return newState;\n\n            case actions.DISCONNECT_PROCESSORS:\n                newState = _extends({}, state, {\n                    connections: {\n                        allIds: state.connections.allIds.reduce(function (accumulator, connectionID) {\n                            if (connectionID !== action.id) {\n                                accumulator.push(connectionID);\n                            }\n                            return accumulator;\n                        }, []),\n                        byId: Object.values(state.connections.allIds).reduce(function (accumulator, connectionID) {\n                            if (connectionID !== action.id) {\n                                accumulator[connectionID] = _extends({}, state.connections.byId[connectionID]);\n                            }\n                            return accumulator;\n                        }, {})\n                    }\n                });\n\n                // reorder the processors\n                (0, _network_ordering2.default)(newState);\n                return newState;\n\n            case actions.RESCAN_TYPES:\n                return _extends({}, state, {\n                    types: {\n                        allIds: Object.keys(action.types),\n                        byId: action.types\n                    }\n                });\n\n            default:\n                return state;\n        }\n    };\n\n    return {\n        reduce: reduce\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = orderProcessors;\nvar maxDepth = 100;\n\n/**\n * Order thee processors according to their connections\n * to optimise the flow from inputs to outputs.\n * \n * Rule: when connected, the source goes before the destination\n * \n * @param {Object} state The whole state object.\n */\nfunction orderProcessors(state) {\n    console.log('ORDER', state.processors.allIds.length);\n    state.processors.allIds.sort(function (a, b) {\n        console.log('---');\n        console.log('start sort');\n        console.log('start search a', a);\n        console.log('start search b', b);\n        if (searchUpStream(a, b, state)) {\n            console.log('1, source ' + b + ' to destination ' + a);\n            return 1;\n        } else if (searchDownStream(a, b, state)) {\n            console.log('-1, source ' + a + ' to destination ' + b);\n            return -1;\n        } else {\n            console.log('0, no stream between ' + a + ' and ' + b);\n            return 0;\n        }\n    });\n}\n\nfunction searchUpStream(a, b, state) {\n    var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (depth >= maxDepth) {\n        console.log('Error: maximum (' + maxDepth + ') recursions reached while searching source.');\n        return false;\n    }\n    var sources = getSources(a, state);\n    for (var i = 0, n = sources.length; i < n; i++) {\n        if (sources[i] === b) {\n            console.log('found upstream');\n            return true;\n        } else {\n            return searchUpStream(sources[i], b, state, depth + 1);\n        }\n    }\n    console.log('not found upstream');\n    return false;\n}\n\nfunction searchDownStream(a, b, state) {\n    var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    if (depth >= maxDepth) {\n        console.log('Error: maximum (' + maxDepth + ') recursions reached while searching destination.');\n        return false;\n    }\n    var destinations = getDestinations(a, state);\n    for (var i = 0, n = destinations.length; i < n; i++) {\n        if (destinations[i] === b) {\n            console.log('found downstream');\n            return true;\n        } else {\n            return searchDownStream(destinations[i], b, state, depth + 1);\n        }\n    }\n    console.log('not found downstream');\n    return false;\n}\n\nfunction getSources(processorID, state) {\n    var sourceIDs = [];\n    state.connections.allIds.forEach(function (connectionID) {\n        var connection = state.connections.byId[connectionID];\n        if (connection.destinationProcessorID === processorID) {\n            sourceIDs.push(connection.sourceProcessorID);\n        }\n    });\n    return sourceIDs;\n}\n\nfunction getDestinations(processorID, state) {\n    var destinationIDs = [];\n    state.connections.allIds.forEach(function (connectionID) {\n        var connection = state.connections.byId[connectionID];\n        if (connection.sourceProcessorID === processorID) {\n            destinationIDs.push(connection.destinationProcessorID);\n        }\n    });\n    return destinationIDs;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9uZXR3b3JrX29yZGVyaW5nLmpzP2UxYTYiXSwibmFtZXMiOlsib3JkZXJQcm9jZXNzb3JzIiwibWF4RGVwdGgiLCJzdGF0ZSIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzb3JzIiwiYWxsSWRzIiwibGVuZ3RoIiwic29ydCIsImEiLCJiIiwic2VhcmNoVXBTdHJlYW0iLCJzZWFyY2hEb3duU3RyZWFtIiwiZGVwdGgiLCJzb3VyY2VzIiwiZ2V0U291cmNlcyIsImkiLCJuIiwiZGVzdGluYXRpb25zIiwiZ2V0RGVzdGluYXRpb25zIiwicHJvY2Vzc29ySUQiLCJzb3VyY2VJRHMiLCJjb25uZWN0aW9ucyIsImZvckVhY2giLCJjb25uZWN0aW9uIiwiYnlJZCIsImNvbm5lY3Rpb25JRCIsImRlc3RpbmF0aW9uUHJvY2Vzc29ySUQiLCJwdXNoIiwic291cmNlUHJvY2Vzc29ySUQiLCJkZXN0aW5hdGlvbklEcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBVXdCQSxlO0FBVnhCLElBQU1DLFdBQVcsR0FBakI7O0FBRUE7Ozs7Ozs7O0FBUWUsU0FBU0QsZUFBVCxDQUF5QkUsS0FBekIsRUFBZ0M7QUFDM0NDLFlBQVFDLEdBQVIsQ0FBWSxPQUFaLEVBQXFCRixNQUFNRyxVQUFOLENBQWlCQyxNQUFqQixDQUF3QkMsTUFBN0M7QUFDQUwsVUFBTUcsVUFBTixDQUFpQkMsTUFBakIsQ0FBd0JFLElBQXhCLENBQTZCLFVBQUNDLENBQUQsRUFBSUMsQ0FBSixFQUFVO0FBQ25DUCxnQkFBUUMsR0FBUixDQUFZLEtBQVo7QUFDQUQsZ0JBQVFDLEdBQVIsQ0FBWSxZQUFaO0FBQ0FELGdCQUFRQyxHQUFSLENBQVksZ0JBQVosRUFBOEJLLENBQTlCO0FBQ0FOLGdCQUFRQyxHQUFSLENBQVksZ0JBQVosRUFBOEJNLENBQTlCO0FBQ0EsWUFBSUMsZUFBZUYsQ0FBZixFQUFrQkMsQ0FBbEIsRUFBcUJSLEtBQXJCLENBQUosRUFBaUM7QUFDN0JDLG9CQUFRQyxHQUFSLGdCQUF5Qk0sQ0FBekIsd0JBQTZDRCxDQUE3QztBQUNBLG1CQUFPLENBQVA7QUFDSCxTQUhELE1BR08sSUFBSUcsaUJBQWlCSCxDQUFqQixFQUFvQkMsQ0FBcEIsRUFBdUJSLEtBQXZCLENBQUosRUFBbUM7QUFDdENDLG9CQUFRQyxHQUFSLGlCQUEwQkssQ0FBMUIsd0JBQThDQyxDQUE5QztBQUNBLG1CQUFPLENBQUMsQ0FBUjtBQUNILFNBSE0sTUFHQTtBQUNIUCxvQkFBUUMsR0FBUiwyQkFBb0NLLENBQXBDLGFBQTZDQyxDQUE3QztBQUNBLG1CQUFPLENBQVA7QUFDSDtBQUNKLEtBZkQ7QUFnQkg7O0FBRUQsU0FBU0MsY0FBVCxDQUF3QkYsQ0FBeEIsRUFBMkJDLENBQTNCLEVBQThCUixLQUE5QixFQUFnRDtBQUFBLFFBQVhXLEtBQVcsdUVBQUgsQ0FBRzs7QUFDNUMsUUFBSUEsU0FBU1osUUFBYixFQUF1QjtBQUNuQkUsZ0JBQVFDLEdBQVIsc0JBQStCSCxRQUEvQjtBQUNBLGVBQU8sS0FBUDtBQUNIO0FBQ0QsUUFBTWEsVUFBVUMsV0FBV04sQ0FBWCxFQUFjUCxLQUFkLENBQWhCO0FBQ0EsU0FBSyxJQUFJYyxJQUFJLENBQVIsRUFBV0MsSUFBSUgsUUFBUVAsTUFBNUIsRUFBb0NTLElBQUlDLENBQXhDLEVBQTJDRCxHQUEzQyxFQUFnRDtBQUM1QyxZQUFJRixRQUFRRSxDQUFSLE1BQWVOLENBQW5CLEVBQXNCO0FBQ2xCUCxvQkFBUUMsR0FBUixDQUFZLGdCQUFaO0FBQ0EsbUJBQU8sSUFBUDtBQUNILFNBSEQsTUFHTztBQUNILG1CQUFPTyxlQUFlRyxRQUFRRSxDQUFSLENBQWYsRUFBMkJOLENBQTNCLEVBQThCUixLQUE5QixFQUFxQ1csUUFBUSxDQUE3QyxDQUFQO0FBQ0g7QUFDSjtBQUNEVixZQUFRQyxHQUFSLENBQVksb0JBQVo7QUFDQSxXQUFPLEtBQVA7QUFDSDs7QUFFRCxTQUFTUSxnQkFBVCxDQUEwQkgsQ0FBMUIsRUFBNkJDLENBQTdCLEVBQWdDUixLQUFoQyxFQUFrRDtBQUFBLFFBQVhXLEtBQVcsdUVBQUgsQ0FBRzs7QUFDOUMsUUFBSUEsU0FBU1osUUFBYixFQUF1QjtBQUNuQkUsZ0JBQVFDLEdBQVIsc0JBQStCSCxRQUEvQjtBQUNBLGVBQU8sS0FBUDtBQUNIO0FBQ0QsUUFBTWlCLGVBQWVDLGdCQUFnQlYsQ0FBaEIsRUFBbUJQLEtBQW5CLENBQXJCO0FBQ0EsU0FBSyxJQUFJYyxJQUFJLENBQVIsRUFBV0MsSUFBSUMsYUFBYVgsTUFBakMsRUFBeUNTLElBQUlDLENBQTdDLEVBQWdERCxHQUFoRCxFQUFxRDtBQUNqRCxZQUFJRSxhQUFhRixDQUFiLE1BQW9CTixDQUF4QixFQUEyQjtBQUN2QlAsb0JBQVFDLEdBQVIsQ0FBWSxrQkFBWjtBQUNBLG1CQUFPLElBQVA7QUFDSCxTQUhELE1BR087QUFDSCxtQkFBT1EsaUJBQWlCTSxhQUFhRixDQUFiLENBQWpCLEVBQWtDTixDQUFsQyxFQUFxQ1IsS0FBckMsRUFBNENXLFFBQVEsQ0FBcEQsQ0FBUDtBQUNIO0FBQ0o7QUFDRFYsWUFBUUMsR0FBUixDQUFZLHNCQUFaO0FBQ0EsV0FBTyxLQUFQO0FBQ0g7O0FBRUQsU0FBU1csVUFBVCxDQUFvQkssV0FBcEIsRUFBaUNsQixLQUFqQyxFQUF3QztBQUNwQyxRQUFNbUIsWUFBWSxFQUFsQjtBQUNBbkIsVUFBTW9CLFdBQU4sQ0FBa0JoQixNQUFsQixDQUF5QmlCLE9BQXpCLENBQWlDLHdCQUFnQjtBQUM3QyxZQUFNQyxhQUFhdEIsTUFBTW9CLFdBQU4sQ0FBa0JHLElBQWxCLENBQXVCQyxZQUF2QixDQUFuQjtBQUNBLFlBQUlGLFdBQVdHLHNCQUFYLEtBQXNDUCxXQUExQyxFQUF1RDtBQUNuREMsc0JBQVVPLElBQVYsQ0FBZUosV0FBV0ssaUJBQTFCO0FBQ0g7QUFDSixLQUxEO0FBTUEsV0FBT1IsU0FBUDtBQUNIOztBQUVELFNBQVNGLGVBQVQsQ0FBeUJDLFdBQXpCLEVBQXNDbEIsS0FBdEMsRUFBNkM7QUFDekMsUUFBTTRCLGlCQUFpQixFQUF2QjtBQUNBNUIsVUFBTW9CLFdBQU4sQ0FBa0JoQixNQUFsQixDQUF5QmlCLE9BQXpCLENBQWlDLHdCQUFnQjtBQUM3QyxZQUFNQyxhQUFhdEIsTUFBTW9CLFdBQU4sQ0FBa0JHLElBQWxCLENBQXVCQyxZQUF2QixDQUFuQjtBQUNBLFlBQUlGLFdBQVdLLGlCQUFYLEtBQWlDVCxXQUFyQyxFQUFrRDtBQUM5Q1UsMkJBQWVGLElBQWYsQ0FBb0JKLFdBQVdHLHNCQUEvQjtBQUNIO0FBQ0osS0FMRDtBQU1BLFdBQU9HLGNBQVA7QUFDSCIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1heERlcHRoID0gMTAwO1xuXG4vKipcbiAqIE9yZGVyIHRoZWUgcHJvY2Vzc29ycyBhY2NvcmRpbmcgdG8gdGhlaXIgY29ubmVjdGlvbnNcbiAqIHRvIG9wdGltaXNlIHRoZSBmbG93IGZyb20gaW5wdXRzIHRvIG91dHB1dHMuXG4gKiBcbiAqIFJ1bGU6IHdoZW4gY29ubmVjdGVkLCB0aGUgc291cmNlIGdvZXMgYmVmb3JlIHRoZSBkZXN0aW5hdGlvblxuICogXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgVGhlIHdob2xlIHN0YXRlIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJQcm9jZXNzb3JzKHN0YXRlKSB7XG4gICAgY29uc29sZS5sb2coJ09SREVSJywgc3RhdGUucHJvY2Vzc29ycy5hbGxJZHMubGVuZ3RoKTtcbiAgICBzdGF0ZS5wcm9jZXNzb3JzLmFsbElkcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCctLS0nKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3N0YXJ0IHNvcnQnKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3N0YXJ0IHNlYXJjaCBhJywgYSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzdGFydCBzZWFyY2ggYicsIGIpO1xuICAgICAgICBpZiAoc2VhcmNoVXBTdHJlYW0oYSwgYiwgc3RhdGUpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgMSwgc291cmNlICR7Yn0gdG8gZGVzdGluYXRpb24gJHthfWApO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VhcmNoRG93blN0cmVhbShhLCBiLCBzdGF0ZSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAtMSwgc291cmNlICR7YX0gdG8gZGVzdGluYXRpb24gJHtifWApO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYDAsIG5vIHN0cmVhbSBiZXR3ZWVuICR7YX0gYW5kICR7Yn1gKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlYXJjaFVwU3RyZWFtKGEsIGIsIHN0YXRlLCBkZXB0aCA9IDApIHtcbiAgICBpZiAoZGVwdGggPj0gbWF4RGVwdGgpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yOiBtYXhpbXVtICgke21heERlcHRofSkgcmVjdXJzaW9ucyByZWFjaGVkIHdoaWxlIHNlYXJjaGluZyBzb3VyY2UuYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc291cmNlcyA9IGdldFNvdXJjZXMoYSwgc3RhdGUpO1xuICAgIGZvciAobGV0IGkgPSAwLCBuID0gc291cmNlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKHNvdXJjZXNbaV0gPT09IGIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmb3VuZCB1cHN0cmVhbScpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2VhcmNoVXBTdHJlYW0oc291cmNlc1tpXSwgYiwgc3RhdGUsIGRlcHRoICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coJ25vdCBmb3VuZCB1cHN0cmVhbScpO1xuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2VhcmNoRG93blN0cmVhbShhLCBiLCBzdGF0ZSwgZGVwdGggPSAwKSB7XG4gICAgaWYgKGRlcHRoID49IG1heERlcHRoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBFcnJvcjogbWF4aW11bSAoJHttYXhEZXB0aH0pIHJlY3Vyc2lvbnMgcmVhY2hlZCB3aGlsZSBzZWFyY2hpbmcgZGVzdGluYXRpb24uYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZGVzdGluYXRpb25zID0gZ2V0RGVzdGluYXRpb25zKGEsIHN0YXRlKTtcbiAgICBmb3IgKGxldCBpID0gMCwgbiA9IGRlc3RpbmF0aW9ucy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uc1tpXSA9PT0gYikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvdW5kIGRvd25zdHJlYW0nKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNlYXJjaERvd25TdHJlYW0oZGVzdGluYXRpb25zW2ldLCBiLCBzdGF0ZSwgZGVwdGggKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zb2xlLmxvZygnbm90IGZvdW5kIGRvd25zdHJlYW0nKTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFNvdXJjZXMocHJvY2Vzc29ySUQsIHN0YXRlKSB7XG4gICAgY29uc3Qgc291cmNlSURzID0gW107XG4gICAgc3RhdGUuY29ubmVjdGlvbnMuYWxsSWRzLmZvckVhY2goY29ubmVjdGlvbklEID0+IHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHN0YXRlLmNvbm5lY3Rpb25zLmJ5SWRbY29ubmVjdGlvbklEXTtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb24uZGVzdGluYXRpb25Qcm9jZXNzb3JJRCA9PT0gcHJvY2Vzc29ySUQpIHtcbiAgICAgICAgICAgIHNvdXJjZUlEcy5wdXNoKGNvbm5lY3Rpb24uc291cmNlUHJvY2Vzc29ySUQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZUlEcztcbn1cblxuZnVuY3Rpb24gZ2V0RGVzdGluYXRpb25zKHByb2Nlc3NvcklELCBzdGF0ZSkge1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uSURzID0gW107XG4gICAgc3RhdGUuY29ubmVjdGlvbnMuYWxsSWRzLmZvckVhY2goY29ubmVjdGlvbklEID0+IHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHN0YXRlLmNvbm5lY3Rpb25zLmJ5SWRbY29ubmVjdGlvbklEXTtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb24uc291cmNlUHJvY2Vzc29ySUQgPT09IHByb2Nlc3NvcklEKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbklEcy5wdXNoKGNvbm5lY3Rpb24uZGVzdGluYXRpb25Qcm9jZXNzb3JJRCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25JRHM7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvbWlkaS9uZXR3b3JrX29yZGVyaW5nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStore;\n\nvar _selectors = __webpack_require__(1);\n\nfunction createStore() {\n    var specs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var my = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var STATE_CHANGE = 'STATE_CHANGE';\n\n    var that = {},\n        actions = specs.actions,\n        reducers = specs.reducers,\n        currentState = void 0,\n        init = function init() {\n        currentState = reducers.reduce();\n    },\n        dispatch = function dispatch(action) {\n        // thunk or not\n        if (typeof action === 'function') {\n            action(dispatch, getState, getActions);\n        } else {\n            currentState = reducers.reduce(currentState, action, actions);\n            (0, _selectors.memoize)(currentState, action, actions);\n            document.dispatchEvent(new CustomEvent(STATE_CHANGE, { detail: {\n                    state: currentState,\n                    action: action,\n                    actions: actions\n                } }));\n        }\n    },\n        getActions = function getActions() {\n        return actions;\n    },\n        getState = function getState() {\n        return currentState;\n    },\n        persist = function persist() {\n        var name = 'persist';\n        window.addEventListener('beforeunload', function (e) {\n            localStorage.setItem(name, JSON.stringify(currentState));\n        });\n        var data = localStorage.getItem(name);\n        if (data) {\n            dispatch(getActions().setProject(JSON.parse(data)));\n        }\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    that.STATE_CHANGE = STATE_CHANGE;\n    that.dispatch = dispatch;\n    that.getActions = getActions;\n    that.getState = getState;\n    that.persist = persist;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanM/ZDhjZSJdLCJuYW1lcyI6WyJjcmVhdGVTdG9yZSIsInNwZWNzIiwibXkiLCJTVEFURV9DSEFOR0UiLCJ0aGF0IiwiYWN0aW9ucyIsInJlZHVjZXJzIiwiY3VycmVudFN0YXRlIiwiaW5pdCIsInJlZHVjZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwiZ2V0U3RhdGUiLCJnZXRBY3Rpb25zIiwiZG9jdW1lbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJzdGF0ZSIsInBlcnNpc3QiLCJuYW1lIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImdldEl0ZW0iLCJzZXRQcm9qZWN0IiwicGFyc2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUV3QkEsVzs7QUFGeEI7O0FBRWUsU0FBU0EsV0FBVCxHQUEwQztBQUFBLFFBQXJCQyxLQUFxQix1RUFBYixFQUFhO0FBQUEsUUFBVEMsRUFBUyx1RUFBSixFQUFJOztBQUNyRCxRQUFNQyxlQUFlLGNBQXJCOztBQUVBLFFBQUlDLE9BQU8sRUFBWDtBQUFBLFFBQ0lDLFVBQVVKLE1BQU1JLE9BRHBCO0FBQUEsUUFFSUMsV0FBV0wsTUFBTUssUUFGckI7QUFBQSxRQUdJQyxxQkFISjtBQUFBLFFBS0lDLE9BQU8sU0FBUEEsSUFBTyxHQUFNO0FBQ1RELHVCQUFlRCxTQUFTRyxNQUFULEVBQWY7QUFDSCxLQVBMO0FBQUEsUUFTSUMsV0FBVyxTQUFYQSxRQUFXLENBQUNDLE1BQUQsRUFBWTtBQUNuQjtBQUNBLFlBQUksT0FBT0EsTUFBUCxLQUFrQixVQUF0QixFQUFrQztBQUM5QkEsbUJBQU9ELFFBQVAsRUFBaUJFLFFBQWpCLEVBQTJCQyxVQUEzQjtBQUNILFNBRkQsTUFFTztBQUNITiwyQkFBZUQsU0FBU0csTUFBVCxDQUFnQkYsWUFBaEIsRUFBOEJJLE1BQTlCLEVBQXNDTixPQUF0QyxDQUFmO0FBQ0Esb0NBQVFFLFlBQVIsRUFBc0JJLE1BQXRCLEVBQThCTixPQUE5QjtBQUNBUyxxQkFBU0MsYUFBVCxDQUF1QixJQUFJQyxXQUFKLENBQWdCYixZQUFoQixFQUE4QixFQUFFYyxRQUFRO0FBQzNEQywyQkFBT1gsWUFEb0Q7QUFFM0RJLDRCQUFRQSxNQUZtRDtBQUczRE4sNkJBQVNBO0FBSGtELGlCQUFWLEVBQTlCLENBQXZCO0FBS0g7QUFDSixLQXRCTDtBQUFBLFFBd0JJUSxhQUFhLFNBQWJBLFVBQWEsR0FBTTtBQUNmLGVBQU9SLE9BQVA7QUFDSCxLQTFCTDtBQUFBLFFBNEJJTyxXQUFXLFNBQVhBLFFBQVcsR0FBTTtBQUNiLGVBQU9MLFlBQVA7QUFDSCxLQTlCTDtBQUFBLFFBZ0NJWSxVQUFVLFNBQVZBLE9BQVUsR0FBTTtBQUNaLFlBQU1DLE9BQU8sU0FBYjtBQUNBQyxlQUFPQyxnQkFBUCxDQUF3QixjQUF4QixFQUF3QyxhQUFLO0FBQ3pDQyx5QkFBYUMsT0FBYixDQUFxQkosSUFBckIsRUFBMkJLLEtBQUtDLFNBQUwsQ0FBZW5CLFlBQWYsQ0FBM0I7QUFDSCxTQUZEO0FBR0EsWUFBSW9CLE9BQU9KLGFBQWFLLE9BQWIsQ0FBcUJSLElBQXJCLENBQVg7QUFDQSxZQUFJTyxJQUFKLEVBQVU7QUFDTmpCLHFCQUFTRyxhQUFhZ0IsVUFBYixDQUF3QkosS0FBS0ssS0FBTCxDQUFXSCxJQUFYLENBQXhCLENBQVQ7QUFDSDtBQUNKLEtBekNMOztBQTJDQXZCLFdBQU9ILE1BQU1HLElBQU4sSUFBYyxFQUFyQjs7QUFFQUk7O0FBRUFKLFNBQUtELFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0FDLFNBQUtNLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0FOLFNBQUtTLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0FULFNBQUtRLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0FSLFNBQUtlLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFdBQU9mLElBQVA7QUFDSCIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lbW9pemUgfSBmcm9tICcuL3NlbGVjdG9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHNwZWNzID0ge30sIG15ID0ge30pIHtcbiAgICBjb25zdCBTVEFURV9DSEFOR0UgPSAnU1RBVEVfQ0hBTkdFJztcblxuICAgIGxldCB0aGF0ID0ge30sXG4gICAgICAgIGFjdGlvbnMgPSBzcGVjcy5hY3Rpb25zLFxuICAgICAgICByZWR1Y2VycyA9IHNwZWNzLnJlZHVjZXJzLFxuICAgICAgICBjdXJyZW50U3RhdGUsXG5cbiAgICAgICAgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHJlZHVjZXJzLnJlZHVjZSgpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZGlzcGF0Y2ggPSAoYWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAvLyB0aHVuayBvciBub3RcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZ2V0QWN0aW9ucyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHJlZHVjZXJzLnJlZHVjZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgbWVtb2l6ZShjdXJyZW50U3RhdGUsIGFjdGlvbiwgYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoU1RBVEVfQ0hBTkdFLCB7IGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogY3VycmVudFN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogYWN0aW9uc1xuICAgICAgICAgICAgICAgIH19KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFxuICAgICAgICBcbiAgICAgICAgZ2V0QWN0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgcGVyc2lzdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAncGVyc2lzdCc7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obmFtZSwgSlNPTi5zdHJpbmdpZnkoY3VycmVudFN0YXRlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSk7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKGdldEFjdGlvbnMoKS5zZXRQcm9qZWN0KEpTT04ucGFyc2UoZGF0YSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgdGhhdC5TVEFURV9DSEFOR0UgPSBTVEFURV9DSEFOR0U7XG4gICAgdGhhdC5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICAgIHRoYXQuZ2V0QWN0aW9ucyA9IGdldEFjdGlvbnM7XG4gICAgdGhhdC5nZXRTdGF0ZSA9IGdldFN0YXRlO1xuICAgIHRoYXQucGVyc2lzdCA9IHBlcnNpc3Q7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvc3RhdGUvc3RvcmUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createAppView;\n\nvar _settings = __webpack_require__(28);\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nvar _windowresize = __webpack_require__(13);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Main application view.\n */\nfunction createAppView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl = document.querySelector('#app'),\n        panelsEl = document.querySelector('.panels'),\n        libraryEl = document.querySelector('.library'),\n        helpEl = document.querySelector('.help'),\n        prefsEl = document.querySelector('.prefs'),\n        editEl = document.querySelector('.edit'),\n        editContentEl = document.querySelector('.edit .panel__content'),\n        remoteEl = document.querySelector('.remote'),\n        settingsViews = [],\n        panelHeaderHeight,\n        resetKeyCombo = [],\n        controls = {\n        new: {\n            type: 'checkbox',\n            input: document.querySelector('#file-new')\n        },\n        import: {\n            type: 'checkbox',\n            input: document.querySelector('#file-import')\n        },\n        export: {\n            type: 'checkbox',\n            input: document.querySelector('#file-export')\n        },\n        play: {\n            type: 'checkbox',\n            input: document.getElementById('play-check')\n        },\n        bpm: {\n            type: 'number',\n            input: document.getElementById('bpm-number')\n        },\n        library: {\n            type: 'checkbox',\n            input: document.getElementById('library-check')\n        },\n        remote: {\n            type: 'checkbox',\n            input: document.getElementById('learn-check')\n        },\n        prefs: {\n            type: 'checkbox',\n            input: document.getElementById('prefs-check')\n        },\n        edit: {\n            type: 'checkbox',\n            input: document.getElementById('edit-check')\n        },\n        connections: {\n            type: 'checkbox',\n            input: document.getElementById('connections-check')\n        },\n        help: {\n            type: 'checkbox',\n            input: document.getElementById('help-check')\n        }\n    },\n        init = function init() {\n        controls.new.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().newProject());\n        });\n        controls.import.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().importProject(e.target.files[0]));\n        });\n        controls.export.input.addEventListener('click', function (e) {\n            store.dispatch(store.getActions().exportProject());\n        });\n        controls.play.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTransport('toggle'));\n        });\n        controls.bpm.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTempo(controls.bpm.input.value));\n        });\n        controls.remote.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleMIDILearnMode());\n        });\n        controls.library.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('library'));\n        });\n        controls.prefs.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('preferences'));\n        });\n        controls.edit.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('settings'));\n        });\n        controls.connections.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().toggleConnectMode());\n        });\n        controls.help.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().togglePanel('help'));\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 32:\n                    // don't toggle play while typing space key in a text field.\n                    if (!(e.target.tagName.toLowerCase() == 'input' && e.target.getAttribute('type') == 'text')) {\n                        store.dispatch(store.getActions().setTransport('toggle'));\n                    }\n                    break;\n\n                case 83:\n                    // s\n                    console.log('state', store.getState());\n                    break;\n            }\n            resetKeyCombo = [];\n        });\n\n        document.addEventListener('keydown', function (e) {\n            switch (e.keyCode) {\n                case 82:\n                case 83:\n                case 84:\n                    // clear all data on key combination 'rst' (reset)\n                    resetKeyCombo.push(e.keyCode);\n                    if (resetKeyCombo.indexOf(82) > -1 && resetKeyCombo.indexOf(83) > -1 && resetKeyCombo.indexOf(84) > -1) {\n                        localStorage.clear();\n                        store.dispatch(store.getActions().newProject());\n                    }\n                    break;\n            }\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    setProject(e.detail.state);\n                    showPanels(e.detail.state);\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createSettingsViews(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteSettingsView(e.detail.action.id);\n                    showPanels(e.detail.state);\n                    renderLayout();\n                    break;\n\n                case e.detail.actions.SET_TRANSPORT:\n                    controls.play.input.checked = e.detail.state.transport === 'play';\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    controls.bpm.input.value = e.detail.state.bpm;\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                case e.detail.actions.TOGGLE_MIDI_LEARN_MODE:\n                case e.detail.actions.TOGGLE_PANEL:\n                    showPanels(e.detail.state);\n                    break;\n            }\n        });\n\n        // get panel header height from CSS.\n        var style = getComputedStyle(document.body);\n        panelHeaderHeight = parseInt(style.getPropertyValue('--header-height'), 10);\n\n        my.addWindowResizeCallback(renderLayout);\n        renderLayout();\n    },\n\n\n    /**\n     * Create settings controls view for a processor.\n     * @param  {Object} processor MIDI processor to control with the settings.\n     */\n    createSettingsViews = function createSettingsViews(state) {\n        state.processors.allIds.forEach(function (id, i) {\n            var processorData = state.processors.byId[id];\n            if (!settingsViews[i] || id !== settingsViews[i].getID()) {\n                var template = __webpack_require__(34)(\"./\" + processorData.type + '/settings.html');\n                settingsViews.splice(i, 0, (0, _settings2.default)({\n                    data: processorData,\n                    store: store,\n                    parentEl: editContentEl,\n                    template: template,\n                    isSelected: state.selectedID === processorData.id\n                }));\n            }\n        });\n    },\n\n\n    /**\n     * Delete settings controls view for a processor.\n     * @param  {String} id MIDI processor ID.\n     */\n    deleteSettingsView = function deleteSettingsView(id) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            if (settingsViews[n].getID() === id) {\n                settingsViews[n].terminate();\n                settingsViews.splice(n, 1);\n                return false;\n            }\n        }\n    },\n        setProject = function setProject(state) {\n        var n = settingsViews.length;\n        while (--n >= 0) {\n            deleteSettingsView(settingsViews[n].getID());\n        }\n        createSettingsViews(state);\n    },\n        renderLayout = function renderLayout() {\n        var leftColumn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var rightColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (leftColumn) {\n            renderColumnLayout(prefsEl, remoteEl, false);\n        }\n        if (rightColumn) {\n            renderColumnLayout(helpEl, editEl, true);\n        }\n    },\n        renderColumnLayout = function renderColumnLayout(topEl, btmEl, isRightColumn) {\n        var totalHeight = panelsEl.clientHeight,\n            columnWidth = document.querySelector('.panels__right').clientWidth,\n            topWidth = topEl.clientWidth,\n            btmWidth = btmEl.clientWidth,\n            isTopVisible = topEl.dataset.show == 'true',\n            isBtmVisible = btmEl.dataset.show == 'true',\n            topViewportEl = topEl.querySelector('.panel__viewport'),\n            btmViewportEl = btmEl.querySelector('.panel__viewport');\n\n        var topHeight = void 0,\n            btmHeight = void 0,\n            topContentHeight = void 0,\n            btmContentHeight = void 0;\n\n        // reset heights before measuring them\n        topViewportEl.style.height = 'auto';\n        btmViewportEl.style.height = 'auto';\n\n        topHeight = topEl.clientHeight, btmHeight = btmEl.clientHeight, topContentHeight = topEl.querySelector('.panel__content').clientHeight, btmContentHeight = btmEl.querySelector('.panel__content').clientHeight;\n\n        if (isRightColumn && topWidth + btmWidth < columnWidth) {\n            if (topContentHeight + panelHeaderHeight > totalHeight) {\n                topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                topViewportEl.style.height = 'auto';\n            }\n            if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n            } else {\n                btmViewportEl.style.height = 'auto';\n            }\n        } else {\n            if (isTopVisible && isBtmVisible) {\n                var combinedHeight = topContentHeight + btmContentHeight + panelHeaderHeight * 2;\n                if (combinedHeight > totalHeight) {\n                    if (topContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = prefsEl.topContentHeight + 'px';\n                        btmViewportEl.style.height = totalHeight - topContentHeight - panelHeaderHeight * 2 + 'px';\n                    } else if (btmContentHeight + panelHeaderHeight < totalHeight / 2) {\n                        topViewportEl.style.height = totalHeight - btmContentHeight - panelHeaderHeight * 2 + 'px';\n                        btmViewportEl.style.height = remoteEl.topContentHeight + 'px';\n                    } else {\n                        topViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                        btmViewportEl.style.height = totalHeight / 2 - panelHeaderHeight + 'px';\n                    }\n                } else {\n                    topViewportEl.style.height = 'auto';\n                    btmViewportEl.style.height = 'auto';\n                }\n            } else if (isTopVisible) {\n                if (topContentHeight + panelHeaderHeight > totalHeight) {\n                    topViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    topViewportEl.style.height = 'auto';\n                }\n            } else if (isBtmVisible) {\n                if (btmContentHeight + panelHeaderHeight > totalHeight) {\n                    btmViewportEl.style.height = totalHeight - panelHeaderHeight + 'px';\n                } else {\n                    btmViewportEl.style.height = 'auto';\n                }\n            }\n        }\n    },\n        showPanels = function showPanels(state) {\n        helpEl.dataset.show = state.showHelpPanel;\n        controls.help.input.checked = state.showHelpPanel;\n\n        prefsEl.dataset.show = state.showPreferencesPanel;\n        controls.prefs.input.checked = state.showPreferencesPanel;\n\n        remoteEl.dataset.show = state.learnModeActive;\n        controls.remote.input.checked = state.learnModeActive;\n\n        editEl.dataset.show = state.showSettingsPanel;\n        controls.edit.input.checked = state.showSettingsPanel;\n\n        libraryEl.dataset.show = state.showLibraryPanel;\n        controls.library.input.checked = state.showLibraryPanel;\n\n        controls.connections.input.checked = state.connectModeActive;\n\n        renderLayout();\n    };\n\n    my = my || {};\n\n    that = (0, _windowresize2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createSettingsPanel;\n\nvar _boolean = __webpack_require__(29);\n\nvar _boolean2 = _interopRequireDefault(_boolean);\n\nvar _integer = __webpack_require__(31);\n\nvar _integer2 = _interopRequireDefault(_integer);\n\nvar _itemized = __webpack_require__(32);\n\nvar _itemized2 = _interopRequireDefault(_itemized);\n\nvar _string = __webpack_require__(33);\n\nvar _string2 = _interopRequireDefault(_string);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor settings view.\n */\nfunction createSettingsPanel(specs, my) {\n    var that,\n        store = specs.store,\n        data = specs.data,\n        parentEl = specs.parentEl,\n        settingViews = [],\n        el,\n        initialize = function initialize() {\n        // const htmlString = require(`html-loader!../processors/${data.type}/settings.html`);\n        el = document.createElement('div');\n        el.innerHTML = specs.template;\n\n        // loop through all processor parameters and add setting view if required\n        data.params.allIds.forEach(function (id) {\n            // only create setting if there's a container el for it in the settings panel\n            var settingContainerEl = el.querySelector('.' + id);\n            if (settingContainerEl) {\n                var paramData = data.params.byId[id],\n                    settingView = void 0,\n                    settingViewSpecs = {\n                    store: store,\n                    key: id,\n                    data: paramData,\n                    parentEl: settingContainerEl,\n                    processorID: data.id\n                };\n\n                // create the setting view based on the parameter type\n                switch (paramData.type) {\n                    case 'integer':\n                        settingView = (0, _integer2.default)(settingViewSpecs);\n                        break;\n                    case 'boolean':\n                        settingView = (0, _boolean2.default)(settingViewSpecs);\n                        break;\n                    case 'itemized':\n                        settingView = (0, _itemized2.default)(settingViewSpecs);\n                        break;\n                    case 'string':\n                        settingView = (0, _string2.default)(settingViewSpecs);\n                        break;\n                }\n            }\n        });\n\n        // default delete button of the settings panel\n        if (el && el.querySelector('.settings__delete')) {\n            el.querySelector('.settings__delete').addEventListener('click', function (e) {\n                e.preventDefault();\n                store.dispatch(store.getActions().deleteProcessor(data.id));\n            });\n        }\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SELECT_PROCESSOR:\n                case e.detail.actions.DELETE_PROCESSOR:\n                    show(e.detail.state.selectedID === data.id);\n                    break;\n            }\n        });\n\n        show(specs.isSelected);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        if (el && parentEl) {\n            show(false);\n        }\n    },\n\n\n    /**\n     * Show settings if the processor is selected, else remove.\n     * @param {Boolean} isSelected True if selected.\n     */\n    show = function show(isSelected) {\n        if (isSelected) {\n            parentEl.appendChild(el);\n        } else if (el.parentNode === parentEl) {\n            parentEl.removeChild(el);\n        }\n    },\n        getID = function getID() {\n        return data.id;\n    };\n\n    that = data.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.getID = getID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createBooleanSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\nfunction createBooleanSettingView(specs, my) {\n    var that,\n        checkEl,\n        init = function init() {\n        var id = getTemporaryInputAndLabelId();\n\n        checkEl = my.el.querySelector('.setting__check');\n        checkEl.value = my.data.default;\n        checkEl.setAttribute('id', id);\n        checkEl.addEventListener('change', onChange);\n\n        var labelEl = my.el.querySelector('.toggle__label');\n        labelEl.setAttribute('for', id);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {},\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.checked));\n    },\n        setValue = function setValue(value) {\n        checkEl.checked = value;\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2Jvb2xlYW4uanM/ZTAyMiJdLCJuYW1lcyI6WyJjcmVhdGVCb29sZWFuU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImNoZWNrRWwiLCJpbml0IiwiaWQiLCJnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQiLCJlbCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZSIsImRhdGEiLCJkZWZhdWx0Iiwic2V0QXR0cmlidXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwibGFiZWxFbCIsImluaXREYXRhIiwic2V0VmFsdWUiLCJNYXRoIiwicmFuZG9tIiwicGVyZm9ybWFuY2UiLCJub3ciLCJlIiwic3RvcmUiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjaGFuZ2VQYXJhbWV0ZXIiLCJwcm9jZXNzb3JJRCIsImtleSIsInRhcmdldCIsImNoZWNrZWQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU13QkEsd0I7O0FBTnhCOzs7Ozs7QUFFQTs7OztBQUllLFNBQVNBLHdCQUFULENBQWtDQyxLQUFsQyxFQUF5Q0MsRUFBekMsRUFBNkM7QUFDeEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLE9BREo7QUFBQSxRQUdJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkLFlBQUlDLEtBQUtDLDZCQUFUOztBQUVBSCxrQkFBVUYsR0FBR00sRUFBSCxDQUFNQyxhQUFOLENBQW9CLGlCQUFwQixDQUFWO0FBQ0FMLGdCQUFRTSxLQUFSLEdBQWdCUixHQUFHUyxJQUFILENBQVFDLE9BQXhCO0FBQ0FSLGdCQUFRUyxZQUFSLENBQXFCLElBQXJCLEVBQTJCUCxFQUEzQjtBQUNBRixnQkFBUVUsZ0JBQVIsQ0FBeUIsUUFBekIsRUFBbUNDLFFBQW5DOztBQUVBLFlBQUlDLFVBQVVkLEdBQUdNLEVBQUgsQ0FBTUMsYUFBTixDQUFvQixnQkFBcEIsQ0FBZDtBQUNBTyxnQkFBUUgsWUFBUixDQUFxQixLQUFyQixFQUE0QlAsRUFBNUI7O0FBRUFXO0FBQ0FDLGlCQUFTaEIsR0FBR1MsSUFBSCxDQUFRRCxLQUFqQjtBQUNILEtBaEJMO0FBQUEsUUFrQklPLFdBQVcsU0FBWEEsUUFBVyxHQUFXLENBRXJCLENBcEJMOzs7QUFzQkk7Ozs7QUFJQVYsa0NBQThCLFNBQTlCQSwyQkFBOEIsR0FBVztBQUNyQyxlQUFPLE9BQU9ZLEtBQUtDLE1BQUwsRUFBUCxHQUF1QkMsWUFBWUMsR0FBWixFQUE5QjtBQUNILEtBNUJMO0FBQUEsUUE4QklQLFdBQVcsU0FBWEEsUUFBVyxDQUFTUSxDQUFULEVBQVk7QUFDbkJyQixXQUFHc0IsS0FBSCxDQUFTQyxRQUFULENBQWtCdkIsR0FBR3NCLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZHpCLEdBQUcwQixXQURXLEVBRWQxQixHQUFHMkIsR0FGVyxFQUdkTixFQUFFTyxNQUFGLENBQVNDLE9BSEssQ0FBbEI7QUFJSCxLQW5DTDtBQUFBLFFBcUNJYixXQUFXLFNBQVhBLFFBQVcsQ0FBU1IsS0FBVCxFQUFnQjtBQUN2Qk4sZ0JBQVEyQixPQUFSLEdBQWtCckIsS0FBbEI7QUFDSCxLQXZDTDs7QUF5Q0FSLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHZ0IsUUFBSCxHQUFjQSxRQUFkOztBQUVBZixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFHOztBQUVBLFdBQU9GLElBQVA7QUFDSCIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIEJvb2xlYW4gdHlwZSBwYXJhbWV0ZXIsXG4gKiB3aGljaCBoYXMgYSBjaGVja2JveCBpbnB1dC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm9vbGVhblNldHRpbmdWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBjaGVja0VsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGlkID0gZ2V0VGVtcG9yYXJ5SW5wdXRBbmRMYWJlbElkKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNoZWNrRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fY2hlY2snKTtcbiAgICAgICAgICAgIGNoZWNrRWwudmFsdWUgPSBteS5kYXRhLmRlZmF1bHQ7XG4gICAgICAgICAgICBjaGVja0VsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgICAgICBjaGVja0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGxhYmVsRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcudG9nZ2xlX19sYWJlbCcpO1xuICAgICAgICAgICAgbGFiZWxFbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHF1aWNrIElEIHRvIHRpZSBsYWJlbCB0byBpbnB1dCBlbGVtZW50cy5cbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgSUQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnaWQnICsgTWF0aC5yYW5kb20oKSArIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNoZWNrZWQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGNoZWNrRWwuY2hlY2tlZCA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuc2V0VmFsdWUgPSBzZXRWYWx1ZTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQmFzZVNldHRpbmdWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3ZpZXcvc2V0dGluZy9ib29sZWFuLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteSettingView;\n/**\n * Processor setting overlay for assinging MIDI control to the parameter.\n */\nfunction createRemoteSettingView(specs, my) {\n    var that,\n        learnClickLayer,\n        init = function init() {\n        if (my.data.isMidiControllable) {\n            var template = document.querySelector('#template-setting-learnmode');\n            var clone = template.content.cloneNode(true);\n            learnClickLayer = clone.firstElementChild;\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     */\n    changeRemoteState = function changeRemoteState(state) {\n        if (my.data.isMidiControllable) {\n            if (state.learnModeActive) {\n                showRemoteState('enter');\n\n                // search for assignment\n                var assignment = void 0;\n                state.assignments.allIds.forEach(function (assignID) {\n                    var assign = state.assignments.byId[assignID];\n                    if (assign.processorID === my.processorID && assign.paramKey === my.key) {\n                        assignment = assign;\n                    }\n                });\n\n                if (assignment) {\n                    showRemoteState('assigned');\n                } else {\n                    showRemoteState('unassigned');\n                }\n                if (state.learnTargetProcessorID === my.processorID && state.learnTargetParameterKey === my.key) {\n                    showRemoteState('selected');\n                } else {\n                    showRemoteState('deselected');\n                }\n            } else {\n                showRemoteState('exit');\n            }\n        }\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} status New state of the parameter.\n     */\n    showRemoteState = function showRemoteState(status) {\n        switch (status) {\n            case 'enter':\n                my.el.appendChild(learnClickLayer);\n                learnClickLayer.addEventListener('click', onLearnLayerClick);\n                break;\n            case 'exit':\n                if (my.el.contains(learnClickLayer)) {\n                    my.el.removeChild(learnClickLayer);\n                    learnClickLayer.removeEventListener('click', onLearnLayerClick);\n                }\n                break;\n            case 'selected':\n                learnClickLayer.dataset.selected = true;\n                break;\n            case 'deselected':\n                learnClickLayer.dataset.selected = false;\n                break;\n            case 'assigned':\n                learnClickLayer.dataset.assigned = true;\n                break;\n            case 'unassigned':\n                learnClickLayer.dataset.assigned = false;\n                break;\n            default:\n                console.log('Unknown remote state: ', state);\n                break;\n        }\n    },\n        onLearnLayerClick = function onLearnLayerClick(e) {\n        my.store.dispatch(my.store.getActions().toggleMIDILearnTarget(my.processorID, my.key));\n    };\n\n    my = my || {};\n    my.changeRemoteState = changeRemoteState;\n\n    that = that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIntegerSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a linear integer type parameter,\n * which has a slider and a number field.\n */\nfunction createIntegerSettingView(specs, my) {\n    var that,\n        rangeEl,\n        numberEl,\n        init = function init() {\n        rangeEl = my.el.getElementsByClassName('setting__range')[0];\n        rangeEl.addEventListener('input', onChange);\n        rangeEl.addEventListener('change', onChange);\n\n        numberEl = my.el.getElementsByClassName('setting__number')[0];\n        numberEl.addEventListener('change', onChange);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {\n        rangeEl.setAttribute('min', my.data.min);\n        rangeEl.setAttribute('max', my.data.max);\n\n        numberEl.setAttribute('min', my.data.min);\n        numberEl.setAttribute('max', my.data.max);\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, parseInt(e.target.value, 10)));\n    },\n        setValue = function setValue(value) {\n        rangeEl.value = value;\n        numberEl.value = value;\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanM/NTk2MCJdLCJuYW1lcyI6WyJjcmVhdGVJbnRlZ2VyU2V0dGluZ1ZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInJhbmdlRWwiLCJudW1iZXJFbCIsImluaXQiLCJlbCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwib25DaGFuZ2UiLCJpbml0RGF0YSIsInNldFZhbHVlIiwiZGF0YSIsInZhbHVlIiwic2V0QXR0cmlidXRlIiwibWluIiwibWF4IiwiZSIsInN0b3JlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwiY2hhbmdlUGFyYW1ldGVyIiwicHJvY2Vzc29ySUQiLCJrZXkiLCJwYXJzZUludCIsInRhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBTXdCQSx3Qjs7QUFOeEI7Ozs7OztBQUVBOzs7O0FBSWUsU0FBU0Esd0JBQVQsQ0FBa0NDLEtBQWxDLEVBQXlDQyxFQUF6QyxFQUE2QztBQUN4RCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsT0FESjtBQUFBLFFBRUlDLFFBRko7QUFBQSxRQUlJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixrQkFBVUYsR0FBR0ssRUFBSCxDQUFNQyxzQkFBTixDQUE2QixnQkFBN0IsRUFBK0MsQ0FBL0MsQ0FBVjtBQUNBSixnQkFBUUssZ0JBQVIsQ0FBeUIsT0FBekIsRUFBa0NDLFFBQWxDO0FBQ0FOLGdCQUFRSyxnQkFBUixDQUF5QixRQUF6QixFQUFtQ0MsUUFBbkM7O0FBRUFMLG1CQUFXSCxHQUFHSyxFQUFILENBQU1DLHNCQUFOLENBQTZCLGlCQUE3QixFQUFnRCxDQUFoRCxDQUFYO0FBQ0FILGlCQUFTSSxnQkFBVCxDQUEwQixRQUExQixFQUFvQ0MsUUFBcEM7O0FBRUFDO0FBQ0FDLGlCQUFTVixHQUFHVyxJQUFILENBQVFDLEtBQWpCO0FBQ0gsS0FkTDtBQUFBLFFBZ0JJSCxXQUFXLFNBQVhBLFFBQVcsR0FBVztBQUNsQlAsZ0JBQVFXLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJiLEdBQUdXLElBQUgsQ0FBUUcsR0FBcEM7QUFDQVosZ0JBQVFXLFlBQVIsQ0FBcUIsS0FBckIsRUFBNEJiLEdBQUdXLElBQUgsQ0FBUUksR0FBcEM7O0FBRUFaLGlCQUFTVSxZQUFULENBQXNCLEtBQXRCLEVBQTZCYixHQUFHVyxJQUFILENBQVFHLEdBQXJDO0FBQ0FYLGlCQUFTVSxZQUFULENBQXNCLEtBQXRCLEVBQTZCYixHQUFHVyxJQUFILENBQVFJLEdBQXJDO0FBQ0gsS0F0Qkw7QUFBQSxRQXdCSVAsV0FBVyxTQUFYQSxRQUFXLENBQVNRLENBQVQsRUFBWTtBQUNuQmhCLFdBQUdpQixLQUFILENBQVNDLFFBQVQsQ0FBa0JsQixHQUFHaUIsS0FBSCxDQUFTRSxVQUFULEdBQXNCQyxlQUF0QixDQUNkcEIsR0FBR3FCLFdBRFcsRUFFZHJCLEdBQUdzQixHQUZXLEVBR2RDLFNBQVNQLEVBQUVRLE1BQUYsQ0FBU1osS0FBbEIsRUFBeUIsRUFBekIsQ0FIYyxDQUFsQjtBQUlILEtBN0JMO0FBQUEsUUErQklGLFdBQVcsU0FBWEEsUUFBVyxDQUFTRSxLQUFULEVBQWdCO0FBQ3ZCVixnQkFBUVUsS0FBUixHQUFnQkEsS0FBaEI7QUFDQVQsaUJBQVNTLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0gsS0FsQ0w7O0FBb0NBWixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR1MsUUFBSCxHQUFjQSxRQUFkO0FBQ0FULE9BQUdVLFFBQUgsR0FBY0EsUUFBZDs7QUFFQVQsV0FBTyxvQkFBc0JGLEtBQXRCLEVBQTZCQyxFQUE3QixDQUFQOztBQUVBSTs7QUFFQSxXQUFPSCxJQUFQO0FBQ0giLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlQmFzZVNldHRpbmdWaWV3IGZyb20gJy4vYmFzZSc7XG5cbi8qKlxuICogUHJvY2Vzc29yIHNldHRpbmcgdmlldyBmb3IgYSBsaW5lYXIgaW50ZWdlciB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIHNsaWRlciBhbmQgYSBudW1iZXIgZmllbGQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUludGVnZXJTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgcmFuZ2VFbCxcbiAgICAgICAgbnVtYmVyRWwsXG4gICAgICAgIFxuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fcmFuZ2UnKVswXTtcbiAgICAgICAgICAgIHJhbmdlRWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvbkNoYW5nZSk7XG4gICAgICAgICAgICByYW5nZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbnVtYmVyRWwgPSBteS5lbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzZXR0aW5nX19udW1iZXInKVswXTtcbiAgICAgICAgICAgIG51bWJlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcblxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByYW5nZUVsLnNldEF0dHJpYnV0ZSgnbWluJywgbXkuZGF0YS5taW4pO1xuICAgICAgICAgICAgcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcblxuICAgICAgICAgICAgbnVtYmVyRWwuc2V0QXR0cmlidXRlKCdtaW4nLCBteS5kYXRhLm1pbik7XG4gICAgICAgICAgICBudW1iZXJFbC5zZXRBdHRyaWJ1dGUoJ21heCcsIG15LmRhdGEubWF4KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uQ2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgbXkuc3RvcmUuZGlzcGF0Y2gobXkuc3RvcmUuZ2V0QWN0aW9ucygpLmNoYW5nZVBhcmFtZXRlcihcbiAgICAgICAgICAgICAgICBteS5wcm9jZXNzb3JJRCwgXG4gICAgICAgICAgICAgICAgbXkua2V5LCBcbiAgICAgICAgICAgICAgICBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByYW5nZUVsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBudW1iZXJFbC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkuaW5pdERhdGEgPSBpbml0RGF0YTtcbiAgICBteS5zZXRWYWx1ZSA9IHNldFZhbHVlO1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2ludGVnZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createItemizedSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a itemized type parameter,\n * which has a radio buttons for item selection.\n */\nfunction createItemizedSettingView(specs, my) {\n    var that,\n        valueEl,\n        radioInputs = [],\n        numInputs,\n        init = function init() {\n        valueEl = my.el.querySelector('.setting__value');\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {\n        // remove previous radio buttons, if any\n        while (valueEl.firstChild) {\n            valueEl.firstChild.removeEventListener('change', onChange);\n            valueEl.removeChild(valueEl.firstChild);\n        }\n\n        // add the radio buttons\n        var radioTemplate = document.querySelector('#template-setting-itemized-item'),\n            model = my.data.model;\n        numInputs = model.length;\n        for (var i = 0; i < numInputs; i++) {\n            var id = getTemporaryInputAndLabelId();\n\n            // add a new cloned radio element\n            var radioInputEl = radioTemplate.content.children[0].cloneNode(true);\n            valueEl.appendChild(radioInputEl);\n            radioInputEl.setAttribute('name', specs.key);\n            radioInputEl.setAttribute('id', id);\n            radioInputEl.value = model[i].value;\n            radioInputEl.addEventListener('change', onChange);\n            radioInputs.push(radioInputEl);\n\n            // add a new cloned label element\n            var radioLabelEl = radioTemplate.content.children[1].cloneNode(true);\n            valueEl.appendChild(radioLabelEl);\n            radioLabelEl.setAttribute('for', id);\n            radioLabelEl.innerHTML = model[i].label;\n        }\n    },\n\n\n    /**\n     * A quick ID to tie label to input elements.\n     * @return {Number} Unique ID.\n     */\n    getTemporaryInputAndLabelId = function getTemporaryInputAndLabelId() {\n        return 'id' + Math.random() + performance.now();\n    },\n        onChange = function onChange(e) {\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        radioInputs.forEach(function (radioInput) {\n            radioInput.checked = radioInput.value == value;\n        });\n    };\n\n    my = my || {};\n    my.initData = initData;\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL2l0ZW1pemVkLmpzPzdhMjAiXSwibmFtZXMiOlsiY3JlYXRlSXRlbWl6ZWRTZXR0aW5nVmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwidmFsdWVFbCIsInJhZGlvSW5wdXRzIiwibnVtSW5wdXRzIiwiaW5pdCIsImVsIiwicXVlcnlTZWxlY3RvciIsImluaXREYXRhIiwic2V0VmFsdWUiLCJkYXRhIiwidmFsdWUiLCJmaXJzdENoaWxkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJyYWRpb1RlbXBsYXRlIiwiZG9jdW1lbnQiLCJtb2RlbCIsImxlbmd0aCIsImkiLCJpZCIsImdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCIsInJhZGlvSW5wdXRFbCIsImNvbnRlbnQiLCJjaGlsZHJlbiIsImNsb25lTm9kZSIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlIiwia2V5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJyYWRpb0xhYmVsRWwiLCJpbm5lckhUTUwiLCJsYWJlbCIsIk1hdGgiLCJyYW5kb20iLCJwZXJmb3JtYW5jZSIsIm5vdyIsImUiLCJzdG9yZSIsImRpc3BhdGNoIiwiZ2V0QWN0aW9ucyIsImNoYW5nZVBhcmFtZXRlciIsInByb2Nlc3NvcklEIiwidGFyZ2V0IiwiZm9yRWFjaCIsInJhZGlvSW5wdXQiLCJjaGVja2VkIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHlCOztBQU54Qjs7Ozs7O0FBRUE7Ozs7QUFJZSxTQUFTQSx5QkFBVCxDQUFtQ0MsS0FBbkMsRUFBMENDLEVBQTFDLEVBQThDO0FBQ3pELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxPQURKO0FBQUEsUUFFSUMsY0FBYyxFQUZsQjtBQUFBLFFBR0lDLFNBSEo7QUFBQSxRQUtJQyxPQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkSCxrQkFBVUYsR0FBR00sRUFBSCxDQUFNQyxhQUFOLENBQW9CLGlCQUFwQixDQUFWOztBQUVBQztBQUNBQyxpQkFBU1QsR0FBR1UsSUFBSCxDQUFRQyxLQUFqQjtBQUNILEtBVkw7QUFBQSxRQVlJSCxXQUFXLFNBQVhBLFFBQVcsR0FBVztBQUNsQjtBQUNBLGVBQU9OLFFBQVFVLFVBQWYsRUFBMkI7QUFDdkJWLG9CQUFRVSxVQUFSLENBQW1CQyxtQkFBbkIsQ0FBdUMsUUFBdkMsRUFBaURDLFFBQWpEO0FBQ0FaLG9CQUFRYSxXQUFSLENBQW9CYixRQUFRVSxVQUE1QjtBQUNIOztBQUVEO0FBQ0EsWUFBSUksZ0JBQWdCQyxTQUFTVixhQUFULENBQXVCLGlDQUF2QixDQUFwQjtBQUFBLFlBQ0lXLFFBQVFsQixHQUFHVSxJQUFILENBQVFRLEtBRHBCO0FBRUFkLG9CQUFZYyxNQUFNQyxNQUFsQjtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJaEIsU0FBcEIsRUFBK0JnQixHQUEvQixFQUFvQztBQUNoQyxnQkFBSUMsS0FBS0MsNkJBQVQ7O0FBRUE7QUFDQSxnQkFBSUMsZUFBZVAsY0FBY1EsT0FBZCxDQUFzQkMsUUFBdEIsQ0FBK0IsQ0FBL0IsRUFBa0NDLFNBQWxDLENBQTRDLElBQTVDLENBQW5CO0FBQ0F4QixvQkFBUXlCLFdBQVIsQ0FBb0JKLFlBQXBCO0FBQ0FBLHlCQUFhSyxZQUFiLENBQTBCLE1BQTFCLEVBQWtDN0IsTUFBTThCLEdBQXhDO0FBQ0FOLHlCQUFhSyxZQUFiLENBQTBCLElBQTFCLEVBQWdDUCxFQUFoQztBQUNBRSx5QkFBYVosS0FBYixHQUFxQk8sTUFBTUUsQ0FBTixFQUFTVCxLQUE5QjtBQUNBWSx5QkFBYU8sZ0JBQWIsQ0FBOEIsUUFBOUIsRUFBd0NoQixRQUF4QztBQUNBWCx3QkFBWTRCLElBQVosQ0FBaUJSLFlBQWpCOztBQUVBO0FBQ0EsZ0JBQUlTLGVBQWVoQixjQUFjUSxPQUFkLENBQXNCQyxRQUF0QixDQUErQixDQUEvQixFQUFrQ0MsU0FBbEMsQ0FBNEMsSUFBNUMsQ0FBbkI7QUFDQXhCLG9CQUFReUIsV0FBUixDQUFvQkssWUFBcEI7QUFDQUEseUJBQWFKLFlBQWIsQ0FBMEIsS0FBMUIsRUFBaUNQLEVBQWpDO0FBQ0FXLHlCQUFhQyxTQUFiLEdBQXlCZixNQUFNRSxDQUFOLEVBQVNjLEtBQWxDO0FBQ0g7QUFDSixLQXpDTDs7O0FBMkNJOzs7O0FBSUFaLGtDQUE4QixTQUE5QkEsMkJBQThCLEdBQVc7QUFDckMsZUFBTyxPQUFPYSxLQUFLQyxNQUFMLEVBQVAsR0FBdUJDLFlBQVlDLEdBQVosRUFBOUI7QUFDSCxLQWpETDtBQUFBLFFBbURJeEIsV0FBVyxTQUFYQSxRQUFXLENBQVN5QixDQUFULEVBQVk7QUFDbkJ2QyxXQUFHd0MsS0FBSCxDQUFTQyxRQUFULENBQWtCekMsR0FBR3dDLEtBQUgsQ0FBU0UsVUFBVCxHQUFzQkMsZUFBdEIsQ0FDZDNDLEdBQUc0QyxXQURXLEVBRWQ1QyxHQUFHNkIsR0FGVyxFQUdkVSxFQUFFTSxNQUFGLENBQVNsQyxLQUhLLENBQWxCO0FBSUgsS0F4REw7QUFBQSxRQTBESUYsV0FBVyxTQUFYQSxRQUFXLENBQVNFLEtBQVQsRUFBZ0I7QUFDdkJSLG9CQUFZMkMsT0FBWixDQUFvQixzQkFBYztBQUM5QkMsdUJBQVdDLE9BQVgsR0FBc0JELFdBQVdwQyxLQUFYLElBQW9CQSxLQUExQztBQUNILFNBRkQ7QUFHSCxLQTlETDs7QUFnRUFYLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHUSxRQUFILEdBQWNBLFFBQWQ7QUFDQVIsT0FBR1MsUUFBSCxHQUFjQSxRQUFkOztBQUVBUixXQUFPLG9CQUFzQkYsS0FBdEIsRUFBNkJDLEVBQTdCLENBQVA7O0FBRUFLOztBQUVBLFdBQU9KLElBQVA7QUFDSCIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVCYXNlU2V0dGluZ1ZpZXcgZnJvbSAnLi9iYXNlJztcblxuLyoqXG4gKiBQcm9jZXNzb3Igc2V0dGluZyB2aWV3IGZvciBhIGl0ZW1pemVkIHR5cGUgcGFyYW1ldGVyLFxuICogd2hpY2ggaGFzIGEgcmFkaW8gYnV0dG9ucyBmb3IgaXRlbSBzZWxlY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1pemVkU2V0dGluZ1ZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIHZhbHVlRWwsXG4gICAgICAgIHJhZGlvSW5wdXRzID0gW10sXG4gICAgICAgIG51bUlucHV0cyxcbiAgICAgICAgXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhbHVlRWwgPSBteS5lbC5xdWVyeVNlbGVjdG9yKCcuc2V0dGluZ19fdmFsdWUnKTtcblxuICAgICAgICAgICAgaW5pdERhdGEoKTtcbiAgICAgICAgICAgIHNldFZhbHVlKG15LmRhdGEudmFsdWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJldmlvdXMgcmFkaW8gYnV0dG9ucywgaWYgYW55XG4gICAgICAgICAgICB3aGlsZSAodmFsdWVFbC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVFbC5maXJzdENoaWxkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ2hhbmdlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZUVsLnJlbW92ZUNoaWxkKHZhbHVlRWwuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgcmFkaW8gYnV0dG9uc1xuICAgICAgICAgICAgbGV0IHJhZGlvVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtc2V0dGluZy1pdGVtaXplZC1pdGVtJyksXG4gICAgICAgICAgICAgICAgbW9kZWwgPSBteS5kYXRhLm1vZGVsO1xuICAgICAgICAgICAgbnVtSW5wdXRzID0gbW9kZWwubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1JbnB1dHM7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IGdldFRlbXBvcmFyeUlucHV0QW5kTGFiZWxJZCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIGFkZCBhIG5ldyBjbG9uZWQgcmFkaW8gZWxlbWVudFxuICAgICAgICAgICAgICAgIGxldCByYWRpb0lucHV0RWwgPSByYWRpb1RlbXBsYXRlLmNvbnRlbnQuY2hpbGRyZW5bMF0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIHZhbHVlRWwuYXBwZW5kQ2hpbGQocmFkaW9JbnB1dEVsKTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuc2V0QXR0cmlidXRlKCduYW1lJywgc3BlY3Mua2V5KTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwudmFsdWUgPSBtb2RlbFtpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgICAgIHJhZGlvSW5wdXRzLnB1c2gocmFkaW9JbnB1dEVsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBhZGQgYSBuZXcgY2xvbmVkIGxhYmVsIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBsZXQgcmFkaW9MYWJlbEVsID0gcmFkaW9UZW1wbGF0ZS5jb250ZW50LmNoaWxkcmVuWzFdLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB2YWx1ZUVsLmFwcGVuZENoaWxkKHJhZGlvTGFiZWxFbCk7XG4gICAgICAgICAgICAgICAgcmFkaW9MYWJlbEVsLnNldEF0dHJpYnV0ZSgnZm9yJywgaWQpO1xuICAgICAgICAgICAgICAgIHJhZGlvTGFiZWxFbC5pbm5lckhUTUwgPSBtb2RlbFtpXS5sYWJlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHF1aWNrIElEIHRvIHRpZSBsYWJlbCB0byBpbnB1dCBlbGVtZW50cy5cbiAgICAgICAgICogQHJldHVybiB7TnVtYmVyfSBVbmlxdWUgSUQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXRUZW1wb3JhcnlJbnB1dEFuZExhYmVsSWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnaWQnICsgTWF0aC5yYW5kb20oKSArIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmFkaW9JbnB1dHMuZm9yRWFjaChyYWRpb0lucHV0ID0+IHtcbiAgICAgICAgICAgICAgICByYWRpb0lucHV0LmNoZWNrZWQgPSAocmFkaW9JbnB1dC52YWx1ZSA9PSB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5pbml0RGF0YSA9IGluaXREYXRhO1xuICAgIG15LnNldFZhbHVlID0gc2V0VmFsdWU7XG4gICAgXG4gICAgdGhhdCA9IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyhzcGVjcywgbXkpO1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3NldHRpbmcvaXRlbWl6ZWQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createStringSettingView;\n\nvar _base = __webpack_require__(2);\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Processor setting view for a Boolean type parameter,\n * which has a checkbox input.\n */\n\nfunction createStringSettingView(specs, my) {\n    var that,\n        textEl,\n        init = function init() {\n        textEl = my.el.getElementsByClassName('setting__text')[0];\n        textEl.addEventListener('input', onChange);\n\n        initData();\n        setValue(my.data.value);\n    },\n        initData = function initData() {},\n        onChange = function onChange(e) {\n        e.preventDefault();\n        my.store.dispatch(my.store.getActions().changeParameter(my.processorID, my.key, e.target.value));\n    },\n        setValue = function setValue(value) {\n        // only update if the text input doesn't have focus,\n        // else value gets refreshed and cursor jumps to end\n        if (textEl != document.activeElement) {\n            textEl.value = value;\n        }\n    };\n\n    my = my || {};\n    my.setValue = setValue;\n\n    that = (0, _base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9zZXR0aW5nL3N0cmluZy5qcz83MjVmIl0sIm5hbWVzIjpbImNyZWF0ZVN0cmluZ1NldHRpbmdWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJ0ZXh0RWwiLCJpbml0IiwiZWwiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uQ2hhbmdlIiwiaW5pdERhdGEiLCJzZXRWYWx1ZSIsImRhdGEiLCJ2YWx1ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3JlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwiY2hhbmdlUGFyYW1ldGVyIiwicHJvY2Vzc29ySUQiLCJrZXkiLCJ0YXJnZXQiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU93QkEsdUI7O0FBUHhCOzs7Ozs7QUFFQTs7Ozs7QUFLZSxTQUFTQSx1QkFBVCxDQUFpQ0MsS0FBakMsRUFBd0NDLEVBQXhDLEVBQTRDO0FBQ3ZELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxNQURKO0FBQUEsUUFHSUMsT0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEQsaUJBQVNGLEdBQUdJLEVBQUgsQ0FBTUMsc0JBQU4sQ0FBNkIsZUFBN0IsRUFBOEMsQ0FBOUMsQ0FBVDtBQUNBSCxlQUFPSSxnQkFBUCxDQUF3QixPQUF4QixFQUFpQ0MsUUFBakM7O0FBRUFDO0FBQ0FDLGlCQUFTVCxHQUFHVSxJQUFILENBQVFDLEtBQWpCO0FBQ0gsS0FUTDtBQUFBLFFBV0lILFdBQVcsU0FBWEEsUUFBVyxHQUFXLENBQUUsQ0FYNUI7QUFBQSxRQWFJRCxXQUFXLFNBQVhBLFFBQVcsQ0FBU0ssQ0FBVCxFQUFZO0FBQ25CQSxVQUFFQyxjQUFGO0FBQ0FiLFdBQUdjLEtBQUgsQ0FBU0MsUUFBVCxDQUFrQmYsR0FBR2MsS0FBSCxDQUFTRSxVQUFULEdBQXNCQyxlQUF0QixDQUNkakIsR0FBR2tCLFdBRFcsRUFFZGxCLEdBQUdtQixHQUZXLEVBR2RQLEVBQUVRLE1BQUYsQ0FBU1QsS0FISyxDQUFsQjtBQUlILEtBbkJMO0FBQUEsUUFxQklGLFdBQVcsU0FBWEEsUUFBVyxDQUFTRSxLQUFULEVBQWdCO0FBQ3ZCO0FBQ0E7QUFDQSxZQUFJVCxVQUFVbUIsU0FBU0MsYUFBdkIsRUFBc0M7QUFDbENwQixtQkFBT1MsS0FBUCxHQUFlQSxLQUFmO0FBQ0g7QUFDSixLQTNCTDs7QUE2QkFYLFNBQUtBLE1BQU0sRUFBWDtBQUNBQSxPQUFHUyxRQUFILEdBQWNBLFFBQWQ7O0FBRUFSLFdBQU8sb0JBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDs7QUFFQUc7O0FBRUEsV0FBT0YsSUFBUDtBQUNIIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyBmcm9tICcuL2Jhc2UnO1xuXG4vKipcbiAqIFByb2Nlc3NvciBzZXR0aW5nIHZpZXcgZm9yIGEgQm9vbGVhbiB0eXBlIHBhcmFtZXRlcixcbiAqIHdoaWNoIGhhcyBhIGNoZWNrYm94IGlucHV0LlxuICovXG4gXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHJpbmdTZXR0aW5nVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgdGV4dEVsLFxuICAgICAgICBcbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGV4dEVsID0gbXkuZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc2V0dGluZ19fdGV4dCcpWzBdO1xuICAgICAgICAgICAgdGV4dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0Jywgb25DaGFuZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbml0RGF0YSgpO1xuICAgICAgICAgICAgc2V0VmFsdWUobXkuZGF0YS52YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdERhdGEgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBcbiAgICAgICAgb25DaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBteS5zdG9yZS5kaXNwYXRjaChteS5zdG9yZS5nZXRBY3Rpb25zKCkuY2hhbmdlUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIG15LnByb2Nlc3NvcklELCBcbiAgICAgICAgICAgICAgICBteS5rZXksIFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlKSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBzZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHVwZGF0ZSBpZiB0aGUgdGV4dCBpbnB1dCBkb2Vzbid0IGhhdmUgZm9jdXMsXG4gICAgICAgICAgICAvLyBlbHNlIHZhbHVlIGdldHMgcmVmcmVzaGVkIGFuZCBjdXJzb3IganVtcHMgdG8gZW5kXG4gICAgICAgICAgICBpZiAodGV4dEVsICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0RWwudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnNldFZhbHVlID0gc2V0VmFsdWU7XG4gICAgXG4gICAgdGhhdCA9IGNyZWF0ZUJhc2VTZXR0aW5nVmlldyhzcGVjcywgbXkpO1xuICAgIFxuICAgIGluaXQoKTtcbiAgICBcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L3NldHRpbmcvc3RyaW5nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/settings.html\": 35,\n\t\"./euclidfx/settings.html\": 36,\n\t\"./output/settings.html\": 37\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 34;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciBeXFwuXFwvLipcXC9zZXR0aW5nc1xcLmh0bWwkP2EyNDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvc2V0dGluZ3MuaHRtbFwiOiAzNSxcblx0XCIuL2V1Y2xpZGZ4L3NldHRpbmdzLmh0bWxcIjogMzYsXG5cdFwiLi9vdXRwdXQvc2V0dGluZ3MuaHRtbFwiOiAzN1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDM0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMgLi9ub2RlX21vZHVsZXMvaHRtbC1sb2FkZXIgXlxcLlxcLy4qXFwvc2V0dGluZ3NcXC5odG1sJFxuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"settings settings--epg\\\">\\n    <form>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Euclidean Rhythm</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row steps\\\"></div>\\n            <div class=\\\"settings__row pulses\\\"></div>\\n            <div class=\\\"settings__row rotation\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Playback</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row rate\\\"></div>\\n            <div class=\\\"settings__row note_length\\\"></div>\\n            <div class=\\\"settings__row is_triplets\\\"></div>\\n            <div class=\\\"settings__row is_mute\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">MIDI Out</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row channel_out\\\"></div>\\n            <div class=\\\"settings__row pitch_out\\\"></div>\\n            <div class=\\\"settings__row velocity_out\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Other</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row name\\\"></div>\\n            <div class=\\\"settings__row\\\">\\n                <div class=\\\"setting\\\">\\n                    <span class=\\\"setting__label\\\"></span>\\n                    <div class=\\\"setting__value\\\">\\n                        <button type=\\\"button\\\" class=\\\"settings__delete btn\\\">Delete</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </fieldset>\\n    </form>\\n</div>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvc2V0dGluZ3MuaHRtbD85ZjY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNldHRpbmdzIHNldHRpbmdzLS1lcGdcXFwiPlxcbiAgICA8Zm9ybT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+RXVjbGlkZWFuIFJoeXRobTwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJzZXR0aW5nc19fZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgc3RlcHNcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgcHVsc2VzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHJvdGF0aW9uXFxcIj48L2Rpdj5cXG4gICAgICAgIDwvZmllbGRzZXQ+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbF9faGVhZGVyIHBhbmVsX19oZWFkZXItLXN1YlxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlYWRlcl9fbGFiZWxcXFwiPlBsYXliYWNrPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcInNldHRpbmdzX19maWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyByYXRlXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IG5vdGVfbGVuZ3RoXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGlzX3RyaXBsZXRzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGlzX211dGVcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+TUlESSBPdXQ8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IGNoYW5uZWxfb3V0XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHBpdGNoX291dFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyB2ZWxvY2l0eV9vdXRcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+T3RoZXI8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IG5hbWVcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3dcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzZXR0aW5nX19sYWJlbFxcXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ19fdmFsdWVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwic2V0dGluZ3NfX2RlbGV0ZSBidG5cXFwiPkRlbGV0ZTwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9maWVsZHNldD5cXG4gICAgPC9mb3JtPlxcbjwvZGl2PlxcblwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyIS4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXBnL3NldHRpbmdzLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"settings\\\">\\n    <form>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Euclidean Pattern</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row steps\\\"></div>\\n            <div class=\\\"settings__row pulses\\\"></div>\\n            <div class=\\\"settings__row rotation\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Playback</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row rate\\\"></div>\\n            <div class=\\\"settings__row is_triplets\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Effect</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row target\\\"></div>\\n            <div class=\\\"settings__row low\\\"></div>\\n            <div class=\\\"settings__row high\\\"></div>\\n            <div class=\\\"settings__row mode\\\"></div>\\n        </fieldset>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">Other</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row name\\\"></div>\\n            <div class=\\\"settings__row\\\">\\n                <div class=\\\"setting\\\">\\n                    <span class=\\\"setting__label\\\"></span>\\n                    <div class=\\\"setting__value\\\">\\n                        <button type=\\\"button\\\" class=\\\"settings__delete btn\\\">Delete</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </fieldset>\\n    </form>\\n</div>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9zZXR0aW5ncy5odG1sPzkwZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NcXFwiPlxcbiAgICA8Zm9ybT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInBhbmVsX19oZWFkZXIgcGFuZWxfX2hlYWRlci0tc3ViXFxcIj5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyX19sYWJlbFxcXCI+RXVjbGlkZWFuIFBhdHRlcm48L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHN0ZXBzXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHB1bHNlc1xcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyByb3RhdGlvblxcXCI+PC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFuZWxfX2hlYWRlciBwYW5lbF9faGVhZGVyLS1zdWJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJfX2xhYmVsXFxcIj5QbGF5YmFjazwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGZpZWxkc2V0IGNsYXNzPVxcXCJzZXR0aW5nc19fZmllbGRzZXRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgcmF0ZVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyBpc190cmlwbGV0c1xcXCI+PC9kaXY+XFxuICAgICAgICA8L2ZpZWxkc2V0PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFuZWxfX2hlYWRlciBwYW5lbF9faGVhZGVyLS1zdWJcXFwiPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJfX2xhYmVsXFxcIj5FZmZlY3Q8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxmaWVsZHNldCBjbGFzcz1cXFwic2V0dGluZ3NfX2ZpZWxkc2V0XFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93IHRhcmdldFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyBsb3dcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdzX19yb3cgaGlnaFxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyBtb2RlXFxcIj48L2Rpdj5cXG4gICAgICAgIDwvZmllbGRzZXQ+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbF9faGVhZGVyIHBhbmVsX19oZWFkZXItLXN1YlxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlYWRlcl9fbGFiZWxcXFwiPk90aGVyPC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcInNldHRpbmdzX19maWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyBuYW1lXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nc19fcm93XFxcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwic2V0dGluZ19fbGFiZWxcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmdfX3ZhbHVlXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcInNldHRpbmdzX19kZWxldGUgYnRuXFxcIj5EZWxldGU8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZmllbGRzZXQ+XFxuICAgIDwvZm9ybT5cXG48L2Rpdj5cXG5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL2V1Y2xpZGZ4L3NldHRpbmdzLmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"settings\\\">\\n    <form>\\n        <div class=\\\"panel__header panel__header--sub\\\">\\n            <span class=\\\"header__label\\\">MIDI Output</span>\\n        </div>\\n        <fieldset class=\\\"settings__fieldset\\\">\\n            <div class=\\\"settings__row port\\\"></div>\\n            <p class=\\\"settings__paragraph\\\"></p>\\n        </fieldset>\\n</div>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvc2V0dGluZ3MuaHRtbD9lZGM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInNldHRpbmdzXFxcIj5cXG4gICAgPGZvcm0+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbF9faGVhZGVyIHBhbmVsX19oZWFkZXItLXN1YlxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlYWRlcl9fbGFiZWxcXFwiPk1JREkgT3V0cHV0PC9zcGFuPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZmllbGRzZXQgY2xhc3M9XFxcInNldHRpbmdzX19maWVsZHNldFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NfX3JvdyBwb3J0XFxcIj48L2Rpdj5cXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwic2V0dGluZ3NfX3BhcmFncmFwaFxcXCI+PC9wPlxcbiAgICAgICAgPC9maWVsZHNldD5cXG48L2Rpdj5cIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWxvYWRlciEuL3NyYy9qcy93aC9wcm9jZXNzb3JzL291dHB1dC9zZXR0aW5ncy5odG1sXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasView;\n\nvar _util = __webpack_require__(6);\n\nvar _windowresize = __webpack_require__(13);\n\nvar _windowresize2 = _interopRequireDefault(_windowresize);\n\nvar _canvasprocessors = __webpack_require__(39);\n\nvar _canvasprocessors2 = _interopRequireDefault(_canvasprocessors);\n\nvar _canvasconnections = __webpack_require__(45);\n\nvar _canvasconnections2 = _interopRequireDefault(_canvasconnections);\n\nvar _tween = __webpack_require__(14);\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Graphic 2D view of the processor network.\n *\n * CanvasView draws the graphics for all processors.\n * DynamicCanvas shows all elements that update each requestAnimationFrame.\n * StaticCanvas shows all elements that update only infrequently.\n * \n * Each processor has its own view.\n * When a change happens to a processor that \n * requires the static canvas to be redrawn:\n * - The processor's view receives a callback from a changed parameter.\n * - The view redraws its static graphics on an off-screen canvas.\n * - The view sets a dirty flag on the canvasView (this).\n * - The canvasView receives the next draw request.\n * - It clears the staticCanvas.\n * - It draws each view's off-screen canvas on the staticCanvas.\n * - It clears the dirty flag.\n */\nfunction createCanvasView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl,\n        staticCanvas,\n        dynamicCanvas,\n        staticCtx,\n        dynamicCtx,\n        isDirty = false,\n        doubleClickCounter = 0,\n        doubleClickDelay = 300,\n        doubleClickTimer,\n        dragObjectType,\n        // 'background|processor|connection'\n\n    init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        staticCanvas = document.querySelector('.canvas-static');\n        dynamicCanvas = document.querySelector('.canvas-dynamic');\n        staticCtx = staticCanvas.getContext('2d');\n        dynamicCtx = dynamicCanvas.getContext('2d');\n\n        rootEl.addEventListener(_util.util.eventType.click, onClick);\n        rootEl.addEventListener(_util.util.eventType.start, onTouchStart);\n        rootEl.addEventListener(_util.util.eventType.move, dragMove);\n        rootEl.addEventListener(_util.util.eventType.end, dragEnd);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                    my.markDirty();\n                    break;\n            }\n        });\n\n        my.addWindowResizeCallback(onWindowResize);\n        onWindowResize();\n    },\n\n\n    /**\n     * Window resize event handler.\n     */\n    onWindowResize = function onWindowResize() {\n        staticCanvas.width = rootEl.clientWidth;\n        staticCanvas.height = rootEl.clientHeight;\n        dynamicCanvas.width = rootEl.clientWidth;\n        dynamicCanvas.height = rootEl.clientHeight;\n        my.canvasRect = dynamicCanvas.getBoundingClientRect();\n        my.resizeConnections();\n        markDirty();\n    },\n\n\n    /**\n     * Separate click and doubleclick.\n     * @see http://stackoverflow.com/questions/6330431/jquery-bind-double-click-and-single-click-separately\n     */\n    onClick = function onClick(e) {\n        // separate click from doubleclick\n        doubleClickCounter++;\n        if (doubleClickCounter == 1) {\n            doubleClickTimer = setTimeout(function () {\n                doubleClickCounter = 0;\n                // implement single click behaviour here\n            }, doubleClickDelay);\n        } else {\n            clearTimeout(doubleClickTimer);\n            doubleClickCounter = 0;\n            // implement double click behaviour here\n        }\n    },\n\n\n    /**\n     * Select the object under the mouse.\n     * Start dragging the object.\n     */\n    onTouchStart = function onTouchStart(e) {\n        var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n            canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n        if (my.isConnectMode && my.intersectsCableHandle(canvasX, canvasY)) {\n            dragObjectType = 'cablehandle';\n        } else if (my.isConnectMode && my.intersectsConnector(canvasX, canvasY, false)) {\n            dragObjectType = 'connection';\n        } else if (my.intersectsProcessor(canvasX, canvasY)) {\n            dragObjectType = 'processor';\n        } else {\n            dragObjectType = 'background';\n        }\n    },\n\n\n    /**\n     * Drag a view.\n     * @param  {Object} e Event.\n     */\n    dragMove = function dragMove(e) {\n        e.preventDefault();\n        if (dragObjectType) {\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n\n            switch (dragObjectType) {\n                case 'connection':\n                    my.dragMoveConnection(canvasX, canvasY);\n                    break;\n                case 'processor':\n                    my.dragSelectedProcessor(canvasX, canvasY);\n                    break;\n                case 'background':\n                    my.dragAllProcessors(canvasX, canvasY);\n                    break;\n            }\n        }\n    },\n\n\n    /**\n     * Dragging 3D object ended.\n     * @param  {Object} e Event.\n     */\n    dragEnd = function dragEnd(e) {\n        e.preventDefault();\n\n        if (dragObjectType) {\n            dragMove(e);\n            var canvasX = e.clientX - my.canvasRect.left + window.scrollX,\n                canvasY = e.clientY - my.canvasRect.top + window.scrollY;\n            switch (dragObjectType) {\n                case 'connection':\n                    my.intersectsConnector(canvasX, canvasY, true);\n                    my.dragEndConnection();\n                    break;\n                case 'processor':\n                    break;\n                case 'background':\n                    break;\n                case 'cablehandle':\n                    var connectionID = my.intersectsCableHandle(canvasX, canvasY);\n                    if (connectionID) {\n                        store.dispatch(store.getActions().disconnectProcessors(connectionID));\n                    }\n                    break;\n            }\n            dragObjectType = null;\n        }\n    },\n\n\n    /**\n     * Set a flag to indicate the static canvas should be redrawn.\n     */\n    markDirty = function markDirty() {\n        isDirty = true;\n    },\n\n\n    /**\n     * Update any tween animations that are going on and\n     * redraw the canvases if needed.\n     * @param {Number} position Transport playback position in ticks.\n     * @param {Array} processorEvents Array to processor generated events to displayin the view.\n     */\n    draw = function draw(position, processorEvents) {\n        _tween2.default.update();\n        var i = void 0,\n            views = my.getProcessorViews(),\n            n = views.length;\n        for (i = 0; i < n; i++) {\n            views[i].draw(position, processorEvents);\n        }\n        return;\n        if (isDirty) {\n            isDirty = false;\n            staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            dynamicCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n            my.addConnectionsToCanvas(staticCtx);\n            for (i = 0; i < n; i++) {\n                views[i].addToStaticView(staticCtx);\n            }\n        }\n\n        for (i = 0; i < n; i++) {\n            views[i].clearFromDynamicView(dynamicCtx);\n        }\n        for (i = 0; i < n; i++) {\n            views[i].addToDynamicView(dynamicCtx);\n        }\n    };\n\n    my = my || {};\n    my.theme;\n    my.canvasRect, my.markDirty = markDirty;\n\n    that = (0, _windowresize2.default)(specs, my);\n    that = (0, _canvasprocessors2.default)(specs, my);\n    that = (0, _canvasconnections2.default)(specs, my);\n\n    init();\n\n    that.draw = draw;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorViews;\n\nvar _selectors = __webpack_require__(1);\n\n/**\n * Manages the canvas views of the processors in the network.\n * - Processor view lifecycle.\n * - Processor view user interaction, itersection with (mouse) point.\n * - Processor view dragging.\n * - Processor view theme changes.\n */\nfunction createCanvasProcessorViews(specs, my) {\n    var that,\n        store = specs.store,\n        views = [],\n        dragOffsetX,\n        dragOffsetY,\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    setProcessorViews(e.detail.state);\n                    selectProcessorView(e.detail.state);\n                    my.markDirty();\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createProcessorViews(e.detail.state);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteProcessorView(e.detail.action.id);\n                    selectProcessorView(e.detail.state);\n                    break;\n\n                case e.detail.actions.SELECT_PROCESSOR:\n                    selectProcessorView(e.detail.state);\n                    break;\n\n                case e.detail.actions.SET_THEME:\n                    setTheme();\n                    break;\n            }\n        });\n    },\n        setTheme = function setTheme() {\n        var themeColors = (0, _selectors.getThemeColors)();\n        views.forEach(function (view) {\n            if (view.setTheme instanceof Function) {\n                view.setTheme(themeColors);\n            }\n        });\n    },\n        setProcessorViews = function setProcessorViews(newProcessors) {\n        clearProcessorViews();\n        createProcessorViews(newProcessors);\n    },\n        clearProcessorViews = function clearProcessorViews() {\n        var n = views.length;\n        while (--n >= 0) {\n            deleteProcessorView(views[n].getID());\n        }\n    },\n\n\n    /**\n     * Create canvas 2D object if it exists for the type.\n     * @param  {Array} data Array of current processors' state.\n     */\n    createProcessorViews = function createProcessorViews(state) {\n        state.processors.allIds.forEach(function (id, i) {\n            var processorData = state.processors.byId[id];\n            if (!views[i] || id !== views[i].getID()) {\n                var module = __webpack_require__(40)(\"./\" + processorData.type + '/graphic');\n                var view = module.createGraphic({\n                    data: processorData,\n                    store: store,\n                    canvasDirtyCallback: my.markDirty,\n                    theme: (0, _selectors.getThemeColors)()\n                });\n                views.splice(i, 0, view);\n            }\n        });\n    },\n        selectProcessorView = function selectProcessorView(state) {\n        views.forEach(function (view) {\n            if (typeof view.setSelected === 'function') {\n                view.setSelected(view.getID() === state.selectedID, state);\n            }\n        });\n    },\n\n\n    /**\n     * Delete canvas 2D object when the processor is deleted.\n     * @param  {Object} processor MIDI processor for which the 3D object will be a view.\n     */\n    deleteProcessorView = function deleteProcessorView(id) {\n        var i = views.length;\n        while (--i >= 0) {\n            if (views[i].getID() === id) {\n                views[i].terminate();\n                views[i].terminateBase();\n                views.splice(i, 1);\n                my.markDirty();\n                return;\n            }\n        }\n    },\n\n\n    /**\n     * Check and handle intersection of point with view.\n     * @param  {Number} x Canvas X coordinate.\n     * @param  {Number} y Canvas Y coordinate.\n     * @return {Boolean} True if intersects.\n     */\n    intersectsProcessor = function intersectsProcessor(x, y) {\n        var isIntersect = false;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        for (var i = views.length - 1; i >= 0; i--) {\n            if (views[i].intersectsWithPoint(x, y)) {\n                isIntersect = true;\n                store.dispatch(store.getActions().selectProcessor(views[i].getID()));\n                // start dragging the view's graphic\n                var pos2d = views[i].getPosition2d();\n                dragOffsetX = x - pos2d.x;\n                dragOffsetY = y - pos2d.y;\n                break;\n            }\n        }\n        return isIntersect;\n    },\n        dragSelectedProcessor = function dragSelectedProcessor(x, y) {\n        store.dispatch(store.getActions().dragSelectedProcessor(x - dragOffsetX, y - dragOffsetY));\n    },\n        dragAllProcessors = function dragAllProcessors(x, y) {\n        var newX = x - dragOffsetX,\n            newY = y - dragOffsetY;\n        dragOffsetX = x;\n        dragOffsetY = y;\n        store.dispatch(store.getActions().dragAllProcessors(newX, newY));\n    },\n        getProcessorViews = function getProcessorViews() {\n        return views;\n    };\n\n    my = my || {};\n    my.intersectsProcessor = intersectsProcessor;\n    my.dragSelectedProcessor = dragSelectedProcessor;\n    my.dragAllProcessors = dragAllProcessors;\n    my.getProcessorViews = getProcessorViews;\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/graphic\": 41,\n\t\"./euclidfx/graphic\": 43,\n\t\"./output/graphic\": 44\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 40;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9ncmFwaGljJD9kOTQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vZXBnL2dyYXBoaWNcIjogNDEsXG5cdFwiLi9ldWNsaWRmeC9ncmFwaGljXCI6IDQzLFxuXHRcIi4vb3V0cHV0L2dyYXBoaWNcIjogNDRcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA0MDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9qcy93aC9wcm9jZXNzb3JzIF5cXC5cXC8uKlxcL2dyYXBoaWMkXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(5);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _euclid = __webpack_require__(9);\n\nvar _tween = __webpack_require__(14);\n\nvar _tween2 = _interopRequireDefault(_tween);\n\nvar _config = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Euclidean pattern animated necklace wheel drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        necklaceCanvas = void 0,\n        necklaceCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        pointerCanvas = void 0,\n        pointerCtx = void 0,\n        pointerRotation = void 0,\n        pointerRotationPrevious = 0,\n        pointerMutedRadius = 30,\n        pointerCanvasCenter = void 0,\n        radius = 110,\n        necklaceMinRadius = 50,\n        necklaceRadius = void 0,\n        centerDotFullRadius = 10,\n        centerDotRadius = void 0,\n        centerDotSize = void 0,\n        centerDotX = void 0,\n        centerDotY = void 0,\n        centerDotStartTween = void 0,\n        centerDotEndTween = void 0,\n        centerRadius = 20,\n        outConnectorY = 35,\n        selectRadius = 15,\n        dotRadius = void 0,\n        dotMaxRadius = 10,\n        dotActiveRadius = void 0,\n        zeroMarkerRadius = 3,\n        lineWidth = 2,\n        isSelected = false,\n        doublePI = Math.PI * 2,\n        dotAnimations = {},\n        isNoteActive = false,\n        necklace = [],\n        duration = 0,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = specs.canvasDirtyCallback;\n\n        initGraphics();\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        redrawStaticCanvas();\n        updateDuration();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                        case 'pulses':\n                            updateDuration();\n                        // fall through\n                        case 'rotation':\n                            updateNecklace();\n                            break;\n                        case 'is_mute':\n                            updatePointer();\n                            break;\n                        case 'name':\n                            updateName();\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                        case 'note_length':\n                            updateDuration();\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                var processor = e.detail.state.processors.byId[my.id];\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = radius * 2;\n        staticCanvas.width = radius * 2;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for dots ring and polygon\n        necklaceCanvas = document.createElement('canvas');\n        necklaceCanvas.height = radius * 2;\n        necklaceCanvas.width = radius * 2;\n        necklaceCtx = necklaceCanvas.getContext('2d');\n        necklaceCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the pointer\n        pointerCanvas = document.createElement('canvas');\n        pointerCanvas.height = radius;\n        pointerCanvas.width = centerRadius * 2;\n        pointerCtx = pointerCanvas.getContext('2d');\n        pointerCtx.lineWidth = lineWidth;\n        pointerCanvasCenter = pointerCanvas.width / 2;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = radius * 2;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n\n        // width and height to clear center dot \n        centerDotSize = (centerDotFullRadius + 1) * 2;\n    },\n\n\n    /**\n     * Show circle if the my.processor is selected, else hide.\n     * @param {Boolean} isSelectedView True if selected.\n     */\n    setSelected = function setSelected(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw(position, processorEvents) {\n        showPlaybackPosition(position);\n\n        if (processorEvents[my.id] && processorEvents[my.id].length) {\n            for (var i = 0, n = processorEvents[my.id].length; i < n; i++) {\n                var event = processorEvents[my.id][i];\n                showNote(event.stepIndex, event.delayFromNowToNoteStart, event.delayFromNowToNoteEnd);\n            }\n        }\n    },\n\n\n    /**\n     * Show the playback position within the pattern.\n     * Indicated by the pointer's rotation.\n     * @param  {Number} position Position within pattern in ticks.\n     */\n    showPlaybackPosition = function showPlaybackPosition(position) {\n        pointerRotationPrevious = pointerRotation;\n        pointerRotation = doublePI * (position % duration / duration);\n    },\n\n\n    /**\n     * Show animation of the pattern dot that is about to play. \n     * @param {Number} stepIndex Index of the step to play.\n     * @param {Number} noteStartDelay Delay from now until note start in ms.\n     * @param {Number} noteStopDelay Delay from now until note end in ms.\n     */\n    showNote = function showNote(stepIndex, noteStartDelay, noteStopDelay) {\n        // get the coordinates of the dot for this step\n        var steps = my.params.steps.value;\n\n        // retain necklace dot state in object\n        dotAnimations[stepIndex] = {\n            positionX: necklace[stepIndex].center.x,\n            positionY: necklace[stepIndex].center.y,\n            boundingBox: necklace[stepIndex].rect,\n            dotRadius: 0\n        };\n\n        var tweeningDot = dotAnimations[stepIndex];\n\n        // animate the necklace dot\n        new _tween2.default.Tween({ currentRadius: dotActiveRadius }).to({ currentRadius: dotRadius }, 300).onUpdate(function () {\n            // store new dot size\n            tweeningDot.dotRadius = this.currentRadius;\n        }).onComplete(function () {\n            // delete dot state object\n            delete dotAnimations[stepIndex];\n        }).delay(noteStartDelay).start();\n    },\n\n\n    /**\n     * Calculate the pattern's duration in milliseconds.\n     */\n    updateDuration = function updateDuration() {\n        var rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        duration = my.params.steps.value * stepDuration;\n    },\n\n\n    /**\n     * Update the pattern dots.\n     * If the steps, pulses or rotation properties have changed.\n     * If steps change it might invalidate the pointer.\n     */\n    updateNecklace = function updateNecklace() {\n        var steps = my.params.steps.value,\n            pulses = my.params.pulses.value,\n            rotation = my.params.rotation.value,\n            euclid = void 0,\n            rad = void 0,\n            x = void 0,\n            y = void 0;\n\n        euclid = (0, _euclid.getEuclidPattern)(steps, pulses);\n        euclid = (0, _euclid.rotateEuclidPattern)(euclid, rotation);\n\n        necklace = [];\n\n        // calculate the dot positions\n        necklaceRadius = necklaceMinRadius + Math.max(0, steps - 16) * 0.8;\n        for (var i = 0; i < steps; i++) {\n            rad = doublePI * (i / steps);\n            x = Math.sin(rad) * necklaceRadius;\n            y = Math.cos(rad) * necklaceRadius;\n            necklace.push({\n                center: {\n                    x: x,\n                    y: y\n                },\n                rect: {\n                    x: x - dotMaxRadius * 2,\n                    y: y + dotMaxRadius * 2,\n                    xAbs: 0,\n                    yAbs: 0,\n                    height: dotMaxRadius * 4,\n                    width: dotMaxRadius * 4\n                }\n            });\n        }\n\n        necklaceCtx.clearRect(0, 0, necklaceCanvas.width, necklaceCanvas.height);\n\n        updateNecklaceAbsolute();\n        updatePolygon(steps, pulses, euclid, necklace);\n        updateDots(steps, euclid, necklace);\n        updatePointer();\n        updateZeroMarker(steps, rotation);\n        updateRotatedMarker(steps, rotation);\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update the coordinates of the necklace nodes relative to the main canvas.\n     */\n    updateNecklaceAbsolute = function updateNecklaceAbsolute() {\n        var rect = void 0;\n        for (var i = 0, n = necklace.length; i < n; i++) {\n            rect = necklace[i].rect;\n            rect.xAbs = my.positionX + rect.x;\n            rect.yAbs = my.positionY - rect.y;\n        }\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        centerDotX = my.positionX - centerDotFullRadius - 1;\n        centerDotY = my.positionY - centerDotFullRadius - 1;\n        updateNecklaceAbsolute();\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Draw polygon.\n     */\n    updatePolygon = function updatePolygon(steps, pulses, euclid, necklace) {\n        if (pulses > 1) {\n            necklaceCtx.fillStyle = my.colorLow;\n            necklaceCtx.strokeStyle = my.colorLow;\n            necklaceCtx.beginPath();\n            var isFirstPoint = true,\n                firstPoint = void 0,\n                dotCenter = void 0;\n            for (var i = 0; i < steps; i++) {\n                if (euclid[i]) {\n                    dotCenter = necklace[i].center;\n                    if (isFirstPoint) {\n                        isFirstPoint = false;\n                        firstPoint = dotCenter;\n                        necklaceCtx.moveTo(radius + firstPoint.x, radius - firstPoint.y);\n                    } else {\n                        necklaceCtx.lineTo(radius + dotCenter.x, radius - dotCenter.y);\n                    }\n                }\n            }\n            necklaceCtx.lineTo(radius + firstPoint.x, radius - firstPoint.y);\n            necklaceCtx.stroke();\n            necklaceCtx.globalAlpha = 0.6;\n            necklaceCtx.fill();\n            necklaceCtx.globalAlpha = 1.0;\n        }\n    },\n\n\n    /**\n     * Draw the necklace dots in their inactive state.\n     */\n    updateDots = function updateDots(steps, euclid, necklace) {\n        dotRadius = dotMaxRadius - 3 - Math.max(0, steps - 16) * 0.09;\n        dotActiveRadius = dotRadius * 2;\n\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        var point = void 0;\n        for (var i = 0; i < steps; i++) {\n            point = necklace[i].center;\n            if (euclid[i]) {\n                // active dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.fill();\n                necklaceCtx.stroke();\n            } else {\n                // passive dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.stroke();\n            }\n        }\n    },\n\n\n    /**\n     * Update the pointer that connects the dots.\n     */\n    updatePointer = function updatePointer() {\n        var isMute = my.params.is_mute.value,\n            pointerRadius = isMute ? pointerMutedRadius : necklaceRadius,\n            pointerX = isMute ? 15 : 19,\n            pointerY = isMute ? 15 : 6;\n\n        pointerCtx.clearRect(0, 0, pointerCanvas.width, pointerCanvas.height);\n        pointerCtx.beginPath();\n        pointerCtx.moveTo(pointerCanvasCenter - pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.lineTo(pointerCanvasCenter, pointerCanvas.height - pointerRadius);\n        pointerCtx.lineTo(pointerCanvasCenter + pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.stroke();\n    },\n\n\n    /**\n     * Update the zero marker.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateZeroMarker = function updateZeroMarker(steps, rotation) {\n        var rad = doublePI * (-rotation / steps),\n            markerRadius = necklaceRadius + 15,\n            x = radius + Math.sin(rad) * markerRadius,\n            y = radius - Math.cos(rad) * markerRadius;\n\n        necklaceCtx.beginPath();\n        necklaceCtx.moveTo(x, y + zeroMarkerRadius);\n        necklaceCtx.arc(x, y, zeroMarkerRadius, 0, doublePI, true);\n        necklaceCtx.stroke();\n    },\n\n\n    /**\n     * Update the marker that indicates if the pattern is rotated.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateRotatedMarker = function updateRotatedMarker(steps, rotation) {\n        if (rotation !== 0) {\n            var x = radius,\n                y = radius - necklaceRadius - 10;\n\n            necklaceCtx.beginPath();\n            necklaceCtx.moveTo(x, y);\n            necklaceCtx.lineTo(x, y - 10);\n            necklaceCtx.lineTo(x + 6, y - 7);\n            necklaceCtx.lineTo(x, y - 4);\n            necklaceCtx.stroke();\n        }\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName() {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCanvas.width, nameCanvas.height);\n        nameCtx.fillText(my.params.name.value, nameCanvas.width / 2, nameCanvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Redraw the pattern's static shapes canvas.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n        staticCtx.beginPath();\n\n        // necklace\n        staticCtx.drawImage(necklaceCanvas, 0, 0);\n\n        // center ring\n        staticCtx.moveTo(radius + centerRadius, radius);\n        staticCtx.arc(radius, radius, centerRadius, 0, doublePI, true);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(radius + selectRadius, radius);\n            staticCtx.arc(radius, radius, selectRadius, 0, doublePI, true);\n        }\n        staticCtx.stroke();\n    },\n\n\n    /**\n     * Add the pattern's static canvas to the main static canvas.\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - radius, my.positionY - radius);\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - radius, my.positionY + necklaceRadius + 4);\n    },\n\n\n    /**\n     * Draw the pattern's dynamic shapes on the main dymamic canvas\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToDynamicView = function addToDynamicView(mainDynamicCtx) {\n        // draw rotating pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotation);\n        mainDynamicCtx.drawImage(pointerCanvas, -pointerCanvasCenter, -pointerCanvas.height);\n        mainDynamicCtx.restore();\n\n        mainDynamicCtx.fillStyle = my.colorHigh;\n        mainDynamicCtx.strokeStyle = my.colorHigh;\n        mainDynamicCtx.beginPath();\n\n        // necklace dots\n        isNoteActive = false;\n        var n = dotAnimations.length,\n            largestDot = dotRadius,\n            hasDotAnimations = false,\n            dotState = void 0,\n            x = void 0,\n            y = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                dotState = dotAnimations[key];\n                x = my.positionX + dotState.positionX;\n                y = my.positionY - dotState.positionY;\n                mainDynamicCtx.moveTo(x + dotState.dotRadius, y);\n                mainDynamicCtx.arc(x, y, dotState.dotRadius, 0, doublePI, true);\n                largestDot = Math.max(largestDot, dotState.dotRadius);\n                isNoteActive = true;\n            }\n        }\n\n        // center dot\n        if (isNoteActive) {\n            var largestDotNormalised = (largestDot - dotRadius) / (dotActiveRadius - dotRadius);\n            centerDotRadius = largestDotNormalised * centerDotFullRadius;\n            mainDynamicCtx.moveTo(my.positionX + centerDotRadius, my.positionY);\n            mainDynamicCtx.arc(my.positionX, my.positionY, centerDotRadius, 0, doublePI, true);\n        }\n\n        mainDynamicCtx.fill();\n        mainDynamicCtx.stroke();\n    },\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {\n        // center dot\n        if (isNoteActive) {\n            mainDynamicCtx.clearRect(centerDotX, centerDotY, centerDotSize, centerDotSize);\n        }\n\n        // necklace dots\n        var rect = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                rect = dotAnimations[key].boundingBox;\n                mainDynamicCtx.clearRect(rect.xAbs, rect.yAbs, rect.height, rect.width);\n            }\n        }\n\n        // pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotationPrevious);\n        mainDynamicCtx.clearRect(-pointerCanvasCenter, -pointerCanvas.height, pointerCanvas.width, pointerCanvas.height);\n        mainDynamicCtx.restore();\n    },\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= necklaceRadius + dotRadius;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        staticCtx.strokeStyle = my.colorHigh;\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        pointerCtx.strokeStyle = my.colorHigh;\n        updateName();\n        updateNecklace();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while (len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n    return [];\n};\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n    return '/';\n};\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () {\n    return 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(5);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _euclid = __webpack_require__(11);\n\nvar _config = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Euclidean pattern animated necklace wheel drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = void 0,\n        staticCtx = void 0,\n        rotateCtx = void 0,\n        pointerCtx = void 0,\n        nameCtx = void 0,\n        duration = 0,\n        euclid = void 0,\n        status = true,\n        isSelected = false,\n        isNoteActive = false,\n        pointerRotation = void 0,\n        pointerRotationPrevious = 0,\n        centerDotCounter = 0,\n        centerDotNextStartTime = 0,\n        centerDotFullRadius = 10,\n        lineWidth = 2,\n        radius = 70,\n        centerRadius = 20,\n        selectRadius = 15,\n        innerRadius = 30,\n        outerRadius = 46,\n        dotRadius = 10,\n        locatorLength = 38,\n        zeroMarkerRadius = 2,\n        zeroMarkerY = radius - centerRadius - zeroMarkerRadius - 3,\n        pointerCanvasCenter = centerRadius,\n        locatorTop = radius - pointerCanvasCenter - locatorLength,\n        doublePI = Math.PI * 2,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = specs.canvasDirtyCallback;\n        initGraphics();\n        updateEuclid(specs.data.params.byId);\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        updateDuration(specs.data.params.byId);\n        redrawStaticCanvas();\n        redrawPointerCanvas();\n        redrawRotatingCanvas();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n\n            case e.detail.actions.CHANGE_PARAMETER:\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updateDuration(e.detail.state.processors.byId[my.id].params.byId);\n                        // fall through\n                        case 'pulses':\n                            updateEuclid(e.detail.state.processors.byId[my.id].params.byId);\n                            redrawRotatingCanvas();\n                            break;\n                        case 'rotation':\n                            canvasDirtyCallback();\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                            updateDuration(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                        case 'name':\n                            updateName(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                var processor = e.detail.state.processors.byId[my.id];\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        var canvas = document.createElement('canvas');\n        canvas.height = radius * 2;\n        canvas.width = radius * 2;\n        staticCtx = canvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for dots ring and polygon\n        canvas = document.createElement('canvas');\n        canvas.height = radius * 2;\n        canvas.width = radius * 2;\n        rotateCtx = canvas.getContext('2d');\n        rotateCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the pointer\n        canvas = document.createElement('canvas');\n        canvas.height = radius;\n        canvas.width = centerRadius * 2;\n        pointerCtx = canvas.getContext('2d');\n        pointerCtx.lineWidth = lineWidth;\n        pointerCtx.lineJoin = 'bevel';\n\n        // offscreen canvas for the name\n        canvas = document.createElement('canvas');\n        canvas.height = 40;\n        canvas.width = radius * 2;\n        nameCtx = canvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Calculate the pattern's duration in milliseconds.\n     */\n    updateDuration = function updateDuration(params) {\n        var rate = params.is_triplets.value ? params.rate.value * (2 / 3) : params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        duration = params.steps.value * stepDuration;\n    },\n        updateEuclid = function updateEuclid(params) {\n        euclid = (0, _euclid.getEuclidPattern)(params.steps.value, params.pulses.value);\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName(params) {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCtx.canvas.width, nameCtx.canvas.height);\n        nameCtx.fillText(params.name.value, nameCtx.canvas.width / 2, nameCtx.canvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Show the playback position within the pattern.\n     * Indicated by the pointer's rotation.\n     * @param  {Number} position Position within pattern in ticks.\n     */\n    updatePlaybackPosition = function updatePlaybackPosition(position) {\n        pointerRotationPrevious = pointerRotation;\n        pointerRotation = -doublePI * (position % duration / duration);\n    },\n\n\n    /**\n     * Redraw the pattern's static shapes canvas.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.clearRect(0, 0, staticCtx.canvas.width, staticCtx.canvas.height);\n        staticCtx.beginPath();\n\n        // center ring\n        staticCtx.moveTo(radius + centerRadius, radius);\n        staticCtx.arc(radius, radius, centerRadius, 0, doublePI);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(radius + selectRadius, radius);\n            staticCtx.arc(radius, radius, selectRadius, 0, doublePI);\n        }\n\n        staticCtx.stroke();\n    },\n\n\n    /**\n     * Redraw the location pointer and the status dot.\n     */\n    redrawPointerCanvas = function redrawPointerCanvas() {\n        var necklacePos = radius - (status ? outerRadius : innerRadius),\n            halfWayPos = necklacePos + (locatorTop - necklacePos) / 2,\n            statusWidth = status ? 15 : 6,\n            sides = status ? locatorTop : halfWayPos;\n\n        pointerCtx.clearRect(0, 0, pointerCtx.canvas.width, pointerCtx.canvas.height);\n        pointerCtx.beginPath();\n\n        // position locator\n        pointerCtx.moveTo(pointerCanvasCenter, radius - pointerCanvasCenter);\n        pointerCtx.lineTo(pointerCanvasCenter, locatorTop);\n\n        // status indicator\n        pointerCtx.lineTo(pointerCanvasCenter - statusWidth, sides);\n        pointerCtx.lineTo(pointerCanvasCenter, necklacePos);\n        pointerCtx.lineTo(pointerCanvasCenter + statusWidth, sides);\n        pointerCtx.lineTo(pointerCanvasCenter, locatorTop);\n\n        pointerCtx.stroke();\n    },\n\n\n    /**\n     * The rotating canvas shows the necklace shape.\n     */\n    redrawRotatingCanvas = function redrawRotatingCanvas() {\n        var arc = void 0,\n            x = void 0,\n            y = void 0;\n\n        rotateCtx.clearRect(0, 0, rotateCtx.canvas.width, rotateCtx.canvas.height);\n        rotateCtx.fillStyle = my.colorHigh;\n        rotateCtx.strokeStyle = my.colorHigh;\n        rotateCtx.beginPath();\n\n        for (var i = 0, n = euclid.length; i < n; i++) {\n            var stepRadius = euclid[i] ? outerRadius : innerRadius;\n            rotateCtx.arc(radius, radius, stepRadius, i / n * doublePI - Math.PI / 2, (i + 1) / n * doublePI - Math.PI / 2, false);\n        }\n        // for (let i = 0, n = euclid.length; i < n; i++) {\n        //     const stepRadius = euclid[i] ? outerRadius : innerRadius;\n        //     rotateCtx.arc(radius, radius, stepRadius, ((n - i) / n) * doublePI, ((n - i - 1) / n) * doublePI, true);\n        // }\n\n        rotateCtx.closePath();\n        rotateCtx.stroke();\n\n        // zero marker\n        rotateCtx.beginPath();\n        rotateCtx.moveTo(radius + zeroMarkerRadius, zeroMarkerY);\n        rotateCtx.arc(radius, zeroMarkerY, zeroMarkerRadius, 0, doublePI, true);\n        rotateCtx.fill();\n    },\n\n\n    /**\n     * Show circle if the my.processor is selected, else hide.\n     * @param {Boolean} isSelectedView True if selected.\n     */\n    setSelected = function setSelected(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw(position, processorEvents) {\n        updatePlaybackPosition(position);\n\n        // calculate status and redraw locator if needed\n        var currentStep = Math.floor(position % duration / duration * my.params.steps.value);\n        currentStep = (currentStep + my.params.rotation.value) % my.params.steps.value;\n        var currentStatus = euclid[currentStep];\n        if (currentStatus !== status) {\n            status = currentStatus;\n            redrawPointerCanvas();\n            canvasDirtyCallback();\n        }\n\n        // Show notes to happen as center dot animation.\n        if (processorEvents[my.id] && processorEvents[my.id].length) {\n            for (var i = 0, n = processorEvents[my.id].length; i < n; i++) {\n                var event = processorEvents[my.id][i];\n                centerDotNextStartTime = performance.now() + event.delayFromNowToNoteStart;\n                centerDotCounter = 1;\n            }\n        }\n    },\n\n\n    /**\n     * Add the pattern's static canvas to the main static canvas.\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToStaticView = function addToStaticView(mainStaticCtx) {\n        // draw static canvas\n        mainStaticCtx.drawImage(staticCtx.canvas, my.positionX - radius, my.positionY - radius);\n\n        // draw name canvas\n        mainStaticCtx.drawImage(nameCtx.canvas, my.positionX - radius, my.positionY + outerRadius + 4);\n\n        // draw pointer canvas\n        var patternRotation = my.params.rotation.value / my.params.steps.value * doublePI;\n        mainStaticCtx.save();\n        mainStaticCtx.translate(my.positionX, my.positionY);\n        mainStaticCtx.rotate(patternRotation);\n        mainStaticCtx.drawImage(pointerCtx.canvas, -pointerCanvasCenter, -pointerCtx.canvas.height);\n        mainStaticCtx.restore();\n    },\n\n\n    /**\n     * Draw the pattern's dynamic shapes on the main dymamic canvas\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToDynamicView = function addToDynamicView(mainDynamicCtx) {\n        // draw rotating canvas\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotation);\n        mainDynamicCtx.drawImage(rotateCtx.canvas, -radius, -radius);\n        mainDynamicCtx.restore();\n\n        // center dot\n        if (centerDotCounter >= 0 && centerDotNextStartTime < performance.now()) {\n            var centerDotRadius = centerDotFullRadius * centerDotCounter;\n            mainDynamicCtx.moveTo(my.positionX + centerDotRadius, my.positionY);\n            mainDynamicCtx.arc(my.positionX, my.positionY, centerDotRadius, 0, doublePI, true);\n            mainDynamicCtx.fill();\n            centerDotCounter -= .1;\n        }\n    },\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotationPrevious);\n        mainDynamicCtx.clearRect(-radius, -radius, rotateCtx.canvas.width, rotateCtx.canvas.height);\n        mainDynamicCtx.restore();\n    },\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y, canvasRect) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= centerRadius;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        staticCtx.strokeStyle = my.colorHigh;\n        staticCtx.fillStyle = my.colorHigh;\n        rotateCtx.strokeStyle = my.colorHigh;\n        pointerCtx.strokeStyle = my.colorHigh;\n        pointerCtx.fillStyle = my.colorHigh;\n\n        updateName(my.store.getState().processors.byId[my.id].params.byId);\n        redrawStaticCanvas();\n        redrawRotatingCanvas();\n        redrawPointerCanvas();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(5);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output object drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        isSelected = false,\n        lineWidth = 2,\n        width = 100,\n        height = 50,\n        radius = 10,\n        boxWidth = 80,\n        selectRadius = 15,\n        disconnectSize = 7,\n        doublePI = Math.PI * 2,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        initGraphics();\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        redrawStaticCanvas();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        var processor = e.detail.state.processors.byId[my.id];\n        switch (e.detail.action.type) {\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n\n            case e.detail.actions.UPDATE_MIDI_PORT:\n                redrawStaticCanvas();\n                break;\n\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'port':\n                            redrawStaticCanvas();\n                            break;\n                        case 'name':\n                            updateName();\n                            break;\n                    }\n                }\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = height;\n        staticCanvas.width = width;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = 200;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n    },\n        setSelected = function setSelected(isSelectedView, state) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas(state.processors.byId[my.id].enabled);\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw() {},\n\n\n    /**\n     * Redraw the graphic after a change.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.strokeStyle = my.colorHigh;\n\n        staticCtx.clearRect(0, 0, width, height);\n        staticCtx.save();\n        staticCtx.translate(width / 2, height / 2 - 8);\n        staticCtx.beginPath();\n\n        // box\n        staticCtx.rect(-boxWidth / 2, -radius, boxWidth, radius * 2);\n        // arrow\n        staticCtx.moveTo(-boxWidth / 2, radius);\n        staticCtx.lineTo(0, radius + 20);\n        staticCtx.lineTo(boxWidth / 2, radius);\n\n        // circle\n        staticCtx.moveTo(radius, 0);\n        staticCtx.arc(0, 0, radius, 0, Math.PI * 2, true);\n\n        // disconnected cross\n        if (my.params.port.value === 'none') {\n            staticCtx.moveTo(-disconnectSize, -disconnectSize);\n            staticCtx.lineTo(disconnectSize, disconnectSize);\n            staticCtx.moveTo(disconnectSize, -disconnectSize);\n            staticCtx.lineTo(-disconnectSize, disconnectSize);\n        }\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(selectRadius, 0);\n            staticCtx.arc(0, 0, selectRadius, 0, doublePI);\n        }\n\n        staticCtx.stroke();\n        staticCtx.restore();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName() {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCanvas.width, nameCanvas.height);\n        nameCtx.fillText(my.params.name.value, nameCanvas.width / 2, nameCanvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        canvasDirtyCallback();\n    },\n        addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - 50, my.positionY - 15);\n\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - nameCanvas.width / 2, my.positionY + 30);\n    },\n        addToDynamicView = function addToDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= 10;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        redrawStaticCanvas();\n        updateName();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvZ3JhcGhpYy5qcz84NzI2Il0sIm5hbWVzIjpbImNyZWF0ZUdyYXBoaWMiLCJzcGVjcyIsIm15IiwidGhhdCIsImNhbnZhc0RpcnR5Q2FsbGJhY2siLCJzdGF0aWNDYW52YXMiLCJzdGF0aWNDdHgiLCJuYW1lQ2FudmFzIiwibmFtZUN0eCIsImlzU2VsZWN0ZWQiLCJsaW5lV2lkdGgiLCJ3aWR0aCIsImhlaWdodCIsInJhZGl1cyIsImJveFdpZHRoIiwic2VsZWN0UmFkaXVzIiwiZGlzY29ubmVjdFNpemUiLCJkb3VibGVQSSIsIk1hdGgiLCJQSSIsImluaXRpYWxpc2UiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdG9yZSIsIlNUQVRFX0NIQU5HRSIsImhhbmRsZVN0YXRlQ2hhbmdlcyIsImluaXRHcmFwaGljcyIsInNldFRoZW1lIiwidGhlbWUiLCJ1cGRhdGVQb3NpdGlvbiIsImRhdGEiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJyZWRyYXdTdGF0aWNDYW52YXMiLCJ0ZXJtaW5hdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZSIsInByb2Nlc3NvciIsImRldGFpbCIsInN0YXRlIiwicHJvY2Vzc29ycyIsImJ5SWQiLCJpZCIsImFjdGlvbiIsInR5cGUiLCJhY3Rpb25zIiwiRFJBR19TRUxFQ1RFRF9QUk9DRVNTT1IiLCJEUkFHX0FMTF9QUk9DRVNTT1JTIiwiVVBEQVRFX01JRElfUE9SVCIsIkNIQU5HRV9QQVJBTUVURVIiLCJwcm9jZXNzb3JJRCIsInBhcmFtcyIsInBhcmFtS2V5IiwidXBkYXRlTmFtZSIsImNyZWF0ZUVsZW1lbnQiLCJnZXRDb250ZXh0IiwiZm9udCIsInRleHRBbGlnbiIsInNldFNlbGVjdGVkIiwiaXNTZWxlY3RlZFZpZXciLCJlbmFibGVkIiwiZHJhdyIsInN0cm9rZVN0eWxlIiwiY29sb3JIaWdoIiwiY2xlYXJSZWN0Iiwic2F2ZSIsInRyYW5zbGF0ZSIsImJlZ2luUGF0aCIsInJlY3QiLCJtb3ZlVG8iLCJsaW5lVG8iLCJhcmMiLCJwb3J0IiwidmFsdWUiLCJzdHJva2UiLCJyZXN0b3JlIiwiZmlsbFN0eWxlIiwiY29sb3JNaWQiLCJmaWxsVGV4dCIsIm5hbWUiLCJ4IiwieSIsImFkZFRvU3RhdGljVmlldyIsIm1haW5TdGF0aWNDdHgiLCJkcmF3SW1hZ2UiLCJhZGRUb0R5bmFtaWNWaWV3IiwibWFpbkR5bmFtaWNDdHgiLCJjbGVhckZyb21EeW5hbWljVmlldyIsImludGVyc2VjdHNXaXRoUG9pbnQiLCJkaXN0YW5jZSIsInNxcnQiLCJwb3ciLCJjb2xvckxvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFLZ0JBLGEsR0FBQUEsYTs7QUFMaEI7Ozs7OztBQUVBOzs7QUFHTyxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QkMsRUFBOUIsRUFBa0M7QUFDckMsUUFBSUMsYUFBSjtBQUFBLFFBQ0lDLHNCQUFzQkgsTUFBTUcsbUJBRGhDO0FBQUEsUUFFSUMscUJBRko7QUFBQSxRQUdJQyxrQkFISjtBQUFBLFFBSUlDLG1CQUpKO0FBQUEsUUFLSUMsZ0JBTEo7QUFBQSxRQU9JQyxhQUFhLEtBUGpCO0FBQUEsUUFTSUMsWUFBWSxDQVRoQjtBQUFBLFFBVUlDLFFBQVEsR0FWWjtBQUFBLFFBV0lDLFNBQVMsRUFYYjtBQUFBLFFBWUlDLFNBQVMsRUFaYjtBQUFBLFFBYUlDLFdBQVcsRUFiZjtBQUFBLFFBY0lDLGVBQWUsRUFkbkI7QUFBQSxRQWVJQyxpQkFBaUIsQ0FmckI7QUFBQSxRQWdCSUMsV0FBV0MsS0FBS0MsRUFBTCxHQUFVLENBaEJ6QjtBQUFBLFFBa0JJQyxhQUFhLFNBQWJBLFVBQWEsR0FBVztBQUNwQkMsaUJBQVNDLGdCQUFULENBQTBCcEIsR0FBR3FCLEtBQUgsQ0FBU0MsWUFBbkMsRUFBaURDLGtCQUFqRDtBQUNBQztBQUNBQyxpQkFBUzFCLE1BQU0yQixLQUFmO0FBQ0FDLHVCQUFlNUIsTUFBTTZCLElBQU4sQ0FBV0MsU0FB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U0FBS3dCLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsV0FBT3hCLElBQVA7QUFDSCIsImZpbGUiOiI0NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVDYW52YXNQcm9jZXNzb3JCYXNlVmlldyBmcm9tICcuLi8uLi92aWV3L2NhbnZhc3Byb2Nlc3NvcmJhc2UnO1xuXG4vKipcbiAqIE1JREkgb3V0cHV0IG9iamVjdCBkcmF3biBvbiBjYW52YXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHcmFwaGljKHNwZWNzLCBteSkge1xuICAgIGxldCB0aGF0LFxuICAgICAgICBjYW52YXNEaXJ0eUNhbGxiYWNrID0gc3BlY3MuY2FudmFzRGlydHlDYWxsYmFjayxcbiAgICAgICAgc3RhdGljQ2FudmFzLFxuICAgICAgICBzdGF0aWNDdHgsXG4gICAgICAgIG5hbWVDYW52YXMsXG4gICAgICAgIG5hbWVDdHgsXG5cbiAgICAgICAgaXNTZWxlY3RlZCA9IGZhbHNlLFxuXG4gICAgICAgIGxpbmVXaWR0aCA9IDIsXG4gICAgICAgIHdpZHRoID0gMTAwLFxuICAgICAgICBoZWlnaHQgPSA1MCxcbiAgICAgICAgcmFkaXVzID0gMTAsXG4gICAgICAgIGJveFdpZHRoID0gODAsXG4gICAgICAgIHNlbGVjdFJhZGl1cyA9IDE1LFxuICAgICAgICBkaXNjb25uZWN0U2l6ZSA9IDcsXG4gICAgICAgIGRvdWJsZVBJID0gTWF0aC5QSSAqIDIsXG4gICAgICAgIFxuICAgICAgICBpbml0aWFsaXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKG15LnN0b3JlLlNUQVRFX0NIQU5HRSwgaGFuZGxlU3RhdGVDaGFuZ2VzKTtcbiAgICAgICAgICAgIGluaXRHcmFwaGljcygpO1xuICAgICAgICAgICAgc2V0VGhlbWUoc3BlY3MudGhlbWUpO1xuICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24oc3BlY3MuZGF0YS5wb3NpdGlvblgsIHNwZWNzLmRhdGEucG9zaXRpb25ZKTtcbiAgICAgICAgICAgIHJlZHJhd1N0YXRpY0NhbnZhcygpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCBiZWZvcmUgdGhpcyB2aWV3IGlzIGRlbGV0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0ZXJtaW5hdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobXkuc3RvcmUuU1RBVEVfQ0hBTkdFLCBoYW5kbGVTdGF0ZUNoYW5nZXMpO1xuICAgICAgICAgICAgY2FudmFzRGlydHlDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFuZGxlU3RhdGVDaGFuZ2VzID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc29yID0gZS5kZXRhaWwuc3RhdGUucHJvY2Vzc29ycy5ieUlkW215LmlkXTtcbiAgICAgICAgICAgIHN3aXRjaCAoZS5kZXRhaWwuYWN0aW9uLnR5cGUpIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5EUkFHX1NFTEVDVEVEX1BST0NFU1NPUjpcbiAgICAgICAgICAgICAgICBjYXNlIGUuZGV0YWlsLmFjdGlvbnMuRFJBR19BTExfUFJPQ0VTU09SUzpcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24ocHJvY2Vzc29yLnBvc2l0aW9uWCwgcHJvY2Vzc29yLnBvc2l0aW9uWSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBlLmRldGFpbC5hY3Rpb25zLlVQREFURV9NSURJX1BPUlQ6XG4gICAgICAgICAgICAgICAgICAgIHJlZHJhd1N0YXRpY0NhbnZhcygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYXNlIGUuZGV0YWlsLmFjdGlvbnMuQ0hBTkdFX1BBUkFNRVRFUjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGV0YWlsLmFjdGlvbi5wcm9jZXNzb3JJRCA9PT0gbXkuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15LnBhcmFtcyA9IGUuZGV0YWlsLnN0YXRlLnByb2Nlc3NvcnMuYnlJZFtteS5pZF0ucGFyYW1zLmJ5SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuZGV0YWlsLmFjdGlvbi5wYXJhbUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BvcnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRyYXdTdGF0aWNDYW52YXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZU5hbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdEdyYXBoaWNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBvZmZzY3JlZW4gY2FudmFzIGZvciBzdGF0aWMgc2hhcGVzXG4gICAgICAgICAgICBzdGF0aWNDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIHN0YXRpY0NhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICBzdGF0aWNDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHN0YXRpY0N0eCA9IHN0YXRpY0NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgc3RhdGljQ3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcblxuICAgICAgICAgICAgLy8gb2Zmc2NyZWVuIGNhbnZhcyBmb3IgdGhlIG5hbWVcbiAgICAgICAgICAgIG5hbWVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIG5hbWVDYW52YXMuaGVpZ2h0ID0gNDA7XG4gICAgICAgICAgICBuYW1lQ2FudmFzLndpZHRoID0gMjAwO1xuICAgICAgICAgICAgbmFtZUN0eCA9IG5hbWVDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIG5hbWVDdHguZm9udCA9ICcxNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICAgICAgbmFtZUN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRTZWxlY3RlZCA9IGZ1bmN0aW9uKGlzU2VsZWN0ZWRWaWV3LCBzdGF0ZSkge1xuICAgICAgICAgICAgaXNTZWxlY3RlZCA9IGlzU2VsZWN0ZWRWaWV3O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWRyYXdTdGF0aWNDYW52YXMgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgY2FudmFzRGlydHlDYWxsYmFjayA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmVkcmF3U3RhdGljQ2FudmFzKHN0YXRlLnByb2Nlc3NvcnMuYnlJZFtteS5pZF0uZW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgY2FudmFzRGlydHlDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRyYXcgPSBmdW5jdGlvbigpIHt9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWRyYXcgdGhlIGdyYXBoaWMgYWZ0ZXIgYSBjaGFuZ2UuXG4gICAgICAgICAqL1xuICAgICAgICByZWRyYXdTdGF0aWNDYW52YXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN0YXRpY0N0eC5zdHJva2VTdHlsZSA9IG15LmNvbG9ySGlnaDtcblxuICAgICAgICAgICAgc3RhdGljQ3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgIHN0YXRpY0N0eC5zYXZlKCk7XG4gICAgICAgICAgICBzdGF0aWNDdHgudHJhbnNsYXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiAtIDgpO1xuICAgICAgICAgICAgc3RhdGljQ3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgICAgICAvLyBib3hcbiAgICAgICAgICAgIHN0YXRpY0N0eC5yZWN0KC1ib3hXaWR0aCAvIDIsIC1yYWRpdXMsIGJveFdpZHRoLCByYWRpdXMgKiAyKTtcbiAgICAgICAgICAgIC8vIGFycm93XG4gICAgICAgICAgICBzdGF0aWNDdHgubW92ZVRvKC1ib3hXaWR0aCAvIDIsIHJhZGl1cyk7XG4gICAgICAgICAgICBzdGF0aWNDdHgubGluZVRvKDAsIHJhZGl1cyArIDIwKVxuICAgICAgICAgICAgc3RhdGljQ3R4LmxpbmVUbyhib3hXaWR0aCAvIDIsIHJhZGl1cyk7XG5cbiAgICAgICAgICAgIC8vIGNpcmNsZVxuICAgICAgICAgICAgc3RhdGljQ3R4Lm1vdmVUbyhyYWRpdXMsIDApO1xuICAgICAgICAgICAgc3RhdGljQ3R4LmFyYygwLCAwLCByYWRpdXMsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gZGlzY29ubmVjdGVkIGNyb3NzXG4gICAgICAgICAgICBpZiAobXkucGFyYW1zLnBvcnQudmFsdWUgPT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIHN0YXRpY0N0eC5tb3ZlVG8oLWRpc2Nvbm5lY3RTaXplLCAtZGlzY29ubmVjdFNpemUpO1xuICAgICAgICAgICAgICAgIHN0YXRpY0N0eC5saW5lVG8oZGlzY29ubmVjdFNpemUsIGRpc2Nvbm5lY3RTaXplKTtcbiAgICAgICAgICAgICAgICBzdGF0aWNDdHgubW92ZVRvKGRpc2Nvbm5lY3RTaXplLCAtZGlzY29ubmVjdFNpemUpO1xuICAgICAgICAgICAgICAgIHN0YXRpY0N0eC5saW5lVG8oLWRpc2Nvbm5lY3RTaXplLCBkaXNjb25uZWN0U2l6ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNlbGVjdCBjaXJjbGVcbiAgICAgICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ3R4Lm1vdmVUbyhzZWxlY3RSYWRpdXMsIDApO1xuICAgICAgICAgICAgICAgIHN0YXRpY0N0eC5hcmMoMCwgMCwgc2VsZWN0UmFkaXVzLCAwLCBkb3VibGVQSSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXRpY0N0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIHN0YXRpY0N0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICBjYW52YXNEaXJ0eUNhbGxiYWNrKCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlIHRoZSBwYXR0ZXJuJ3MgbmFtZS5cbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZU5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5hbWVDdHguZmlsbFN0eWxlID0gbXkuY29sb3JNaWQ7XG4gICAgICAgICAgICBuYW1lQ3R4LmNsZWFyUmVjdCgwLCAwLCBuYW1lQ2FudmFzLndpZHRoLCBuYW1lQ2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICBuYW1lQ3R4LmZpbGxUZXh0KG15LnBhcmFtcy5uYW1lLnZhbHVlLCBuYW1lQ2FudmFzLndpZHRoIC8gMiwgbmFtZUNhbnZhcy5oZWlnaHQgLyAyKTtcbiAgICAgICAgICAgIGNhbnZhc0RpcnR5Q2FsbGJhY2soKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgcGF0dGVybidzIHBvc2l0aW9uIG9uIHRoZSAyRCBjYW52YXMuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gdmFsdWUgTmV3IDJEIHBvc2l0aW9uIGFzIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICAgICAgbXkucG9zaXRpb25YID0geDtcbiAgICAgICAgICAgIG15LnBvc2l0aW9uWSA9IHk7XG4gICAgICAgICAgICBjYW52YXNEaXJ0eUNhbGxiYWNrKCk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBhZGRUb1N0YXRpY1ZpZXcgPSBmdW5jdGlvbihtYWluU3RhdGljQ3R4KSB7XG4gICAgICAgICAgICBtYWluU3RhdGljQ3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICBzdGF0aWNDYW52YXMsXG4gICAgICAgICAgICAgICAgbXkucG9zaXRpb25YIC0gNTAsXG4gICAgICAgICAgICAgICAgbXkucG9zaXRpb25ZIC0gMTUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbWFpblN0YXRpY0N0eC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgbmFtZUNhbnZhcyxcbiAgICAgICAgICAgICAgICBteS5wb3NpdGlvblggLSAobmFtZUNhbnZhcy53aWR0aCAvIDIpLFxuICAgICAgICAgICAgICAgIG15LnBvc2l0aW9uWSArIDMwKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGFkZFRvRHluYW1pY1ZpZXcgPSBmdW5jdGlvbihtYWluRHluYW1pY0N0eCkge1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsZWFyIGFsbCB0aGlzIHBhdHRlcm4ncyBlbGVtZW50cyBmcm9tIHRoZSBkeW5hbWljIGNvbnRleHQuXG4gICAgICAgICAqIFRoZXNlIGFyZSB0aGUgY2VudGVyIGRvdCwgbmVja2xhY2UgZG90cyBhbmQgcG9pbnRlci5cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBtYWluRHluYW1pY0N0eCAyRCBjYW52YXMgY29udGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyRnJvbUR5bmFtaWNWaWV3ID0gZnVuY3Rpb24obWFpbkR5bmFtaWNDdHgpIHtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXN0IGlmIGEgY29vcmRpbmF0ZSBpbnRlcnNlY3RzIHdpdGggdGhlIGdyYXBoaWMncyBoaXQgYXJlYS5cbiAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSB4IEhvcml6b250YWwgY29vcmRpbmF0ZS5cbiAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSB5IFZlcnRpY2FsIGNvb3JkaW5hdGUuXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHBvaW50IGludGVyc2VjdHMuIFxuICAgICAgICAgKi9cbiAgICAgICAgaW50ZXJzZWN0c1dpdGhQb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyh4IC0gbXkucG9zaXRpb25YLCAyKSArIE1hdGgucG93KHkgLSBteS5wb3NpdGlvblksIDIpKTtcbiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZSA8PSAxMDtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHRoZW1lIGNvbG91cnMgb2YgdGhlIHByb2Nlc3NvciB2aWV3LlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdGhlbWUgVGhlbWUgc2V0dGluZ3Mgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0VGhlbWUgPSBmdW5jdGlvbih0aGVtZSkge1xuICAgICAgICAgICAgbXkuY29sb3JIaWdoID0gdGhlbWUuY29sb3JIaWdoO1xuICAgICAgICAgICAgbXkuY29sb3JNaWQgPSB0aGVtZS5jb2xvck1pZDtcbiAgICAgICAgICAgIG15LmNvbG9yTG93ID0gdGhlbWUuY29sb3JMb3c7XG4gICAgICAgICAgICByZWRyYXdTdGF0aWNDYW52YXMoKTtcbiAgICAgICAgICAgIHVwZGF0ZU5hbWUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlQ2FudmFzUHJvY2Vzc29yQmFzZVZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0aWFsaXNlKCk7XG4gICAgXG4gICAgdGhhdC50ZXJtaW5hdGUgPSB0ZXJtaW5hdGU7XG4gICAgdGhhdC5zZXRTZWxlY3RlZCA9IHNldFNlbGVjdGVkO1xuICAgIHRoYXQuZHJhdyA9IGRyYXc7XG4gICAgdGhhdC5hZGRUb1N0YXRpY1ZpZXcgPSBhZGRUb1N0YXRpY1ZpZXc7XG4gICAgdGhhdC5hZGRUb0R5bmFtaWNWaWV3ID0gYWRkVG9EeW5hbWljVmlldztcbiAgICB0aGF0LmNsZWFyRnJvbUR5bmFtaWNWaWV3ID0gY2xlYXJGcm9tRHluYW1pY1ZpZXc7XG4gICAgdGhhdC5pbnRlcnNlY3RzV2l0aFBvaW50ID0gaW50ZXJzZWN0c1dpdGhQb2ludDtcbiAgICB0aGF0LnNldFRoZW1lID0gc2V0VGhlbWU7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9vdXRwdXQvZ3JhcGhpYy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasConnectionsView;\n\nvar _selectors = __webpack_require__(1);\n\n/**\n * Canvas processor connector input and output points,\n * cables between the processor connectors,\n * Delete circles halfway the cables.\n * \n * OFFLINE CANVAS\n * All connection lines are drawn on the offline canvas,\n * This happens when processors are created, deleted or moved,\n * or when Connect Mode is entered or exited.\n * \n * The offline context is drawn on the static canvas.\n * It's the first thing that's drawn on the static canvas,\n * so that the connection lines appear behind the processors.\n * \n * CONNECT CANVAS\n * All input and output connector circles are drawn on the connect canvas.\n * The currently dragged cable is also drawn on the canvas.\n * \n * The connect canvas appears in front of the processors.\n */\nfunction createCanvasConnectionsView(specs, my) {\n    var that,\n        store = specs.store,\n        rootEl,\n        connectorsCanvas,\n        connectorsCtx,\n        cablesCanvas,\n        cablesCtx,\n        activeCableCanvas,\n        activeCableCtx,\n        connectorCanvas,\n        connectorCtx,\n        cableData = {\n        byId: {},\n        allIds: []\n    },\n        cableHandleRadius = 10,\n        cableHandleCross = 4,\n        connectorRadius = 12,\n        sourceProcessorID,\n        sourceConnectorID,\n        dragData = {\n        isDragging: false,\n        startPoint: { x: 0, y: 0 },\n        endPoint: { x: 0, y: 0 },\n        lineWidth: 1,\n        lineWidthActive: 2\n    },\n        init = function init() {\n        rootEl = document.querySelector('.canvas-container');\n        connectorsCanvas = document.querySelector('.canvas-connect');\n        connectorsCtx = connectorsCanvas.getContext('2d');\n        cablesCanvas = document.createElement('canvas');\n        cablesCtx = cablesCanvas.getContext('2d');\n        activeCableCanvas = document.createElement('canvas');\n        activeCableCtx = activeCableCanvas.getContext('2d');\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.TOGGLE_CONNECT_MODE:\n                    toggleConnectMode(e.detail.state.connectModeActive);\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                case e.detail.actions.DELETE_PROCESSOR:\n                case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n                case e.detail.actions.DRAG_ALL_PROCESSORS:\n                case e.detail.actions.CONNECT_PROCESSORS:\n                case e.detail.actions.DISCONNECT_PROCESSORS:\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n\n                case e.detail.actions.CREATE_PROJECT:\n                case e.detail.actions.SET_THEME:\n                    createConnectorGraphic();\n                    toggleConnectMode(e.detail.state.connectModeActive);\n                    drawConnectCanvas(e.detail.state);\n                    drawCablesCanvas(e.detail.state);\n                    break;\n            }\n        });\n    },\n        resizeConnections = function resizeConnections() {\n        connectorsCanvas.width = rootEl.clientWidth;\n        connectorsCanvas.height = rootEl.clientHeight;\n        cablesCanvas.width = rootEl.clientWidth;\n        cablesCanvas.height = rootEl.clientHeight;\n        activeCableCanvas.width = rootEl.clientWidth;\n        activeCableCanvas.height = rootEl.clientHeight;\n\n        var state = store.getState();\n        drawConnectCanvas(state);\n        drawCablesCanvas(state);\n    },\n\n\n    /**\n     * Create the connector canvas once and use it for all \n     * processor input and output connectors.\n     */\n    createConnectorGraphic = function createConnectorGraphic() {\n        var lineWidth = 2,\n            size = (connectorRadius + lineWidth) * 2,\n            themeColors = (0, _selectors.getThemeColors)();\n\n        connectorCanvas = document.createElement('canvas');\n        connectorCanvas.width = size;\n        connectorCanvas.height = size;\n\n        connectorCtx = connectorCanvas.getContext('2d');\n        connectorCtx.lineWidth = lineWidth;\n        connectorCtx.strokeStyle = themeColors.colorHigh;\n        connectorCtx.setLineDash([4, 4]);\n\n        connectorCtx.save();\n        connectorCtx.translate(size / 2, size / 2);\n        connectorCtx.arc(0, 0, size / 2, 0, Math.PI * 2, true);\n        connectorCtx.stroke();\n        connectorCtx.restore();\n    },\n\n\n    /**\n     * Enter or leave application connect mode.\n     * @param {Boolean} isEnabled True to enable connect mode.\n     */\n    toggleConnectMode = function toggleConnectMode(isEnabled) {\n        my.isConnectMode = isEnabled;\n\n        // show the canvas\n        connectorsCanvas.dataset.show = isEnabled;\n        my.markDirty();\n    },\n        dragStartConnection = function dragStartConnection(startX, startY, x, y) {\n        dragData.isDragging = true;\n        dragData.startPoint = { x: startX, y: startY };\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragMoveConnection = function dragMoveConnection(x, y) {\n        dragData.endPoint = { x: x, y: y };\n        drawActiveCableCanvas();\n    },\n        dragEndConnection = function dragEndConnection() {\n        dragData.isDragging = false;\n        drawActiveCableCanvas();\n    },\n        intersectsConnector = function intersectsConnector(x, y, isInput) {\n        var isIntersect = false,\n            isFound = false;\n        store.getState().processors.allIds.forEach(function (id) {\n            var processor = store.getState().processors.byId[id];\n            var connectorData = processor[isInput ? 'inputs' : 'outputs'];\n            connectorData.allIds.forEach(function (id) {\n                if (!isFound) {\n                    var connectorX = processor.positionX + connectorData.byId[id].x,\n                        connectorY = processor.positionY + connectorData.byId[id].y,\n                        distance = Math.sqrt(Math.pow(x - connectorX, 2) + Math.pow(y - connectorY, 2));\n                    isIntersect = distance <= connectorRadius;\n                    if (isIntersect) {\n                        isFound = true;\n                        if (isInput) {\n                            store.dispatch(store.getActions().connectProcessors({\n                                sourceProcessorID: sourceProcessorID,\n                                sourceConnectorID: sourceConnectorID,\n                                destinationProcessorID: processor.id,\n                                destinationConnectorID: id\n                            }));\n                            sourceProcessorID = null;\n                        } else {\n                            sourceProcessorID = processor.id;\n                            sourceConnectorID = id;\n                            dragStartConnection(connectorX, connectorY, x, y);\n                        }\n                    }\n                }\n            });\n        });\n        return isIntersect;\n    },\n        intersectsCableHandle = function intersectsCableHandle(x, y) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = cableData.allIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var id = _step.value;\n\n                var data = cableData.byId[id],\n                    distance = Math.sqrt(Math.pow(x - data.handleX, 2) + Math.pow(y - data.handleY, 2));\n                if (distance <= cableHandleRadius) {\n                    return id;\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        ;\n        return null;\n    },\n\n\n    /**\n     * All connection lines are drawn on the offline canvas,\n     * This happens when processors are created, deleted or moved,\n     * or when Connect Mode is entered or exited.\n     */\n    drawCablesCanvas = function drawCablesCanvas(state) {\n        var themeColors = (0, _selectors.getThemeColors)();\n\n        cableData.byId = {};\n        cableData.allIds = [];\n        cablesCtx.clearRect(0, 0, cablesCanvas.width, cablesCanvas.height);\n\n        state.connections.allIds.forEach(function (connectionID) {\n            var connection = state.connections.byId[connectionID];\n            var sourceProcessor = state.processors.byId[connection.sourceProcessorID],\n                destinationProcessor = state.processors.byId[connection.destinationProcessorID];\n\n            if (sourceProcessor && destinationProcessor) {\n                var sourceConnector = sourceProcessor.outputs.byId[connection.sourceConnectorID],\n                    destinationConnector = destinationProcessor.inputs.byId[connection.destinationConnectorID];\n                var handlePosition = drawCable(cablesCtx, {\n                    x: sourceProcessor.positionX + sourceConnector.x,\n                    y: sourceProcessor.positionY + sourceConnector.y\n                }, {\n                    x: destinationProcessor.positionX + destinationConnector.x,\n                    y: destinationProcessor.positionY + destinationConnector.y\n                }, (0, _selectors.getThemeColors)().colorMid, (0, _selectors.getThemeColors)().colorHigh, 1);\n\n                cableData.byId[connectionID] = {\n                    handleX: handlePosition.x,\n                    handleY: handlePosition.y\n                };\n                cableData.allIds.push(connectionID);\n            }\n        });\n    },\n\n\n    /**\n     * Draw connector circles and currently dragged line on connectorsCanvas.\n     */\n    drawConnectCanvas = function drawConnectCanvas(state) {\n        connectorsCtx.clearRect(0, 0, connectorsCanvas.width, connectorsCanvas.height);\n\n        if (state.connectModeActive) {\n            state.processors.allIds.forEach(function (id) {\n                var processor = state.processors.byId[id];\n                processor.inputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.inputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.inputs.byId[id].y - connectorCanvas.height / 2);\n                });\n                processor.outputs.allIds.forEach(function (id) {\n                    connectorsCtx.drawImage(connectorCanvas, processor.positionX + processor.outputs.byId[id].x - connectorCanvas.width / 2, processor.positionY + processor.outputs.byId[id].y - connectorCanvas.height / 2);\n                });\n            });\n            my.markDirty();\n        }\n    },\n        drawActiveCableCanvas = function drawActiveCableCanvas() {\n        activeCableCtx.clearRect(0, 0, activeCableCanvas.width, activeCableCanvas.height);\n        if (dragData.isDragging) {\n            drawCable(activeCableCtx, dragData.startPoint, dragData.endPoint, (0, _selectors.getThemeColors)().colorHigh, (0, _selectors.getThemeColors)().colorHigh, 2);\n        }\n        my.markDirty();\n    },\n\n\n    /**\n     * Draw a processor connection cable.\n     * @param  {Object} context Canvas context.\n     * @param  {Object} startPoint {x, y} start coordinate.\n     * @param  {Object} endPoint   {x, y} end coordinate.\n     * @param  {String} cableStrokeColor Hex color for the cable.\n     * @param  {String} btnStrokeColor Hex color for the remove button halfway the cable.\n     * @param  {Number} cableWidth Cable line width.\n     */\n    drawCable = function drawCable(context, startPoint, endPoint, cableStrokeColor, btnStrokeColor, cableWidth) {\n        // line\n        var distance = Math.sqrt(Math.pow(startPoint.x - endPoint.x, 2) + Math.pow(startPoint.y - endPoint.y, 2)),\n            tension = distance / 2,\n            cp1x = startPoint.x,\n            cp1y = startPoint.y + tension,\n            cp2x = endPoint.x,\n            cp2y = endPoint.y + tension;\n\n        context.strokeStyle = cableStrokeColor;\n        context.lineWidth = cableWidth;\n        context.beginPath();\n        context.moveTo(startPoint.x, startPoint.y);\n        context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y);\n\n        // endpoint\n        var radius = 5;\n        context.moveTo(endPoint.x + radius, endPoint.y);\n        context.arc(endPoint.x, endPoint.y, radius, 0, Math.PI * 2, true);\n        context.stroke();\n\n        return drawCableHandle(context, startPoint.x, startPoint.y, cp1x, cp1y, cp2x, cp2y, endPoint.x, endPoint.y, btnStrokeColor);\n    },\n\n\n    /**\n     * Draw select button halfway the bezier curved cable.\n     * @see https://stackoverflow.com/questions/15397596/find-all-the-points-of-a-cubic-bezier-curve-in-javascript\n     * @param  {Object} context The canvas context to draw on.\n     * @param  {[type]} ax [description]\n     * @param  {[type]} ay [description]\n     * @param  {[type]} bx [description]\n     * @param  {[type]} by [description]\n     * @param  {[type]} cx [description]\n     * @param  {[type]} cy [description]\n     * @param  {[type]} dx [description]\n     * @param  {[type]} dy [description]\n     * @param  {String} btnStrokeColor Hex color for the remove button halfway the cable.\n     * @return {Object}    Canvas x, y coordinate.\n     */\n    drawCableHandle = function drawCableHandle(context, ax, ay, bx, by, cx, cy, dx, dy, btnStrokeColor) {\n        var t = 0.5,\n            // halfway the cable\n        b0t = Math.pow(1 - t, 3),\n            b1t = 3 * t * Math.pow(1 - t, 2),\n            b2t = 3 * Math.pow(t, 2) * (1 - t),\n            b3t = Math.pow(t, 3),\n            pxt = b0t * ax + b1t * bx + b2t * cx + b3t * dx,\n            pyt = b0t * ay + b1t * by + b2t * cy + b3t * dy;\n\n        if (my.isConnectMode) {\n            context.strokeStyle = btnStrokeColor;\n            context.lineWidth = 2;\n            context.beginPath();\n            context.moveTo(pxt + cableHandleRadius, pyt);\n            // circle\n            context.arc(pxt, pyt, cableHandleRadius, 0, Math.PI * 2, true);\n            // cross\n            context.moveTo(pxt - cableHandleCross, pyt - cableHandleCross);\n            context.lineTo(pxt + cableHandleCross, pyt + cableHandleCross);\n            context.moveTo(pxt + cableHandleCross, pyt - cableHandleCross);\n            context.lineTo(pxt - cableHandleCross, pyt + cableHandleCross);\n            context.stroke();\n        }\n\n        return { x: pxt, y: pyt };\n    },\n        addConnectionsToCanvas = function addConnectionsToCanvas(ctx) {\n        ctx.drawImage(cablesCanvas, 0, 0);\n        if (my.isConnectMode) {\n            ctx.drawImage(connectorsCanvas, 0, 0);\n            ctx.drawImage(activeCableCanvas, 0, 0);\n        }\n    };\n\n    my = my || {};\n    my.isConnectMode = false, my.resizeConnections = resizeConnections;\n    my.dragMoveConnection = dragMoveConnection;\n    my.dragEndConnection = dragEndConnection;\n    my.intersectsConnector = intersectsConnector;\n    my.intersectsCableHandle = intersectsCableHandle;\n    my.addConnectionsToCanvas = addConnectionsToCanvas;\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createDialog;\nexports.showDialog = showDialog;\n\n/**\n * Dialog overlay.\n */\n\nvar dialogEl = void 0,\n    headerEl = void 0,\n    bodyEl = void 0,\n    resolveBtnEl = void 0,\n    rejectBtnEl = void 0,\n    resolveBtnCallback = void 0,\n    rejectBtnCallback = void 0;\n\nfunction createDialog(specs, my) {\n    var that = void 0,\n        init = function init() {\n        dialogEl = document.querySelector('.dialog');\n        headerEl = dialogEl.querySelector('.dialog__header .header__label');\n        bodyEl = dialogEl.querySelector('.dialog__body');\n        resolveBtnEl = dialogEl.querySelector('.dialog__resolve');\n        rejectBtnEl = dialogEl.querySelector('.dialog__reject');\n        resolveBtnEl.addEventListener('click', function (e) {\n            dialogEl.dataset.show = false;\n            resolveBtnCallback && resolveBtnCallback();\n        });\n        rejectBtnEl.addEventListener('click', function (e) {\n            dialogEl.dataset.show = false;\n            rejectBtnCallback && rejectBtnCallback();\n        });\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}\n\nfunction showDialog() {\n    var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var resolve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var reject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var resolveCb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var rejectCb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    dialogEl.dataset.show = true;\n    headerEl.innerHTML = header;\n    bodyEl.innerHTML = body;\n    resolveBtnEl.innerHTML = resolve;\n    rejectBtnEl.innerHTML = reject;\n    resolveBtnCallback = resolveCb;\n    rejectBtnCallback = rejectCb;\n    resolveBtnEl.style.display = resolve != null ? 'block' : 'none';\n    rejectBtnEl.style.display = reject != null ? 'block' : 'none';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9kaWFsb2cuanM/OGY2YiJdLCJuYW1lcyI6WyJjcmVhdGVEaWFsb2ciLCJzaG93RGlhbG9nIiwiZGlhbG9nRWwiLCJoZWFkZXJFbCIsImJvZHlFbCIsInJlc29sdmVCdG5FbCIsInJlamVjdEJ0bkVsIiwicmVzb2x2ZUJ0bkNhbGxiYWNrIiwicmVqZWN0QnRuQ2FsbGJhY2siLCJzcGVjcyIsIm15IiwidGhhdCIsImluaXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZGF0YXNldCIsInNob3ciLCJoZWFkZXIiLCJib2R5IiwicmVzb2x2ZSIsInJlamVjdCIsInJlc29sdmVDYiIsInJlamVjdENiIiwiaW5uZXJIVE1MIiwic3R5bGUiLCJkaXNwbGF5Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFhd0JBLFk7UUEwQlJDLFUsR0FBQUEsVTs7QUF0Q2hCOzs7O0FBSUEsSUFBSUMsaUJBQUo7QUFBQSxJQUNJQyxpQkFESjtBQUFBLElBRUlDLGVBRko7QUFBQSxJQUdJQyxxQkFISjtBQUFBLElBSUlDLG9CQUpKO0FBQUEsSUFLSUMsMkJBTEo7QUFBQSxJQU1JQywwQkFOSjs7QUFRZSxTQUFTUixZQUFULENBQXNCUyxLQUF0QixFQUE2QkMsRUFBN0IsRUFBaUM7QUFDNUMsUUFBSUMsYUFBSjtBQUFBLFFBRUlDLE9BQU8sU0FBUEEsSUFBTyxHQUFXO0FBQ2RWLG1CQUFXVyxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQVg7QUFDQVgsbUJBQVdELFNBQVNZLGFBQVQsQ0FBdUIsZ0NBQXZCLENBQVg7QUFDQVYsaUJBQVNGLFNBQVNZLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBVDtBQUNBVCx1QkFBZUgsU0FBU1ksYUFBVCxDQUF1QixrQkFBdkIsQ0FBZjtBQUNBUixzQkFBY0osU0FBU1ksYUFBVCxDQUF1QixpQkFBdkIsQ0FBZDtBQUNBVCxxQkFBYVUsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsYUFBSztBQUN4Q2IscUJBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLEtBQXhCO0FBQ0FWLGtDQUFzQkEsb0JBQXRCO0FBQ0gsU0FIRDtBQUlBRCxvQkFBWVMsZ0JBQVosQ0FBNkIsT0FBN0IsRUFBc0MsYUFBSztBQUN2Q2IscUJBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLEtBQXhCO0FBQ0FULGlDQUFxQkEsbUJBQXJCO0FBQ0gsU0FIRDtBQUlILEtBaEJMOztBQWtCQUcsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBQzs7QUFFQSxXQUFPRCxJQUFQO0FBQ0g7O0FBRU0sU0FBU1YsVUFBVCxHQUE4RztBQUFBLFFBQTFGaUIsTUFBMEYsdUVBQWpGLEVBQWlGO0FBQUEsUUFBN0VDLElBQTZFLHVFQUF0RSxFQUFzRTtBQUFBLFFBQWxFQyxPQUFrRSx1RUFBeEQsSUFBd0Q7QUFBQSxRQUFsREMsTUFBa0QsdUVBQXpDLElBQXlDO0FBQUEsUUFBbkNDLFNBQW1DLHVFQUF2QixJQUF1QjtBQUFBLFFBQWpCQyxRQUFpQix1RUFBTixJQUFNOztBQUNqSHJCLGFBQVNjLE9BQVQsQ0FBaUJDLElBQWpCLEdBQXdCLElBQXhCO0FBQ0FkLGFBQVNxQixTQUFULEdBQXFCTixNQUFyQjtBQUNBZCxXQUFPb0IsU0FBUCxHQUFtQkwsSUFBbkI7QUFDQWQsaUJBQWFtQixTQUFiLEdBQXlCSixPQUF6QjtBQUNBZCxnQkFBWWtCLFNBQVosR0FBd0JILE1BQXhCO0FBQ0FkLHlCQUFxQmUsU0FBckI7QUFDQWQsd0JBQW9CZSxRQUFwQjtBQUNBbEIsaUJBQWFvQixLQUFiLENBQW1CQyxPQUFuQixHQUE2Qk4sV0FBVyxJQUFYLEdBQWtCLE9BQWxCLEdBQTRCLE1BQXpEO0FBQ0FkLGdCQUFZbUIsS0FBWixDQUFrQkMsT0FBbEIsR0FBNEJMLFVBQVUsSUFBVixHQUFpQixPQUFqQixHQUEyQixNQUF2RDtBQUNIIiwiZmlsZSI6IjQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIERpYWxvZyBvdmVybGF5LlxuICovXG5cbmxldCBkaWFsb2dFbCxcbiAgICBoZWFkZXJFbCxcbiAgICBib2R5RWwsXG4gICAgcmVzb2x2ZUJ0bkVsLFxuICAgIHJlamVjdEJ0bkVsLFxuICAgIHJlc29sdmVCdG5DYWxsYmFjayxcbiAgICByZWplY3RCdG5DYWxsYmFjaztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlRGlhbG9nKHNwZWNzLCBteSkge1xuICAgIGxldCB0aGF0LFxuXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRpYWxvZ0VsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRpYWxvZycpO1xuICAgICAgICAgICAgaGVhZGVyRWwgPSBkaWFsb2dFbC5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nX19oZWFkZXIgLmhlYWRlcl9fbGFiZWwnKTtcbiAgICAgICAgICAgIGJvZHlFbCA9IGRpYWxvZ0VsLnF1ZXJ5U2VsZWN0b3IoJy5kaWFsb2dfX2JvZHknKTtcbiAgICAgICAgICAgIHJlc29sdmVCdG5FbCA9IGRpYWxvZ0VsLnF1ZXJ5U2VsZWN0b3IoJy5kaWFsb2dfX3Jlc29sdmUnKTtcbiAgICAgICAgICAgIHJlamVjdEJ0bkVsID0gZGlhbG9nRWwucXVlcnlTZWxlY3RvcignLmRpYWxvZ19fcmVqZWN0Jyk7XG4gICAgICAgICAgICByZXNvbHZlQnRuRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBkaWFsb2dFbC5kYXRhc2V0LnNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXNvbHZlQnRuQ2FsbGJhY2sgJiYgcmVzb2x2ZUJ0bkNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlamVjdEJ0bkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgZGlhbG9nRWwuZGF0YXNldC5zaG93ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVqZWN0QnRuQ2FsbGJhY2sgJiYgcmVqZWN0QnRuQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIFxuICAgIHRoYXQgPSBzcGVjcy50aGF0IHx8IHt9O1xuXG4gICAgaW5pdCgpO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0RpYWxvZyhoZWFkZXIgPSAnJywgYm9keSA9ICcnLCByZXNvbHZlID0gbnVsbCwgcmVqZWN0ID0gbnVsbCwgcmVzb2x2ZUNiID0gbnVsbCwgcmVqZWN0Q2IgPSBudWxsKSB7XG4gICAgZGlhbG9nRWwuZGF0YXNldC5zaG93ID0gdHJ1ZTtcbiAgICBoZWFkZXJFbC5pbm5lckhUTUwgPSBoZWFkZXI7XG4gICAgYm9keUVsLmlubmVySFRNTCA9IGJvZHk7XG4gICAgcmVzb2x2ZUJ0bkVsLmlubmVySFRNTCA9IHJlc29sdmU7XG4gICAgcmVqZWN0QnRuRWwuaW5uZXJIVE1MID0gcmVqZWN0O1xuICAgIHJlc29sdmVCdG5DYWxsYmFjayA9IHJlc29sdmVDYjtcbiAgICByZWplY3RCdG5DYWxsYmFjayA9IHJlamVjdENiO1xuICAgIHJlc29sdmVCdG5FbC5zdHlsZS5kaXNwbGF5ID0gcmVzb2x2ZSAhPSBudWxsID8gJ2Jsb2NrJyA6ICdub25lJztcbiAgICByZWplY3RCdG5FbC5zdHlsZS5kaXNwbGF5ID0gcmVqZWN0ICE9IG51bGwgPyAnYmxvY2snIDogJ25vbmUnO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L2RpYWxvZy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createLibraryView;\n/**\n * Library for all processor types.\n */\nfunction createLibraryView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.library__list'),\n        draggedType,\n        init = function init() {\n        document.addEventListener('drop', onDrop);\n        document.addEventListener('dragenter', onDragEnter);\n        document.addEventListener('dragover', onDragOver);\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.RESCAN_TYPES:\n                    populateLibrary(e.detail.state.types);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Populate the library with all available processor types.\n     * Processor types are not shown in the libray \n     * if they have the flag excludedFromLibrary = true\n     * in their config.json file.\n     */\n    populateLibrary = function populateLibrary(typesTable) {\n        var template = document.querySelector('#template-library-item');\n\n        typesTable.allIds.forEach(function (id) {\n            var type = typesTable.byId[id];\n            var clone = template.content.cloneNode(true);\n            var el = clone.firstElementChild;\n            listEl.appendChild(el);\n\n            el.querySelector('.library__item-label').innerHTML = type.name;\n            el.dataset.type = id;\n            el.addEventListener('dragstart', onDragStart);\n        });\n    },\n\n\n    /**\n     * Store type of processor when drag starts.\n     */\n    onDragStart = function onDragStart(e) {\n        draggedType = e.target.dataset.type;\n    },\n\n\n    /**\n     * Create a new processor when the type is dropped on the canvas.\n     */\n    onDrop = function onDrop(e) {\n        e.preventDefault();\n\n        var dynamicCanvas = document.querySelector('.canvas-dynamic');\n        var connectorsCanvas = document.querySelector('.canvas-connect');\n        var canvas = connectorsCanvas.offsetWidth > 0 ? connectorsCanvas : dynamicCanvas;\n\n        if (e.target === canvas) {\n            var canvasRect = canvas.getBoundingClientRect();\n\n            // create a new processor\n            store.dispatch(store.getActions().createProcessor({\n                type: draggedType,\n                positionX: e.clientX - canvasRect.left + window.scrollX,\n                positionY: e.clientY - canvasRect.top + window.scrollY\n            }));\n        }\n\n        draggedType = null;\n    },\n        onDragEnter = function onDragEnter(e) {\n        e.preventDefault();\n    },\n        onDragOver = function onDragOver(e) {\n        e.preventDefault();\n    };\n\n    that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9saWJyYXJ5LmpzP2M1YjEiXSwibmFtZXMiOlsiY3JlYXRlTGlicmFyeVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsInN0b3JlIiwibGlzdEVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZHJhZ2dlZFR5cGUiLCJpbml0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uRHJvcCIsIm9uRHJhZ0VudGVyIiwib25EcmFnT3ZlciIsIlNUQVRFX0NIQU5HRSIsImUiLCJkZXRhaWwiLCJhY3Rpb24iLCJ0eXBlIiwiYWN0aW9ucyIsIlJFU0NBTl9UWVBFUyIsInBvcHVsYXRlTGlicmFyeSIsInN0YXRlIiwidHlwZXMiLCJ0eXBlc1RhYmxlIiwidGVtcGxhdGUiLCJhbGxJZHMiLCJmb3JFYWNoIiwiYnlJZCIsImlkIiwiY2xvbmUiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiZWwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwibmFtZSIsImRhdGFzZXQiLCJvbkRyYWdTdGFydCIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiZHluYW1pY0NhbnZhcyIsImNvbm5lY3RvcnNDYW52YXMiLCJjYW52YXMiLCJvZmZzZXRXaWR0aCIsImNhbnZhc1JlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkaXNwYXRjaCIsImdldEFjdGlvbnMiLCJjcmVhdGVQcm9jZXNzb3IiLCJwb3NpdGlvblgiLCJjbGllbnRYIiwibGVmdCIsIndpbmRvdyIsInNjcm9sbFgiLCJwb3NpdGlvblkiLCJjbGllbnRZIiwidG9wIiwic2Nyb2xsWSJdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBR3dCQSxpQjtBQUh4Qjs7O0FBR2UsU0FBU0EsaUJBQVQsQ0FBMkJDLEtBQTNCLEVBQWtDQyxFQUFsQyxFQUFzQztBQUNqRCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsUUFBUUgsTUFBTUcsS0FEbEI7QUFBQSxRQUVJ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LE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQU07O0FBRUEsV0FBT04sSUFBUDtBQUNIIiwiZmlsZSI6IjQ3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMaWJyYXJ5IGZvciBhbGwgcHJvY2Vzc29yIHR5cGVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVMaWJyYXJ5VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgbGlzdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxpYnJhcnlfX2xpc3QnKSxcbiAgICAgICAgZHJhZ2dlZFR5cGUsXG5cbiAgICAgICAgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIG9uRHJvcCk7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCBvbkRyYWdFbnRlcik7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIG9uRHJhZ092ZXIpO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHN0b3JlLlNUQVRFX0NIQU5HRSwgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuZGV0YWlsLmFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZS5kZXRhaWwuYWN0aW9ucy5SRVNDQU5fVFlQRVM6XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZUxpYnJhcnkoZS5kZXRhaWwuc3RhdGUudHlwZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUG9wdWxhdGUgdGhlIGxpYnJhcnkgd2l0aCBhbGwgYXZhaWxhYmxlIHByb2Nlc3NvciB0eXBlcy5cbiAgICAgICAgICogUHJvY2Vzc29yIHR5cGVzIGFyZSBub3Qgc2hvd24gaW4gdGhlIGxpYnJheSBcbiAgICAgICAgICogaWYgdGhleSBoYXZlIHRoZSBmbGFnIGV4Y2x1ZGVkRnJvbUxpYnJhcnkgPSB0cnVlXG4gICAgICAgICAqIGluIHRoZWlyIGNvbmZpZy5qc29uIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICBwb3B1bGF0ZUxpYnJhcnkgPSBmdW5jdGlvbih0eXBlc1RhYmxlKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZW1wbGF0ZS1saWJyYXJ5LWl0ZW0nKTtcblxuICAgICAgICAgICAgdHlwZXNUYWJsZS5hbGxJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVzVGFibGUuYnlJZFtpZF07XG4gICAgICAgICAgICAgICAgY29uc3QgY2xvbmUgPSB0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGNsb25lLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICAgICAgICAgIGxpc3RFbC5hcHBlbmRDaGlsZChlbCk7XG5cbiAgICAgICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcubGlicmFyeV9faXRlbS1sYWJlbCcpLmlubmVySFRNTCA9IHR5cGUubmFtZTtcbiAgICAgICAgICAgICAgICBlbC5kYXRhc2V0LnR5cGUgPSBpZDtcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBvbkRyYWdTdGFydCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdG9yZSB0eXBlIG9mIHByb2Nlc3NvciB3aGVuIGRyYWcgc3RhcnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgb25EcmFnU3RhcnQgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBkcmFnZ2VkVHlwZSA9IGUudGFyZ2V0LmRhdGFzZXQudHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGUgYSBuZXcgcHJvY2Vzc29yIHdoZW4gdGhlIHR5cGUgaXMgZHJvcHBlZCBvbiB0aGUgY2FudmFzLlxuICAgICAgICAgKi9cbiAgICAgICAgb25Ecm9wID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljQ2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1keW5hbWljJyk7XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0b3JzQ2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb25uZWN0Jyk7XG4gICAgICAgICAgICBjb25zdCBjYW52YXMgPSBjb25uZWN0b3JzQ2FudmFzLm9mZnNldFdpZHRoID4gMCA/IGNvbm5lY3RvcnNDYW52YXMgOiBkeW5hbWljQ2FudmFzO1xuXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IGNhbnZhcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHByb2Nlc3NvclxuICAgICAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKHN0b3JlLmdldEFjdGlvbnMoKS5jcmVhdGVQcm9jZXNzb3Ioe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBkcmFnZ2VkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25YOiBlLmNsaWVudFggLSBjYW52YXNSZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25ZOiBlLmNsaWVudFkgLSBjYW52YXNSZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBkcmFnZ2VkVHlwZSA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBvbkRyYWdFbnRlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIG9uRHJhZ092ZXIgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0KCk7XG4gICAgXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9saWJyYXJ5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDINetwork;\n/**\n * Manages the graph of midi processors.\n */\nfunction createMIDINetwork(specs, my) {\n    var that,\n        store = specs.store,\n        processors = [],\n        numProcessors = 0,\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.CREATE_PROJECT:\n                    disconnectProcessors(e.detail.state.connections);\n                    deleteProcessors(e.detail.state.processors);\n                    createProcessors(e.detail.state.processors);\n                    connectProcessors(e.detail.state.connections);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    disconnectProcessors(e.detail.state.connections);\n                    deleteProcessors(e.detail.state.processors);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.CONNECT_PROCESSORS:\n                    connectProcessors(e.detail.state.connections);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.DISCONNECT_PROCESSORS:\n                    disconnectProcessors(e.detail.state.connections);\n                    orderProcessors(e.detail.state.processors);\n                    break;\n            }\n        });\n\n        document.addEventListener('keyup', function (e) {\n            switch (e.keyCode) {\n                case 83:\n                    // s\n                    console.log('    ++++    ');\n                    processors.forEach(function (processor) {\n                        console.log('network processor', processor.getID());\n                    });\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Create a new processor in the network.\n     * @param {Object} state State processors table.\n     */\n    createProcessors = function createProcessors(procsState) {\n        procsState.allIds.forEach(function (id, i) {\n            var processorData = procsState.byId[id];\n            var exists = false;\n            processors.forEach(function (processor) {\n                if (processor.getID() === id) {\n                    exists = true;\n                }\n            });\n            if (!exists) {\n                var module = __webpack_require__(49)(\"./\" + processorData.type + '/processor');\n                var processor = module.createProcessor({\n                    that: {},\n                    data: processorData,\n                    store: store\n                });\n                processors.splice(i, 0, processor);\n            }\n        });\n        numProcessors = processors.length;\n    },\n\n\n    /**\n     * Delete a processor.\n     * @param {Object} state State processors table.\n     */\n    deleteProcessors = function deleteProcessors(procsState) {\n        var _loop = function _loop(i, n) {\n            // search for the processor in the state\n            var exists = false;\n            procsState.allIds.forEach(function (processorID) {\n                if (processorID === processors[i].getID()) {\n                    exists = true;\n                }\n            });\n\n            // remove processor if it doesn't exist in the state\n            if (!exists) {\n                var processor = processors[i];\n                if (processor.terminate instanceof Function) {\n                    processor.terminate();\n                }\n                processors.splice(i, 1);\n            }\n        };\n\n        for (var i = processors.length - 1, n = 0; i >= n; i--) {\n            _loop(i, n);\n        }\n        numProcessors = processors.length;\n    },\n\n\n    /**\n     * Go through all connection data and create the connections \n     * that don't yet exist.\n     */\n    connectProcessors = function connectProcessors(connections) {\n        connections.allIds.forEach(function (connectionID) {\n            var connection = connections.byId[connectionID];\n            processors.forEach(function (sourceProcessor) {\n                if (sourceProcessor.getID() === connection.sourceProcessorID) {\n                    var _exists = false;\n                    sourceProcessor.getDestinations().forEach(function (destinationProcessor) {\n                        if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                            _exists = true;\n                        }\n                    });\n                    if (!_exists) {\n                        processors.forEach(function (destinationProcessor) {\n                            if (destinationProcessor.getID() === connection.destinationProcessorID) {\n                                sourceProcessor.connect(destinationProcessor);\n                            }\n                        });\n                    }\n                }\n            });\n        });\n    },\n\n\n    /**\n     * Go through all processor outputs and check if \n     * they still exist in the state. If not, disconnect them.\n     * \n     * TODO: allow for processors with multiple inputs or outputs.\n     */\n    disconnectProcessors = function disconnectProcessors(connections) {\n        processors.forEach(function (sourceProcessor) {\n            if (sourceProcessor.getDestinations instanceof Function) {\n                var destinationProcessors = sourceProcessor.getDestinations();\n                destinationProcessors.forEach(function (destinationProcessor) {\n                    var exists = false;\n                    connections.allIds.forEach(function (connectionID) {\n                        var connection = connections.byId[connectionID];\n                        if (connection.sourceProcessorID === sourceProcessor.getID() && connection.destinationProcessorID === destinationProcessor.getID()) {\n                            exists = true;\n                        }\n                    });\n                    if (!exists) {\n                        sourceProcessor.disconnect(destinationProcessor);\n                    }\n                });\n            }\n        });\n    },\n\n\n    /**\n     * Reorder the processors according to their order in the state.\n     * @param {Object} State processor table.\n     */\n    orderProcessors = function orderProcessors(processorsState) {\n        var orderedProcessors = [];\n        processorsState.allIds.forEach(function (processorID) {\n            processors.forEach(function (processor) {\n                if (processor.getID() === processorID) {\n                    orderedProcessors.push(processor);\n                }\n            });\n        });\n        processors = orderedProcessors;\n    },\n\n\n    /**\n     * Let all processors process their data.\n     * @param {Number} start Start time in ticks of timespan to process.\n     * @param {Number} end End time in ticks of timespan to process.\n     * @param {Number} nowToScanStart Duration from now until start time in ticks.\n     * @param {Number} ticksToMsMultiplier Ticks to ms. conversion multiplier.\n     * @param {Number} offset Position of transport playhead in ticks.\n     * @param {Object} processorEvents Object to collect processor generated events to displayin the view.\n     */\n    process = function process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n        for (var i = 0; i < numProcessors; i++) {\n            processors[i].process(start, end, nowToScanStart, ticksToMsMultiplier, offset, processorEvents);\n        }\n    };\n\n    my = my || {};\n\n    that = specs.that;\n\n    init();\n\n    that.process = process;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/processor\": 8,\n\t\"./euclidfx/processor\": 10,\n\t\"./output/processor\": 12\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 49;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9wcm9jZXNzb3IkPzcyN2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvcHJvY2Vzc29yXCI6IDgsXG5cdFwiLi9ldWNsaWRmeC9wcm9jZXNzb3JcIjogMTAsXG5cdFwiLi9vdXRwdXQvcHJvY2Vzc29yXCI6IDEyXG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIik7XG5cdHJldHVybiBpZDtcbn07XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNDk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9wcm9jZXNzb3IkXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createPreferencesView;\n\nvar _midi_input = __webpack_require__(51);\n\nvar _midi_input2 = _interopRequireDefault(_midi_input);\n\nvar _midi_output = __webpack_require__(52);\n\nvar _midi_output2 = _interopRequireDefault(_midi_output);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Preferences settings view.\n */\nfunction createPreferencesView(specs) {\n    var that,\n        store = specs.store,\n        preferencesEl = document.querySelector('.prefs'),\n        midiInputsEl = document.querySelector('.prefs__inputs'),\n        midiOutputsEl = document.querySelector('.prefs__outputs'),\n        midiPortViews = [],\n        controls = {\n        darkTheme: {\n            type: 'checkbox',\n            input: document.querySelector('.prefs__dark-theme')\n        }\n    },\n        init = function init() {\n        controls.darkTheme.input.addEventListener('change', function (e) {\n            store.dispatch(store.getActions().setTheme(e.target.checked));\n        });\n\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_THEME:\n                    updateControl('dark-theme', e.detail.state.theme === 'dark');\n                    break;\n\n                case e.detail.actions.CREATE_MIDI_PORT:\n                case e.detail.actions.UPDATE_MIDI_PORT:\n                case e.detail.actions.MIDI_PORT_CHANGE:\n                    updateMIDIPortViews(e.detail.state.ports);\n                    break;\n            }\n        });\n    },\n\n\n    /**\n     * Callback function to update one of the controls after if the\n     * preference's state changed.\n     * @param {String} key Key that indicates the control.\n     * @param {Boolean} value Value of the control.\n     */\n    updateControl = function updateControl(key, value) {\n        switch (key) {\n            case 'dark-theme':\n                controls.darkTheme.input.checked = value;\n                break;\n        }\n    },\n\n\n    /**\n     * Update lists of ports after a change.\n     * @param {Array} ports MIDI port objects.\n     */\n    updateMIDIPortViews = function updateMIDIPortViews(ports) {\n        ports.allIds.forEach(function (id) {\n            var port = ports.byId[id];\n            var view = midiPortViews.find(function (view) {\n                return port.id === view.getID();\n            });\n            if (view && port.state === 'disconnected') {\n                view.terminate();\n                midiPortViews.splice(midiPortViews.findIndex(function (view) {\n                    return port.id === view.getID();\n                }), 1);\n            }\n            if (!view && port.state === 'connected') {\n                var createFunction = void 0,\n                    parentEl = void 0;\n                if (port.type === 'input') {\n                    createFunction = _midi_input2.default;\n                    parentEl = midiInputsEl;\n                } else {\n                    createFunction = _midi_output2.default;\n                    parentEl = midiOutputsEl;\n                }\n                midiPortViews.push(createFunction({\n                    store: store,\n                    id: port.id,\n                    name: port.name,\n                    parentEl: parentEl,\n                    isInput: port.type === 'input',\n                    syncEnabled: port.syncEnabled,\n                    remoteEnabled: port.remoteEnabled,\n                    networkEnabled: port.networkEnabled\n                }));\n            }\n        });\n    };\n\n    that = specs.that;\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIInputView;\n\nvar _midi_base = __webpack_require__(15);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Input processor view.\n */\nfunction createMIDIInputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.networkEl.dataset.disabled = 'true';\n        my.networkEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX2lucHV0LmpzPzdjZTUiXSwibmFtZXMiOlsiY3JlYXRlTUlESUlucHV0VmlldyIsInNwZWNzIiwibXkiLCJ0aGF0IiwiaW5pdCIsIm5ldHdvcmtFbCIsImRhdGFzZXQiLCJkaXNhYmxlZCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUt3QkEsbUI7O0FBTHhCOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxFQUFwQyxFQUF3QztBQUNuRCxRQUFJQyxJQUFKOzs7QUFFSTs7OztBQUlBQyxXQUFPLFNBQVBBLElBQU8sR0FBVztBQUNkRixXQUFHRyxTQUFILENBQWFDLE9BQWIsQ0FBcUJDLFFBQXJCLEdBQWdDLE1BQWhDO0FBQ0FMLFdBQUdHLFNBQUgsQ0FBYUcsYUFBYixDQUEyQixPQUEzQixFQUFvQ0MsWUFBcEMsQ0FBaUQsVUFBakQsRUFBNkQsVUFBN0Q7QUFDSCxLQVRMOztBQVdBUCxTQUFLQSxNQUFNLEVBQVg7O0FBRUFDLFdBQU8seUJBQW1CRixLQUFuQixFQUEwQkMsRUFBMUIsQ0FBUDs7QUFFQUU7O0FBRUEsV0FBT0QsSUFBUDtBQUNIIiwiZmlsZSI6IjUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU1JRElCYXNlVmlldyBmcm9tICcuL21pZGlfYmFzZSc7XG5cbi8qKlxuICogTUlESSBJbnB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUlucHV0VmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGluaXQgZnVuY3Rpb24gaXMgY2FsbGVkIGFmdGVyIHRoZSBiYXNlIHZpZXcncyBpbml0aWFsaXNlIGZ1bmN0aW9uLFxuICAgICAgICAgKiBzbyBwcm9wZXJ0aWVzIG9mIG9uICdteScgYXJlIGF2YWlsYWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIGluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG15Lm5ldHdvcmtFbC5kYXRhc2V0LmRpc2FibGVkID0gJ3RydWUnO1xuICAgICAgICAgICAgbXkubmV0d29ya0VsLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jykuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIFxuICAgIHRoYXQgPSBjcmVhdGVNSURJQmFzZVZpZXcoc3BlY3MsIG15KTtcbiAgICBcbiAgICBpbml0KCk7XG5cbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L21pZGlfaW5wdXQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIOutputView;\n\nvar _midi_base = __webpack_require__(15);\n\nvar _midi_base2 = _interopRequireDefault(_midi_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI Output processor view.\n */\nfunction createMIDIOutputView(specs, my) {\n    var that,\n\n\n    /**\n     * This init function is called after the base view's initialise function,\n     * so properties of on 'my' are available.\n     */\n    init = function init() {\n        my.syncEl.dataset.disabled = 'true';\n        my.syncEl.querySelector('input').setAttribute('disabled', 'disabled');\n        my.remoteEl.dataset.disabled = 'true';\n        my.remoteEl.querySelector('input').setAttribute('disabled', 'disabled');\n    };\n\n    my = my || {};\n\n    that = (0, _midi_base2.default)(specs, my);\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcz83Nzk4Il0sIm5hbWVzIjpbImNyZWF0ZU1JRElPdXRwdXRWaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJpbml0Iiwic3luY0VsIiwiZGF0YXNldCIsImRpc2FibGVkIiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsInJlbW90ZUVsIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFLd0JBLG9COztBQUx4Qjs7Ozs7O0FBRUE7OztBQUdlLFNBQVNBLG9CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsRUFBckMsRUFBeUM7QUFDcEQsUUFBSUMsSUFBSjs7O0FBRUk7Ozs7QUFJQUMsV0FBTyxTQUFQQSxJQUFPLEdBQVc7QUFDZEYsV0FBR0csTUFBSCxDQUFVQyxPQUFWLENBQWtCQyxRQUFsQixHQUE2QixNQUE3QjtBQUNBTCxXQUFHRyxNQUFILENBQVVHLGFBQVYsQ0FBd0IsT0FBeEIsRUFBaUNDLFlBQWpDLENBQThDLFVBQTlDLEVBQTBELFVBQTFEO0FBQ0FQLFdBQUdRLFFBQUgsQ0FBWUosT0FBWixDQUFvQkMsUUFBcEIsR0FBK0IsTUFBL0I7QUFDQUwsV0FBR1EsUUFBSCxDQUFZRixhQUFaLENBQTBCLE9BQTFCLEVBQW1DQyxZQUFuQyxDQUFnRCxVQUFoRCxFQUE0RCxVQUE1RDtBQUNILEtBWEw7O0FBYUFQLFNBQUtBLE1BQU0sRUFBWDs7QUFFQUMsV0FBTyx5QkFBbUJGLEtBQW5CLEVBQTBCQyxFQUExQixDQUFQOztBQUVBRTs7QUFFQSxXQUFPRCxJQUFQO0FBQ0giLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTUlESUJhc2VWaWV3IGZyb20gJy4vbWlkaV9iYXNlJztcblxuLyoqXG4gKiBNSURJIE91dHB1dCBwcm9jZXNzb3Igdmlldy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESU91dHB1dFZpZXcoc3BlY3MsIG15KSB7XG4gICAgdmFyIHRoYXQsXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBpbml0IGZ1bmN0aW9uIGlzIGNhbGxlZCBhZnRlciB0aGUgYmFzZSB2aWV3J3MgaW5pdGlhbGlzZSBmdW5jdGlvbixcbiAgICAgICAgICogc28gcHJvcGVydGllcyBvZiBvbiAnbXknIGFyZSBhdmFpbGFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBpbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBteS5zeW5jRWwuZGF0YXNldC5kaXNhYmxlZCA9ICd0cnVlJztcbiAgICAgICAgICAgIG15LnN5bmNFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIG15LnJlbW90ZUVsLmRhdGFzZXQuZGlzYWJsZWQgPSAndHJ1ZSc7XG4gICAgICAgICAgICBteS5yZW1vdGVFbC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBcbiAgICB0aGF0ID0gY3JlYXRlTUlESUJhc2VWaWV3KHNwZWNzLCBteSk7XG4gICAgXG4gICAgaW5pdCgpO1xuXG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9taWRpX291dHB1dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteView;\n\nvar _remote_group = __webpack_require__(54);\n\nvar _remote_group2 = _interopRequireDefault(_remote_group);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Overview list of all assigned MIDI controller assignments.\n */\nfunction createRemoteView(specs, my) {\n    var that,\n        store = specs.store,\n        listEl = document.querySelector('.remote__list'),\n        groupViews = {\n        byId: {},\n        allIds: []\n    },\n        init = function init() {\n        document.addEventListener(store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n\n                case e.detail.actions.CREATE_PROJECT:\n                    createRemoteGroups(e.detail.state);\n                    break;\n\n                case e.detail.actions.ADD_PROCESSOR:\n                    createRemoteGroup(e.detail.state.processors.byId[e.detail.action.data.id]);\n                    break;\n\n                case e.detail.actions.DELETE_PROCESSOR:\n                    deleteRemoteGroups(e.detail.state.processors);\n                    break;\n\n                case e.detail.actions.ASSIGN_EXTERNAL_CONTROL:\n                    if (e.detail.state.learnTargetProcessorID) {\n                        var _groupView = groupViews.byId[e.detail.state.learnTargetProcessorID],\n                            _processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                        if (!_groupView) {\n                            createRemoteGroups(e.detail.state);\n                        } else {\n                            _groupView.updateViews(e.detail.state);\n                        }\n                    }\n                    break;\n\n                case e.detail.actions.UNASSIGN_EXTERNAL_CONTROL:\n                    var groupView = groupViews.byId[e.detail.action.processorID],\n                        processor = e.detail.state.processors.byId[e.detail.state.learnTargetProcessorID];\n                    if (groupView && processor) {\n                        groupView.updateViews(e.detail.state);\n                    }\n                    break;\n            }\n        });\n    },\n        createRemoteGroups = function createRemoteGroups(state) {\n        state.assignments.allIds.forEach(function (assignID) {\n            var assignment = state.assignments.byId[assignID];\n            if (!groupViews.byId[assignment.processorID]) {\n                createRemoteGroup(state.processors.byId[assignment.processorID]);\n            }\n        });\n\n        // processors.allIds.forEach(id => {\n        //     if (!groupViews.byId[id]) {\n        //         const processor = processors.byId[id];\n        //         let hasAssignment = false;\n        //         processor.params.allIds.forEach(id => {\n        //             const param = processor.params.byId[id];\n        //             if (param.isMidiControllable && param.remoteChannel && param.remoteCC != null) {\n        //                 hasAssignment = true;\n        //             }\n        //         });\n        //         if (hasAssignment) {\n        //             createRemoteGroup(processor);\n        //         }\n        //     }\n        // });\n    },\n\n\n    /**\n     * Create a container view to hold assigned parameter views.\n     * @param {Array} processors Processor list.\n     */\n    createRemoteGroup = function createRemoteGroup(processor) {\n        if (!groupViews.byId[processor.id]) {\n            groupViews.allIds.push(processor.id);\n            groupViews.byId[processor.id] = (0, _remote_group2.default)({\n                store: store,\n                processorID: processor.id,\n                parentEl: listEl\n            });\n        }\n    },\n\n\n    /**\n     * Delete a container view to hold assigned parameter views.\n     * @param {Object} processor Processor with assignable parameters.\n     */\n    deleteRemoteGroups = function deleteRemoteGroups(processors) {\n        var n = groupViews.allIds.length;\n        for (var i = groupViews.allIds.length - 1; i >= 0; i--) {\n            var id = groupViews.allIds[i];\n            if (!processors.byId[id]) {\n                groupViews.allIds.splice(i, 1);\n                groupViews.byId[id].terminate();\n                delete groupViews.byId[id];\n            }\n        }\n    },\n        that = specs.that || {};\n\n    init();\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteGroupView;\n\nvar _remote_item = __webpack_require__(55);\n\nvar _remote_item2 = _interopRequireDefault(_remote_item);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Group within overview list of all assigned MIDI controller assignments.\n * The items are grouped by processor.\n */\nfunction createRemoteGroupView(specs, my) {\n    var that,\n        store = specs.store,\n        processorID = specs.processorID,\n        parentEl = specs.parentEl,\n        el,\n        listEl,\n        nameParam,\n        views = {\n        byId: {},\n        allIds: []\n    },\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-group');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        parentEl.appendChild(el);\n\n        listEl = el.querySelector('.remote__group-list');\n\n        var state = store.getState();\n        setName(state.processors.byId[processorID].params.byId.name.value);\n        updateViews(state);\n\n        document.addEventListener(store.STATE_CHANGE, handleStateChange);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChange);\n\n        views.allIds.forEach(function (id) {\n            views.byId[id].terminate();\n        });\n\n        parentEl.removeChild(el);\n        views = null;\n        parentEl = null;\n    },\n        handleStateChange = function handleStateChange(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === processorID && e.detail.action.paramKey === 'name') {\n                    setName(e.detail.state.processors.byId[processorID].params.byId.name.value);\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Update list to contain all assignments.\n     */\n    updateViews = function updateViews(state) {\n        state.processors.byId[processorID].params.allIds.forEach(function (paramKey) {\n\n            // search assignment for this parameter\n            var assignment = void 0;\n            state.assignments.allIds.forEach(function (assignID) {\n                var assign = state.assignments.byId[assignID];\n                if (assign.processorID === processorID && assign.paramKey === paramKey) {\n                    assignment = assign;\n                }\n            });\n\n            // create or delete the parameter's view\n            var view = views.byId[paramKey];\n            if (assignment && !view) {\n                var param = state.processors.byId[processorID].params.byId[paramKey];\n                addView(paramKey, param.label, assignment.remoteChannel, assignment.remoteCC);\n            } else if (!assignment && view) {\n                removeView(paramKey);\n            }\n        });\n\n        // show group if there are assignments\n        el.dataset.hasAssignments = views.allIds.length > 0;\n    },\n        addView = function addView(paramKey, paramLabel, remoteChannel, remoteCC) {\n        views.byId[paramKey] = (0, _remote_item2.default)({\n            store: store,\n            paramKey: paramKey,\n            paramLabel: paramLabel,\n            processorID: processorID,\n            remoteChannel: remoteChannel,\n            remoteCC: remoteCC,\n            parentEl: listEl\n        });\n        views.allIds.push(paramKey);\n    },\n        removeView = function removeView(paramKey) {\n        views.byId[paramKey].terminate();\n        delete views.byId[paramKey];\n        views.allIds.splice(views.allIds.indexOf(paramKey), 1);\n    },\n\n\n    /**\n     * If a group has no assignments its header is hidden.\n     */\n    updateGroupVisibility = function updateGroupVisibility() {\n        el.dataset.hasAssignments = itemViews.length > 0;\n    },\n\n\n    /**\n     * Set the group's header to the processor's name.\n     * @param {String} name Processor's name.\n     */\n    setName = function setName(name) {\n        el.querySelector('.remote__group-header-label').innerHTML = name;\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    that.updateViews = updateViews;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createRemoteItemView;\n/**\n * View for a parameter that's linked to a remote MIDI controller.\n * The items are grouped by processor.\n */\nfunction createRemoteItemView(specs, my) {\n    var that,\n        store = specs.store,\n        paramKey = specs.paramKey,\n        paramLabel = specs.paramLabel,\n        processorID = specs.processorID,\n        remoteChannel = specs.remoteChannel,\n        remoteCC = specs.remoteCC,\n        parentEl = specs.parentEl,\n        el,\n        initialize = function initialize() {\n        // create the DOM element.\n        var template = document.querySelector('#template-remote-item');\n        var clone = template.content.cloneNode(true);\n        el = clone.firstElementChild;\n        el.querySelector('.remote__item-label').innerHTML = paramLabel;\n        el.querySelector('.remote__item-channel').innerHTML = remoteChannel;\n        el.querySelector('.remote__item-control').innerHTML = remoteCC;\n        parentEl.appendChild(el);\n\n        // add DOM event listeners\n        el.querySelector('.remote__item-delete').addEventListener('click', onUnregisterClick);\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        el.querySelector('.remote__item-delete').removeEventListener('click', onUnregisterClick);\n        parentEl.removeChild(el);\n        parentEl = null;\n    },\n\n\n    /**\n     * Unassign button click handler.\n     * @param  {Object} e Click event object.\n     */\n    onUnregisterClick = function onUnregisterClick(e) {\n        store.dispatch(store.getActions().unassignExternalControl(processorID, paramKey));\n    },\n\n\n    /**\n     * State of the parameter in the assignment process changed,\n     * the element will show this visually.\n     * @param {String} state New state of the parameter.\n     * @param {Function} callback Not used here.\n     */\n    changeRemoteState = function changeRemoteState(state, callback) {\n        switch (state) {\n            case 'assigned':\n                // TODO: normale tekst\n                break;\n            case 'inactive':\n                // TODO: tekst grijs of zoiets\n                break;\n        }\n    };\n\n    that = specs.that || {};\n\n    initialize();\n\n    that.terminate = terminate;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcz82ZWZmIl0sIm5hbWVzIjpbImNyZWF0ZVJlbW90ZUl0ZW1WaWV3Iiwic3BlY3MiLCJteSIsInRoYXQiLCJzdG9yZSIsInBhcmFtS2V5IiwicGFyYW1MYWJlbCIsInByb2Nlc3NvcklEIiwicmVtb3RlQ2hhbm5lbCIsInJlbW90ZUNDIiwicGFyZW50RWwiLCJlbCIsImluaXRpYWxpemUiLCJ0ZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNsb25lIiwiY29udGVudCIsImNsb25lTm9kZSIsImZpcnN0RWxlbWVudENoaWxkIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwib25VbnJlZ2lzdGVyQ2xpY2siLCJ0ZXJtaW5hdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJlIiwiZGlzcGF0Y2giLCJnZXRBY3Rpb25zIiwidW5hc3NpZ25FeHRlcm5hbENvbnRyb2wiLCJjaGFuZ2VSZW1vdGVTdGF0ZSIsInN0YXRlIiwiY2FsbGJhY2siXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUl3QkEsb0I7QUFKeEI7Ozs7QUFJZSxTQUFTQSxvQkFBVCxDQUE4QkMsS0FBOUIsRUFBcUNDLEVBQXJDLEVBQXlDO0FBQ3BELFFBQUlDLElBQUo7QUFBQSxRQUNJQyxRQUFRSCxNQUFNRyxLQURsQjtBQUFBLFFBRUlDLFdBQVdKLE1BQU1JLFFBRnJCO0FBQUEsUUFHSUMsYUFBYUwsTUFBTUssVUFIdkI7QUFBQSxRQUlJQyxjQUFjTixNQUFNTSxXQUp4QjtBQUFBLFFBS0lDLGdCQUFnQlAsTUFBTU8sYUFMMUI7QUFBQSxRQU1JQyxXQUFXUixNQUFNUSxRQU5yQjtBQUFBLFFBT0lDLFdBQVdULE1BQU1TLFFBUHJCO0FBQUEsUUFRSUMsRUFSSjtBQUFBLFFBVUlDLGFBQWEsU0FBYkEsVUFBYSxHQUFXO0FBQ3BCO0FBQ0EsWUFBSUMsV0FBV0MsU0FBU0MsYUFBVCxDQUF1Qix1QkFBdkIsQ0FBZjtBQUNBLFlBQUlDLFFBQVFILFNBQVNJLE9BQVQsQ0FBaUJDLFNBQWpCLENBQTJCLElBQTNCLENBQVo7QUFDQVAsYUFBS0ssTUFBTUcsaUJBQVg7QUFDQVIsV0FBR0ksYUFBSCxDQUFpQixxQkFBakIsRUFBd0NLLFNBQXhDLEdBQW9EZCxVQUFwRDtBQUNBSyxXQUFHSSxhQUFILENBQWlCLHVCQUFqQixFQUEwQ0ssU0FBMUMsR0FBc0RaLGFBQXREO0FBQ0FHLFdBQUdJLGFBQUgsQ0FBaUIsdUJBQWpCLEVBQTBDSyxTQUExQyxHQUFzRFgsUUFBdEQ7QUFDQUMsaUJBQVNXLFdBQVQsQ0FBcUJWLEVBQXJCOztBQUVBO0FBQ0FBLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDTyxnQkFBekMsQ0FBMEQsT0FBMUQsRUFBbUVDLGlCQUFuRTtBQUNILEtBdEJMOzs7QUF3Qkk7OztBQUdBQyxnQkFBWSxTQUFaQSxTQUFZLEdBQVc7QUFDbkJiLFdBQUdJLGFBQUgsQ0FBaUIsc0JBQWpCLEVBQXlDVSxtQkFBekMsQ0FBNkQsT0FBN0QsRUFBc0VGLGlCQUF0RTtBQUNBYixpQkFBU2dCLFdBQVQsQ0FBcUJmLEVBQXJCO0FBQ0FELG1CQUFXLElBQVg7QUFDSCxLQS9CTDs7O0FBaUNJOzs7O0FBSUFhLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNJLENBQVQsRUFBWTtBQUM1QnZCLGNBQU13QixRQUFOLENBQWV4QixNQUFNeUIsVUFBTixHQUFtQkMsdUJBQW5CLENBQTJDdkIsV0FBM0MsRUFBd0RGLFFBQXhELENBQWY7QUFDSCxLQXZDTDs7O0FBeUNJOzs7Ozs7QUFNQTBCLHdCQUFvQixTQUFwQkEsaUJBQW9CLENBQVNDLEtBQVQsRUFBZ0JDLFFBQWhCLEVBQTBCO0FBQzFDLGdCQUFRRCxLQUFSO0FBQ0ksaUJBQUssVUFBTDtBQUNJO0FBQ0E7QUFDSixpQkFBSyxVQUFMO0FBQ0k7QUFDQTtBQU5SO0FBUUgsS0F4REw7O0FBMERBN0IsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBUzs7QUFFQVQsU0FBS3FCLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsV0FBT3JCLElBQVA7QUFDSCIsImZpbGUiOiI1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmlldyBmb3IgYSBwYXJhbWV0ZXIgdGhhdCdzIGxpbmtlZCB0byBhIHJlbW90ZSBNSURJIGNvbnRyb2xsZXIuXG4gKiBUaGUgaXRlbXMgYXJlIGdyb3VwZWQgYnkgcHJvY2Vzc29yLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZW1vdGVJdGVtVmlldyhzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc3RvcmUgPSBzcGVjcy5zdG9yZSxcbiAgICAgICAgcGFyYW1LZXkgPSBzcGVjcy5wYXJhbUtleSxcbiAgICAgICAgcGFyYW1MYWJlbCA9IHNwZWNzLnBhcmFtTGFiZWwsXG4gICAgICAgIHByb2Nlc3NvcklEID0gc3BlY3MucHJvY2Vzc29ySUQsXG4gICAgICAgIHJlbW90ZUNoYW5uZWwgPSBzcGVjcy5yZW1vdGVDaGFubmVsLFxuICAgICAgICByZW1vdGVDQyA9IHNwZWNzLnJlbW90ZUNDLFxuICAgICAgICBwYXJlbnRFbCA9IHNwZWNzLnBhcmVudEVsLFxuICAgICAgICBlbCxcbiAgICAgICAgXG4gICAgICAgIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgRE9NIGVsZW1lbnQuXG4gICAgICAgICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcGxhdGUtcmVtb3RlLWl0ZW0nKTtcbiAgICAgICAgICAgIGxldCBjbG9uZSA9IHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgZWwgPSBjbG9uZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2l0ZW0tbGFiZWwnKS5pbm5lckhUTUwgPSBwYXJhbUxhYmVsO1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1jaGFubmVsJykuaW5uZXJIVE1MID0gcmVtb3RlQ2hhbm5lbDtcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJy5yZW1vdGVfX2l0ZW0tY29udHJvbCcpLmlubmVySFRNTCA9IHJlbW90ZUNDO1xuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBhZGQgRE9NIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnJlbW90ZV9faXRlbS1kZWxldGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uVW5yZWdpc3RlckNsaWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgYmVmb3JlIHRoaXMgdmlldyBpcyBkZWxldGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGVybWluYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcucmVtb3RlX19pdGVtLWRlbGV0ZScpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25VbnJlZ2lzdGVyQ2xpY2spO1xuICAgICAgICAgICAgcGFyZW50RWwucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgcGFyZW50RWwgPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuYXNzaWduIGJ1dHRvbiBjbGljayBoYW5kbGVyLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGUgQ2xpY2sgZXZlbnQgb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgb25VbnJlZ2lzdGVyQ2xpY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBzdG9yZS5kaXNwYXRjaChzdG9yZS5nZXRBY3Rpb25zKCkudW5hc3NpZ25FeHRlcm5hbENvbnRyb2wocHJvY2Vzc29ySUQsIHBhcmFtS2V5KSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3RhdGUgb2YgdGhlIHBhcmFtZXRlciBpbiB0aGUgYXNzaWdubWVudCBwcm9jZXNzIGNoYW5nZWQsXG4gICAgICAgICAqIHRoZSBlbGVtZW50IHdpbGwgc2hvdyB0aGlzIHZpc3VhbGx5LlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgTmV3IHN0YXRlIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIE5vdCB1c2VkIGhlcmUuXG4gICAgICAgICAqL1xuICAgICAgICBjaGFuZ2VSZW1vdGVTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Fzc2lnbmVkJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogbm9ybWFsZSB0ZWtzdFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdpbmFjdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHRla3N0IGdyaWpzIG9mIHpvaWV0c1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgXG4gICAgaW5pdGlhbGl6ZSgpO1xuXG4gICAgdGhhdC50ZXJtaW5hdGUgPSB0ZXJtaW5hdGU7XG4gICAgcmV0dXJuIHRoYXQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvdmlldy9yZW1vdGVfaXRlbS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createSequencer = createSequencer;\nexports.default = createTransport;\n/**\n * Timing, transport and sequencing functionality.\n * Divided in two sets of functionality, Transport and Sequencer.\n * \n * Unix epoch,                page    AudioContext   Transport        now,\n * 01-01-1970 00:00:00 UTC    load    created        start            the present\n *  |                          |       |              |                | \n *  |--------------------------|-------|-------//-----|--------//------|\n *  \n *  |------------------------------------------------------------------> Date.now()\n *                             |---------------------------------------> performance.now()\n *                                     |-------------------------------> AudioContext.currentTime\n */\n\n/**\n * @description Creates sequencer functionality.\n * Takes time from transport to get music events from arrangement and\n * drives components that process music events.\n * @param {Object} specs External specifications.\n * @param {Object} my Internally shared properties.\n */\nfunction createSequencer(specs, my) {\n    var that,\n        canvasView = specs.canvasView,\n        midiNetwork = specs.midiNetwork,\n        ppqn = 480,\n        bpm = 120,\n        lastBpm = bpm,\n        tickInMilliseconds,\n        audioContextOffset = 0,\n        timelineOffset = 0,\n        playbackQueue = [],\n        renderThrottleCounter = 0,\n        processorEvents = {},\n\n\n    /**\n     * Scan the arrangement for events and send them to concerned components.\n     * @param {Number} scanStart Start in ms of timespan to scan.\n     * @param {Number} scanEnd End in ms of timespan to scan.\n     * @param {Number} nowToScanStart Duration from now until start time in ms.\n     * @param {Number} offset Position of transport playhead in ms.\n     */\n    scanEvents = function scanEvents(scanStart, scanEnd, nowToScanStart, offset) {\n        midiNetwork.process(msec2tick(scanStart), msec2tick(scanEnd), msec2tick(nowToScanStart), tickInMilliseconds, msec2tick(offset), processorEvents);\n    },\n\n\n    /**\n     * Use Timing's requestAnimationFrame as clock for view updates.\n     * @param {Number} position Timing position, equal to performance.now(). \n     */\n    updateView = function updateView(position) {\n        if (renderThrottleCounter % 2 === 0) {\n            canvasView.draw(msec2tick(position), processorEvents);\n            Object.keys(processorEvents).forEach(function (v) {\n                return processorEvents[v] = [];\n            });\n        }\n        renderThrottleCounter++;\n    },\n\n\n    /**\n     * Convert milliseconds to ticks.\n     */\n    msec2tick = function msec2tick(sec) {\n        return sec / tickInMilliseconds;\n    },\n\n\n    /**\n     * Convert ticks to milliseconds.\n     */\n    tick2msec = function tick2msec(tick) {\n        return tick * tickInMilliseconds;\n    },\n\n\n    /**\n     * Set Beats Per Minute.\n     * @param {Number} newBpm New value for BPM.\n     */\n    setBPM = function setBPM() {\n        var newBpm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 120;\n\n        bpm = newBpm;\n        var beatInMilliseconds = 60000.0 / bpm;\n        tickInMilliseconds = beatInMilliseconds / ppqn;\n        // calculate change factor\n        var factor = lastBpm / bpm;\n        my.setLoopByFactor(factor);\n    },\n\n\n    /**\n     * Get Beats Per Minute of the project.\n     * @return [Number] Beats Per Minute.\n     */\n    getBPM = function getBPM() {\n        return bpm;\n    },\n\n\n    /**\n     * Set difference between AudioContext.currentTime and performance.now.\n     * Used to convert timing for AudioContext playback.\n     * @param {Number} acCurrentTime Timestamp in seconds.\n     */\n    setAudioContextOffset = function setAudioContextOffset(acCurrentTime) {\n        audioContextOffset = performance.now() - acCurrentTime * 1000;\n    };\n\n    my = my || {};\n    my.setBPM = setBPM;\n    my.store = specs.store;\n    my.scanEvents = scanEvents;\n    my.updateView = updateView;\n\n    that = specs.that || {};\n\n    that.setBPM = setBPM;\n    that.getBPM = getBPM;\n    that.setAudioContextOffset = setAudioContextOffset;\n    return that;\n}\n\n/**\n * Functionality to add synchronisation to external MIDI clock.\n * MIDI clock sends clock events at 24 ppqn.\n * @see https://en.wikipedia.org/wiki/MIDI_beat_clock\n * \n * The MIDI 'start' and 'stop' events just start and stop the transport.\n * The MIDI 'clock' event adjusts the BPM tempo.\n * \n * BPM is calculated with the time difference between clock event timestamps.\n */\nfunction createExternalClock(specs, my) {\n    var that,\n        isEnabled = false,\n        midiInput,\n        prevBPM = 0,\n        prevTimestamp = 0,\n        updateTimeout,\n\n\n    /**\n     * Enable synchronisation to external MIDI clock.\n     * @param {Boolean} isEnabled True to synchronise to external MIDI clock.\n     * @param {Object} midiInputPort MIDI input port.\n     */\n    setExternalClockEnabled = function setExternalClockEnabled(isEnabled, midiInputPort) {\n        if (isEnabled) {\n            midiInput = midiInputPort;\n            midiInput.addListener('start', 1, onStart);\n            midiInput.addListener('stop', 1, onStop);\n            midiInput.addListener('clock', 1, onClock);\n        } else {\n            if (midiInput) {\n                midiInput.removeListener('start', onStart);\n                midiInput.removeListener('stop', onStop);\n                midiInput.removeListener('clock', onClock);\n            }\n            midiInput = null;\n        }\n    },\n\n\n    /**\n     * Start transport.\n     */\n    onStart = function onStart() {\n        that.start();\n    },\n\n\n    /**\n     * Stop transport.\n     */\n    onStop = function onStop() {\n        that.pause();\n        that.rewind();\n    },\n\n\n    /**\n     * Convert events at 24 ppqn to BPM, suppress jitter from unstable clocks.\n     * @param {Object} e Event from WebMIDI.js.\n     */\n    onClock = function onClock(e) {\n        if (prevTimestamp > 0) {\n            var newBPM = 60000 / ((e.timestamp - prevTimestamp) * 24);\n            var bpm = prevBPM ? (prevBPM * 23 + newBPM) / 24 : newBPM;\n            prevBPM = bpm;\n            bpm = bpm.toFixed(1);\n            if (bpm != that.getBPM()) {\n                updateTempo(bpm);\n            }\n        }\n        prevTimestamp = e.timestamp;\n    },\n\n\n    /**\n     * Update tempo no more than once every 500ms.\n     * @param {Number} bpm The new changed BPM.\n     */\n    updateTempo = function updateTempo(bpm) {\n        if (!updateTimeout) {\n            that.setBPM(bpm);\n            updateTimeout = setTimeout(function () {\n                updateTimeout = 0;\n            }, 500);\n        }\n    };\n\n    that = specs.that || {};\n\n    that.setExternalClockEnabled = setExternalClockEnabled;\n    return that;\n}\n\n/**\n * @description Creates transport timing functionality.\n * Time is always measured in milliseconds since document load.\n * The timer can be started, stopped, rewound to zero and looped.\n * It defines a scan range that is just ahead of the play position\n * and that is meant to be used to scan for events to play.\n * @param {Object} specs Options.\n * @param {Object} my Properties shared between the functionalities of the object.\n */\nfunction createTransport(specs, my) {\n    var that,\n        position = 0,\n        origin = 0,\n        scanStart = 0,\n        scanEnd = 0,\n        lookAhead = 200,\n        loopStart = 0,\n        loopEnd = 0,\n        isRunning = false,\n        isLooping = false,\n        needsScan = false,\n        init = function init() {\n        document.addEventListener(my.store.STATE_CHANGE, function (e) {\n            switch (e.detail.action.type) {\n                case e.detail.actions.SET_TRANSPORT:\n                    switch (e.detail.state.transport) {\n                        case 'pause':\n                            pause();\n                            break;\n                        case 'play':\n                            rewind();\n                            start();\n                            break;\n                        case 'stop':\n                            pause();\n                            rewind();\n                            break;\n                    }\n                    break;\n\n                case e.detail.actions.CREATE_PROJECT:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n\n                case e.detail.actions.SET_TEMPO:\n                    my.setBPM(e.detail.state.bpm);\n                    break;\n            }\n        });\n\n        my.setBPM();\n    },\n\n\n    /**\n     * Set the scan range.\n     * @param {Number} start Start timestamp of scan range.\n     */\n    setScanRange = function setScanRange(start) {\n        scanStart = start;\n        scanEnd = scanStart + lookAhead;\n        needsScan = true;\n    },\n\n\n    /**\n     * Updated the playhead position by adjusting the timeline origin.\n     * @param {Number} newOrigin Timeline origin timestamp.\n     */\n    setOrigin = function setOrigin(newOrigin) {\n        loopStart = loopStart - origin + newOrigin;\n        loopEnd = loopEnd - origin + newOrigin;\n        origin = newOrigin;\n    },\n\n\n    /**\n     * Timer using requestAnimationFrame that updates the transport timing.\n     */\n    run = function run() {\n        if (isRunning) {\n            position = performance.now();\n            if (isLooping && position < loopEnd && scanStart < loopEnd && scanEnd > loopEnd) {\n                setOrigin(origin + (loopEnd - loopStart));\n            }\n            if (scanEnd - position < 16.7) {\n                setScanRange(scanEnd);\n            }\n            if (needsScan) {\n                needsScan = false;\n                my.scanEvents(scanStart - origin, scanEnd - origin, scanStart - position, position - origin);\n            }\n        }\n        my.updateView(position - origin);\n        requestAnimationFrame(run);\n    },\n\n\n    /**\n     * Start the timer.\n     */\n    start = function start() {\n        var offset = position - origin;\n        position = performance.now();\n        setOrigin(position - offset);\n        setScanRange(position);\n        isRunning = true;\n    },\n\n\n    /**\n     * Pause the timer.\n     */\n    pause = function pause() {\n        isRunning = false;\n    },\n\n\n    /**\n     * Rewind the timer to timeline start.\n     */\n    rewind = function rewind() {\n        position = performance.now();\n        setOrigin(position);\n        setScanRange(position);\n    },\n\n\n    /**\n     * Toggle between stop and play.\n     */\n    toggleStartStop = function toggleStartStop() {\n        if (isRunning) {\n            pause();\n        } else {\n            rewind();\n            start();\n        }\n    },\n\n\n    /**\n     * Set loop startpoint.\n     * @param {Number} position Loop start timestamp.\n     */\n    setLoopStart = function setLoopStart(position) {\n        loopStart = origin + position;\n    },\n\n\n    /**\n     * Set loop endpoint.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoopEnd = function setLoopEnd(position) {\n        loopEnd = origin + position;\n    },\n\n\n    /**\n     * Set loop mode.\n     * @param {Boolean} isEnabled True to enable looping.\n     * @param {Number} position Loop start timestamp.\n     * @param {Number} position Loop end timestamp.\n     */\n    setLoop = function setLoop(isEnabled, startPosition, endPosition) {\n        isLooping = isEnabled;\n    },\n\n\n    /**\n     * Change loop points by a factor if the tempo changes.\n     * @param {number} factor Time points multiplier.\n     */\n    setLoopByFactor = function setLoopByFactor(factor) {\n        setLoopStart(loopStart * factor);\n        setLoopEnd(loopEnd * factor);\n    };\n\n    my = my || {};\n    my.setLoopByFactor = setLoopByFactor;\n\n    that = createSequencer(specs, my);\n    that = createExternalClock(specs, my);\n\n    init();\n\n    that.run = run;\n\n    return that;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n");

/***/ })
/******/ ]);