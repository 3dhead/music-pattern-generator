webpackJsonp([1],{

/***/ 33:
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/graphic.js\": 39,\n\t\"./euclidfx/graphic.js\": 40,\n\t\"./output/graphic.js\": 41\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 33;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9ncmFwaGljXFwuanMkP2JlNGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9lcGcvZ3JhcGhpYy5qc1wiOiAzOSxcblx0XCIuL2V1Y2xpZGZ4L2dyYXBoaWMuanNcIjogNDAsXG5cdFwiLi9vdXRwdXQvZ3JhcGhpYy5qc1wiOiA0MVxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDMzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMgXlxcLlxcLy4qXFwvZ3JhcGhpY1xcLmpzJFxuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 35:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createCanvasProcessorBaseView;\nfunction createCanvasProcessorBaseView(specs, my) {\n    var that,\n        initialiseBase = function initialiseBase() {},\n        terminateBase = function terminateBase() {},\n        getPosition2d = function getPosition2d() {\n        return { x: my.positionX, y: my.positionY };\n    },\n        getType = function getType() {\n        return my.type;\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.params = specs.data.params.byId;\n    my.store = specs.store;\n    my.type = specs.data.type;\n    my.id = specs.data.id;\n    my.positionX = specs.data.positionX;\n    my.positionY = specs.data.positionY;\n    my.colorHigh = '#cccccc';\n    my.colorMid = '#dddddd';\n    my.colorLow = '#eeeeee';\n\n    that = specs.that || {};\n\n    initialiseBase();\n\n    that.terminateBase = terminateBase;\n    that.getPosition2d = getPosition2d;\n    that.getID = getID;\n    that.getType = getType;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvdmlldy9jYW52YXNwcm9jZXNzb3JiYXNlLmpzP2VjMjkiXSwibmFtZXMiOlsiY3JlYXRlQ2FudmFzUHJvY2Vzc29yQmFzZVZpZXciLCJzcGVjcyIsIm15IiwidGhhdCIsImluaXRpYWxpc2VCYXNlIiwidGVybWluYXRlQmFzZSIsImdldFBvc2l0aW9uMmQiLCJ4IiwicG9zaXRpb25YIiwieSIsInBvc2l0aW9uWSIsImdldFR5cGUiLCJ0eXBlIiwiZ2V0SUQiLCJpZCIsInBhcmFtcyIsImRhdGEiLCJieUlkIiwic3RvcmUiLCJjb2xvckhpZ2giLCJjb2xvck1pZCIsImNvbG9yTG93Il0sIm1hcHBpbmdzIjoiOzs7OztrQkFBd0JBLDZCO0FBQVQsU0FBU0EsNkJBQVQsQ0FBdUNDLEtBQXZDLEVBQThDQyxFQUE5QyxFQUFrRDtBQUM3RCxRQUFJQyxJQUFKO0FBQUEsUUFFSUMsaUJBQWlCLFNBQWpCQSxjQUFpQixHQUFXLENBQzNCLENBSEw7QUFBQSxRQUtJQyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVcsQ0FDMUIsQ0FOTDtBQUFBLFFBUUlDLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVztBQUN2QixlQUFPLEVBQUVDLEdBQUdMLEdBQUdNLFNBQVIsRUFBbUJDLEdBQUdQLEdBQUdRLFNBQXpCLEVBQVA7QUFDSCxLQVZMO0FBQUEsUUFZSUMsVUFBVSxTQUFWQSxPQUFVLEdBQVc7QUFDakIsZUFBT1QsR0FBR1UsSUFBVjtBQUNILEtBZEw7QUFBQSxRQWdCSUMsUUFBUSxTQUFSQSxLQUFRLEdBQVc7QUFDZixlQUFPWCxHQUFHWSxFQUFWO0FBQ0gsS0FsQkw7O0FBb0JBWixTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR2EsTUFBSCxHQUFZZCxNQUFNZSxJQUFOLENBQVdELE1BQVgsQ0FBa0JFLElBQTlCO0FBQ0FmLE9BQUdnQixLQUFILEdBQVdqQixNQUFNaUIsS0FBakI7QUFDQWhCLE9BQUdVLElBQUgsR0FBVVgsTUFBTWUsSUFBTixDQUFXSixJQUFyQjtBQUNBVixPQUFHWSxFQUFILEdBQVFiLE1BQU1lLElBQU4sQ0FBV0YsRUFBbkI7QUFDQVosT0FBR00sU0FBSCxHQUFlUCxNQUFNZSxJQUFOLENBQVdSLFNBQTFCO0FBQ0FOLE9BQUdRLFNBQUgsR0FBZVQsTUFBTWUsSUFBTixDQUFXTixTQUExQjtBQUNBUixPQUFHaUIsU0FBSCxHQUFlLFNBQWY7QUFDQWpCLE9BQUdrQixRQUFILEdBQWMsU0FBZDtBQUNBbEIsT0FBR21CLFFBQUgsR0FBYyxTQUFkOztBQUVBbEIsV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCOztBQUVBQzs7QUFFQUQsU0FBS0UsYUFBTCxHQUFxQkEsYUFBckI7QUFDQUYsU0FBS0csYUFBTCxHQUFxQkEsYUFBckI7QUFDQUgsU0FBS1UsS0FBTCxHQUFhQSxLQUFiO0FBQ0FWLFNBQUtRLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFdBQU9SLElBQVA7QUFDSCIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNhbnZhc1Byb2Nlc3NvckJhc2VWaWV3KHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuXG4gICAgICAgIGluaXRpYWxpc2VCYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGVybWluYXRlQmFzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0UG9zaXRpb24yZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgeDogbXkucG9zaXRpb25YLCB5OiBteS5wb3NpdGlvblkgfTtcbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGdldFR5cGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBteS50eXBlO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgZ2V0SUQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBteS5pZDtcbiAgICAgICAgfTtcbiAgICBcbiAgICBteSA9IG15IHx8IHt9O1xuICAgIG15LnBhcmFtcyA9IHNwZWNzLmRhdGEucGFyYW1zLmJ5SWQ7XG4gICAgbXkuc3RvcmUgPSBzcGVjcy5zdG9yZTtcbiAgICBteS50eXBlID0gc3BlY3MuZGF0YS50eXBlO1xuICAgIG15LmlkID0gc3BlY3MuZGF0YS5pZDtcbiAgICBteS5wb3NpdGlvblggPSBzcGVjcy5kYXRhLnBvc2l0aW9uWDtcbiAgICBteS5wb3NpdGlvblkgPSBzcGVjcy5kYXRhLnBvc2l0aW9uWTtcbiAgICBteS5jb2xvckhpZ2ggPSAnI2NjY2NjYyc7XG4gICAgbXkuY29sb3JNaWQgPSAnI2RkZGRkZCc7XG4gICAgbXkuY29sb3JMb3cgPSAnI2VlZWVlZSc7XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG5cbiAgICBpbml0aWFsaXNlQmFzZSgpO1xuICAgIFxuICAgIHRoYXQudGVybWluYXRlQmFzZSA9IHRlcm1pbmF0ZUJhc2U7XG4gICAgdGhhdC5nZXRQb3NpdGlvbjJkID0gZ2V0UG9zaXRpb24yZDtcbiAgICB0aGF0LmdldElEID0gZ2V0SUQ7XG4gICAgdGhhdC5nZXRUeXBlID0gZ2V0VHlwZTtcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC92aWV3L2NhbnZhc3Byb2Nlc3NvcmJhc2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 36:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvZXVjbGlkLmpzP2ZlMDAiXSwibmFtZXMiOlsiZ2V0RXVjbGlkUGF0dGVybiIsInJvdGF0ZUV1Y2xpZFBhdHRlcm4iLCJjYWNoZSIsInN0ZXBzIiwicHVsc2VzIiwiTWF0aCIsIm1pbiIsImNhY2hlS2V5IiwiY3JlYXRlQmpvcmtsdW5kIiwic2xpY2UiLCJwYXR0ZXJuIiwicm90YXRpb24iLCJlbGVtZW50c1RvU2hpZnQiLCJzcGxpY2UiLCJjb25jYXQiLCJmaXJzdCIsIkFycmF5IiwiZmlsbCIsInNlY29uZCIsImZpcnN0TGVuZ3RoIiwibGVuZ3RoIiwibWluTGVuZ3RoIiwibG9vcFRocmVzaG9sZCIsIngiLCJwcm90b3R5cGUiLCJjYWxsIiwiZm9yRWFjaCIsImYiLCJzIl0sIm1hcHBpbmdzIjoiOzs7OztRQVNnQkEsZ0IsR0FBQUEsZ0I7UUFTQUMsbUIsR0FBQUEsbUI7QUFsQmhCOzs7Ozs7O0FBT0EsSUFBTUMsUUFBUSxFQUFkOztBQUVPLFNBQVNGLGdCQUFULENBQTBCRyxLQUExQixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDNUNBLGFBQVNDLEtBQUtDLEdBQUwsQ0FBU0gsS0FBVCxFQUFnQkMsTUFBaEIsQ0FBVDtBQUNBLFFBQU1HLFdBQWNKLEtBQWQsU0FBdUJDLE1BQTdCO0FBQ0EsUUFBSSxDQUFDRixNQUFNSyxRQUFOLENBQUwsRUFBc0I7QUFDbEJMLGNBQU1LLFFBQU4sSUFBa0JDLGdCQUFnQkwsS0FBaEIsRUFBdUJDLE1BQXZCLENBQWxCO0FBQ0g7QUFDRCxXQUFPRixNQUFNSyxRQUFOLEVBQWdCRSxLQUFoQixDQUFzQixDQUF0QixDQUFQO0FBQ0g7O0FBRU0sU0FBU1IsbUJBQVQsQ0FBNkJTLE9BQTdCLEVBQXNDQyxRQUF0QyxFQUFnRDtBQUNuRCxRQUFNQyxrQkFBa0JGLFFBQVFHLE1BQVIsQ0FBZUYsUUFBZixDQUF4QjtBQUNBLFdBQU9DLGdCQUFnQkUsTUFBaEIsQ0FBdUJKLE9BQXZCLENBQVA7QUFDSDs7QUFFRDs7Ozs7O0FBTUEsU0FBU0YsZUFBVCxDQUF5QkwsS0FBekIsRUFBZ0NDLE1BQWhDLEVBQXdDO0FBQ3BDLFFBQUlBLFNBQVMsQ0FBVCxJQUFjRCxRQUFRLENBQXRCLElBQTJCQSxRQUFRQyxNQUF2QyxFQUErQztBQUMzQyxlQUFPLEVBQVA7QUFDSDs7QUFFRDtBQUNBLFFBQUlXLFFBQVEsSUFBSUMsS0FBSixDQUFVWixNQUFWLEVBQWtCYSxJQUFsQixDQUF1QixDQUFDLENBQUQsQ0FBdkIsQ0FBWjtBQUNBLFFBQUlDLFNBQVMsSUFBSUYsS0FBSixDQUFVYixRQUFRQyxNQUFsQixFQUEwQmEsSUFBMUIsQ0FBK0IsQ0FBQyxDQUFELENBQS9CLENBQWI7O0FBRUEsUUFBSUUsY0FBY0osTUFBTUssTUFBeEI7QUFDQSxRQUFJQyxZQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFoQjs7QUFFQSxRQUFJRSxnQkFBZ0IsQ0FBcEI7QUFDQTtBQUNBLFdBQU9ELFlBQVlDLGFBQW5CLEVBQWtDOztBQUU5QjtBQUNBLFlBQUlBLGtCQUFrQixDQUF0QixFQUF5QjtBQUNyQkEsNEJBQWdCLENBQWhCO0FBQ0g7O0FBRUQ7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsU0FBcEIsRUFBK0JFLEdBQS9CLEVBQW9DO0FBQ2hDUixrQkFBTVEsQ0FBTixJQUFXUCxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJWLE1BQU1RLENBQU4sQ0FBNUIsRUFBc0NMLE9BQU9LLENBQVAsQ0FBdEMsQ0FBWDtBQUNIOztBQUVEO0FBQ0EsWUFBSUYsY0FBY0YsV0FBbEIsRUFBK0I7QUFDM0JELHFCQUFTRixNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCUCxNQUEzQixFQUFtQ0csU0FBbkMsQ0FBVDtBQUNIO0FBQ0Q7QUFDQTtBQUpBLGFBS0s7QUFDREgseUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDTSxTQUFsQyxDQUFUO0FBQ0FOLHdCQUFRQyxNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCVixLQUEzQixFQUFrQyxDQUFsQyxFQUFxQ00sU0FBckMsQ0FBUjtBQUNIO0FBQ0RGLHNCQUFjSixNQUFNSyxNQUFwQjtBQUNBQyxvQkFBWWhCLEtBQUtDLEdBQUwsQ0FBU2EsV0FBVCxFQUFzQkQsT0FBT0UsTUFBN0IsQ0FBWjtBQUNIOztBQUVEO0FBQ0EsUUFBSVYsVUFBVSxFQUFkO0FBQ0FLLFVBQU1XLE9BQU4sQ0FBYyxhQUFLO0FBQ2ZoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2lCLENBQXJDLENBQVY7QUFDSCxLQUZEO0FBR0FULFdBQU9RLE9BQVAsQ0FBZSxhQUFLO0FBQ2hCaEIsa0JBQVVNLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QmYsT0FBNUIsRUFBcUNrQixDQUFyQyxDQUFWO0FBQ0gsS0FGRDs7QUFJQSxXQUFPbEIsT0FBUDtBQUNIIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFdWNsaWRlYW4gcGF0dGVybiBjYWxjdWxhdGlvbiBieSBNaWNoYWVsIEtvbnRvZ2lhbm5pczpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ta29udG9naWFubmlzL2V1Y2xpZGVhbi1yaHl0aG1zXG4gKiBiYXNlZCBvbiBhIFB5dGhvbiBzY3JpcHQgZnJvbSBkaXNhcHBlYXJlZCB3ZWJzaXRlIFxuICogaHR0cDovL3d3dy5hdG9uYWxtaWNyb3Nob3Jlcy5jb20vXG4gKi9cblxuY29uc3QgY2FjaGUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV1Y2xpZFBhdHRlcm4oc3RlcHMsIHB1bHNlcykge1xuICAgIHB1bHNlcyA9IE1hdGgubWluKHN0ZXBzLCBwdWxzZXMpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7c3RlcHN9XyR7cHVsc2VzfWA7XG4gICAgaWYgKCFjYWNoZVtjYWNoZUtleV0pIHtcbiAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbY2FjaGVLZXldLnNsaWNlKDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlRXVjbGlkUGF0dGVybihwYXR0ZXJuLCByb3RhdGlvbikge1xuICAgIGNvbnN0IGVsZW1lbnRzVG9TaGlmdCA9IHBhdHRlcm4uc3BsaWNlKHJvdGF0aW9uKTtcbiAgICByZXR1cm4gZWxlbWVudHNUb1NoaWZ0LmNvbmNhdChwYXR0ZXJuKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgRXVjbGlkZWFuIHJoeXRobSBwYXR0ZXJuLlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBzIFRvdGFsIGFtb3VudCBvZiB0c3RlcHMgaW4gdGhlIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gcHVsc2VzIFB1bHNlcyB0byBzcHJlYWQgb3ZlciB0aGUgcGF0dGVybi5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBCb29sZWFucyB0aGF0IGZvcm0gdGhlIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJqb3JrbHVuZChzdGVwcywgcHVsc2VzKSB7XG4gICAgaWYgKHB1bHNlcyA8IDAgfHwgc3RlcHMgPCAwIHx8IHN0ZXBzIDwgcHVsc2VzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIFxuICAgIC8vIENyZWF0ZSB0aGUgdHdvIGFycmF5c1xuICAgIGxldCBmaXJzdCA9IG5ldyBBcnJheShwdWxzZXMpLmZpbGwoWzFdKTtcbiAgICBsZXQgc2Vjb25kID0gbmV3IEFycmF5KHN0ZXBzIC0gcHVsc2VzKS5maWxsKFswXSk7XG4gIFxuICAgIGxldCBmaXJzdExlbmd0aCA9IGZpcnN0Lmxlbmd0aDtcbiAgICBsZXQgbWluTGVuZ3RoID0gTWF0aC5taW4oZmlyc3RMZW5ndGgsIHNlY29uZC5sZW5ndGgpO1xuICBcbiAgICBsZXQgbG9vcFRocmVzaG9sZCA9IDA7XG4gICAgLy8gTG9vcCB1bnRpbCBhdCBsZWFzdCBvbmUgYXJyYXkgaGFzIGxlbmd0aCBndCAyICgxIGZvciBmaXJzdCBsb29wKVxuICAgIHdoaWxlIChtaW5MZW5ndGggPiBsb29wVGhyZXNob2xkKSB7XG5cbiAgICAgICAgLy8gQWxsb3cgb25seSBsb29wVGhyZXNob2xkIHRvIGJlIHplcm8gb24gdGhlIGZpcnN0IGxvb3BcbiAgICAgICAgaWYgKGxvb3BUaHJlc2hvbGQgPT09IDApIHtcbiAgICAgICAgICAgIGxvb3BUaHJlc2hvbGQgPSAxO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvLyBGb3IgdGhlIG1pbmltdW0gYXJyYXkgbG9vcCBhbmQgY29uY2F0XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgbWluTGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIGZpcnN0W3hdID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKGZpcnN0W3hdLCBzZWNvbmRbeF0pO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvLyBpZiB0aGUgc2Vjb25kIHdhcyB0aGUgYmlnZ2VyIGFycmF5LCBzbGljZSB0aGUgcmVtYWluaW5nIGVsZW1lbnRzL2FycmF5cyBhbmQgdXBkYXRlXG4gICAgICAgIGlmIChtaW5MZW5ndGggPT09IGZpcnN0TGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWNvbmQsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHVwZGF0ZSB0aGUgc2Vjb25kIChzbWFsbGVzdCBhcnJheSkgd2l0aCB0aGUgcmVtYWluZGVycyBvZiB0aGUgZmlyc3RcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSB0aGUgZmlyc3QgYXJyYXkgdG8gaW5jbHVkZSBvbmx0IHRoZSBleHRlbmRlZCBzdWItYXJyYXlzXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2Vjb25kID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIG1pbkxlbmd0aCk7XG4gICAgICAgICAgICBmaXJzdCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZpcnN0LCAwLCBtaW5MZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgICAgICBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gICAgfVxuICBcbiAgICAvLyBCdWlsZCB0aGUgZmluYWwgYXJyYXlcbiAgICBsZXQgcGF0dGVybiA9IFtdO1xuICAgIGZpcnN0LmZvckVhY2goZiA9PiB7XG4gICAgICAgIHBhdHRlcm4gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwocGF0dGVybiwgZik7XG4gICAgfSk7XG4gICAgc2Vjb25kLmZvckVhY2gocyA9PiB7XG4gICAgICAgIHBhdHRlcm4gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwocGF0dGVybiwgcyk7XG4gICAgfSk7XG4gIFxuICAgIHJldHVybiBwYXR0ZXJuO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXBnL2V1Y2xpZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36\n");

/***/ }),

/***/ 37:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanM/MDRkNSJdLCJuYW1lcyI6WyJnZXRFdWNsaWRQYXR0ZXJuIiwicm90YXRlRXVjbGlkUGF0dGVybiIsImNhY2hlIiwic3RlcHMiLCJwdWxzZXMiLCJNYXRoIiwibWluIiwiY2FjaGVLZXkiLCJjcmVhdGVCam9ya2x1bmQiLCJzbGljZSIsInBhdHRlcm4iLCJyb3RhdGlvbiIsImVsZW1lbnRzVG9TaGlmdCIsInNwbGljZSIsImNvbmNhdCIsImZpcnN0IiwiQXJyYXkiLCJmaWxsIiwic2Vjb25kIiwiZmlyc3RMZW5ndGgiLCJsZW5ndGgiLCJtaW5MZW5ndGgiLCJsb29wVGhyZXNob2xkIiwieCIsInByb3RvdHlwZSIsImNhbGwiLCJmb3JFYWNoIiwiZiIsInMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBU2dCQSxnQixHQUFBQSxnQjtRQVNBQyxtQixHQUFBQSxtQjtBQWxCaEI7Ozs7Ozs7QUFPQSxJQUFNQyxRQUFRLEVBQWQ7O0FBRU8sU0FBU0YsZ0JBQVQsQ0FBMEJHLEtBQTFCLEVBQWlDQyxNQUFqQyxFQUF5QztBQUM1Q0EsYUFBU0MsS0FBS0MsR0FBTCxDQUFTSCxLQUFULEVBQWdCQyxNQUFoQixDQUFUO0FBQ0EsUUFBTUcsV0FBY0osS0FBZCxTQUF1QkMsTUFBN0I7QUFDQSxRQUFJLENBQUNGLE1BQU1LLFFBQU4sQ0FBTCxFQUFzQjtBQUNsQkwsY0FBTUssUUFBTixJQUFrQkMsZ0JBQWdCTCxLQUFoQixFQUF1QkMsTUFBdkIsQ0FBbEI7QUFDSDtBQUNELFdBQU9GLE1BQU1LLFFBQU4sRUFBZ0JFLEtBQWhCLENBQXNCLENBQXRCLENBQVA7QUFDSDs7QUFFTSxTQUFTUixtQkFBVCxDQUE2QlMsT0FBN0IsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQ25ELFFBQU1DLGtCQUFrQkYsUUFBUUcsTUFBUixDQUFlRixRQUFmLENBQXhCO0FBQ0EsV0FBT0MsZ0JBQWdCRSxNQUFoQixDQUF1QkosT0FBdkIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixlQUFULENBQXlCTCxLQUF6QixFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDcEMsUUFBSUEsU0FBUyxDQUFULElBQWNELFFBQVEsQ0FBdEIsSUFBMkJBLFFBQVFDLE1BQXZDLEVBQStDO0FBQzNDLGVBQU8sRUFBUDtBQUNIOztBQUVEO0FBQ0EsUUFBSVcsUUFBUSxJQUFJQyxLQUFKLENBQVVaLE1BQVYsRUFBa0JhLElBQWxCLENBQXVCLENBQUMsQ0FBRCxDQUF2QixDQUFaO0FBQ0EsUUFBSUMsU0FBUyxJQUFJRixLQUFKLENBQVViLFFBQVFDLE1BQWxCLEVBQTBCYSxJQUExQixDQUErQixDQUFDLENBQUQsQ0FBL0IsQ0FBYjs7QUFFQSxRQUFJRSxjQUFjSixNQUFNSyxNQUF4QjtBQUNBLFFBQUlDLFlBQVloQixLQUFLQyxHQUFMLENBQVNhLFdBQVQsRUFBc0JELE9BQU9FLE1BQTdCLENBQWhCOztBQUVBLFFBQUlFLGdCQUFnQixDQUFwQjtBQUNBO0FBQ0EsV0FBT0QsWUFBWUMsYUFBbkIsRUFBa0M7O0FBRTlCO0FBQ0EsWUFBSUEsa0JBQWtCLENBQXRCLEVBQXlCO0FBQ3JCQSw0QkFBZ0IsQ0FBaEI7QUFDSDs7QUFFRDtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixTQUFwQixFQUErQkUsR0FBL0IsRUFBb0M7QUFDaENSLGtCQUFNUSxDQUFOLElBQVdQLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QlYsTUFBTVEsQ0FBTixDQUE1QixFQUFzQ0wsT0FBT0ssQ0FBUCxDQUF0QyxDQUFYO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJRixjQUFjRixXQUFsQixFQUErQjtBQUMzQkQscUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJQLE1BQTNCLEVBQW1DRyxTQUFuQyxDQUFUO0FBQ0g7QUFDRDtBQUNBO0FBSkEsYUFLSztBQUNESCx5QkFBU0YsTUFBTVEsU0FBTixDQUFnQmYsS0FBaEIsQ0FBc0JnQixJQUF0QixDQUEyQlYsS0FBM0IsRUFBa0NNLFNBQWxDLENBQVQ7QUFDQU4sd0JBQVFDLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDLENBQWxDLEVBQXFDTSxTQUFyQyxDQUFSO0FBQ0g7QUFDREYsc0JBQWNKLE1BQU1LLE1BQXBCO0FBQ0FDLG9CQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFaO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJVixVQUFVLEVBQWQ7QUFDQUssVUFBTVcsT0FBTixDQUFjLGFBQUs7QUFDZmhCLGtCQUFVTSxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJmLE9BQTVCLEVBQXFDaUIsQ0FBckMsQ0FBVjtBQUNILEtBRkQ7QUFHQVQsV0FBT1EsT0FBUCxDQUFlLGFBQUs7QUFDaEJoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2tCLENBQXJDLENBQVY7QUFDSCxLQUZEOztBQUlBLFdBQU9sQixPQUFQO0FBQ0giLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV1Y2xpZGVhbiBwYXR0ZXJuIGNhbGN1bGF0aW9uIGJ5IE1pY2hhZWwgS29udG9naWFubmlzOlxuICogaHR0cHM6Ly9naXRodWIuY29tL21rb250b2dpYW5uaXMvZXVjbGlkZWFuLXJoeXRobXNcbiAqIGJhc2VkIG9uIGEgUHl0aG9uIHNjcmlwdCBmcm9tIGRpc2FwcGVhcmVkIHdlYnNpdGUgXG4gKiBodHRwOi8vd3d3LmF0b25hbG1pY3Jvc2hvcmVzLmNvbS9cbiAqL1xuXG5jb25zdCBjYWNoZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXVjbGlkUGF0dGVybihzdGVwcywgcHVsc2VzKSB7XG4gICAgcHVsc2VzID0gTWF0aC5taW4oc3RlcHMsIHB1bHNlcyk7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtzdGVwc31fJHtwdWxzZXN9YDtcbiAgICBpZiAoIWNhY2hlW2NhY2hlS2V5XSkge1xuICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBjcmVhdGVCam9ya2x1bmQoc3RlcHMsIHB1bHNlcyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV0uc2xpY2UoMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVFdWNsaWRQYXR0ZXJuKHBhdHRlcm4sIHJvdGF0aW9uKSB7XG4gICAgY29uc3QgZWxlbWVudHNUb1NoaWZ0ID0gcGF0dGVybi5zcGxpY2Uocm90YXRpb24pO1xuICAgIHJldHVybiBlbGVtZW50c1RvU2hpZnQuY29uY2F0KHBhdHRlcm4pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBFdWNsaWRlYW4gcmh5dGhtIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gc3RlcHMgVG90YWwgYW1vdW50IG9mIHRzdGVwcyBpbiB0aGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwdWxzZXMgUHVsc2VzIHRvIHNwcmVhZCBvdmVyIHRoZSBwYXR0ZXJuLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIEJvb2xlYW5zIHRoYXQgZm9ybSB0aGUgcGF0dGVybi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpIHtcbiAgICBpZiAocHVsc2VzIDwgMCB8fCBzdGVwcyA8IDAgfHwgc3RlcHMgPCBwdWxzZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgXG4gICAgLy8gQ3JlYXRlIHRoZSB0d28gYXJyYXlzXG4gICAgbGV0IGZpcnN0ID0gbmV3IEFycmF5KHB1bHNlcykuZmlsbChbMV0pO1xuICAgIGxldCBzZWNvbmQgPSBuZXcgQXJyYXkoc3RlcHMgLSBwdWxzZXMpLmZpbGwoWzBdKTtcbiAgXG4gICAgbGV0IGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gIFxuICAgIGxldCBsb29wVGhyZXNob2xkID0gMDtcbiAgICAvLyBMb29wIHVudGlsIGF0IGxlYXN0IG9uZSBhcnJheSBoYXMgbGVuZ3RoIGd0IDIgKDEgZm9yIGZpcnN0IGxvb3ApXG4gICAgd2hpbGUgKG1pbkxlbmd0aCA+IGxvb3BUaHJlc2hvbGQpIHtcblxuICAgICAgICAvLyBBbGxvdyBvbmx5IGxvb3BUaHJlc2hvbGQgdG8gYmUgemVybyBvbiB0aGUgZmlyc3QgbG9vcFxuICAgICAgICBpZiAobG9vcFRocmVzaG9sZCA9PT0gMCkge1xuICAgICAgICAgICAgbG9vcFRocmVzaG9sZCA9IDE7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIEZvciB0aGUgbWluaW11bSBhcnJheSBsb29wIGFuZCBjb25jYXRcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBtaW5MZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgZmlyc3RbeF0gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoZmlyc3RbeF0sIHNlY29uZFt4XSk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIGlmIHRoZSBzZWNvbmQgd2FzIHRoZSBiaWdnZXIgYXJyYXksIHNsaWNlIHRoZSByZW1haW5pbmcgZWxlbWVudHMvYXJyYXlzIGFuZCB1cGRhdGVcbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gZmlyc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIHNlY29uZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlY29uZCwgbWluTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UgdXBkYXRlIHRoZSBzZWNvbmQgKHNtYWxsZXN0IGFycmF5KSB3aXRoIHRoZSByZW1haW5kZXJzIG9mIHRoZSBmaXJzdFxuICAgICAgICAvLyBhbmQgdXBkYXRlIHRoZSBmaXJzdCBhcnJheSB0byBpbmNsdWRlIG9ubHQgdGhlIGV4dGVuZGVkIHN1Yi1hcnJheXNcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaXJzdCwgbWluTGVuZ3RoKTtcbiAgICAgICAgICAgIGZpcnN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIDAsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RMZW5ndGggPSBmaXJzdC5sZW5ndGg7XG4gICAgICAgIG1pbkxlbmd0aCA9IE1hdGgubWluKGZpcnN0TGVuZ3RoLCBzZWNvbmQubGVuZ3RoKTtcbiAgICB9XG4gIFxuICAgIC8vIEJ1aWxkIHRoZSBmaW5hbCBhcnJheVxuICAgIGxldCBwYXR0ZXJuID0gW107XG4gICAgZmlyc3QuZm9yRWFjaChmID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBmKTtcbiAgICB9KTtcbiAgICBzZWNvbmQuZm9yRWFjaChzID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBzKTtcbiAgICB9KTtcbiAgXG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n");

/***/ }),

/***/ 39:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(35);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _euclid = __webpack_require__(36);\n\nvar _config = __webpack_require__(8);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Euclidean pattern animated necklace wheel drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        necklaceCanvas = void 0,\n        necklaceCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        pointerCanvas = void 0,\n        pointerCtx = void 0,\n        pointerRotation = void 0,\n        pointerRotationPrevious = 0,\n        pointerMutedRadius = 30,\n        pointerCanvasCenter = void 0,\n        radius = 110,\n        necklaceMinRadius = 50,\n        necklaceRadius = void 0,\n        centerDotFullRadius = 10,\n        centerDotRadius = void 0,\n        centerDotSize = void 0,\n        centerDotX = void 0,\n        centerDotY = void 0,\n        centerDotStartTween = void 0,\n        centerDotEndTween = void 0,\n        centerRadius = 20,\n        outConnectorY = 35,\n        selectRadius = 15,\n        dotRadius = void 0,\n        dotMaxRadius = 10,\n        dotActiveRadius = void 0,\n        zeroMarkerRadius = 3,\n        lineWidth = 2,\n        isSelected = false,\n        doublePI = Math.PI * 2,\n        dotAnimations = {},\n        isNoteActive = false,\n        necklace = [],\n        duration = 0,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = specs.canvasDirtyCallback;\n\n        initGraphics();\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        redrawStaticCanvas();\n        updateDuration();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                        case 'pulses':\n                            updateDuration();\n                        // fall through\n                        case 'rotation':\n                            updateNecklace();\n                            break;\n                        case 'is_mute':\n                            updatePointer();\n                            break;\n                        case 'name':\n                            updateName();\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                        case 'note_length':\n                            updateDuration();\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                var processor = e.detail.state.processors.byId[my.id];\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = radius * 2;\n        staticCanvas.width = radius * 2;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for dots ring and polygon\n        necklaceCanvas = document.createElement('canvas');\n        necklaceCanvas.height = radius * 2;\n        necklaceCanvas.width = radius * 2;\n        necklaceCtx = necklaceCanvas.getContext('2d');\n        necklaceCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the pointer\n        pointerCanvas = document.createElement('canvas');\n        pointerCanvas.height = radius;\n        pointerCanvas.width = centerRadius * 2;\n        pointerCtx = pointerCanvas.getContext('2d');\n        pointerCtx.lineWidth = lineWidth;\n        pointerCanvasCenter = pointerCanvas.width / 2;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = radius * 2;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n\n        // width and height to clear center dot \n        centerDotSize = (centerDotFullRadius + 1) * 2;\n    },\n\n\n    /**\n     * Show circle if the my.processor is selected, else hide.\n     * @param {Boolean} isSelectedView True if selected.\n     */\n    setSelected = function setSelected(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw(position, processorEvents) {\n        showPlaybackPosition(position);\n        updateNoteAnimations();\n\n        if (processorEvents[my.id] && processorEvents[my.id].length) {\n            for (var i = 0, n = processorEvents[my.id].length; i < n; i++) {\n                var event = processorEvents[my.id][i];\n                startNoteAnimation(event.stepIndex, event.delayFromNowToNoteStart, event.delayFromNowToNoteEnd);\n            }\n        }\n    },\n\n\n    /**\n     * Show the playback position within the pattern.\n     * Indicated by the pointer's rotation.\n     * @param  {Number} position Position within pattern in ticks.\n     */\n    showPlaybackPosition = function showPlaybackPosition(position) {\n        pointerRotationPrevious = pointerRotation;\n        pointerRotation = doublePI * (position % duration / duration);\n    },\n\n\n    /**\n     * Update the current nacklace dot animations.\n     */\n    updateNoteAnimations = function updateNoteAnimations() {\n        Object.keys(dotAnimations).forEach(function (key) {\n            var obj = dotAnimations[key];\n            obj.dotRadius /= 1.1;\n            if (obj.isActive && obj.dotRadius < 1) {\n                delete dotAnimations[key];\n            }\n        });\n    },\n\n\n    /**\n     * Show animation of the pattern dot that is about to play. \n     * @param {Number} stepIndex Index of the step to play.\n     * @param {Number} noteStartDelay Delay from now until note start in ms.\n     * @param {Number} noteStopDelay Delay from now until note end in ms.\n     */\n    startNoteAnimation = function startNoteAnimation(stepIndex, noteStartDelay, noteStopDelay) {\n        // get the coordinates of the dot for this step\n        var steps = my.params.steps.value;\n\n        // retain necklace dot state in object\n        dotAnimations[stepIndex] = {\n            positionX: necklace[stepIndex].center.x,\n            positionY: necklace[stepIndex].center.y,\n            boundingBox: necklace[stepIndex].rect,\n            dotRadius: 0,\n            isActive: false\n\n            // delay start of animation\n        };setTimeout(function () {\n            var tweeningDot = dotAnimations[stepIndex];\n            tweeningDot.dotRadius = dotActiveRadius;\n            tweeningDot.isActive = true;\n        }, noteStartDelay);\n    },\n\n\n    /**\n     * Calculate the pattern's duration in milliseconds.\n     */\n    updateDuration = function updateDuration() {\n        var rate = my.params.is_triplets.value ? my.params.rate.value * (2 / 3) : my.params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        duration = my.params.steps.value * stepDuration;\n    },\n\n\n    /**\n     * Update the pattern dots.\n     * If the steps, pulses or rotation properties have changed.\n     * If steps change it might invalidate the pointer.\n     */\n    updateNecklace = function updateNecklace() {\n        var steps = my.params.steps.value,\n            pulses = my.params.pulses.value,\n            rotation = my.params.rotation.value,\n            euclid = void 0,\n            rad = void 0,\n            x = void 0,\n            y = void 0;\n\n        euclid = (0, _euclid.getEuclidPattern)(steps, pulses);\n        euclid = (0, _euclid.rotateEuclidPattern)(euclid, rotation);\n\n        necklace = [];\n\n        // calculate the dot positions\n        necklaceRadius = necklaceMinRadius + Math.max(0, steps - 16) * 0.8;\n        for (var i = 0; i < steps; i++) {\n            rad = doublePI * (i / steps);\n            x = Math.sin(rad) * necklaceRadius;\n            y = Math.cos(rad) * necklaceRadius;\n            necklace.push({\n                center: {\n                    x: x,\n                    y: y\n                },\n                rect: {\n                    x: x - dotMaxRadius * 2,\n                    y: y + dotMaxRadius * 2,\n                    xAbs: 0,\n                    yAbs: 0,\n                    height: dotMaxRadius * 4,\n                    width: dotMaxRadius * 4\n                }\n            });\n        }\n\n        necklaceCtx.clearRect(0, 0, necklaceCanvas.width, necklaceCanvas.height);\n\n        updateNecklaceAbsolute();\n        updatePolygon(steps, pulses, euclid, necklace);\n        updateDots(steps, euclid, necklace);\n        updatePointer();\n        updateZeroMarker(steps, rotation);\n        updateRotatedMarker(steps, rotation);\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update the coordinates of the necklace nodes relative to the main canvas.\n     */\n    updateNecklaceAbsolute = function updateNecklaceAbsolute() {\n        var rect = void 0;\n        for (var i = 0, n = necklace.length; i < n; i++) {\n            rect = necklace[i].rect;\n            rect.xAbs = my.positionX + rect.x;\n            rect.yAbs = my.positionY - rect.y;\n        }\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        centerDotX = my.positionX - centerDotFullRadius - 1;\n        centerDotY = my.positionY - centerDotFullRadius - 1;\n        updateNecklaceAbsolute();\n        redrawStaticCanvas();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Draw polygon.\n     */\n    updatePolygon = function updatePolygon(steps, pulses, euclid, necklace) {\n        if (pulses > 1) {\n            necklaceCtx.fillStyle = my.colorLow;\n            necklaceCtx.strokeStyle = my.colorLow;\n            necklaceCtx.beginPath();\n            var isFirstPoint = true,\n                firstPoint = void 0,\n                dotCenter = void 0;\n            for (var i = 0; i < steps; i++) {\n                if (euclid[i]) {\n                    dotCenter = necklace[i].center;\n                    if (isFirstPoint) {\n                        isFirstPoint = false;\n                        firstPoint = dotCenter;\n                        necklaceCtx.moveTo(radius + firstPoint.x, radius - firstPoint.y);\n                    } else {\n                        necklaceCtx.lineTo(radius + dotCenter.x, radius - dotCenter.y);\n                    }\n                }\n            }\n            necklaceCtx.lineTo(radius + firstPoint.x, radius - firstPoint.y);\n            necklaceCtx.stroke();\n            necklaceCtx.globalAlpha = 0.6;\n            necklaceCtx.fill();\n            necklaceCtx.globalAlpha = 1.0;\n        }\n    },\n\n\n    /**\n     * Draw the necklace dots in their inactive state.\n     */\n    updateDots = function updateDots(steps, euclid, necklace) {\n        dotRadius = dotMaxRadius - 3 - Math.max(0, steps - 16) * 0.09;\n        dotActiveRadius = dotRadius * 2.5;\n\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        var point = void 0;\n        for (var i = 0; i < steps; i++) {\n            point = necklace[i].center;\n            if (euclid[i]) {\n                // active dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.fill();\n                necklaceCtx.stroke();\n            } else {\n                // passive dot\n                necklaceCtx.beginPath();\n                necklaceCtx.moveTo(radius + point.x + dotRadius, radius - point.y);\n                necklaceCtx.arc(radius + point.x, radius - point.y, dotRadius, 0, doublePI, true);\n                necklaceCtx.stroke();\n            }\n        }\n    },\n\n\n    /**\n     * Update the pointer that connects the dots.\n     */\n    updatePointer = function updatePointer() {\n        var isMute = my.params.is_mute.value,\n            pointerRadius = isMute ? pointerMutedRadius : necklaceRadius,\n            pointerX = isMute ? 15 : 19,\n            pointerY = isMute ? 15 : 6;\n\n        pointerCtx.clearRect(0, 0, pointerCanvas.width, pointerCanvas.height);\n        pointerCtx.beginPath();\n        pointerCtx.moveTo(pointerCanvasCenter - pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.lineTo(pointerCanvasCenter, pointerCanvas.height - pointerRadius);\n        pointerCtx.lineTo(pointerCanvasCenter + pointerX, pointerCanvas.height - pointerY);\n        pointerCtx.stroke();\n    },\n\n\n    /**\n     * Update the zero marker.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateZeroMarker = function updateZeroMarker(steps, rotation) {\n        var rad = doublePI * (-rotation / steps),\n            markerRadius = necklaceRadius + 15,\n            x = radius + Math.sin(rad) * markerRadius,\n            y = radius - Math.cos(rad) * markerRadius;\n\n        necklaceCtx.beginPath();\n        necklaceCtx.moveTo(x, y + zeroMarkerRadius);\n        necklaceCtx.arc(x, y, zeroMarkerRadius, 0, doublePI, true);\n        necklaceCtx.stroke();\n    },\n\n\n    /**\n     * Update the marker that indicates if the pattern is rotated.\n     * @param {Number} steps Euclidean necklace node amount.\n     * @param {Number} rotation Euclidean necklace rotation.\n     */\n    updateRotatedMarker = function updateRotatedMarker(steps, rotation) {\n        if (rotation !== 0) {\n            var x = radius,\n                y = radius - necklaceRadius - 10;\n\n            necklaceCtx.beginPath();\n            necklaceCtx.moveTo(x, y);\n            necklaceCtx.lineTo(x, y - 10);\n            necklaceCtx.lineTo(x + 6, y - 7);\n            necklaceCtx.lineTo(x, y - 4);\n            necklaceCtx.stroke();\n        }\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName() {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCanvas.width, nameCanvas.height);\n        nameCtx.fillText(my.params.name.value, nameCanvas.width / 2, nameCanvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Redraw the pattern's static shapes canvas.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.clearRect(0, 0, staticCanvas.width, staticCanvas.height);\n        staticCtx.beginPath();\n\n        // necklace\n        staticCtx.drawImage(necklaceCanvas, 0, 0);\n\n        // center ring\n        staticCtx.moveTo(radius + centerRadius, radius);\n        staticCtx.arc(radius, radius, centerRadius, 0, doublePI, true);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(radius + selectRadius, radius);\n            staticCtx.arc(radius, radius, selectRadius, 0, doublePI, true);\n        }\n        staticCtx.stroke();\n    },\n\n\n    /**\n     * Add the pattern's static canvas to the main static canvas.\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - radius, my.positionY - radius);\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - radius, my.positionY + necklaceRadius + 4);\n    },\n\n\n    /**\n     * Draw the pattern's dynamic shapes on the main dymamic canvas\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToDynamicView = function addToDynamicView(mainDynamicCtx) {\n        // draw rotating pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotation);\n        mainDynamicCtx.drawImage(pointerCanvas, -pointerCanvasCenter, -pointerCanvas.height);\n        mainDynamicCtx.restore();\n\n        mainDynamicCtx.fillStyle = my.colorHigh;\n        mainDynamicCtx.strokeStyle = my.colorHigh;\n        mainDynamicCtx.beginPath();\n\n        // necklace dots\n        isNoteActive = false;\n        var n = dotAnimations.length,\n            largestDot = dotRadius,\n            hasDotAnimations = false,\n            dotState = void 0,\n            x = void 0,\n            y = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                dotState = dotAnimations[key];\n                x = my.positionX + dotState.positionX;\n                y = my.positionY - dotState.positionY;\n                mainDynamicCtx.moveTo(x + dotState.dotRadius, y);\n                mainDynamicCtx.arc(x, y, dotState.dotRadius, 0, doublePI, true);\n                largestDot = Math.max(largestDot, dotState.dotRadius);\n                isNoteActive = true;\n            }\n        }\n\n        // center dot\n        if (isNoteActive) {\n            var largestDotNormalised = (largestDot - dotRadius) / (dotActiveRadius - dotRadius);\n            centerDotRadius = largestDotNormalised * centerDotFullRadius;\n            mainDynamicCtx.moveTo(my.positionX + centerDotRadius, my.positionY);\n            mainDynamicCtx.arc(my.positionX, my.positionY, centerDotRadius, 0, doublePI, true);\n        }\n\n        mainDynamicCtx.fill();\n        mainDynamicCtx.stroke();\n    },\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {\n        // center dot\n        if (isNoteActive) {\n            mainDynamicCtx.clearRect(centerDotX, centerDotY, centerDotSize, centerDotSize);\n        }\n\n        // necklace dots\n        var rect = void 0;\n        for (var key in dotAnimations) {\n            if (dotAnimations.hasOwnProperty(key)) {\n                rect = dotAnimations[key].boundingBox;\n                mainDynamicCtx.clearRect(rect.xAbs, rect.yAbs, rect.height, rect.width);\n            }\n        }\n\n        // pointer\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotationPrevious);\n        mainDynamicCtx.clearRect(-pointerCanvasCenter, -pointerCanvas.height, pointerCanvas.width, pointerCanvas.height);\n        mainDynamicCtx.restore();\n    },\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= necklaceRadius + dotRadius;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        staticCtx.strokeStyle = my.colorHigh;\n        necklaceCtx.fillStyle = my.colorHigh;\n        necklaceCtx.strokeStyle = my.colorHigh;\n        pointerCtx.strokeStyle = my.colorHigh;\n        updateName();\n        updateNecklace();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),

/***/ 40:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(35);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nvar _euclid = __webpack_require__(37);\n\nvar _config = __webpack_require__(8);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Euclidean pattern animated necklace wheel drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = void 0,\n        staticCtx = void 0,\n        rotateCtx = void 0,\n        pointerCtx = void 0,\n        nameCtx = void 0,\n        duration = 0,\n        euclid = void 0,\n        status = true,\n        isSelected = false,\n        isNoteActive = false,\n        pointerRotation = void 0,\n        pointerRotationPrevious = 0,\n        centerDotCounter = 0,\n        centerDotNextStartTime = 0,\n        centerDotFullRadius = 10,\n        lineWidth = 2,\n        radius = 70,\n        centerRadius = 20,\n        selectRadius = 15,\n        innerRadius = 30,\n        outerRadius = 46,\n        dotRadius = 10,\n        locatorLength = 38,\n        zeroMarkerRadius = 2,\n        zeroMarkerY = radius - centerRadius - zeroMarkerRadius - 3,\n        pointerCanvasCenter = centerRadius,\n        locatorTop = radius - pointerCanvasCenter - locatorLength,\n        doublePI = Math.PI * 2,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = specs.canvasDirtyCallback;\n        initGraphics();\n        updateEuclid(specs.data.params.byId);\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        updateDuration(specs.data.params.byId);\n        redrawStaticCanvas();\n        redrawPointerCanvas();\n        redrawRotatingCanvas();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n\n            case e.detail.actions.CHANGE_PARAMETER:\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updateDuration(e.detail.state.processors.byId[my.id].params.byId);\n                        // fall through\n                        case 'pulses':\n                            updateEuclid(e.detail.state.processors.byId[my.id].params.byId);\n                            redrawRotatingCanvas();\n                            break;\n                        case 'rotation':\n                            canvasDirtyCallback();\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                            updateDuration(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                        case 'name':\n                            updateName(e.detail.state.processors.byId[my.id].params.byId);\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                var processor = e.detail.state.processors.byId[my.id];\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        var canvas = document.createElement('canvas');\n        canvas.height = radius * 2;\n        canvas.width = radius * 2;\n        staticCtx = canvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for dots ring and polygon\n        canvas = document.createElement('canvas');\n        canvas.height = radius * 2;\n        canvas.width = radius * 2;\n        rotateCtx = canvas.getContext('2d');\n        rotateCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the pointer\n        canvas = document.createElement('canvas');\n        canvas.height = radius;\n        canvas.width = centerRadius * 2;\n        pointerCtx = canvas.getContext('2d');\n        pointerCtx.lineWidth = lineWidth;\n        pointerCtx.lineJoin = 'bevel';\n\n        // offscreen canvas for the name\n        canvas = document.createElement('canvas');\n        canvas.height = 40;\n        canvas.width = radius * 2;\n        nameCtx = canvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Calculate the pattern's duration in milliseconds.\n     */\n    updateDuration = function updateDuration(params) {\n        var rate = params.is_triplets.value ? params.rate.value * (2 / 3) : params.rate.value,\n            stepDuration = rate * _config.PPQN;\n        duration = params.steps.value * stepDuration;\n    },\n        updateEuclid = function updateEuclid(params) {\n        euclid = (0, _euclid.getEuclidPattern)(params.steps.value, params.pulses.value);\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName(params) {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCtx.canvas.width, nameCtx.canvas.height);\n        nameCtx.fillText(params.name.value, nameCtx.canvas.width / 2, nameCtx.canvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Show the playback position within the pattern.\n     * Indicated by the pointer's rotation.\n     * @param  {Number} position Position within pattern in ticks.\n     */\n    updatePlaybackPosition = function updatePlaybackPosition(position) {\n        pointerRotationPrevious = pointerRotation;\n        pointerRotation = -doublePI * (position % duration / duration);\n    },\n\n\n    /**\n     * Redraw the pattern's static shapes canvas.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.clearRect(0, 0, staticCtx.canvas.width, staticCtx.canvas.height);\n        staticCtx.beginPath();\n\n        // center ring\n        staticCtx.moveTo(radius + centerRadius, radius);\n        staticCtx.arc(radius, radius, centerRadius, 0, doublePI);\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(radius + selectRadius, radius);\n            staticCtx.arc(radius, radius, selectRadius, 0, doublePI);\n        }\n\n        staticCtx.stroke();\n    },\n\n\n    /**\n     * Redraw the location pointer and the status dot.\n     */\n    redrawPointerCanvas = function redrawPointerCanvas() {\n        var necklacePos = radius - (status ? outerRadius : innerRadius),\n            halfWayPos = necklacePos + (locatorTop - necklacePos) / 2,\n            statusWidth = status ? 15 : 6,\n            sides = status ? locatorTop : halfWayPos;\n\n        pointerCtx.clearRect(0, 0, pointerCtx.canvas.width, pointerCtx.canvas.height);\n        pointerCtx.beginPath();\n\n        // position locator\n        pointerCtx.moveTo(pointerCanvasCenter, radius - pointerCanvasCenter);\n        pointerCtx.lineTo(pointerCanvasCenter, locatorTop);\n\n        // status indicator\n        pointerCtx.lineTo(pointerCanvasCenter - statusWidth, sides);\n        pointerCtx.lineTo(pointerCanvasCenter, necklacePos);\n        pointerCtx.lineTo(pointerCanvasCenter + statusWidth, sides);\n        pointerCtx.lineTo(pointerCanvasCenter, locatorTop);\n\n        pointerCtx.stroke();\n    },\n\n\n    /**\n     * The rotating canvas shows the necklace shape.\n     */\n    redrawRotatingCanvas = function redrawRotatingCanvas() {\n        var arc = void 0,\n            x = void 0,\n            y = void 0;\n\n        rotateCtx.clearRect(0, 0, rotateCtx.canvas.width, rotateCtx.canvas.height);\n        rotateCtx.fillStyle = my.colorHigh;\n        rotateCtx.strokeStyle = my.colorHigh;\n        rotateCtx.beginPath();\n\n        for (var i = 0, n = euclid.length; i < n; i++) {\n            var stepRadius = euclid[i] ? outerRadius : innerRadius;\n            rotateCtx.arc(radius, radius, stepRadius, i / n * doublePI - Math.PI / 2, (i + 1) / n * doublePI - Math.PI / 2, false);\n        }\n        // for (let i = 0, n = euclid.length; i < n; i++) {\n        //     const stepRadius = euclid[i] ? outerRadius : innerRadius;\n        //     rotateCtx.arc(radius, radius, stepRadius, ((n - i) / n) * doublePI, ((n - i - 1) / n) * doublePI, true);\n        // }\n\n        rotateCtx.closePath();\n        rotateCtx.stroke();\n\n        // zero marker\n        rotateCtx.beginPath();\n        rotateCtx.moveTo(radius + zeroMarkerRadius, zeroMarkerY);\n        rotateCtx.arc(radius, zeroMarkerY, zeroMarkerRadius, 0, doublePI, true);\n        rotateCtx.fill();\n    },\n\n\n    /**\n     * Show circle if the my.processor is selected, else hide.\n     * @param {Boolean} isSelectedView True if selected.\n     */\n    setSelected = function setSelected(isSelectedView) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas();\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw(position, processorEvents) {\n        updatePlaybackPosition(position);\n\n        // calculate status and redraw locator if needed\n        var currentStep = Math.floor(position % duration / duration * my.params.steps.value);\n        currentStep = (currentStep + my.params.rotation.value) % my.params.steps.value;\n        var currentStatus = euclid[currentStep];\n        if (currentStatus !== status) {\n            status = currentStatus;\n            redrawPointerCanvas();\n            canvasDirtyCallback();\n        }\n\n        // Show notes to happen as center dot animation.\n        if (processorEvents[my.id] && processorEvents[my.id].length) {\n            for (var i = 0, n = processorEvents[my.id].length; i < n; i++) {\n                var event = processorEvents[my.id][i];\n                centerDotNextStartTime = performance.now() + event.delayFromNowToNoteStart;\n                centerDotCounter = 1;\n            }\n        }\n    },\n\n\n    /**\n     * Add the pattern's static canvas to the main static canvas.\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToStaticView = function addToStaticView(mainStaticCtx) {\n        // draw static canvas\n        mainStaticCtx.drawImage(staticCtx.canvas, my.positionX - radius, my.positionY - radius);\n\n        // draw name canvas\n        mainStaticCtx.drawImage(nameCtx.canvas, my.positionX - radius, my.positionY + outerRadius + 4);\n\n        // draw pointer canvas\n        var patternRotation = my.params.rotation.value / my.params.steps.value * doublePI;\n        mainStaticCtx.save();\n        mainStaticCtx.translate(my.positionX, my.positionY);\n        mainStaticCtx.rotate(patternRotation);\n        mainStaticCtx.drawImage(pointerCtx.canvas, -pointerCanvasCenter, -pointerCtx.canvas.height);\n        mainStaticCtx.restore();\n    },\n\n\n    /**\n     * Draw the pattern's dynamic shapes on the main dymamic canvas\n     * @param  {Object} mainStaticCtx 2D canvas context.\n     */\n    addToDynamicView = function addToDynamicView(mainDynamicCtx) {\n        // draw rotating canvas\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotation);\n        mainDynamicCtx.drawImage(rotateCtx.canvas, -radius, -radius);\n        mainDynamicCtx.restore();\n\n        // center dot\n        if (centerDotCounter >= 0 && centerDotNextStartTime < performance.now()) {\n            var centerDotRadius = centerDotFullRadius * centerDotCounter;\n            mainDynamicCtx.moveTo(my.positionX + centerDotRadius, my.positionY);\n            mainDynamicCtx.arc(my.positionX, my.positionY, centerDotRadius, 0, doublePI, true);\n            mainDynamicCtx.fill();\n            centerDotCounter -= .1;\n        }\n    },\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {\n        mainDynamicCtx.save();\n        mainDynamicCtx.translate(my.positionX, my.positionY);\n        mainDynamicCtx.rotate(pointerRotationPrevious);\n        mainDynamicCtx.clearRect(-radius, -radius, rotateCtx.canvas.width, rotateCtx.canvas.height);\n        mainDynamicCtx.restore();\n    },\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y, canvasRect) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= centerRadius;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        staticCtx.strokeStyle = my.colorHigh;\n        staticCtx.fillStyle = my.colorHigh;\n        rotateCtx.strokeStyle = my.colorHigh;\n        pointerCtx.strokeStyle = my.colorHigh;\n        pointerCtx.fillStyle = my.colorHigh;\n\n        updateName(my.store.getState().processors.byId[my.id].params.byId);\n        redrawStaticCanvas();\n        redrawRotatingCanvas();\n        redrawPointerCanvas();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n");

/***/ }),

/***/ 41:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createGraphic = createGraphic;\n\nvar _canvasprocessorbase = __webpack_require__(35);\n\nvar _canvasprocessorbase2 = _interopRequireDefault(_canvasprocessorbase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output object drawn on canvas.\n */\nfunction createGraphic(specs, my) {\n    var that = void 0,\n        canvasDirtyCallback = specs.canvasDirtyCallback,\n        staticCanvas = void 0,\n        staticCtx = void 0,\n        nameCanvas = void 0,\n        nameCtx = void 0,\n        isSelected = false,\n        lineWidth = 2,\n        width = 100,\n        height = 50,\n        radius = 10,\n        boxWidth = 80,\n        selectRadius = 15,\n        disconnectSize = 7,\n        doublePI = Math.PI * 2,\n        initialise = function initialise() {\n        document.addEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        initGraphics();\n        setTheme(specs.theme);\n        updatePosition(specs.data.positionX, specs.data.positionY);\n        redrawStaticCanvas();\n    },\n\n\n    /**\n     * Called before this view is deleted.\n     */\n    terminate = function terminate() {\n        document.removeEventListener(my.store.STATE_CHANGE, handleStateChanges);\n        canvasDirtyCallback = null;\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        var processor = e.detail.state.processors.byId[my.id];\n        switch (e.detail.action.type) {\n\n            case e.detail.actions.DRAG_SELECTED_PROCESSOR:\n            case e.detail.actions.DRAG_ALL_PROCESSORS:\n                updatePosition(processor.positionX, processor.positionY);\n                break;\n\n            case e.detail.actions.UPDATE_MIDI_PORT:\n                redrawStaticCanvas();\n                break;\n\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    my.params = e.detail.state.processors.byId[my.id].params.byId;\n                    switch (e.detail.action.paramKey) {\n                        case 'port':\n                            redrawStaticCanvas();\n                            break;\n                        case 'name':\n                            updateName();\n                            break;\n                    }\n                }\n                break;\n        }\n    },\n        initGraphics = function initGraphics() {\n        // offscreen canvas for static shapes\n        staticCanvas = document.createElement('canvas');\n        staticCanvas.height = height;\n        staticCanvas.width = width;\n        staticCtx = staticCanvas.getContext('2d');\n        staticCtx.lineWidth = lineWidth;\n\n        // offscreen canvas for the name\n        nameCanvas = document.createElement('canvas');\n        nameCanvas.height = 40;\n        nameCanvas.width = 200;\n        nameCtx = nameCanvas.getContext('2d');\n        nameCtx.font = '14px sans-serif';\n        nameCtx.textAlign = 'center';\n    },\n        setSelected = function setSelected(isSelectedView, state) {\n        isSelected = isSelectedView;\n        if (typeof redrawStaticCanvas == 'function' && typeof canvasDirtyCallback == 'function') {\n            redrawStaticCanvas(state.processors.byId[my.id].enabled);\n            canvasDirtyCallback();\n        }\n    },\n        draw = function draw() {},\n\n\n    /**\n     * Redraw the graphic after a change.\n     */\n    redrawStaticCanvas = function redrawStaticCanvas() {\n        staticCtx.strokeStyle = my.colorHigh;\n\n        staticCtx.clearRect(0, 0, width, height);\n        staticCtx.save();\n        staticCtx.translate(width / 2, height / 2 - 8);\n        staticCtx.beginPath();\n\n        // box\n        staticCtx.rect(-boxWidth / 2, -radius, boxWidth, radius * 2);\n        // arrow\n        staticCtx.moveTo(-boxWidth / 2, radius);\n        staticCtx.lineTo(0, radius + 20);\n        staticCtx.lineTo(boxWidth / 2, radius);\n\n        // circle\n        staticCtx.moveTo(radius, 0);\n        staticCtx.arc(0, 0, radius, 0, Math.PI * 2, true);\n\n        // disconnected cross\n        if (my.params.port.value === 'none') {\n            staticCtx.moveTo(-disconnectSize, -disconnectSize);\n            staticCtx.lineTo(disconnectSize, disconnectSize);\n            staticCtx.moveTo(disconnectSize, -disconnectSize);\n            staticCtx.lineTo(-disconnectSize, disconnectSize);\n        }\n\n        // select circle\n        if (isSelected) {\n            staticCtx.moveTo(selectRadius, 0);\n            staticCtx.arc(0, 0, selectRadius, 0, doublePI);\n        }\n\n        staticCtx.stroke();\n        staticCtx.restore();\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update the pattern's name.\n     */\n    updateName = function updateName() {\n        nameCtx.fillStyle = my.colorMid;\n        nameCtx.clearRect(0, 0, nameCanvas.width, nameCanvas.height);\n        nameCtx.fillText(my.params.name.value, nameCanvas.width / 2, nameCanvas.height / 2);\n        canvasDirtyCallback();\n    },\n\n\n    /**\n     * Update pattern's position on the 2D canvas.\n     * @param  {Object} value New 2D position as object.\n     */\n    updatePosition = function updatePosition(x, y) {\n        my.positionX = x;\n        my.positionY = y;\n        canvasDirtyCallback();\n    },\n        addToStaticView = function addToStaticView(mainStaticCtx) {\n        mainStaticCtx.drawImage(staticCanvas, my.positionX - 50, my.positionY - 15);\n\n        mainStaticCtx.drawImage(nameCanvas, my.positionX - nameCanvas.width / 2, my.positionY + 30);\n    },\n        addToDynamicView = function addToDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Clear all this pattern's elements from the dynamic context.\n     * These are the center dot, necklace dots and pointer.\n     * @param  {Object} mainDynamicCtx 2D canvas context.\n     */\n    clearFromDynamicView = function clearFromDynamicView(mainDynamicCtx) {},\n\n\n    /**\n     * Test if a coordinate intersects with the graphic's hit area.\n     * @param  {Number} x Horizontal coordinate.\n     * @param  {Number} y Vertical coordinate.\n     * @return {Boolean} True if the point intersects. \n     */\n    intersectsWithPoint = function intersectsWithPoint(x, y) {\n        var distance = Math.sqrt(Math.pow(x - my.positionX, 2) + Math.pow(y - my.positionY, 2));\n        return distance <= 10;\n    },\n\n\n    /**\n     * Set the theme colours of the processor view.\n     * @param {Object} theme Theme settings object.\n     */\n    setTheme = function setTheme(theme) {\n        my.colorHigh = theme.colorHigh;\n        my.colorMid = theme.colorMid;\n        my.colorLow = theme.colorLow;\n        redrawStaticCanvas();\n        updateName();\n    };\n\n    my = my || {};\n\n    that = (0, _canvasprocessorbase2.default)(specs, my);\n\n    initialise();\n\n    that.terminate = terminate;\n    that.setSelected = setSelected;\n    that.draw = draw;\n    that.addToStaticView = addToStaticView;\n    that.addToDynamicView = addToDynamicView;\n    that.clearFromDynamicView = clearFromDynamicView;\n    that.intersectsWithPoint = intersectsWithPoint;\n    that.setTheme = setTheme;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n");

/***/ })

});