webpackJsonp([1],{

/***/ 35:
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./epg/processor.js\": 49,\n\t\"./euclidfx/processor.js\": 52,\n\t\"./output/processor.js\": 53\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 35;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9wcm9jZXNzb3JcXC5qcyQ/YmQzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2VwZy9wcm9jZXNzb3IuanNcIjogNDksXG5cdFwiLi9ldWNsaWRmeC9wcm9jZXNzb3IuanNcIjogNTIsXG5cdFwiLi9vdXRwdXQvcHJvY2Vzc29yLmpzXCI6IDUzXG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpKTtcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIik7XG5cdHJldHVybiBpZDtcbn07XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMzU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycyBeXFwuXFwvLipcXC9wcm9jZXNzb3JcXC5qcyRcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 38:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9lcGcvZXVjbGlkLmpzP2ZlMDAiXSwibmFtZXMiOlsiZ2V0RXVjbGlkUGF0dGVybiIsInJvdGF0ZUV1Y2xpZFBhdHRlcm4iLCJjYWNoZSIsInN0ZXBzIiwicHVsc2VzIiwiTWF0aCIsIm1pbiIsImNhY2hlS2V5IiwiY3JlYXRlQmpvcmtsdW5kIiwic2xpY2UiLCJwYXR0ZXJuIiwicm90YXRpb24iLCJlbGVtZW50c1RvU2hpZnQiLCJzcGxpY2UiLCJjb25jYXQiLCJmaXJzdCIsIkFycmF5IiwiZmlsbCIsInNlY29uZCIsImZpcnN0TGVuZ3RoIiwibGVuZ3RoIiwibWluTGVuZ3RoIiwibG9vcFRocmVzaG9sZCIsIngiLCJwcm90b3R5cGUiLCJjYWxsIiwiZm9yRWFjaCIsImYiLCJzIl0sIm1hcHBpbmdzIjoiOzs7OztRQVNnQkEsZ0IsR0FBQUEsZ0I7UUFTQUMsbUIsR0FBQUEsbUI7QUFsQmhCOzs7Ozs7O0FBT0EsSUFBTUMsUUFBUSxFQUFkOztBQUVPLFNBQVNGLGdCQUFULENBQTBCRyxLQUExQixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDNUNBLGFBQVNDLEtBQUtDLEdBQUwsQ0FBU0gsS0FBVCxFQUFnQkMsTUFBaEIsQ0FBVDtBQUNBLFFBQU1HLFdBQWNKLEtBQWQsU0FBdUJDLE1BQTdCO0FBQ0EsUUFBSSxDQUFDRixNQUFNSyxRQUFOLENBQUwsRUFBc0I7QUFDbEJMLGNBQU1LLFFBQU4sSUFBa0JDLGdCQUFnQkwsS0FBaEIsRUFBdUJDLE1BQXZCLENBQWxCO0FBQ0g7QUFDRCxXQUFPRixNQUFNSyxRQUFOLEVBQWdCRSxLQUFoQixDQUFzQixDQUF0QixDQUFQO0FBQ0g7O0FBRU0sU0FBU1IsbUJBQVQsQ0FBNkJTLE9BQTdCLEVBQXNDQyxRQUF0QyxFQUFnRDtBQUNuRCxRQUFNQyxrQkFBa0JGLFFBQVFHLE1BQVIsQ0FBZUYsUUFBZixDQUF4QjtBQUNBLFdBQU9DLGdCQUFnQkUsTUFBaEIsQ0FBdUJKLE9BQXZCLENBQVA7QUFDSDs7QUFFRDs7Ozs7O0FBTUEsU0FBU0YsZUFBVCxDQUF5QkwsS0FBekIsRUFBZ0NDLE1BQWhDLEVBQXdDO0FBQ3BDLFFBQUlBLFNBQVMsQ0FBVCxJQUFjRCxRQUFRLENBQXRCLElBQTJCQSxRQUFRQyxNQUF2QyxFQUErQztBQUMzQyxlQUFPLEVBQVA7QUFDSDs7QUFFRDtBQUNBLFFBQUlXLFFBQVEsSUFBSUMsS0FBSixDQUFVWixNQUFWLEVBQWtCYSxJQUFsQixDQUF1QixDQUFDLENBQUQsQ0FBdkIsQ0FBWjtBQUNBLFFBQUlDLFNBQVMsSUFBSUYsS0FBSixDQUFVYixRQUFRQyxNQUFsQixFQUEwQmEsSUFBMUIsQ0FBK0IsQ0FBQyxDQUFELENBQS9CLENBQWI7O0FBRUEsUUFBSUUsY0FBY0osTUFBTUssTUFBeEI7QUFDQSxRQUFJQyxZQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFoQjs7QUFFQSxRQUFJRSxnQkFBZ0IsQ0FBcEI7QUFDQTtBQUNBLFdBQU9ELFlBQVlDLGFBQW5CLEVBQWtDOztBQUU5QjtBQUNBLFlBQUlBLGtCQUFrQixDQUF0QixFQUF5QjtBQUNyQkEsNEJBQWdCLENBQWhCO0FBQ0g7O0FBRUQ7QUFDQSxhQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsU0FBcEIsRUFBK0JFLEdBQS9CLEVBQW9DO0FBQ2hDUixrQkFBTVEsQ0FBTixJQUFXUCxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJWLE1BQU1RLENBQU4sQ0FBNUIsRUFBc0NMLE9BQU9LLENBQVAsQ0FBdEMsQ0FBWDtBQUNIOztBQUVEO0FBQ0EsWUFBSUYsY0FBY0YsV0FBbEIsRUFBK0I7QUFDM0JELHFCQUFTRixNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCUCxNQUEzQixFQUFtQ0csU0FBbkMsQ0FBVDtBQUNIO0FBQ0Q7QUFDQTtBQUpBLGFBS0s7QUFDREgseUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDTSxTQUFsQyxDQUFUO0FBQ0FOLHdCQUFRQyxNQUFNUSxTQUFOLENBQWdCZixLQUFoQixDQUFzQmdCLElBQXRCLENBQTJCVixLQUEzQixFQUFrQyxDQUFsQyxFQUFxQ00sU0FBckMsQ0FBUjtBQUNIO0FBQ0RGLHNCQUFjSixNQUFNSyxNQUFwQjtBQUNBQyxvQkFBWWhCLEtBQUtDLEdBQUwsQ0FBU2EsV0FBVCxFQUFzQkQsT0FBT0UsTUFBN0IsQ0FBWjtBQUNIOztBQUVEO0FBQ0EsUUFBSVYsVUFBVSxFQUFkO0FBQ0FLLFVBQU1XLE9BQU4sQ0FBYyxhQUFLO0FBQ2ZoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2lCLENBQXJDLENBQVY7QUFDSCxLQUZEO0FBR0FULFdBQU9RLE9BQVAsQ0FBZSxhQUFLO0FBQ2hCaEIsa0JBQVVNLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QmYsT0FBNUIsRUFBcUNrQixDQUFyQyxDQUFWO0FBQ0gsS0FGRDs7QUFJQSxXQUFPbEIsT0FBUDtBQUNIIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFdWNsaWRlYW4gcGF0dGVybiBjYWxjdWxhdGlvbiBieSBNaWNoYWVsIEtvbnRvZ2lhbm5pczpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ta29udG9naWFubmlzL2V1Y2xpZGVhbi1yaHl0aG1zXG4gKiBiYXNlZCBvbiBhIFB5dGhvbiBzY3JpcHQgZnJvbSBkaXNhcHBlYXJlZCB3ZWJzaXRlIFxuICogaHR0cDovL3d3dy5hdG9uYWxtaWNyb3Nob3Jlcy5jb20vXG4gKi9cblxuY29uc3QgY2FjaGUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV1Y2xpZFBhdHRlcm4oc3RlcHMsIHB1bHNlcykge1xuICAgIHB1bHNlcyA9IE1hdGgubWluKHN0ZXBzLCBwdWxzZXMpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7c3RlcHN9XyR7cHVsc2VzfWA7XG4gICAgaWYgKCFjYWNoZVtjYWNoZUtleV0pIHtcbiAgICAgICAgY2FjaGVbY2FjaGVLZXldID0gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbY2FjaGVLZXldLnNsaWNlKDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlRXVjbGlkUGF0dGVybihwYXR0ZXJuLCByb3RhdGlvbikge1xuICAgIGNvbnN0IGVsZW1lbnRzVG9TaGlmdCA9IHBhdHRlcm4uc3BsaWNlKHJvdGF0aW9uKTtcbiAgICByZXR1cm4gZWxlbWVudHNUb1NoaWZ0LmNvbmNhdChwYXR0ZXJuKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgRXVjbGlkZWFuIHJoeXRobSBwYXR0ZXJuLlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0ZXBzIFRvdGFsIGFtb3VudCBvZiB0c3RlcHMgaW4gdGhlIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gcHVsc2VzIFB1bHNlcyB0byBzcHJlYWQgb3ZlciB0aGUgcGF0dGVybi5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBCb29sZWFucyB0aGF0IGZvcm0gdGhlIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJqb3JrbHVuZChzdGVwcywgcHVsc2VzKSB7XG4gICAgaWYgKHB1bHNlcyA8IDAgfHwgc3RlcHMgPCAwIHx8IHN0ZXBzIDwgcHVsc2VzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIFxuICAgIC8vIENyZWF0ZSB0aGUgdHdvIGFycmF5c1xuICAgIGxldCBmaXJzdCA9IG5ldyBBcnJheShwdWxzZXMpLmZpbGwoWzFdKTtcbiAgICBsZXQgc2Vjb25kID0gbmV3IEFycmF5KHN0ZXBzIC0gcHVsc2VzKS5maWxsKFswXSk7XG4gIFxuICAgIGxldCBmaXJzdExlbmd0aCA9IGZpcnN0Lmxlbmd0aDtcbiAgICBsZXQgbWluTGVuZ3RoID0gTWF0aC5taW4oZmlyc3RMZW5ndGgsIHNlY29uZC5sZW5ndGgpO1xuICBcbiAgICBsZXQgbG9vcFRocmVzaG9sZCA9IDA7XG4gICAgLy8gTG9vcCB1bnRpbCBhdCBsZWFzdCBvbmUgYXJyYXkgaGFzIGxlbmd0aCBndCAyICgxIGZvciBmaXJzdCBsb29wKVxuICAgIHdoaWxlIChtaW5MZW5ndGggPiBsb29wVGhyZXNob2xkKSB7XG5cbiAgICAgICAgLy8gQWxsb3cgb25seSBsb29wVGhyZXNob2xkIHRvIGJlIHplcm8gb24gdGhlIGZpcnN0IGxvb3BcbiAgICAgICAgaWYgKGxvb3BUaHJlc2hvbGQgPT09IDApIHtcbiAgICAgICAgICAgIGxvb3BUaHJlc2hvbGQgPSAxO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvLyBGb3IgdGhlIG1pbmltdW0gYXJyYXkgbG9vcCBhbmQgY29uY2F0XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgbWluTGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIGZpcnN0W3hdID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKGZpcnN0W3hdLCBzZWNvbmRbeF0pO1xuICAgICAgICB9XG4gIFxuICAgICAgICAvLyBpZiB0aGUgc2Vjb25kIHdhcyB0aGUgYmlnZ2VyIGFycmF5LCBzbGljZSB0aGUgcmVtYWluaW5nIGVsZW1lbnRzL2FycmF5cyBhbmQgdXBkYXRlXG4gICAgICAgIGlmIChtaW5MZW5ndGggPT09IGZpcnN0TGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWNvbmQsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHVwZGF0ZSB0aGUgc2Vjb25kIChzbWFsbGVzdCBhcnJheSkgd2l0aCB0aGUgcmVtYWluZGVycyBvZiB0aGUgZmlyc3RcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSB0aGUgZmlyc3QgYXJyYXkgdG8gaW5jbHVkZSBvbmx0IHRoZSBleHRlbmRlZCBzdWItYXJyYXlzXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2Vjb25kID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIG1pbkxlbmd0aCk7XG4gICAgICAgICAgICBmaXJzdCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZpcnN0LCAwLCBtaW5MZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgICAgICBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gICAgfVxuICBcbiAgICAvLyBCdWlsZCB0aGUgZmluYWwgYXJyYXlcbiAgICBsZXQgcGF0dGVybiA9IFtdO1xuICAgIGZpcnN0LmZvckVhY2goZiA9PiB7XG4gICAgICAgIHBhdHRlcm4gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwocGF0dGVybiwgZik7XG4gICAgfSk7XG4gICAgc2Vjb25kLmZvckVhY2gocyA9PiB7XG4gICAgICAgIHBhdHRlcm4gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwocGF0dGVybiwgcyk7XG4gICAgfSk7XG4gIFxuICAgIHJldHVybiBwYXR0ZXJuO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL3Byb2Nlc3NvcnMvZXBnL2V1Y2xpZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n");

/***/ }),

/***/ 39:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getEuclidPattern = getEuclidPattern;\nexports.rotateEuclidPattern = rotateEuclidPattern;\n/**\n * Euclidean pattern calculation by Michael Kontogiannis:\n * https://github.com/mkontogiannis/euclidean-rhythms\n * based on a Python script from disappeared website \n * http://www.atonalmicroshores.com/\n */\n\nvar cache = {};\n\nfunction getEuclidPattern(steps, pulses) {\n    pulses = Math.min(steps, pulses);\n    var cacheKey = steps + \"_\" + pulses;\n    if (!cache[cacheKey]) {\n        cache[cacheKey] = createBjorklund(steps, pulses);\n    }\n    return cache[cacheKey].slice(0);\n}\n\nfunction rotateEuclidPattern(pattern, rotation) {\n    var elementsToShift = pattern.splice(rotation);\n    return elementsToShift.concat(pattern);\n}\n\n/**\n * Create Euclidean rhythm pattern.\n * @param {Number} steps Total amount of tsteps in the pattern.\n * @param {Number} pulses Pulses to spread over the pattern.\n * @return {Array} Array of Booleans that form the pattern.\n */\nfunction createBjorklund(steps, pulses) {\n    if (pulses < 0 || steps < 0 || steps < pulses) {\n        return [];\n    }\n\n    // Create the two arrays\n    var first = new Array(pulses).fill([1]);\n    var second = new Array(steps - pulses).fill([0]);\n\n    var firstLength = first.length;\n    var minLength = Math.min(firstLength, second.length);\n\n    var loopThreshold = 0;\n    // Loop until at least one array has length gt 2 (1 for first loop)\n    while (minLength > loopThreshold) {\n\n        // Allow only loopThreshold to be zero on the first loop\n        if (loopThreshold === 0) {\n            loopThreshold = 1;\n        }\n\n        // For the minimum array loop and concat\n        for (var x = 0; x < minLength; x++) {\n            first[x] = Array.prototype.concat.call(first[x], second[x]);\n        }\n\n        // if the second was the bigger array, slice the remaining elements/arrays and update\n        if (minLength === firstLength) {\n            second = Array.prototype.slice.call(second, minLength);\n        }\n        // Otherwise update the second (smallest array) with the remainders of the first\n        // and update the first array to include onlt the extended sub-arrays\n        else {\n                second = Array.prototype.slice.call(first, minLength);\n                first = Array.prototype.slice.call(first, 0, minLength);\n            }\n        firstLength = first.length;\n        minLength = Math.min(firstLength, second.length);\n    }\n\n    // Build the final array\n    var pattern = [];\n    first.forEach(function (f) {\n        pattern = Array.prototype.concat.call(pattern, f);\n    });\n    second.forEach(function (s) {\n        pattern = Array.prototype.concat.call(pattern, s);\n    });\n\n    return pattern;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanM/MDRkNSJdLCJuYW1lcyI6WyJnZXRFdWNsaWRQYXR0ZXJuIiwicm90YXRlRXVjbGlkUGF0dGVybiIsImNhY2hlIiwic3RlcHMiLCJwdWxzZXMiLCJNYXRoIiwibWluIiwiY2FjaGVLZXkiLCJjcmVhdGVCam9ya2x1bmQiLCJzbGljZSIsInBhdHRlcm4iLCJyb3RhdGlvbiIsImVsZW1lbnRzVG9TaGlmdCIsInNwbGljZSIsImNvbmNhdCIsImZpcnN0IiwiQXJyYXkiLCJmaWxsIiwic2Vjb25kIiwiZmlyc3RMZW5ndGgiLCJsZW5ndGgiLCJtaW5MZW5ndGgiLCJsb29wVGhyZXNob2xkIiwieCIsInByb3RvdHlwZSIsImNhbGwiLCJmb3JFYWNoIiwiZiIsInMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBU2dCQSxnQixHQUFBQSxnQjtRQVNBQyxtQixHQUFBQSxtQjtBQWxCaEI7Ozs7Ozs7QUFPQSxJQUFNQyxRQUFRLEVBQWQ7O0FBRU8sU0FBU0YsZ0JBQVQsQ0FBMEJHLEtBQTFCLEVBQWlDQyxNQUFqQyxFQUF5QztBQUM1Q0EsYUFBU0MsS0FBS0MsR0FBTCxDQUFTSCxLQUFULEVBQWdCQyxNQUFoQixDQUFUO0FBQ0EsUUFBTUcsV0FBY0osS0FBZCxTQUF1QkMsTUFBN0I7QUFDQSxRQUFJLENBQUNGLE1BQU1LLFFBQU4sQ0FBTCxFQUFzQjtBQUNsQkwsY0FBTUssUUFBTixJQUFrQkMsZ0JBQWdCTCxLQUFoQixFQUF1QkMsTUFBdkIsQ0FBbEI7QUFDSDtBQUNELFdBQU9GLE1BQU1LLFFBQU4sRUFBZ0JFLEtBQWhCLENBQXNCLENBQXRCLENBQVA7QUFDSDs7QUFFTSxTQUFTUixtQkFBVCxDQUE2QlMsT0FBN0IsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQ25ELFFBQU1DLGtCQUFrQkYsUUFBUUcsTUFBUixDQUFlRixRQUFmLENBQXhCO0FBQ0EsV0FBT0MsZ0JBQWdCRSxNQUFoQixDQUF1QkosT0FBdkIsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixlQUFULENBQXlCTCxLQUF6QixFQUFnQ0MsTUFBaEMsRUFBd0M7QUFDcEMsUUFBSUEsU0FBUyxDQUFULElBQWNELFFBQVEsQ0FBdEIsSUFBMkJBLFFBQVFDLE1BQXZDLEVBQStDO0FBQzNDLGVBQU8sRUFBUDtBQUNIOztBQUVEO0FBQ0EsUUFBSVcsUUFBUSxJQUFJQyxLQUFKLENBQVVaLE1BQVYsRUFBa0JhLElBQWxCLENBQXVCLENBQUMsQ0FBRCxDQUF2QixDQUFaO0FBQ0EsUUFBSUMsU0FBUyxJQUFJRixLQUFKLENBQVViLFFBQVFDLE1BQWxCLEVBQTBCYSxJQUExQixDQUErQixDQUFDLENBQUQsQ0FBL0IsQ0FBYjs7QUFFQSxRQUFJRSxjQUFjSixNQUFNSyxNQUF4QjtBQUNBLFFBQUlDLFlBQVloQixLQUFLQyxHQUFMLENBQVNhLFdBQVQsRUFBc0JELE9BQU9FLE1BQTdCLENBQWhCOztBQUVBLFFBQUlFLGdCQUFnQixDQUFwQjtBQUNBO0FBQ0EsV0FBT0QsWUFBWUMsYUFBbkIsRUFBa0M7O0FBRTlCO0FBQ0EsWUFBSUEsa0JBQWtCLENBQXRCLEVBQXlCO0FBQ3JCQSw0QkFBZ0IsQ0FBaEI7QUFDSDs7QUFFRDtBQUNBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRixTQUFwQixFQUErQkUsR0FBL0IsRUFBb0M7QUFDaENSLGtCQUFNUSxDQUFOLElBQVdQLE1BQU1RLFNBQU4sQ0FBZ0JWLE1BQWhCLENBQXVCVyxJQUF2QixDQUE0QlYsTUFBTVEsQ0FBTixDQUE1QixFQUFzQ0wsT0FBT0ssQ0FBUCxDQUF0QyxDQUFYO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJRixjQUFjRixXQUFsQixFQUErQjtBQUMzQkQscUJBQVNGLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJQLE1BQTNCLEVBQW1DRyxTQUFuQyxDQUFUO0FBQ0g7QUFDRDtBQUNBO0FBSkEsYUFLSztBQUNESCx5QkFBU0YsTUFBTVEsU0FBTixDQUFnQmYsS0FBaEIsQ0FBc0JnQixJQUF0QixDQUEyQlYsS0FBM0IsRUFBa0NNLFNBQWxDLENBQVQ7QUFDQU4sd0JBQVFDLE1BQU1RLFNBQU4sQ0FBZ0JmLEtBQWhCLENBQXNCZ0IsSUFBdEIsQ0FBMkJWLEtBQTNCLEVBQWtDLENBQWxDLEVBQXFDTSxTQUFyQyxDQUFSO0FBQ0g7QUFDREYsc0JBQWNKLE1BQU1LLE1BQXBCO0FBQ0FDLG9CQUFZaEIsS0FBS0MsR0FBTCxDQUFTYSxXQUFULEVBQXNCRCxPQUFPRSxNQUE3QixDQUFaO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJVixVQUFVLEVBQWQ7QUFDQUssVUFBTVcsT0FBTixDQUFjLGFBQUs7QUFDZmhCLGtCQUFVTSxNQUFNUSxTQUFOLENBQWdCVixNQUFoQixDQUF1QlcsSUFBdkIsQ0FBNEJmLE9BQTVCLEVBQXFDaUIsQ0FBckMsQ0FBVjtBQUNILEtBRkQ7QUFHQVQsV0FBT1EsT0FBUCxDQUFlLGFBQUs7QUFDaEJoQixrQkFBVU0sTUFBTVEsU0FBTixDQUFnQlYsTUFBaEIsQ0FBdUJXLElBQXZCLENBQTRCZixPQUE1QixFQUFxQ2tCLENBQXJDLENBQVY7QUFDSCxLQUZEOztBQUlBLFdBQU9sQixPQUFQO0FBQ0giLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV1Y2xpZGVhbiBwYXR0ZXJuIGNhbGN1bGF0aW9uIGJ5IE1pY2hhZWwgS29udG9naWFubmlzOlxuICogaHR0cHM6Ly9naXRodWIuY29tL21rb250b2dpYW5uaXMvZXVjbGlkZWFuLXJoeXRobXNcbiAqIGJhc2VkIG9uIGEgUHl0aG9uIHNjcmlwdCBmcm9tIGRpc2FwcGVhcmVkIHdlYnNpdGUgXG4gKiBodHRwOi8vd3d3LmF0b25hbG1pY3Jvc2hvcmVzLmNvbS9cbiAqL1xuXG5jb25zdCBjYWNoZSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXVjbGlkUGF0dGVybihzdGVwcywgcHVsc2VzKSB7XG4gICAgcHVsc2VzID0gTWF0aC5taW4oc3RlcHMsIHB1bHNlcyk7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtzdGVwc31fJHtwdWxzZXN9YDtcbiAgICBpZiAoIWNhY2hlW2NhY2hlS2V5XSkge1xuICAgICAgICBjYWNoZVtjYWNoZUtleV0gPSBjcmVhdGVCam9ya2x1bmQoc3RlcHMsIHB1bHNlcyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV0uc2xpY2UoMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVFdWNsaWRQYXR0ZXJuKHBhdHRlcm4sIHJvdGF0aW9uKSB7XG4gICAgY29uc3QgZWxlbWVudHNUb1NoaWZ0ID0gcGF0dGVybi5zcGxpY2Uocm90YXRpb24pO1xuICAgIHJldHVybiBlbGVtZW50c1RvU2hpZnQuY29uY2F0KHBhdHRlcm4pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBFdWNsaWRlYW4gcmh5dGhtIHBhdHRlcm4uXG4gKiBAcGFyYW0ge051bWJlcn0gc3RlcHMgVG90YWwgYW1vdW50IG9mIHRzdGVwcyBpbiB0aGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwdWxzZXMgUHVsc2VzIHRvIHNwcmVhZCBvdmVyIHRoZSBwYXR0ZXJuLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIEJvb2xlYW5zIHRoYXQgZm9ybSB0aGUgcGF0dGVybi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmpvcmtsdW5kKHN0ZXBzLCBwdWxzZXMpIHtcbiAgICBpZiAocHVsc2VzIDwgMCB8fCBzdGVwcyA8IDAgfHwgc3RlcHMgPCBwdWxzZXMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgXG4gICAgLy8gQ3JlYXRlIHRoZSB0d28gYXJyYXlzXG4gICAgbGV0IGZpcnN0ID0gbmV3IEFycmF5KHB1bHNlcykuZmlsbChbMV0pO1xuICAgIGxldCBzZWNvbmQgPSBuZXcgQXJyYXkoc3RlcHMgLSBwdWxzZXMpLmZpbGwoWzBdKTtcbiAgXG4gICAgbGV0IGZpcnN0TGVuZ3RoID0gZmlyc3QubGVuZ3RoO1xuICAgIGxldCBtaW5MZW5ndGggPSBNYXRoLm1pbihmaXJzdExlbmd0aCwgc2Vjb25kLmxlbmd0aCk7XG4gIFxuICAgIGxldCBsb29wVGhyZXNob2xkID0gMDtcbiAgICAvLyBMb29wIHVudGlsIGF0IGxlYXN0IG9uZSBhcnJheSBoYXMgbGVuZ3RoIGd0IDIgKDEgZm9yIGZpcnN0IGxvb3ApXG4gICAgd2hpbGUgKG1pbkxlbmd0aCA+IGxvb3BUaHJlc2hvbGQpIHtcblxuICAgICAgICAvLyBBbGxvdyBvbmx5IGxvb3BUaHJlc2hvbGQgdG8gYmUgemVybyBvbiB0aGUgZmlyc3QgbG9vcFxuICAgICAgICBpZiAobG9vcFRocmVzaG9sZCA9PT0gMCkge1xuICAgICAgICAgICAgbG9vcFRocmVzaG9sZCA9IDE7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIEZvciB0aGUgbWluaW11bSBhcnJheSBsb29wIGFuZCBjb25jYXRcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBtaW5MZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgZmlyc3RbeF0gPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoZmlyc3RbeF0sIHNlY29uZFt4XSk7XG4gICAgICAgIH1cbiAgXG4gICAgICAgIC8vIGlmIHRoZSBzZWNvbmQgd2FzIHRoZSBiaWdnZXIgYXJyYXksIHNsaWNlIHRoZSByZW1haW5pbmcgZWxlbWVudHMvYXJyYXlzIGFuZCB1cGRhdGVcbiAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gZmlyc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIHNlY29uZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlY29uZCwgbWluTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UgdXBkYXRlIHRoZSBzZWNvbmQgKHNtYWxsZXN0IGFycmF5KSB3aXRoIHRoZSByZW1haW5kZXJzIG9mIHRoZSBmaXJzdFxuICAgICAgICAvLyBhbmQgdXBkYXRlIHRoZSBmaXJzdCBhcnJheSB0byBpbmNsdWRlIG9ubHQgdGhlIGV4dGVuZGVkIHN1Yi1hcnJheXNcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmaXJzdCwgbWluTGVuZ3RoKTtcbiAgICAgICAgICAgIGZpcnN0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZmlyc3QsIDAsIG1pbkxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RMZW5ndGggPSBmaXJzdC5sZW5ndGg7XG4gICAgICAgIG1pbkxlbmd0aCA9IE1hdGgubWluKGZpcnN0TGVuZ3RoLCBzZWNvbmQubGVuZ3RoKTtcbiAgICB9XG4gIFxuICAgIC8vIEJ1aWxkIHRoZSBmaW5hbCBhcnJheVxuICAgIGxldCBwYXR0ZXJuID0gW107XG4gICAgZmlyc3QuZm9yRWFjaChmID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBmKTtcbiAgICB9KTtcbiAgICBzZWNvbmQuZm9yRWFjaChzID0+IHtcbiAgICAgICAgcGF0dGVybiA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChwYXR0ZXJuLCBzKTtcbiAgICB9KTtcbiAgXG4gICAgcmV0dXJuIHBhdHRlcm47XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvd2gvcHJvY2Vzc29ycy9ldWNsaWRmeC9ldWNsaWQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39\n");

/***/ }),

/***/ 40:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIProcessorBase;\n\nvar _connectorin = __webpack_require__(50);\n\nvar _connectorin2 = _interopRequireDefault(_connectorin);\n\nvar _connectorout = __webpack_require__(51);\n\nvar _connectorout2 = _interopRequireDefault(_connectorout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base functionality for all MIDI processors.\n */\nfunction createMIDIProcessorBase(specs, my) {\n    var that,\n        getType = function getType() {\n        return my.type;\n    },\n        getID = function getID() {\n        return my.id;\n    };\n\n    my = my || {};\n    my.type = specs.data.type;\n    my.id = specs.data.id;\n\n    that = specs.that || {};\n    if (specs.data.inputs.allIds.length >= 1) {\n        that = (0, _connectorin2.default)(specs, my);\n    }\n    if (specs.data.outputs.allIds.length >= 1) {\n        that = (0, _connectorout2.default)(specs, my);\n    }\n    that.getType = getType;\n    that.getID = getID;\n\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9wcm9jZXNzb3JiYXNlLmpzP2I3YmUiXSwibmFtZXMiOlsiY3JlYXRlTUlESVByb2Nlc3NvckJhc2UiLCJzcGVjcyIsIm15IiwidGhhdCIsImdldFR5cGUiLCJ0eXBlIiwiZ2V0SUQiLCJpZCIsImRhdGEiLCJpbnB1dHMiLCJhbGxJZHMiLCJsZW5ndGgiLCJvdXRwdXRzIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFNd0JBLHVCOztBQU54Qjs7OztBQUNBOzs7Ozs7QUFFQTs7O0FBR2UsU0FBU0EsdUJBQVQsQ0FBaUNDLEtBQWpDLEVBQXdDQyxFQUF4QyxFQUE0QztBQUN2RCxRQUFJQyxJQUFKO0FBQUEsUUFFSUMsVUFBVSxTQUFWQSxPQUFVLEdBQVc7QUFDakIsZUFBT0YsR0FBR0csSUFBVjtBQUNILEtBSkw7QUFBQSxRQU1JQyxRQUFRLFNBQVJBLEtBQVEsR0FBVztBQUNmLGVBQU9KLEdBQUdLLEVBQVY7QUFDSCxLQVJMOztBQVVBTCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0csSUFBSCxHQUFVSixNQUFNTyxJQUFOLENBQVdILElBQXJCO0FBQ0FILE9BQUdLLEVBQUgsR0FBUU4sTUFBTU8sSUFBTixDQUFXRCxFQUFuQjs7QUFFQUosV0FBT0YsTUFBTUUsSUFBTixJQUFjLEVBQXJCO0FBQ0EsUUFBSUYsTUFBTU8sSUFBTixDQUFXQyxNQUFYLENBQWtCQyxNQUFsQixDQUF5QkMsTUFBekIsSUFBbUMsQ0FBdkMsRUFBMEM7QUFDdENSLGVBQU8sMkJBQXNCRixLQUF0QixFQUE2QkMsRUFBN0IsQ0FBUDtBQUNIO0FBQ0QsUUFBSUQsTUFBTU8sSUFBTixDQUFXSSxPQUFYLENBQW1CRixNQUFuQixDQUEwQkMsTUFBMUIsSUFBb0MsQ0FBeEMsRUFBMkM7QUFDdkNSLGVBQU8sNEJBQXVCRixLQUF2QixFQUE4QkMsRUFBOUIsQ0FBUDtBQUNIO0FBQ0RDLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNBRCxTQUFLRyxLQUFMLEdBQWFBLEtBQWI7O0FBRUEsV0FBT0gsSUFBUDtBQUNIIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU1JRElDb25uZWN0b3JJbiBmcm9tICcuL2Nvbm5lY3RvcmluLmpzJztcbmltcG9ydCBjcmVhdGVNSURJQ29ubmVjdG9yT3V0IGZyb20gJy4vY29ubmVjdG9yb3V0LmpzJztcblxuLyoqXG4gKiBCYXNlIGZ1bmN0aW9uYWxpdHkgZm9yIGFsbCBNSURJIHByb2Nlc3NvcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1JRElQcm9jZXNzb3JCYXNlKHNwZWNzLCBteSkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICBcbiAgICAgICAgZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG15LnR5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBnZXRJRCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG15LmlkO1xuICAgICAgICB9O1xuICAgIFxuICAgIG15ID0gbXkgfHwge307XG4gICAgbXkudHlwZSA9IHNwZWNzLmRhdGEudHlwZTtcbiAgICBteS5pZCA9IHNwZWNzLmRhdGEuaWQ7XG4gICAgXG4gICAgdGhhdCA9IHNwZWNzLnRoYXQgfHwge307XG4gICAgaWYgKHNwZWNzLmRhdGEuaW5wdXRzLmFsbElkcy5sZW5ndGggPj0gMSkge1xuICAgICAgICB0aGF0ID0gY3JlYXRlTUlESUNvbm5lY3RvckluKHNwZWNzLCBteSk7XG4gICAgfVxuICAgIGlmIChzcGVjcy5kYXRhLm91dHB1dHMuYWxsSWRzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIHRoYXQgPSBjcmVhdGVNSURJQ29ubmVjdG9yT3V0KHNwZWNzLCBteSk7XG4gICAgfVxuICAgIHRoYXQuZ2V0VHlwZSA9IGdldFR5cGU7XG4gICAgdGhhdC5nZXRJRCA9IGdldElEO1xuICAgIFxuICAgIHJldHVybiB0aGF0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3doL21pZGkvcHJvY2Vzc29yYmFzZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40\n");

/***/ }),

/***/ 49:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(40);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _config = __webpack_require__(8);\n\nvar _euclid = __webpack_require__(38);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        position = 0,\n        duration = 0,\n        noteDuration = void 0,\n        params = {},\n        euclidPattern = [],\n        pulsesOnly = [];\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChanges);\n        updateAllParams(specs.data.params.byId);\n        updatePattern(true);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updatePulsesAndRotation();\n                            updatePattern(true);\n                            break;\n                        case 'pulses':\n                        case 'rotation':\n                            updatePattern(true);\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                        case 'note_length':\n                            updatePattern();\n                            break;\n                        case 'is_mute':\n                            break;\n                    }\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice.\n     * timeline start        now      scanStart     scanEnd\n     * |----------------------|-----------|------------|\n     *                        |-----------| \n     *                        nowToScanStart\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart, in ticks.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     * @param {Array} processorEvents Array to collect processor generated events to displaying the view.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n\n        // clear the output event stack\n        my.clearOutputData();\n\n        // abort if the processor is muted\n        if (params.is_mute) {\n            return;\n        }\n\n        // if the pattern loops during this timespan.\n        var localScanStart = scanStart % duration,\n            localScanEnd = scanEnd % duration,\n            localScanStart2 = false,\n            localScanEnd2;\n        if (localScanStart > localScanEnd) {\n            localScanStart2 = 0, localScanEnd2 = localScanEnd;\n            localScanEnd = duration;\n        }\n\n        // check if notes occur during the current timespan\n        var n = pulsesOnly.length;\n        for (var i = 0; i < n; i++) {\n            var pulseStartTime = pulsesOnly[i].startTime,\n                scanStartToNoteStart = pulseStartTime - localScanStart,\n                isOn = localScanStart <= pulseStartTime && pulseStartTime < localScanEnd;\n\n            // if pattern looped back to the start\n            if (localScanStart2 !== false && isOn === false) {\n                scanStartToNoteStart = pulseStartTime - localScanStart + duration;\n                isOn = isOn || localScanStart2 <= pulseStartTime && pulseStartTime < localScanEnd2;\n            }\n\n            // if a note should play\n            if (isOn) {\n                var channel = params.channel_out,\n                    pitch = params.pitch_out,\n                    velocity = params.velocity_out,\n                    pulseStartTimestamp = scanStart + scanStartToNoteStart;\n\n                // send the Note On message\n                my.setOutputData({\n                    timestampTicks: pulseStartTimestamp,\n                    durationTicks: noteDuration,\n                    channel: channel,\n                    type: 'note',\n                    pitch: pitch,\n                    velocity: velocity\n                });\n\n                // add events to processorEvents for the canvas to show them\n                if (!processorEvents[my.id]) {\n                    processorEvents[my.id] = [];\n                }\n\n                var delayFromNowToNoteStart = (nowToScanStart + scanStartToNoteStart) * ticksToMsMultiplier;\n                processorEvents[my.id].push({\n                    stepIndex: pulsesOnly[i].stepIndex,\n                    delayFromNowToNoteStart: delayFromNowToNoteStart,\n                    delayFromNowToNoteEnd: delayFromNowToNoteStart + noteDuration * ticksToMsMultiplier\n                });\n            }\n        }\n\n        if (localScanStart2 !== false) {\n            localScanStart = localScanStart2;\n        }\n    },\n        updateAllParams = function updateAllParams(parameters) {\n        params.steps = parameters.steps.value;\n        params.pulses = parameters.pulses.value;\n        params.rotation = parameters.rotation.value;\n        params.isTriplets = parameters.is_triplets.value;\n        params.rate = parameters.rate.value;\n        params.note_length = parameters.note_length.value;\n        params.is_mute = parameters.is_mute.value;\n        params.channel_out = parameters.channel_out.value;\n        params.pitch_out = parameters.pitch_out.value;\n        params.velocity_out = parameters.velocity_out.value;\n    },\n\n\n    /**\n     * After a change of the steps parameter update the pulses and rotation parameters.\n     */\n    updatePulsesAndRotation = function updatePulsesAndRotation() {\n        store.dispatch(store.getActions().recreateParameter(my.id, 'pulses', { max: params.steps }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'rotation', { max: params.steps - 1 }));\n        store.dispatch(store.getActions().changeParameter(my.id, 'pulses', params.pulses));\n        store.dispatch(store.getActions().changeParameter(my.id, 'rotation', params.rotation));\n    },\n\n\n    /**\n     * Update all pattern properties.\n     * @param {Boolean} isEuclidChange Steps, pulses or rotation change.\n     */\n    updatePattern = function updatePattern(isEuclidChange) {\n        // euclidean pattern properties, changes in steps, pulses, rotation\n        if (isEuclidChange) {\n            euclidPattern = (0, _euclid.getEuclidPattern)(params.steps, params.pulses);\n            euclidPattern = (0, _euclid.rotateEuclidPattern)(euclidPattern, params.rotation);\n        }\n\n        // playback properties, changes in isTriplets, rate, noteLength\n        var rate = params.is_triplets ? params.rate * (2 / 3) : params.rate,\n            stepDuration = rate * _config.PPQN;\n        noteDuration = params.note_length * _config.PPQN;\n        duration = params.steps * stepDuration;\n        position = position % duration;\n\n        // create array of note start times in ticks\n        pulsesOnly.length = 0;\n        var n = euclidPattern.length;\n        for (var i = 0; i < n; i++) {\n            if (euclidPattern[i]) {\n                pulsesOnly.push({\n                    startTime: i * stepDuration,\n                    stepIndex: i\n                });\n            }\n        }\n    };\n\n    my = my || {};\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n");

/***/ }),

/***/ 50:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = createMIDIConnectorIn;\n/**\n * MIDI network processor in connector.\n */\nfunction createMIDIConnectorIn(specs, my) {\n    var that,\n        sources = [],\n        numSources = 0,\n        outputData = [],\n        data,\n\n\n    /**\n     * Collects data from all processors this input is connected to.\n     * @return {Array} MIDI event data from all connected processors.\n     */\n    getInputData = function getInputData() {\n        outputData.length = 0;\n\n        for (var i = 0; i < numSources; i++) {\n            data = sources[i].getOutputData();\n            for (var j = 0, p = data.length; j < p; j++) {\n                outputData.push(_extends({}, data[j]));\n            }\n        }\n        return outputData;\n    },\n\n\n    /**\n     * Connect a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    addConnection = function addConnection(processor) {\n        sources.push(processor);\n        numSources = sources.length;\n    },\n\n\n    /**\n     * Remove a processor as source for this processor.\n     * @param  {Object} processor Network MIDI processor.\n     */\n    removeConnection = function removeConnection(processor) {\n        var n = numSources;\n        while (--n >= 0) {\n            if (processor === sources[n]) {\n                sources.splice(n, 1);\n                numSources = sources.length;\n                break;\n            }\n        }\n    },\n\n\n    /**\n     * Get number of connections.\n     * Used by the output port module to determine if \n     * @return {Number} Number of connections to this output processor.\n     */\n    hasInputConnections = function hasInputConnections() {\n        return numSources > 0;\n    };\n\n    my = my || {};\n    my.getInputData = getInputData;\n\n    that = specs.that || {};\n    that.addConnection = addConnection;\n    that.removeConnection = removeConnection;\n    that.hasInputConnections = hasInputConnections;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3Jpbi5qcz9mZDIwIl0sIm5hbWVzIjpbImNyZWF0ZU1JRElDb25uZWN0b3JJbiIsInNwZWNzIiwibXkiLCJ0aGF0Iiwic291cmNlcyIsIm51bVNvdXJjZXMiLCJvdXRwdXREYXRhIiwiZGF0YSIsImdldElucHV0RGF0YSIsImxlbmd0aCIsImkiLCJnZXRPdXRwdXREYXRhIiwiaiIsInAiLCJwdXNoIiwiYWRkQ29ubmVjdGlvbiIsInByb2Nlc3NvciIsInJlbW92ZUNvbm5lY3Rpb24iLCJuIiwic3BsaWNlIiwiaGFzSW5wdXRDb25uZWN0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBR3dCQSxxQjtBQUh4Qjs7O0FBR2UsU0FBU0EscUJBQVQsQ0FBK0JDLEtBQS9CLEVBQXNDQyxFQUF0QyxFQUEwQztBQUNyRCxRQUFJQyxJQUFKO0FBQUEsUUFDSUMsVUFBVSxFQURkO0FBQUEsUUFFSUMsYUFBYSxDQUZqQjtBQUFBLFFBR0lDLGFBQWEsRUFIakI7QUFBQSxRQUlJQyxJQUpKOzs7QUFNSTs7OztBQUlBQyxtQkFBZSxTQUFmQSxZQUFlLEdBQVc7QUFDdEJGLG1CQUFXRyxNQUFYLEdBQW9CLENBQXBCOztBQUVBLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJTCxVQUFwQixFQUFnQ0ssR0FBaEMsRUFBcUM7QUFDakNILG1CQUFPSCxRQUFRTSxDQUFSLEVBQVdDLGFBQVgsRUFBUDtBQUNBLGlCQUFLLElBQUlDLElBQUksQ0FBUixFQUFXQyxJQUFJTixLQUFLRSxNQUF6QixFQUFpQ0csSUFBSUMsQ0FBckMsRUFBd0NELEdBQXhDLEVBQTZDO0FBQ3pDTiwyQkFBV1EsSUFBWCxjQUFxQlAsS0FBS0ssQ0FBTCxDQUFyQjtBQUNIO0FBQ0o7QUFDRCxlQUFPTixVQUFQO0FBQ0gsS0FwQkw7OztBQXNCSTs7OztBQUlBUyxvQkFBZ0IsU0FBaEJBLGFBQWdCLENBQVNDLFNBQVQsRUFBb0I7QUFDaENaLGdCQUFRVSxJQUFSLENBQWFFLFNBQWI7QUFDQVgscUJBQWFELFFBQVFLLE1BQXJCO0FBQ0gsS0E3Qkw7OztBQStCSTs7OztBQUlBUSx1QkFBbUIsU0FBbkJBLGdCQUFtQixDQUFTRCxTQUFULEVBQW9CO0FBQ25DLFlBQUlFLElBQUliLFVBQVI7QUFDQSxlQUFPLEVBQUVhLENBQUYsSUFBTyxDQUFkLEVBQWlCO0FBQ2IsZ0JBQUlGLGNBQWNaLFFBQVFjLENBQVIsQ0FBbEIsRUFBOEI7QUFDMUJkLHdCQUFRZSxNQUFSLENBQWVELENBQWYsRUFBa0IsQ0FBbEI7QUFDQWIsNkJBQWFELFFBQVFLLE1BQXJCO0FBQ0E7QUFDSDtBQUNKO0FBQ0osS0E1Q0w7OztBQThDSTs7Ozs7QUFLQVcsMEJBQXNCLFNBQXRCQSxtQkFBc0IsR0FBVztBQUM3QixlQUFPZixhQUFhLENBQXBCO0FBQ0gsS0FyREw7O0FBdURBSCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR00sWUFBSCxHQUFrQkEsWUFBbEI7O0FBRUFMLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjtBQUNBQSxTQUFLWSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBWixTQUFLYyxnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBQ0FkLFNBQUtpQixtQkFBTCxHQUEyQkEsbUJBQTNCO0FBQ0EsV0FBT2pCLElBQVA7QUFDSCIsImZpbGUiOiI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTUlESSBuZXR3b3JrIHByb2Nlc3NvciBpbiBjb25uZWN0b3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1JRElDb25uZWN0b3JJbihzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgc291cmNlcyA9IFtdLFxuICAgICAgICBudW1Tb3VyY2VzID0gMCxcbiAgICAgICAgb3V0cHV0RGF0YSA9IFtdLFxuICAgICAgICBkYXRhLFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbGxlY3RzIGRhdGEgZnJvbSBhbGwgcHJvY2Vzc29ycyB0aGlzIGlucHV0IGlzIGNvbm5lY3RlZCB0by5cbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IE1JREkgZXZlbnQgZGF0YSBmcm9tIGFsbCBjb25uZWN0ZWQgcHJvY2Vzc29ycy5cbiAgICAgICAgICovXG4gICAgICAgIGdldElucHV0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgb3V0cHV0RGF0YS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNvdXJjZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBzb3VyY2VzW2ldLmdldE91dHB1dERhdGEoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgcCA9IGRhdGEubGVuZ3RoOyBqIDwgcDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dERhdGEucHVzaCh7IC4uLmRhdGFbal0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dERhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogQ29ubmVjdCBhIHByb2Nlc3NvciBhcyBzb3VyY2UgZm9yIHRoaXMgcHJvY2Vzc29yLlxuICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHByb2Nlc3NvciBOZXR3b3JrIE1JREkgcHJvY2Vzc29yLlxuICAgICAgICAgKi9cbiAgICAgICAgYWRkQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHByb2Nlc3Nvcikge1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKHByb2Nlc3Nvcik7XG4gICAgICAgICAgICBudW1Tb3VyY2VzID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGEgcHJvY2Vzc29yIGFzIHNvdXJjZSBmb3IgdGhpcyBwcm9jZXNzb3IuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIE5ldHdvcmsgTUlESSBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmVDb25uZWN0aW9uID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgbiA9IG51bVNvdXJjZXM7XG4gICAgICAgICAgICB3aGlsZSAoLS1uID49IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc29yID09PSBzb3VyY2VzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXMuc3BsaWNlKG4sIDEpO1xuICAgICAgICAgICAgICAgICAgICBudW1Tb3VyY2VzID0gc291cmNlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgbnVtYmVyIG9mIGNvbm5lY3Rpb25zLlxuICAgICAgICAgKiBVc2VkIGJ5IHRoZSBvdXRwdXQgcG9ydCBtb2R1bGUgdG8gZGV0ZXJtaW5lIGlmIFxuICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE51bWJlciBvZiBjb25uZWN0aW9ucyB0byB0aGlzIG91dHB1dCBwcm9jZXNzb3IuXG4gICAgICAgICAqL1xuICAgICAgICBoYXNJbnB1dENvbm5lY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtU291cmNlcyA+IDA7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5nZXRJbnB1dERhdGEgPSBnZXRJbnB1dERhdGE7XG5cbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICB0aGF0LmFkZENvbm5lY3Rpb24gPSBhZGRDb25uZWN0aW9uO1xuICAgIHRoYXQucmVtb3ZlQ29ubmVjdGlvbiA9IHJlbW92ZUNvbm5lY3Rpb247XG4gICAgdGhhdC5oYXNJbnB1dENvbm5lY3Rpb25zID0gaGFzSW5wdXRDb25uZWN0aW9ucztcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9taWRpL2Nvbm5lY3RvcmluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n");

/***/ }),

/***/ 51:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createMIDIConnectorOut;\n/**\n * MIDI network processor out connector.\n */\nfunction createMIDIConnectorOut(specs, my) {\n    var that,\n        outputData = [],\n        destinations = [],\n\n\n    /**\n     * Clear the output stack when event processing starts.\n     */\n    clearOutputData = function clearOutputData() {\n        outputData.length = 0;\n    },\n\n\n    /**\n     * Set output data that is the result of this processor's processing.\n     * It will be collected by the processors attached to this output.\n     * @param {Object} eventData MIDI event data.\n     */\n    setOutputData = function setOutputData(eventData) {\n        outputData.push(eventData);\n    },\n\n\n    /**\n     * Public function for processors connected to this output to\n     * collect the data this processor's process function has produced.\n     * @return {Object} MIDI event data.\n     */\n    getOutputData = function getOutputData() {\n        return outputData;\n    },\n\n\n    /**\n     * Connect this processor's output to another processor's input.\n     * @param  {Object} processor Processor to connect to.\n     */\n    connect = function connect(processor) {\n        var isConnected = false,\n            n = destinations.length;\n        for (var i = 0; i < n; i++) {\n            if (processor === destinations[i]) {\n                isConnected = true;\n                break;\n            }\n        }\n        if (!isConnected) {\n            processor.addConnection(that);\n            destinations.push(processor);\n        }\n    },\n\n\n    /**\n     * Disconnect this processor's output from another processor's input.\n     * @param  {Object} processor Processor to disconnect from, or undefined to remove all.\n     */\n    disconnect = function disconnect(processor) {\n        var n = destinations.length;\n        while (--n >= 0) {\n            if (!processor || processor && processor === destinations[n]) {\n                destinations[n].removeConnection(that);\n                destinations.splice(n, 1);\n            }\n        }\n    },\n\n\n    /**\n     * Get destination processors.\n     * Used to draw the connection cables on canvas.\n     * @return {Array} Processors this output connects to.\n     */\n    getDestinations = function getDestinations() {\n        return destinations;\n    };\n\n    my = my || {};\n    my.clearOutputData = clearOutputData;\n    my.setOutputData = setOutputData;\n\n    that = specs.that || {};\n\n    that.getDestinations = getDestinations;\n    that.getOutputData = getOutputData;\n    that.connect = connect;\n    that.disconnect = disconnect;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvd2gvbWlkaS9jb25uZWN0b3JvdXQuanM/ZTZlMiJdLCJuYW1lcyI6WyJjcmVhdGVNSURJQ29ubmVjdG9yT3V0Iiwic3BlY3MiLCJteSIsInRoYXQiLCJvdXRwdXREYXRhIiwiZGVzdGluYXRpb25zIiwiY2xlYXJPdXRwdXREYXRhIiwibGVuZ3RoIiwic2V0T3V0cHV0RGF0YSIsImV2ZW50RGF0YSIsInB1c2giLCJnZXRPdXRwdXREYXRhIiwiY29ubmVjdCIsInByb2Nlc3NvciIsImlzQ29ubmVjdGVkIiwibiIsImkiLCJhZGRDb25uZWN0aW9uIiwiZGlzY29ubmVjdCIsInJlbW92ZUNvbm5lY3Rpb24iLCJzcGxpY2UiLCJnZXREZXN0aW5hdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQUd3QkEsc0I7QUFIeEI7OztBQUdlLFNBQVNBLHNCQUFULENBQWdDQyxLQUFoQyxFQUF1Q0MsRUFBdkMsRUFBMkM7QUFDdEQsUUFBSUMsSUFBSjtBQUFBLFFBQ0lDLGFBQWEsRUFEakI7QUFBQSxRQUVJQyxlQUFlLEVBRm5COzs7QUFJSTs7O0FBR0FDLHNCQUFrQixTQUFsQkEsZUFBa0IsR0FBVztBQUN6QkYsbUJBQVdHLE1BQVgsR0FBb0IsQ0FBcEI7QUFDSCxLQVRMOzs7QUFXSTs7Ozs7QUFLQUMsb0JBQWdCLFNBQWhCQSxhQUFnQixDQUFTQyxTQUFULEVBQW9CO0FBQ2hDTCxtQkFBV00sSUFBWCxDQUFnQkQsU0FBaEI7QUFDSCxLQWxCTDs7O0FBb0JJOzs7OztBQUtBRSxvQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDdkIsZUFBT1AsVUFBUDtBQUNILEtBM0JMOzs7QUE2Qkk7Ozs7QUFJQVEsY0FBVSxTQUFWQSxPQUFVLENBQVNDLFNBQVQsRUFBb0I7QUFDMUIsWUFBSUMsY0FBYyxLQUFsQjtBQUFBLFlBQ0lDLElBQUlWLGFBQWFFLE1BRHJCO0FBRUEsYUFBSyxJQUFJUyxJQUFJLENBQWIsRUFBZ0JBLElBQUlELENBQXBCLEVBQXVCQyxHQUF2QixFQUE0QjtBQUN4QixnQkFBSUgsY0FBY1IsYUFBYVcsQ0FBYixDQUFsQixFQUFtQztBQUMvQkYsOEJBQWMsSUFBZDtBQUNBO0FBQ0g7QUFDSjtBQUNELFlBQUksQ0FBQ0EsV0FBTCxFQUFrQjtBQUNkRCxzQkFBVUksYUFBVixDQUF3QmQsSUFBeEI7QUFDQUUseUJBQWFLLElBQWIsQ0FBa0JHLFNBQWxCO0FBQ0g7QUFDSixLQTlDTDs7O0FBZ0RJOzs7O0FBSUFLLGlCQUFhLFNBQWJBLFVBQWEsQ0FBU0wsU0FBVCxFQUFvQjtBQUM3QixZQUFJRSxJQUFJVixhQUFhRSxNQUFyQjtBQUNBLGVBQU8sRUFBRVEsQ0FBRixJQUFPLENBQWQsRUFBaUI7QUFDYixnQkFBSSxDQUFDRixTQUFELElBQWVBLGFBQWFBLGNBQWNSLGFBQWFVLENBQWIsQ0FBOUMsRUFBZ0U7QUFDNURWLDZCQUFhVSxDQUFiLEVBQWdCSSxnQkFBaEIsQ0FBaUNoQixJQUFqQztBQUNBRSw2QkFBYWUsTUFBYixDQUFvQkwsQ0FBcEIsRUFBdUIsQ0FBdkI7QUFDSDtBQUNKO0FBQ0osS0E1REw7OztBQThESTs7Ozs7QUFLQU0sc0JBQWtCLFNBQWxCQSxlQUFrQixHQUFXO0FBQ3pCLGVBQU9oQixZQUFQO0FBQ0gsS0FyRUw7O0FBdUVBSCxTQUFLQSxNQUFNLEVBQVg7QUFDQUEsT0FBR0ksZUFBSCxHQUFxQkEsZUFBckI7QUFDQUosT0FBR00sYUFBSCxHQUFtQkEsYUFBbkI7O0FBRUFMLFdBQU9GLE1BQU1FLElBQU4sSUFBYyxFQUFyQjs7QUFFQUEsU0FBS2tCLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0FsQixTQUFLUSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBUixTQUFLUyxPQUFMLEdBQWVBLE9BQWY7QUFDQVQsU0FBS2UsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxXQUFPZixJQUFQO0FBQ0giLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1JREkgbmV0d29yayBwcm9jZXNzb3Igb3V0IGNvbm5lY3Rvci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTUlESUNvbm5lY3Rvck91dChzcGVjcywgbXkpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgb3V0cHV0RGF0YSA9IFtdLFxuICAgICAgICBkZXN0aW5hdGlvbnMgPSBbXSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xlYXIgdGhlIG91dHB1dCBzdGFjayB3aGVuIGV2ZW50IHByb2Nlc3Npbmcgc3RhcnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXJPdXRwdXREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvdXRwdXREYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IG91dHB1dCBkYXRhIHRoYXQgaXMgdGhlIHJlc3VsdCBvZiB0aGlzIHByb2Nlc3NvcidzIHByb2Nlc3NpbmcuXG4gICAgICAgICAqIEl0IHdpbGwgYmUgY29sbGVjdGVkIGJ5IHRoZSBwcm9jZXNzb3JzIGF0dGFjaGVkIHRvIHRoaXMgb3V0cHV0LlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnREYXRhIE1JREkgZXZlbnQgZGF0YS5cbiAgICAgICAgICovXG4gICAgICAgIHNldE91dHB1dERhdGEgPSBmdW5jdGlvbihldmVudERhdGEpIHtcbiAgICAgICAgICAgIG91dHB1dERhdGEucHVzaChldmVudERhdGEpO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFB1YmxpYyBmdW5jdGlvbiBmb3IgcHJvY2Vzc29ycyBjb25uZWN0ZWQgdG8gdGhpcyBvdXRwdXQgdG9cbiAgICAgICAgICogY29sbGVjdCB0aGUgZGF0YSB0aGlzIHByb2Nlc3NvcidzIHByb2Nlc3MgZnVuY3Rpb24gaGFzIHByb2R1Y2VkLlxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE1JREkgZXZlbnQgZGF0YS5cbiAgICAgICAgICovXG4gICAgICAgIGdldE91dHB1dERhdGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXREYXRhO1xuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbm5lY3QgdGhpcyBwcm9jZXNzb3IncyBvdXRwdXQgdG8gYW5vdGhlciBwcm9jZXNzb3IncyBpbnB1dC5cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBwcm9jZXNzb3IgUHJvY2Vzc29yIHRvIGNvbm5lY3QgdG8uXG4gICAgICAgICAqL1xuICAgICAgICBjb25uZWN0ID0gZnVuY3Rpb24ocHJvY2Vzc29yKSB7XG4gICAgICAgICAgICB2YXIgaXNDb25uZWN0ZWQgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBuID0gZGVzdGluYXRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NvciA9PT0gZGVzdGluYXRpb25zW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3Nvci5hZGRDb25uZWN0aW9uKHRoYXQpO1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9ucy5wdXNoKHByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogRGlzY29ubmVjdCB0aGlzIHByb2Nlc3NvcidzIG91dHB1dCBmcm9tIGFub3RoZXIgcHJvY2Vzc29yJ3MgaW5wdXQuXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gcHJvY2Vzc29yIFByb2Nlc3NvciB0byBkaXNjb25uZWN0IGZyb20sIG9yIHVuZGVmaW5lZCB0byByZW1vdmUgYWxsLlxuICAgICAgICAgKi9cbiAgICAgICAgZGlzY29ubmVjdCA9IGZ1bmN0aW9uKHByb2Nlc3Nvcikge1xuICAgICAgICAgICAgdmFyIG4gPSBkZXN0aW5hdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9jZXNzb3IgfHwgKHByb2Nlc3NvciAmJiBwcm9jZXNzb3IgPT09IGRlc3RpbmF0aW9uc1tuXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25zW25dLnJlbW92ZUNvbm5lY3Rpb24odGhhdCk7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9ucy5zcGxpY2UobiwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBkZXN0aW5hdGlvbiBwcm9jZXNzb3JzLlxuICAgICAgICAgKiBVc2VkIHRvIGRyYXcgdGhlIGNvbm5lY3Rpb24gY2FibGVzIG9uIGNhbnZhcy5cbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IFByb2Nlc3NvcnMgdGhpcyBvdXRwdXQgY29ubmVjdHMgdG8uXG4gICAgICAgICAqL1xuICAgICAgICBnZXREZXN0aW5hdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXN0aW5hdGlvbnM7XG4gICAgICAgIH07XG4gICAgXG4gICAgbXkgPSBteSB8fCB7fTtcbiAgICBteS5jbGVhck91dHB1dERhdGEgPSBjbGVhck91dHB1dERhdGE7XG4gICAgbXkuc2V0T3V0cHV0RGF0YSA9IHNldE91dHB1dERhdGE7XG5cbiAgICB0aGF0ID0gc3BlY3MudGhhdCB8fCB7fTtcbiAgICBcbiAgICB0aGF0LmdldERlc3RpbmF0aW9ucyA9IGdldERlc3RpbmF0aW9ucztcbiAgICB0aGF0LmdldE91dHB1dERhdGEgPSBnZXRPdXRwdXREYXRhO1xuICAgIHRoYXQuY29ubmVjdCA9IGNvbm5lY3Q7XG4gICAgdGhhdC5kaXNjb25uZWN0ID0gZGlzY29ubmVjdDtcbiAgICByZXR1cm4gdGhhdDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy93aC9taWRpL2Nvbm5lY3Rvcm91dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n");

/***/ }),

/***/ 52:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(40);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _config = __webpack_require__(8);\n\nvar _euclid = __webpack_require__(39);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        position = 0,\n        duration = 0,\n        stepDuration = 0,\n        euclidPattern = [],\n        params = {},\n        delayedEvents = [];\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChanges);\n        updateAllParams(specs.data.params.byId);\n        updatePattern(true);\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChanges);\n    },\n        handleStateChanges = function handleStateChanges(e) {\n        switch (e.detail.action.type) {\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                    switch (e.detail.action.paramKey) {\n                        case 'steps':\n                            updatePulsesAndRotation();\n                            updatePattern(true);\n                            break;\n                        case 'pulses':\n                        case 'rotation':\n                            updatePattern(true);\n                            break;\n                        case 'is_triplets':\n                        case 'rate':\n                            updatePattern();\n                            break;\n                        case 'target':\n                        case 'mode':\n                            updateEffectSettings();\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.RECREATE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                }\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice. This will\n     * - Get events waiting at the input\n     * - Process them according to the current parameter settings.\n     * - Send the processed events to the output.\n     * - Add the events to the processorEvents parameter for display in the view.\n     * \n     * Events are plain objects with properties:\n     * @param {String} type 'note'\n     * @param {Number} timestampTicks Event start time, measured from timeline start\n     * @param {Number} durationTicks\n     * @param {Number} channel 1 - 16\n     * @param {Number} velocity 0 - 127\n     * @param {Number} pitch 0 - 127\n     * \n     * This method's parameters:\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart, in ticks\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     * @param {Array} processorEvents Array to collect processor generated events to display in the view.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset, processorEvents) {\n\n        // clear the output event stack\n        my.clearOutputData();\n\n        // retrieve events waiting at the processor's input\n        var inputData = my.getInputData();\n\n        // abort if there's nothing to process\n        if (inputData.length === 0) {\n            processDelayedEvents(scanStart, scanEnd);\n            return;\n        }\n\n        // calculate the processed timespan's position within the pattern, \n        // taking into account the pattern looping during this timespan.\n        var localScanStart = scanStart % duration,\n            localScanEnd = scanEnd % duration,\n            localScanStart2 = false,\n            localScanEnd2;\n        if (localScanStart > localScanEnd) {\n            localScanStart2 = 0, localScanEnd2 = localScanEnd;\n            localScanEnd = duration;\n        }\n\n        for (var i = 0, n = inputData.length; i < n; i++) {\n            var event = inputData[i];\n\n            var isDelayed = false;\n\n            // handle only MIDI Note events\n            if (event.type === 'note') {\n\n                // calculate the state of the effect at the event's time within the pattern\n                var stepIndex = Math.floor(event.timestampTicks % duration / stepDuration),\n                    state = euclidPattern[stepIndex],\n                    effectValue = state ? params.high : params.low;\n\n                // apply the effect to the event's target parameter\n                switch (params.target) {\n                    case 'velocity':\n                        event.velocity = params.isRelative ? event.velocity + effectValue : effectValue;\n                        event.velocity = Math.max(0, Math.min(event.velocity, 127));\n                        break;\n                    case 'pitch':\n                        event.pitch = params.isRelative ? event.pitch + effectValue : effectValue;\n                        event.pitch = Math.max(0, Math.min(event.pitch, 127));\n                        break;\n                    case 'channel':\n                        event.channel = params.isRelative ? event.channel + effectValue : effectValue;\n                        event.channel = Math.max(1, Math.min(event.channel, 16));\n                        break;\n                    case 'length':\n                        var valueInTicks = effectValue / 32 * _config.PPQN * 4; // max 32 == 1 measure == PPQN * 4\n                        event.durationTicks = params.isRelative ? event.durationTicks + valueInTicks : valueInTicks;\n                        event.durationTicks = Math.max(1, event.durationTicks);\n                        break;\n                    case 'delay':\n                        if (effectValue > 0) {\n                            var delayInTicks = Math.max(0, effectValue / 32 * _config.PPQN * 0.25); // 32 == 1 beat == PPQN\n\n                            // store note if delayed start time falls outside of the current scan range\n                            if (event.timestampTicks + delayInTicks > scanEnd) {\n                                delayedEvents.push(_extends({}, event, {\n                                    timestampTicks: event.timestampTicks + delayInTicks\n                                }));\n                                isDelayed = true;\n                            } else {\n                                event.timestampTicks = event.timestampTicks + delayInTicks;\n                            }\n                        }\n                        break;\n                    case 'output':\n                        // v2.2\n                        break;\n                }\n\n                // add events to processorEvents for the canvas to show them\n                if (!processorEvents[my.id]) {\n                    processorEvents[my.id] = [];\n                }\n\n                var delayFromNowToNoteStart = (event.timestampTicks - scanStart) * ticksToMsMultiplier;\n                processorEvents[my.id].push({\n                    stepIndex: stepIndex,\n                    delayFromNowToNoteStart: delayFromNowToNoteStart,\n                    delayFromNowToNoteEnd: delayFromNowToNoteStart + event.durationTicks * ticksToMsMultiplier\n                });\n\n                // push the event to the processor's output\n                if (!isDelayed) {\n                    my.setOutputData(event);\n                }\n            }\n        }\n\n        processDelayedEvents(scanStart, scanEnd);\n    },\n\n\n    /**\n     * Check if stored delayed events \n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     */\n    processDelayedEvents = function processDelayedEvents(scanStart, scanEnd) {\n        var i = delayedEvents.length;\n        while (--i > -1) {\n            var timestampTicks = delayedEvents[i].timestampTicks;\n            if (scanStart <= timestampTicks && scanEnd > timestampTicks) {\n                my.setOutputData(delayedEvents.splice(i, 1)[0]);\n            }\n        }\n    },\n\n\n    /**\n     * After a change of the steps parameter update the pulses and rotation parameters.\n     */\n    updatePulsesAndRotation = function updatePulsesAndRotation() {\n        store.dispatch(store.getActions().recreateParameter(my.id, 'pulses', { max: params.steps }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'rotation', { max: params.steps - 1 }));\n        store.dispatch(store.getActions().changeParameter(my.id, 'pulses', params.pulses));\n        store.dispatch(store.getActions().changeParameter(my.id, 'rotation', params.rotation));\n    },\n\n\n    /**\n     * Update all pattern properties.\n     * @param {Boolean} isEuclidChange Steps, pulses or rotation change.\n     */\n    updatePattern = function updatePattern(isEuclidChange) {\n        // euclidean pattern properties, changes in steps, pulses, rotation\n        if (isEuclidChange) {\n            euclidPattern = (0, _euclid.getEuclidPattern)(params.steps, params.pulses);\n            euclidPattern = (0, _euclid.rotateEuclidPattern)(euclidPattern, params.rotation);\n        }\n\n        // playback properties, changes in isTriplets and rate\n        var rate = params.isTriplets ? params.rate * (2 / 3) : params.rate;\n        stepDuration = rate * _config.PPQN;\n        duration = params.steps * stepDuration;\n    },\n        updateAllParams = function updateAllParams(parameters) {\n        params.steps = parameters.steps.value;\n        params.pulses = parameters.pulses.value;\n        params.rotation = parameters.rotation.value;\n        params.isTriplets = parameters.is_triplets.value;\n        params.rate = parameters.rate.value;\n        params.high = parameters.high.value;\n        params.low = parameters.low.value;\n        params.target = parameters.target.value;\n        params.isRelative = parameters.mode.value !== parameters.mode.default;\n    },\n        updateEffectSettings = function updateEffectSettings() {\n        var min = void 0,\n            max = void 0,\n            lowValue = void 0,\n            highValue = void 0;\n\n        // set minimum and maximum value according to target type\n        switch (params.target) {\n            case 'velocity':\n                min = params.isRelative ? -127 : 0;\n                max = 127;\n                lowValue = params.isRelative ? 0 : 50;\n                highValue = params.isRelative ? 0 : 100;\n                break;\n            case 'pitch':\n                min = params.isRelative ? -127 : 0;\n                max = 127;\n                lowValue = params.isRelative ? 0 : 58;\n                highValue = params.isRelative ? 0 : 60;\n                break;\n            case 'channel':\n                min = params.isRelative ? -16 : 1;\n                max = 16;\n                lowValue = params.isRelative ? 0 : 1;\n                highValue = params.isRelative ? 0 : 2;\n                break;\n            case 'length':\n                min = params.isRelative ? -32 : 0;\n                max = 32;\n                lowValue = params.isRelative ? 0 : 4;\n                highValue = params.isRelative ? 0 : 8;\n                break;\n            case 'delay':\n                min = params.isRelative ? 0 : 0;\n                max = 32;\n                lowValue = params.isRelative ? 0 : 0;\n                highValue = params.isRelative ? 0 : 2;\n                break;\n            case 'output':\n                min = 1;\n                max = 2;\n                lowValue = 1;\n                highValue = 2;\n                break;\n        }\n\n        // clamp parameter's value between minimum and maximum value\n        lowValue = Math.max(min, Math.min(lowValue, max));\n        highValue = Math.max(min, Math.min(highValue, max));\n\n        // apply all new settings to the effect parameters \n        store.dispatch(store.getActions().recreateParameter(my.id, 'low', { min: min, max: max, value: lowValue }));\n        store.dispatch(store.getActions().recreateParameter(my.id, 'high', { min: min, max: max, value: highValue }));\n    };\n\n    my = my || {};\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52\n");

/***/ }),

/***/ 53:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.createProcessor = createProcessor;\n\nvar _processorbase = __webpack_require__(40);\n\nvar _processorbase2 = _interopRequireDefault(_processorbase);\n\nvar _midi = __webpack_require__(2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MIDI output port processor.\n */\nfunction createProcessor(specs, my) {\n    var that = void 0,\n        store = specs.store,\n        midiOutput = void 0,\n        params = {};\n\n    var initialize = function initialize() {\n        document.addEventListener(store.STATE_CHANGE, handleStateChange);\n        updatePortsParameter(store.getState());\n    },\n        terminate = function terminate() {\n        document.removeEventListener(store.STATE_CHANGE, handleStateChange);\n    },\n        handleStateChange = function handleStateChange(e) {\n        switch (e.detail.action.type) {\n\n            case e.detail.actions.CHANGE_PARAMETER:\n                if (e.detail.action.processorID === my.id) {\n                    updateAllParams(e.detail.state.processors.byId[my.id].params.byId);\n                    switch (e.detail.action.paramKey) {\n                        case 'port':\n                            updateMIDIPort();\n                            break;\n                    }\n                }\n                break;\n\n            case e.detail.actions.CREATE_MIDI_PORT:\n            case e.detail.actions.UPDATE_MIDI_PORT:\n            case e.detail.actions.TOGGLE_MIDI_PREFERENCE:\n                updatePortsParameter(e.detail.state);\n                break;\n        }\n    },\n\n\n    /**\n     * Process events to happen in a time slice.\n     * @param {Number} scanStart Timespan start in ticks from timeline start.\n     * @param {Number} scanEnd   Timespan end in ticks from timeline start.\n     * @param {Number} nowToScanStart Timespan from current timeline position to scanStart.\n     * @param {Number} ticksToMsMultiplier Duration of one tick in milliseconds.\n     * @param {Number} offset Time from doc start to timeline start in ticks.\n     */\n    process = function process(scanStart, scanEnd, nowToScanStart, ticksToMsMultiplier, offset) {\n\n        // retrieve events waiting at the processor's input\n        var inputData = my.getInputData(),\n            origin = performance.now() - offset * ticksToMsMultiplier,\n            n = inputData.length;\n\n        if (midiOutput && midiOutput.state === 'connected') {\n            for (var i = 0; i < n; i++) {\n                var item = inputData[i],\n\n\n                // item.timestampTicks is time since transport play started\n                timestamp = origin + item.timestampTicks * ticksToMsMultiplier,\n                    duration = item.durationTicks * ticksToMsMultiplier;\n\n                switch (item.type) {\n                    case 'note':\n                        midiOutput.send([0x90 + (item.channel - 1), item.pitch, item.velocity], timestamp);\n                        midiOutput.send([0x80 + (item.channel - 1), item.pitch, 0], timestamp + duration);\n                        break;\n                }\n            }\n        }\n    },\n        updateAllParams = function updateAllParams(parameters) {\n        params.port = parameters.port.value;\n        params.portName = parameters.port.model.find(function (element) {\n            return element.value === params.port;\n        }).label;\n    },\n\n\n    /**\n     * Retrieve the MIDI port the MIDI notes are sent to.\n     * After a port parameter change.\n     */\n    updateMIDIPort = function updateMIDIPort() {\n        midiOutput = (0, _midi.getMIDIPortByID)(params.port);\n\n        // update the processor's name parameter\n        store.dispatch(store.getActions().changeParameter(my.id, 'name', params.portName));\n    },\n\n\n    /**\n     * Update the ports parameter with the current available ports.\n     */\n    updatePortsParameter = function updatePortsParameter(state) {\n\n        // rebuild the parameter's model and recreate the parameter\n        var portsModel = [{ label: 'No output', value: 'none' }];\n        state.ports.allIds.forEach(function (portID) {\n            var port = state.ports.byId[portID];\n            if (port.type === 'output' && port.networkEnabled && port.state === 'connected') {\n                portsModel.push({ label: port.name, value: port.id });\n            }\n        });\n        store.dispatch(store.getActions().recreateParameter(my.id, 'port', { model: portsModel }));\n\n        // set the parameter's value\n        var recreatedState = store.getState(),\n            portParam = recreatedState.processors.byId[my.id].params.byId.port,\n            value = portParam.value,\n            model = portParam.model;\n        var item = model.find(function (element) {\n            return element.value === value;\n        });\n        item = item || model.find(function (element) {\n            return element.value === 'none';\n        });\n\n        store.dispatch(store.getActions().changeParameter(my.id, 'port', item.value));\n        store.dispatch(store.getActions().changeParameter(my.id, 'name', item.label));\n    },\n        setEnabled = function setEnabled(isEnabled) {\n        my.isEnabled = isEnabled;\n    },\n        getMIDIPortID = function getMIDIPortID() {\n        return portID;\n    };\n\n    my = my || {};\n    my.isEnabled = true;\n\n    that = (0, _processorbase2.default)(specs, my);\n\n    initialize();\n\n    that.terminate = terminate;\n    that.process = process;\n    that.setEnabled = setEnabled;\n    that.getMIDIPortID = getMIDIPortID;\n    return that;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n");

/***/ })

});